
stm32f103_remind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009be4  08005110  08005110  00005110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  0800ecf8  0800ecf8  0000ecf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f37c  0800f37c  00010368  2**0
                  CONTENTS
  4 .ARM          00000000  0800f37c  0800f37c  00010368  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f37c  0800f37c  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f37c  0800f37c  0000f37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f380  0800f380  0000f380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0800f384  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036c8  20000368  0800f6ec  00010368  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003a30  0800f6ec  00013a30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010368  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ef1e  00000000  00000000  00010391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d81  00000000  00000000  0003f2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000105c3  00000000  00000000  00047030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  000575f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000024c0  00000000  00000000  00058b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210c5  00000000  00000000  0005afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d011  00000000  00000000  0007c095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093da7  00000000  00000000  000a90a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013ce4d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bbc  00000000  00000000  0013cea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005110 <__do_global_dtors_aux>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4c05      	ldr	r4, [pc, #20]	; (8005128 <__do_global_dtors_aux+0x18>)
 8005114:	7823      	ldrb	r3, [r4, #0]
 8005116:	b933      	cbnz	r3, 8005126 <__do_global_dtors_aux+0x16>
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <__do_global_dtors_aux+0x1c>)
 800511a:	b113      	cbz	r3, 8005122 <__do_global_dtors_aux+0x12>
 800511c:	4804      	ldr	r0, [pc, #16]	; (8005130 <__do_global_dtors_aux+0x20>)
 800511e:	f3af 8000 	nop.w
 8005122:	2301      	movs	r3, #1
 8005124:	7023      	strb	r3, [r4, #0]
 8005126:	bd10      	pop	{r4, pc}
 8005128:	20000368 	.word	0x20000368
 800512c:	00000000 	.word	0x00000000
 8005130:	0800ecdc 	.word	0x0800ecdc

08005134 <frame_dummy>:
 8005134:	b508      	push	{r3, lr}
 8005136:	4b03      	ldr	r3, [pc, #12]	; (8005144 <frame_dummy+0x10>)
 8005138:	b11b      	cbz	r3, 8005142 <frame_dummy+0xe>
 800513a:	4903      	ldr	r1, [pc, #12]	; (8005148 <frame_dummy+0x14>)
 800513c:	4803      	ldr	r0, [pc, #12]	; (800514c <frame_dummy+0x18>)
 800513e:	f3af 8000 	nop.w
 8005142:	bd08      	pop	{r3, pc}
 8005144:	00000000 	.word	0x00000000
 8005148:	2000036c 	.word	0x2000036c
 800514c:	0800ecdc 	.word	0x0800ecdc

08005150 <strcmp>:
 8005150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005158:	2a01      	cmp	r2, #1
 800515a:	bf28      	it	cs
 800515c:	429a      	cmpcs	r2, r3
 800515e:	d0f7      	beq.n	8005150 <strcmp>
 8005160:	1ad0      	subs	r0, r2, r3
 8005162:	4770      	bx	lr

08005164 <strlen>:
 8005164:	4603      	mov	r3, r0
 8005166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800516a:	2a00      	cmp	r2, #0
 800516c:	d1fb      	bne.n	8005166 <strlen+0x2>
 800516e:	1a18      	subs	r0, r3, r0
 8005170:	3801      	subs	r0, #1
 8005172:	4770      	bx	lr

08005174 <__aeabi_drsub>:
 8005174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005178:	e002      	b.n	8005180 <__adddf3>
 800517a:	bf00      	nop

0800517c <__aeabi_dsub>:
 800517c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005180 <__adddf3>:
 8005180:	b530      	push	{r4, r5, lr}
 8005182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800518a:	ea94 0f05 	teq	r4, r5
 800518e:	bf08      	it	eq
 8005190:	ea90 0f02 	teqeq	r0, r2
 8005194:	bf1f      	itttt	ne
 8005196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800519a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800519e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80051a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80051a6:	f000 80e2 	beq.w	800536e <__adddf3+0x1ee>
 80051aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80051ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80051b2:	bfb8      	it	lt
 80051b4:	426d      	neglt	r5, r5
 80051b6:	dd0c      	ble.n	80051d2 <__adddf3+0x52>
 80051b8:	442c      	add	r4, r5
 80051ba:	ea80 0202 	eor.w	r2, r0, r2
 80051be:	ea81 0303 	eor.w	r3, r1, r3
 80051c2:	ea82 0000 	eor.w	r0, r2, r0
 80051c6:	ea83 0101 	eor.w	r1, r3, r1
 80051ca:	ea80 0202 	eor.w	r2, r0, r2
 80051ce:	ea81 0303 	eor.w	r3, r1, r3
 80051d2:	2d36      	cmp	r5, #54	; 0x36
 80051d4:	bf88      	it	hi
 80051d6:	bd30      	pophi	{r4, r5, pc}
 80051d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80051dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80051e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80051e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80051e8:	d002      	beq.n	80051f0 <__adddf3+0x70>
 80051ea:	4240      	negs	r0, r0
 80051ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80051f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80051f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80051f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80051fc:	d002      	beq.n	8005204 <__adddf3+0x84>
 80051fe:	4252      	negs	r2, r2
 8005200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005204:	ea94 0f05 	teq	r4, r5
 8005208:	f000 80a7 	beq.w	800535a <__adddf3+0x1da>
 800520c:	f1a4 0401 	sub.w	r4, r4, #1
 8005210:	f1d5 0e20 	rsbs	lr, r5, #32
 8005214:	db0d      	blt.n	8005232 <__adddf3+0xb2>
 8005216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800521a:	fa22 f205 	lsr.w	r2, r2, r5
 800521e:	1880      	adds	r0, r0, r2
 8005220:	f141 0100 	adc.w	r1, r1, #0
 8005224:	fa03 f20e 	lsl.w	r2, r3, lr
 8005228:	1880      	adds	r0, r0, r2
 800522a:	fa43 f305 	asr.w	r3, r3, r5
 800522e:	4159      	adcs	r1, r3
 8005230:	e00e      	b.n	8005250 <__adddf3+0xd0>
 8005232:	f1a5 0520 	sub.w	r5, r5, #32
 8005236:	f10e 0e20 	add.w	lr, lr, #32
 800523a:	2a01      	cmp	r2, #1
 800523c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005240:	bf28      	it	cs
 8005242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005246:	fa43 f305 	asr.w	r3, r3, r5
 800524a:	18c0      	adds	r0, r0, r3
 800524c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005254:	d507      	bpl.n	8005266 <__adddf3+0xe6>
 8005256:	f04f 0e00 	mov.w	lr, #0
 800525a:	f1dc 0c00 	rsbs	ip, ip, #0
 800525e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005262:	eb6e 0101 	sbc.w	r1, lr, r1
 8005266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800526a:	d31b      	bcc.n	80052a4 <__adddf3+0x124>
 800526c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005270:	d30c      	bcc.n	800528c <__adddf3+0x10c>
 8005272:	0849      	lsrs	r1, r1, #1
 8005274:	ea5f 0030 	movs.w	r0, r0, rrx
 8005278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800527c:	f104 0401 	add.w	r4, r4, #1
 8005280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005288:	f080 809a 	bcs.w	80053c0 <__adddf3+0x240>
 800528c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005290:	bf08      	it	eq
 8005292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005296:	f150 0000 	adcs.w	r0, r0, #0
 800529a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800529e:	ea41 0105 	orr.w	r1, r1, r5
 80052a2:	bd30      	pop	{r4, r5, pc}
 80052a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80052a8:	4140      	adcs	r0, r0
 80052aa:	eb41 0101 	adc.w	r1, r1, r1
 80052ae:	3c01      	subs	r4, #1
 80052b0:	bf28      	it	cs
 80052b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80052b6:	d2e9      	bcs.n	800528c <__adddf3+0x10c>
 80052b8:	f091 0f00 	teq	r1, #0
 80052bc:	bf04      	itt	eq
 80052be:	4601      	moveq	r1, r0
 80052c0:	2000      	moveq	r0, #0
 80052c2:	fab1 f381 	clz	r3, r1
 80052c6:	bf08      	it	eq
 80052c8:	3320      	addeq	r3, #32
 80052ca:	f1a3 030b 	sub.w	r3, r3, #11
 80052ce:	f1b3 0220 	subs.w	r2, r3, #32
 80052d2:	da0c      	bge.n	80052ee <__adddf3+0x16e>
 80052d4:	320c      	adds	r2, #12
 80052d6:	dd08      	ble.n	80052ea <__adddf3+0x16a>
 80052d8:	f102 0c14 	add.w	ip, r2, #20
 80052dc:	f1c2 020c 	rsb	r2, r2, #12
 80052e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80052e4:	fa21 f102 	lsr.w	r1, r1, r2
 80052e8:	e00c      	b.n	8005304 <__adddf3+0x184>
 80052ea:	f102 0214 	add.w	r2, r2, #20
 80052ee:	bfd8      	it	le
 80052f0:	f1c2 0c20 	rsble	ip, r2, #32
 80052f4:	fa01 f102 	lsl.w	r1, r1, r2
 80052f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80052fc:	bfdc      	itt	le
 80052fe:	ea41 010c 	orrle.w	r1, r1, ip
 8005302:	4090      	lslle	r0, r2
 8005304:	1ae4      	subs	r4, r4, r3
 8005306:	bfa2      	ittt	ge
 8005308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800530c:	4329      	orrge	r1, r5
 800530e:	bd30      	popge	{r4, r5, pc}
 8005310:	ea6f 0404 	mvn.w	r4, r4
 8005314:	3c1f      	subs	r4, #31
 8005316:	da1c      	bge.n	8005352 <__adddf3+0x1d2>
 8005318:	340c      	adds	r4, #12
 800531a:	dc0e      	bgt.n	800533a <__adddf3+0x1ba>
 800531c:	f104 0414 	add.w	r4, r4, #20
 8005320:	f1c4 0220 	rsb	r2, r4, #32
 8005324:	fa20 f004 	lsr.w	r0, r0, r4
 8005328:	fa01 f302 	lsl.w	r3, r1, r2
 800532c:	ea40 0003 	orr.w	r0, r0, r3
 8005330:	fa21 f304 	lsr.w	r3, r1, r4
 8005334:	ea45 0103 	orr.w	r1, r5, r3
 8005338:	bd30      	pop	{r4, r5, pc}
 800533a:	f1c4 040c 	rsb	r4, r4, #12
 800533e:	f1c4 0220 	rsb	r2, r4, #32
 8005342:	fa20 f002 	lsr.w	r0, r0, r2
 8005346:	fa01 f304 	lsl.w	r3, r1, r4
 800534a:	ea40 0003 	orr.w	r0, r0, r3
 800534e:	4629      	mov	r1, r5
 8005350:	bd30      	pop	{r4, r5, pc}
 8005352:	fa21 f004 	lsr.w	r0, r1, r4
 8005356:	4629      	mov	r1, r5
 8005358:	bd30      	pop	{r4, r5, pc}
 800535a:	f094 0f00 	teq	r4, #0
 800535e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005362:	bf06      	itte	eq
 8005364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005368:	3401      	addeq	r4, #1
 800536a:	3d01      	subne	r5, #1
 800536c:	e74e      	b.n	800520c <__adddf3+0x8c>
 800536e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005372:	bf18      	it	ne
 8005374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005378:	d029      	beq.n	80053ce <__adddf3+0x24e>
 800537a:	ea94 0f05 	teq	r4, r5
 800537e:	bf08      	it	eq
 8005380:	ea90 0f02 	teqeq	r0, r2
 8005384:	d005      	beq.n	8005392 <__adddf3+0x212>
 8005386:	ea54 0c00 	orrs.w	ip, r4, r0
 800538a:	bf04      	itt	eq
 800538c:	4619      	moveq	r1, r3
 800538e:	4610      	moveq	r0, r2
 8005390:	bd30      	pop	{r4, r5, pc}
 8005392:	ea91 0f03 	teq	r1, r3
 8005396:	bf1e      	ittt	ne
 8005398:	2100      	movne	r1, #0
 800539a:	2000      	movne	r0, #0
 800539c:	bd30      	popne	{r4, r5, pc}
 800539e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80053a2:	d105      	bne.n	80053b0 <__adddf3+0x230>
 80053a4:	0040      	lsls	r0, r0, #1
 80053a6:	4149      	adcs	r1, r1
 80053a8:	bf28      	it	cs
 80053aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80053ae:	bd30      	pop	{r4, r5, pc}
 80053b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80053b4:	bf3c      	itt	cc
 80053b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80053ba:	bd30      	popcc	{r4, r5, pc}
 80053bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80053c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80053c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053c8:	f04f 0000 	mov.w	r0, #0
 80053cc:	bd30      	pop	{r4, r5, pc}
 80053ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80053d2:	bf1a      	itte	ne
 80053d4:	4619      	movne	r1, r3
 80053d6:	4610      	movne	r0, r2
 80053d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80053dc:	bf1c      	itt	ne
 80053de:	460b      	movne	r3, r1
 80053e0:	4602      	movne	r2, r0
 80053e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80053e6:	bf06      	itte	eq
 80053e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80053ec:	ea91 0f03 	teqeq	r1, r3
 80053f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80053f4:	bd30      	pop	{r4, r5, pc}
 80053f6:	bf00      	nop

080053f8 <__aeabi_ui2d>:
 80053f8:	f090 0f00 	teq	r0, #0
 80053fc:	bf04      	itt	eq
 80053fe:	2100      	moveq	r1, #0
 8005400:	4770      	bxeq	lr
 8005402:	b530      	push	{r4, r5, lr}
 8005404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800540c:	f04f 0500 	mov.w	r5, #0
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	e750      	b.n	80052b8 <__adddf3+0x138>
 8005416:	bf00      	nop

08005418 <__aeabi_i2d>:
 8005418:	f090 0f00 	teq	r0, #0
 800541c:	bf04      	itt	eq
 800541e:	2100      	moveq	r1, #0
 8005420:	4770      	bxeq	lr
 8005422:	b530      	push	{r4, r5, lr}
 8005424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800542c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005430:	bf48      	it	mi
 8005432:	4240      	negmi	r0, r0
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	e73e      	b.n	80052b8 <__adddf3+0x138>
 800543a:	bf00      	nop

0800543c <__aeabi_f2d>:
 800543c:	0042      	lsls	r2, r0, #1
 800543e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005442:	ea4f 0131 	mov.w	r1, r1, rrx
 8005446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800544a:	bf1f      	itttt	ne
 800544c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005458:	4770      	bxne	lr
 800545a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800545e:	bf08      	it	eq
 8005460:	4770      	bxeq	lr
 8005462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005466:	bf04      	itt	eq
 8005468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800546c:	4770      	bxeq	lr
 800546e:	b530      	push	{r4, r5, lr}
 8005470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800547c:	e71c      	b.n	80052b8 <__adddf3+0x138>
 800547e:	bf00      	nop

08005480 <__aeabi_ul2d>:
 8005480:	ea50 0201 	orrs.w	r2, r0, r1
 8005484:	bf08      	it	eq
 8005486:	4770      	bxeq	lr
 8005488:	b530      	push	{r4, r5, lr}
 800548a:	f04f 0500 	mov.w	r5, #0
 800548e:	e00a      	b.n	80054a6 <__aeabi_l2d+0x16>

08005490 <__aeabi_l2d>:
 8005490:	ea50 0201 	orrs.w	r2, r0, r1
 8005494:	bf08      	it	eq
 8005496:	4770      	bxeq	lr
 8005498:	b530      	push	{r4, r5, lr}
 800549a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800549e:	d502      	bpl.n	80054a6 <__aeabi_l2d+0x16>
 80054a0:	4240      	negs	r0, r0
 80054a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80054a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80054aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80054ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80054b2:	f43f aed8 	beq.w	8005266 <__adddf3+0xe6>
 80054b6:	f04f 0203 	mov.w	r2, #3
 80054ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054be:	bf18      	it	ne
 80054c0:	3203      	addne	r2, #3
 80054c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054c6:	bf18      	it	ne
 80054c8:	3203      	addne	r2, #3
 80054ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80054ce:	f1c2 0320 	rsb	r3, r2, #32
 80054d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80054d6:	fa20 f002 	lsr.w	r0, r0, r2
 80054da:	fa01 fe03 	lsl.w	lr, r1, r3
 80054de:	ea40 000e 	orr.w	r0, r0, lr
 80054e2:	fa21 f102 	lsr.w	r1, r1, r2
 80054e6:	4414      	add	r4, r2
 80054e8:	e6bd      	b.n	8005266 <__adddf3+0xe6>
 80054ea:	bf00      	nop

080054ec <__aeabi_dmul>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80054f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80054f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80054fa:	bf1d      	ittte	ne
 80054fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005500:	ea94 0f0c 	teqne	r4, ip
 8005504:	ea95 0f0c 	teqne	r5, ip
 8005508:	f000 f8de 	bleq	80056c8 <__aeabi_dmul+0x1dc>
 800550c:	442c      	add	r4, r5
 800550e:	ea81 0603 	eor.w	r6, r1, r3
 8005512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800551a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800551e:	bf18      	it	ne
 8005520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800552c:	d038      	beq.n	80055a0 <__aeabi_dmul+0xb4>
 800552e:	fba0 ce02 	umull	ip, lr, r0, r2
 8005532:	f04f 0500 	mov.w	r5, #0
 8005536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800553a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800553e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005542:	f04f 0600 	mov.w	r6, #0
 8005546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800554a:	f09c 0f00 	teq	ip, #0
 800554e:	bf18      	it	ne
 8005550:	f04e 0e01 	orrne.w	lr, lr, #1
 8005554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800555c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005560:	d204      	bcs.n	800556c <__aeabi_dmul+0x80>
 8005562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005566:	416d      	adcs	r5, r5
 8005568:	eb46 0606 	adc.w	r6, r6, r6
 800556c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800557c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005584:	bf88      	it	hi
 8005586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800558a:	d81e      	bhi.n	80055ca <__aeabi_dmul+0xde>
 800558c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005590:	bf08      	it	eq
 8005592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005596:	f150 0000 	adcs.w	r0, r0, #0
 800559a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80055a4:	ea46 0101 	orr.w	r1, r6, r1
 80055a8:	ea40 0002 	orr.w	r0, r0, r2
 80055ac:	ea81 0103 	eor.w	r1, r1, r3
 80055b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80055b4:	bfc2      	ittt	gt
 80055b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80055ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80055be:	bd70      	popgt	{r4, r5, r6, pc}
 80055c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80055c4:	f04f 0e00 	mov.w	lr, #0
 80055c8:	3c01      	subs	r4, #1
 80055ca:	f300 80ab 	bgt.w	8005724 <__aeabi_dmul+0x238>
 80055ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80055d2:	bfde      	ittt	le
 80055d4:	2000      	movle	r0, #0
 80055d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80055da:	bd70      	pople	{r4, r5, r6, pc}
 80055dc:	f1c4 0400 	rsb	r4, r4, #0
 80055e0:	3c20      	subs	r4, #32
 80055e2:	da35      	bge.n	8005650 <__aeabi_dmul+0x164>
 80055e4:	340c      	adds	r4, #12
 80055e6:	dc1b      	bgt.n	8005620 <__aeabi_dmul+0x134>
 80055e8:	f104 0414 	add.w	r4, r4, #20
 80055ec:	f1c4 0520 	rsb	r5, r4, #32
 80055f0:	fa00 f305 	lsl.w	r3, r0, r5
 80055f4:	fa20 f004 	lsr.w	r0, r0, r4
 80055f8:	fa01 f205 	lsl.w	r2, r1, r5
 80055fc:	ea40 0002 	orr.w	r0, r0, r2
 8005600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800560c:	fa21 f604 	lsr.w	r6, r1, r4
 8005610:	eb42 0106 	adc.w	r1, r2, r6
 8005614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005618:	bf08      	it	eq
 800561a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f1c4 040c 	rsb	r4, r4, #12
 8005624:	f1c4 0520 	rsb	r5, r4, #32
 8005628:	fa00 f304 	lsl.w	r3, r0, r4
 800562c:	fa20 f005 	lsr.w	r0, r0, r5
 8005630:	fa01 f204 	lsl.w	r2, r1, r4
 8005634:	ea40 0002 	orr.w	r0, r0, r2
 8005638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800563c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005640:	f141 0100 	adc.w	r1, r1, #0
 8005644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005648:	bf08      	it	eq
 800564a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f1c4 0520 	rsb	r5, r4, #32
 8005654:	fa00 f205 	lsl.w	r2, r0, r5
 8005658:	ea4e 0e02 	orr.w	lr, lr, r2
 800565c:	fa20 f304 	lsr.w	r3, r0, r4
 8005660:	fa01 f205 	lsl.w	r2, r1, r5
 8005664:	ea43 0302 	orr.w	r3, r3, r2
 8005668:	fa21 f004 	lsr.w	r0, r1, r4
 800566c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005670:	fa21 f204 	lsr.w	r2, r1, r4
 8005674:	ea20 0002 	bic.w	r0, r0, r2
 8005678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800567c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005680:	bf08      	it	eq
 8005682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	f094 0f00 	teq	r4, #0
 800568c:	d10f      	bne.n	80056ae <__aeabi_dmul+0x1c2>
 800568e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005692:	0040      	lsls	r0, r0, #1
 8005694:	eb41 0101 	adc.w	r1, r1, r1
 8005698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800569c:	bf08      	it	eq
 800569e:	3c01      	subeq	r4, #1
 80056a0:	d0f7      	beq.n	8005692 <__aeabi_dmul+0x1a6>
 80056a2:	ea41 0106 	orr.w	r1, r1, r6
 80056a6:	f095 0f00 	teq	r5, #0
 80056aa:	bf18      	it	ne
 80056ac:	4770      	bxne	lr
 80056ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80056b2:	0052      	lsls	r2, r2, #1
 80056b4:	eb43 0303 	adc.w	r3, r3, r3
 80056b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80056bc:	bf08      	it	eq
 80056be:	3d01      	subeq	r5, #1
 80056c0:	d0f7      	beq.n	80056b2 <__aeabi_dmul+0x1c6>
 80056c2:	ea43 0306 	orr.w	r3, r3, r6
 80056c6:	4770      	bx	lr
 80056c8:	ea94 0f0c 	teq	r4, ip
 80056cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80056d0:	bf18      	it	ne
 80056d2:	ea95 0f0c 	teqne	r5, ip
 80056d6:	d00c      	beq.n	80056f2 <__aeabi_dmul+0x206>
 80056d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056dc:	bf18      	it	ne
 80056de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80056e2:	d1d1      	bne.n	8005688 <__aeabi_dmul+0x19c>
 80056e4:	ea81 0103 	eor.w	r1, r1, r3
 80056e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80056ec:	f04f 0000 	mov.w	r0, #0
 80056f0:	bd70      	pop	{r4, r5, r6, pc}
 80056f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056f6:	bf06      	itte	eq
 80056f8:	4610      	moveq	r0, r2
 80056fa:	4619      	moveq	r1, r3
 80056fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005700:	d019      	beq.n	8005736 <__aeabi_dmul+0x24a>
 8005702:	ea94 0f0c 	teq	r4, ip
 8005706:	d102      	bne.n	800570e <__aeabi_dmul+0x222>
 8005708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800570c:	d113      	bne.n	8005736 <__aeabi_dmul+0x24a>
 800570e:	ea95 0f0c 	teq	r5, ip
 8005712:	d105      	bne.n	8005720 <__aeabi_dmul+0x234>
 8005714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005718:	bf1c      	itt	ne
 800571a:	4610      	movne	r0, r2
 800571c:	4619      	movne	r1, r3
 800571e:	d10a      	bne.n	8005736 <__aeabi_dmul+0x24a>
 8005720:	ea81 0103 	eor.w	r1, r1, r3
 8005724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800572c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005730:	f04f 0000 	mov.w	r0, #0
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800573a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800573e:	bd70      	pop	{r4, r5, r6, pc}

08005740 <__aeabi_ddiv>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800574a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800574e:	bf1d      	ittte	ne
 8005750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005754:	ea94 0f0c 	teqne	r4, ip
 8005758:	ea95 0f0c 	teqne	r5, ip
 800575c:	f000 f8a7 	bleq	80058ae <__aeabi_ddiv+0x16e>
 8005760:	eba4 0405 	sub.w	r4, r4, r5
 8005764:	ea81 0e03 	eor.w	lr, r1, r3
 8005768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800576c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005770:	f000 8088 	beq.w	8005884 <__aeabi_ddiv+0x144>
 8005774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800577c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800578c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005798:	429d      	cmp	r5, r3
 800579a:	bf08      	it	eq
 800579c:	4296      	cmpeq	r6, r2
 800579e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80057a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80057a6:	d202      	bcs.n	80057ae <__aeabi_ddiv+0x6e>
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80057ae:	1ab6      	subs	r6, r6, r2
 80057b0:	eb65 0503 	sbc.w	r5, r5, r3
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80057ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80057be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80057c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80057c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057ca:	bf22      	ittt	cs
 80057cc:	1ab6      	subcs	r6, r6, r2
 80057ce:	4675      	movcs	r5, lr
 80057d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80057da:	ebb6 0e02 	subs.w	lr, r6, r2
 80057de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057e2:	bf22      	ittt	cs
 80057e4:	1ab6      	subcs	r6, r6, r2
 80057e6:	4675      	movcs	r5, lr
 80057e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80057ec:	085b      	lsrs	r3, r3, #1
 80057ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80057f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80057f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057fa:	bf22      	ittt	cs
 80057fc:	1ab6      	subcs	r6, r6, r2
 80057fe:	4675      	movcs	r5, lr
 8005800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	ea4f 0232 	mov.w	r2, r2, rrx
 800580a:	ebb6 0e02 	subs.w	lr, r6, r2
 800580e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005812:	bf22      	ittt	cs
 8005814:	1ab6      	subcs	r6, r6, r2
 8005816:	4675      	movcs	r5, lr
 8005818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800581c:	ea55 0e06 	orrs.w	lr, r5, r6
 8005820:	d018      	beq.n	8005854 <__aeabi_ddiv+0x114>
 8005822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800582a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800582e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800583a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800583e:	d1c0      	bne.n	80057c2 <__aeabi_ddiv+0x82>
 8005840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005844:	d10b      	bne.n	800585e <__aeabi_ddiv+0x11e>
 8005846:	ea41 0100 	orr.w	r1, r1, r0
 800584a:	f04f 0000 	mov.w	r0, #0
 800584e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005852:	e7b6      	b.n	80057c2 <__aeabi_ddiv+0x82>
 8005854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005858:	bf04      	itt	eq
 800585a:	4301      	orreq	r1, r0
 800585c:	2000      	moveq	r0, #0
 800585e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005862:	bf88      	it	hi
 8005864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005868:	f63f aeaf 	bhi.w	80055ca <__aeabi_dmul+0xde>
 800586c:	ebb5 0c03 	subs.w	ip, r5, r3
 8005870:	bf04      	itt	eq
 8005872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800587a:	f150 0000 	adcs.w	r0, r0, #0
 800587e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800588c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005890:	bfc2      	ittt	gt
 8005892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800589a:	bd70      	popgt	{r4, r5, r6, pc}
 800589c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80058a0:	f04f 0e00 	mov.w	lr, #0
 80058a4:	3c01      	subs	r4, #1
 80058a6:	e690      	b.n	80055ca <__aeabi_dmul+0xde>
 80058a8:	ea45 0e06 	orr.w	lr, r5, r6
 80058ac:	e68d      	b.n	80055ca <__aeabi_dmul+0xde>
 80058ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80058b2:	ea94 0f0c 	teq	r4, ip
 80058b6:	bf08      	it	eq
 80058b8:	ea95 0f0c 	teqeq	r5, ip
 80058bc:	f43f af3b 	beq.w	8005736 <__aeabi_dmul+0x24a>
 80058c0:	ea94 0f0c 	teq	r4, ip
 80058c4:	d10a      	bne.n	80058dc <__aeabi_ddiv+0x19c>
 80058c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80058ca:	f47f af34 	bne.w	8005736 <__aeabi_dmul+0x24a>
 80058ce:	ea95 0f0c 	teq	r5, ip
 80058d2:	f47f af25 	bne.w	8005720 <__aeabi_dmul+0x234>
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	e72c      	b.n	8005736 <__aeabi_dmul+0x24a>
 80058dc:	ea95 0f0c 	teq	r5, ip
 80058e0:	d106      	bne.n	80058f0 <__aeabi_ddiv+0x1b0>
 80058e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80058e6:	f43f aefd 	beq.w	80056e4 <__aeabi_dmul+0x1f8>
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	e722      	b.n	8005736 <__aeabi_dmul+0x24a>
 80058f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80058f4:	bf18      	it	ne
 80058f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80058fa:	f47f aec5 	bne.w	8005688 <__aeabi_dmul+0x19c>
 80058fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005902:	f47f af0d 	bne.w	8005720 <__aeabi_dmul+0x234>
 8005906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800590a:	f47f aeeb 	bne.w	80056e4 <__aeabi_dmul+0x1f8>
 800590e:	e712      	b.n	8005736 <__aeabi_dmul+0x24a>

08005910 <__gedf2>:
 8005910:	f04f 3cff 	mov.w	ip, #4294967295
 8005914:	e006      	b.n	8005924 <__cmpdf2+0x4>
 8005916:	bf00      	nop

08005918 <__ledf2>:
 8005918:	f04f 0c01 	mov.w	ip, #1
 800591c:	e002      	b.n	8005924 <__cmpdf2+0x4>
 800591e:	bf00      	nop

08005920 <__cmpdf2>:
 8005920:	f04f 0c01 	mov.w	ip, #1
 8005924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800592c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005934:	bf18      	it	ne
 8005936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800593a:	d01b      	beq.n	8005974 <__cmpdf2+0x54>
 800593c:	b001      	add	sp, #4
 800593e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005942:	bf0c      	ite	eq
 8005944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005948:	ea91 0f03 	teqne	r1, r3
 800594c:	bf02      	ittt	eq
 800594e:	ea90 0f02 	teqeq	r0, r2
 8005952:	2000      	moveq	r0, #0
 8005954:	4770      	bxeq	lr
 8005956:	f110 0f00 	cmn.w	r0, #0
 800595a:	ea91 0f03 	teq	r1, r3
 800595e:	bf58      	it	pl
 8005960:	4299      	cmppl	r1, r3
 8005962:	bf08      	it	eq
 8005964:	4290      	cmpeq	r0, r2
 8005966:	bf2c      	ite	cs
 8005968:	17d8      	asrcs	r0, r3, #31
 800596a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800596e:	f040 0001 	orr.w	r0, r0, #1
 8005972:	4770      	bx	lr
 8005974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800597c:	d102      	bne.n	8005984 <__cmpdf2+0x64>
 800597e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005982:	d107      	bne.n	8005994 <__cmpdf2+0x74>
 8005984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800598c:	d1d6      	bne.n	800593c <__cmpdf2+0x1c>
 800598e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005992:	d0d3      	beq.n	800593c <__cmpdf2+0x1c>
 8005994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop

0800599c <__aeabi_cdrcmple>:
 800599c:	4684      	mov	ip, r0
 800599e:	4610      	mov	r0, r2
 80059a0:	4662      	mov	r2, ip
 80059a2:	468c      	mov	ip, r1
 80059a4:	4619      	mov	r1, r3
 80059a6:	4663      	mov	r3, ip
 80059a8:	e000      	b.n	80059ac <__aeabi_cdcmpeq>
 80059aa:	bf00      	nop

080059ac <__aeabi_cdcmpeq>:
 80059ac:	b501      	push	{r0, lr}
 80059ae:	f7ff ffb7 	bl	8005920 <__cmpdf2>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	bf48      	it	mi
 80059b6:	f110 0f00 	cmnmi.w	r0, #0
 80059ba:	bd01      	pop	{r0, pc}

080059bc <__aeabi_dcmpeq>:
 80059bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059c0:	f7ff fff4 	bl	80059ac <__aeabi_cdcmpeq>
 80059c4:	bf0c      	ite	eq
 80059c6:	2001      	moveq	r0, #1
 80059c8:	2000      	movne	r0, #0
 80059ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80059ce:	bf00      	nop

080059d0 <__aeabi_dcmplt>:
 80059d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059d4:	f7ff ffea 	bl	80059ac <__aeabi_cdcmpeq>
 80059d8:	bf34      	ite	cc
 80059da:	2001      	movcc	r0, #1
 80059dc:	2000      	movcs	r0, #0
 80059de:	f85d fb08 	ldr.w	pc, [sp], #8
 80059e2:	bf00      	nop

080059e4 <__aeabi_dcmple>:
 80059e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059e8:	f7ff ffe0 	bl	80059ac <__aeabi_cdcmpeq>
 80059ec:	bf94      	ite	ls
 80059ee:	2001      	movls	r0, #1
 80059f0:	2000      	movhi	r0, #0
 80059f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80059f6:	bf00      	nop

080059f8 <__aeabi_dcmpge>:
 80059f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059fc:	f7ff ffce 	bl	800599c <__aeabi_cdrcmple>
 8005a00:	bf94      	ite	ls
 8005a02:	2001      	movls	r0, #1
 8005a04:	2000      	movhi	r0, #0
 8005a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a0a:	bf00      	nop

08005a0c <__aeabi_dcmpgt>:
 8005a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005a10:	f7ff ffc4 	bl	800599c <__aeabi_cdrcmple>
 8005a14:	bf34      	ite	cc
 8005a16:	2001      	movcc	r0, #1
 8005a18:	2000      	movcs	r0, #0
 8005a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a1e:	bf00      	nop

08005a20 <__aeabi_dcmpun>:
 8005a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a28:	d102      	bne.n	8005a30 <__aeabi_dcmpun+0x10>
 8005a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005a2e:	d10a      	bne.n	8005a46 <__aeabi_dcmpun+0x26>
 8005a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a38:	d102      	bne.n	8005a40 <__aeabi_dcmpun+0x20>
 8005a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005a3e:	d102      	bne.n	8005a46 <__aeabi_dcmpun+0x26>
 8005a40:	f04f 0000 	mov.w	r0, #0
 8005a44:	4770      	bx	lr
 8005a46:	f04f 0001 	mov.w	r0, #1
 8005a4a:	4770      	bx	lr

08005a4c <__aeabi_d2uiz>:
 8005a4c:	004a      	lsls	r2, r1, #1
 8005a4e:	d211      	bcs.n	8005a74 <__aeabi_d2uiz+0x28>
 8005a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005a54:	d211      	bcs.n	8005a7a <__aeabi_d2uiz+0x2e>
 8005a56:	d50d      	bpl.n	8005a74 <__aeabi_d2uiz+0x28>
 8005a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005a60:	d40e      	bmi.n	8005a80 <__aeabi_d2uiz+0x34>
 8005a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8005a72:	4770      	bx	lr
 8005a74:	f04f 0000 	mov.w	r0, #0
 8005a78:	4770      	bx	lr
 8005a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005a7e:	d102      	bne.n	8005a86 <__aeabi_d2uiz+0x3a>
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	4770      	bx	lr
 8005a86:	f04f 0000 	mov.w	r0, #0
 8005a8a:	4770      	bx	lr

08005a8c <__aeabi_d2f>:
 8005a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005a94:	bf24      	itt	cs
 8005a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005a9e:	d90d      	bls.n	8005abc <__aeabi_d2f+0x30>
 8005aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005ab4:	bf08      	it	eq
 8005ab6:	f020 0001 	biceq.w	r0, r0, #1
 8005aba:	4770      	bx	lr
 8005abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005ac0:	d121      	bne.n	8005b06 <__aeabi_d2f+0x7a>
 8005ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005ac6:	bfbc      	itt	lt
 8005ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005acc:	4770      	bxlt	lr
 8005ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005ad6:	f1c2 0218 	rsb	r2, r2, #24
 8005ada:	f1c2 0c20 	rsb	ip, r2, #32
 8005ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8005ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8005ae6:	bf18      	it	ne
 8005ae8:	f040 0001 	orrne.w	r0, r0, #1
 8005aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005af8:	ea40 000c 	orr.w	r0, r0, ip
 8005afc:	fa23 f302 	lsr.w	r3, r3, r2
 8005b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005b04:	e7cc      	b.n	8005aa0 <__aeabi_d2f+0x14>
 8005b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005b0a:	d107      	bne.n	8005b1c <__aeabi_d2f+0x90>
 8005b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005b10:	bf1e      	ittt	ne
 8005b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005b1a:	4770      	bxne	lr
 8005b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop

08005b2c <__gesf2>:
 8005b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8005b30:	e006      	b.n	8005b40 <__cmpsf2+0x4>
 8005b32:	bf00      	nop

08005b34 <__lesf2>:
 8005b34:	f04f 0c01 	mov.w	ip, #1
 8005b38:	e002      	b.n	8005b40 <__cmpsf2+0x4>
 8005b3a:	bf00      	nop

08005b3c <__cmpsf2>:
 8005b3c:	f04f 0c01 	mov.w	ip, #1
 8005b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005b44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005b48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005b4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b50:	bf18      	it	ne
 8005b52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005b56:	d011      	beq.n	8005b7c <__cmpsf2+0x40>
 8005b58:	b001      	add	sp, #4
 8005b5a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8005b5e:	bf18      	it	ne
 8005b60:	ea90 0f01 	teqne	r0, r1
 8005b64:	bf58      	it	pl
 8005b66:	ebb2 0003 	subspl.w	r0, r2, r3
 8005b6a:	bf88      	it	hi
 8005b6c:	17c8      	asrhi	r0, r1, #31
 8005b6e:	bf38      	it	cc
 8005b70:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005b74:	bf18      	it	ne
 8005b76:	f040 0001 	orrne.w	r0, r0, #1
 8005b7a:	4770      	bx	lr
 8005b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b80:	d102      	bne.n	8005b88 <__cmpsf2+0x4c>
 8005b82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005b86:	d105      	bne.n	8005b94 <__cmpsf2+0x58>
 8005b88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005b8c:	d1e4      	bne.n	8005b58 <__cmpsf2+0x1c>
 8005b8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005b92:	d0e1      	beq.n	8005b58 <__cmpsf2+0x1c>
 8005b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop

08005b9c <__aeabi_cfrcmple>:
 8005b9c:	4684      	mov	ip, r0
 8005b9e:	4608      	mov	r0, r1
 8005ba0:	4661      	mov	r1, ip
 8005ba2:	e7ff      	b.n	8005ba4 <__aeabi_cfcmpeq>

08005ba4 <__aeabi_cfcmpeq>:
 8005ba4:	b50f      	push	{r0, r1, r2, r3, lr}
 8005ba6:	f7ff ffc9 	bl	8005b3c <__cmpsf2>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	bf48      	it	mi
 8005bae:	f110 0f00 	cmnmi.w	r0, #0
 8005bb2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005bb4 <__aeabi_fcmpeq>:
 8005bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bb8:	f7ff fff4 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2001      	moveq	r0, #1
 8005bc0:	2000      	movne	r0, #0
 8005bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bc6:	bf00      	nop

08005bc8 <__aeabi_fcmplt>:
 8005bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bcc:	f7ff ffea 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005bd0:	bf34      	ite	cc
 8005bd2:	2001      	movcc	r0, #1
 8005bd4:	2000      	movcs	r0, #0
 8005bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bda:	bf00      	nop

08005bdc <__aeabi_fcmple>:
 8005bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005be0:	f7ff ffe0 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005be4:	bf94      	ite	ls
 8005be6:	2001      	movls	r0, #1
 8005be8:	2000      	movhi	r0, #0
 8005bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bee:	bf00      	nop

08005bf0 <__aeabi_fcmpge>:
 8005bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bf4:	f7ff ffd2 	bl	8005b9c <__aeabi_cfrcmple>
 8005bf8:	bf94      	ite	ls
 8005bfa:	2001      	movls	r0, #1
 8005bfc:	2000      	movhi	r0, #0
 8005bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c02:	bf00      	nop

08005c04 <__aeabi_fcmpgt>:
 8005c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005c08:	f7ff ffc8 	bl	8005b9c <__aeabi_cfrcmple>
 8005c0c:	bf34      	ite	cc
 8005c0e:	2001      	movcc	r0, #1
 8005c10:	2000      	movcs	r0, #0
 8005c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c16:	bf00      	nop

08005c18 <__aeabi_fcmpun>:
 8005c18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005c24:	d102      	bne.n	8005c2c <__aeabi_fcmpun+0x14>
 8005c26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005c2a:	d108      	bne.n	8005c3e <__aeabi_fcmpun+0x26>
 8005c2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005c30:	d102      	bne.n	8005c38 <__aeabi_fcmpun+0x20>
 8005c32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005c36:	d102      	bne.n	8005c3e <__aeabi_fcmpun+0x26>
 8005c38:	f04f 0000 	mov.w	r0, #0
 8005c3c:	4770      	bx	lr
 8005c3e:	f04f 0001 	mov.w	r0, #1
 8005c42:	4770      	bx	lr

08005c44 <__aeabi_d2lz>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	460c      	mov	r4, r1
 8005c48:	4605      	mov	r5, r0
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2300      	movs	r3, #0
 8005c52:	f7ff febd 	bl	80059d0 <__aeabi_dcmplt>
 8005c56:	b928      	cbnz	r0, 8005c64 <__aeabi_d2lz+0x20>
 8005c58:	4628      	mov	r0, r5
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c60:	f000 b80a 	b.w	8005c78 <__aeabi_d2ulz>
 8005c64:	4628      	mov	r0, r5
 8005c66:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8005c6a:	f000 f805 	bl	8005c78 <__aeabi_d2ulz>
 8005c6e:	4240      	negs	r0, r0
 8005c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005c74:	bd38      	pop	{r3, r4, r5, pc}
 8005c76:	bf00      	nop

08005c78 <__aeabi_d2ulz>:
 8005c78:	b5d0      	push	{r4, r6, r7, lr}
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <__aeabi_d2ulz+0x34>)
 8005c7e:	4606      	mov	r6, r0
 8005c80:	460f      	mov	r7, r1
 8005c82:	f7ff fc33 	bl	80054ec <__aeabi_dmul>
 8005c86:	f7ff fee1 	bl	8005a4c <__aeabi_d2uiz>
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	f7ff fbb4 	bl	80053f8 <__aeabi_ui2d>
 8005c90:	2200      	movs	r2, #0
 8005c92:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <__aeabi_d2ulz+0x38>)
 8005c94:	f7ff fc2a 	bl	80054ec <__aeabi_dmul>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	f7ff fa6c 	bl	800517c <__aeabi_dsub>
 8005ca4:	f7ff fed2 	bl	8005a4c <__aeabi_d2uiz>
 8005ca8:	4621      	mov	r1, r4
 8005caa:	bdd0      	pop	{r4, r6, r7, pc}
 8005cac:	3df00000 	.word	0x3df00000
 8005cb0:	41f00000 	.word	0x41f00000

08005cb4 <threadLed>:
}


#ifdef FREE_RTOS_USING
static void threadLed(void const *argument)
{
 8005cb4:	b508      	push	{r3, lr}
  UNUSED(argument);

  while(1)
  {
    ledToggle(_DEF_LED1);
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	f000 fe1c 	bl	80068f4 <ledToggle>
    delay(500);
 8005cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005cc0:	f000 f835 	bl	8005d2e <delay>
  while(1)
 8005cc4:	e7f7      	b.n	8005cb6 <threadLed+0x2>
	...

08005cc8 <apInit>:
{
 8005cc8:	b530      	push	{r4, r5, lr}
  uartOpen(_DEF_UART1, 115200); // USB
 8005cca:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
{
 8005cce:	b087      	sub	sp, #28
  uartOpen(_DEF_UART1, 115200); // USB
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	f000 feaf 	bl	8006a34 <uartOpen>
  osThreadDef(threadLed, threadLed, _HW_DEF_RTOS_THREAD_PRI_LED, 0, _HW_DEF_RTOS_THREAD_MEM_LED);
 8005cd6:	4d0f      	ldr	r5, [pc, #60]	; (8005d14 <apInit+0x4c>)
  uartOpen(_DEF_UART2, 115200); // UART
 8005cd8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8005cdc:	2001      	movs	r0, #1
 8005cde:	f000 fea9 	bl	8006a34 <uartOpen>
  osThreadDef(threadLed, threadLed, _HW_DEF_RTOS_THREAD_PRI_LED, 0, _HW_DEF_RTOS_THREAD_MEM_LED);
 8005ce2:	ac01      	add	r4, sp, #4
  cliOpen(_DEF_UART1, 115200); // CLI
 8005ce4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8005ce8:	2000      	movs	r0, #0
 8005cea:	f000 fa61 	bl	80061b0 <cliOpen>
  osThreadDef(threadLed, threadLed, _HW_DEF_RTOS_THREAD_PRI_LED, 0, _HW_DEF_RTOS_THREAD_MEM_LED);
 8005cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cf2:	682b      	ldr	r3, [r5, #0]
  if (osThreadCreate(osThread(threadLed), NULL) != NULL)
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	a801      	add	r0, sp, #4
  osThreadDef(threadLed, threadLed, _HW_DEF_RTOS_THREAD_PRI_LED, 0, _HW_DEF_RTOS_THREAD_MEM_LED);
 8005cf8:	6023      	str	r3, [r4, #0]
  if (osThreadCreate(osThread(threadLed), NULL) != NULL)
 8005cfa:	f001 f80f 	bl	8006d1c <osThreadCreate>
 8005cfe:	b120      	cbz	r0, 8005d0a <apInit+0x42>
    logPrintf("threadLed \t\t: OK\r\n");
 8005d00:	4805      	ldr	r0, [pc, #20]	; (8005d18 <apInit+0x50>)
 8005d02:	f005 fead 	bl	800ba60 <puts>
}
 8005d06:	b007      	add	sp, #28
 8005d08:	bd30      	pop	{r4, r5, pc}
    logPrintf("threadLed \t\t: Fail\r\n");
 8005d0a:	4804      	ldr	r0, [pc, #16]	; (8005d1c <apInit+0x54>)
 8005d0c:	f005 fea8 	bl	800ba60 <puts>
    while(1);
 8005d10:	e7fe      	b.n	8005d10 <apInit+0x48>
 8005d12:	bf00      	nop
 8005d14:	0800ecf8 	.word	0x0800ecf8
 8005d18:	0800ed2a 	.word	0x0800ed2a
 8005d1c:	0800ed3c 	.word	0x0800ed3c

08005d20 <apMain>:
{
 8005d20:	b508      	push	{r3, lr}
    cliMain();
 8005d22:	f000 fb5d 	bl	80063e0 <cliMain>
   delay(1);
 8005d26:	2001      	movs	r0, #1
 8005d28:	f000 f801 	bl	8005d2e <delay>
  while(1)
 8005d2c:	e7f9      	b.n	8005d22 <apMain+0x2>

08005d2e <delay>:

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}

void delay(uint32_t ms)
{
 8005d2e:	b510      	push	{r4, lr}
 8005d30:	4604      	mov	r4, r0
#ifdef _USE_HW_RTOS
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005d32:	f001 fb85 	bl	8007440 <xTaskGetSchedulerState>
 8005d36:	2801      	cmp	r0, #1
  {
    osDelay(ms);
 8005d38:	4620      	mov	r0, r4
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005d3a:	d003      	beq.n	8005d44 <delay+0x16>
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
#endif
}
 8005d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osDelay(ms);
 8005d40:	f001 b804 	b.w	8006d4c <osDelay>
}
 8005d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(ms);
 8005d48:	f001 bdf2 	b.w	8007930 <HAL_Delay>

08005d4c <millis>:

uint32_t millis(void)
{
  return HAL_GetTick();
 8005d4c:	f001 bdea 	b.w	8007924 <HAL_GetTick>

08005d50 <__io_putchar>:
}


int __io_putchar(int ch)
{
 8005d50:	b507      	push	{r0, r1, r2, lr}
  //USB로 printf %c 전송
//  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);

  //UART로 printf %c 전송
  uartWrite(_DEF_UART2, (uint8_t *)&ch, 1);
 8005d52:	2201      	movs	r2, #1
{
 8005d54:	9001      	str	r0, [sp, #4]
  uartWrite(_DEF_UART2, (uint8_t *)&ch, 1);
 8005d56:	a901      	add	r1, sp, #4
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f000 feef 	bl	8006b3c <uartWrite>

  return 1;
}
 8005d5e:	2001      	movs	r0, #1
 8005d60:	b003      	add	sp, #12
 8005d62:	f85d fb04 	ldr.w	pc, [sp], #4

08005d66 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8005d66:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d68:	2214      	movs	r2, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d6a:	2400      	movs	r4, #0
{
 8005d6c:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d6e:	4621      	mov	r1, r4
 8005d70:	eb0d 0002 	add.w	r0, sp, r2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d74:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d78:	f005 fdfc 	bl	800b974 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	2210      	movs	r2, #16
 8005d80:	a801      	add	r0, sp, #4
 8005d82:	f005 fdf7 	bl	800b974 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d8a:	2105      	movs	r1, #5
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005d8c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d8e:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005d90:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d92:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d96:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005d9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d9e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005da0:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005da4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005da6:	f002 ffc5 	bl	8008d34 <HAL_RCC_OscConfig>
 8005daa:	b108      	cbz	r0, 8005db0 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005dac:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005dae:	e7fe      	b.n	8005dae <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005db0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005db2:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005dba:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005dbc:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	a805      	add	r0, sp, #20
 8005dc4:	f003 f98c 	bl	80090e0 <HAL_RCC_ClockConfig>
 8005dc8:	b108      	cbz	r0, 8005dce <SystemClock_Config+0x68>
 8005dca:	b672      	cpsid	i
  while (1)
 8005dcc:	e7fe      	b.n	8005dcc <SystemClock_Config+0x66>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005dce:	2211      	movs	r2, #17
 8005dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005dd4:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005dd6:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005dd8:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ddc:	f003 fa3c 	bl	8009258 <HAL_RCCEx_PeriphCLKConfig>
 8005de0:	b108      	cbz	r0, 8005de6 <SystemClock_Config+0x80>
 8005de2:	b672      	cpsid	i
  while (1)
 8005de4:	e7fe      	b.n	8005de4 <SystemClock_Config+0x7e>
}
 8005de6:	b014      	add	sp, #80	; 0x50
 8005de8:	bd10      	pop	{r4, pc}
	...

08005dec <bspInit>:
{
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	b088      	sub	sp, #32
  HAL_Init();
 8005df0:	f001 fd7a 	bl	80078e8 <HAL_Init>
  SystemClock_Config();
 8005df4:	f7ff ffb7 	bl	8005d66 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005df8:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <bspInit+0x80>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005dfa:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dfe:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e00:	2600      	movs	r6, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e02:	f042 0220 	orr.w	r2, r2, #32
 8005e06:	619a      	str	r2, [r3, #24]
 8005e08:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e0a:	4c19      	ldr	r4, [pc, #100]	; (8005e70 <bspInit+0x84>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e0c:	f002 0220 	and.w	r2, r2, #32
 8005e10:	9200      	str	r2, [sp, #0]
 8005e12:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e14:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e16:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e18:	f042 0210 	orr.w	r2, r2, #16
 8005e1c:	619a      	str	r2, [r3, #24]
 8005e1e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e20:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e22:	f002 0210 	and.w	r2, r2, #16
 8005e26:	9201      	str	r2, [sp, #4]
 8005e28:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e2a:	699a      	ldr	r2, [r3, #24]
 8005e2c:	f042 0204 	orr.w	r2, r2, #4
 8005e30:	619a      	str	r2, [r3, #24]
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	f002 0204 	and.w	r2, r2, #4
 8005e38:	9202      	str	r2, [sp, #8]
 8005e3a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	f042 0208 	orr.w	r2, r2, #8
 8005e42:	619a      	str	r2, [r3, #24]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	9303      	str	r3, [sp, #12]
 8005e4c:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005e4e:	2311      	movs	r3, #17
 8005e50:	e9cd 5304 	strd	r5, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e54:	2302      	movs	r3, #2
 8005e56:	e9cd 6306 	strd	r6, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e5a:	f001 ff7f 	bl	8007d5c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8005e5e:	4632      	mov	r2, r6
 8005e60:	4629      	mov	r1, r5
 8005e62:	4620      	mov	r0, r4
 8005e64:	f002 f8c4 	bl	8007ff0 <HAL_GPIO_WritePin>
}
 8005e68:	b008      	add	sp, #32
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	40010800 	.word	0x40010800

08005e74 <Error_Handler>:
 8005e74:	b672      	cpsid	i
  while (1)
 8005e76:	e7fe      	b.n	8005e76 <Error_Handler+0x2>

08005e78 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e78:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <HAL_MspInit+0x3c>)
{
 8005e7a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	619a      	str	r2, [r3, #24]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	f002 0201 	and.w	r2, r2, #1
 8005e8a:	9200      	str	r2, [sp, #0]
 8005e8c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e94:	61da      	str	r2, [r3, #28]
 8005e96:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e98:	4a07      	ldr	r2, [pc, #28]	; (8005eb8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	9301      	str	r3, [sp, #4]
 8005ea0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005ea2:	6853      	ldr	r3, [r2, #4]
 8005ea4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005eac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005eae:	b002      	add	sp, #8
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	40010000 	.word	0x40010000

08005ebc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ebc:	e7fe      	b.n	8005ebc <NMI_Handler>

08005ebe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ebe:	e7fe      	b.n	8005ebe <HardFault_Handler>

08005ec0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ec0:	e7fe      	b.n	8005ec0 <MemManage_Handler>

08005ec2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ec2:	e7fe      	b.n	8005ec2 <BusFault_Handler>

08005ec4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ec4:	e7fe      	b.n	8005ec4 <UsageFault_Handler>

08005ec6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ec6:	4770      	bx	lr

08005ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ec8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005eca:	f001 fd1f 	bl	800790c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 8005ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8005ed2:	f000 bf43 	b.w	8006d5c <osSystickHandler>
	...

08005ed8 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005ed8:	4801      	ldr	r0, [pc, #4]	; (8005ee0 <DMA1_Channel5_IRQHandler+0x8>)
 8005eda:	f001 bead 	b.w	8007c38 <HAL_DMA_IRQHandler>
 8005ede:	bf00      	nop
 8005ee0:	200025e4 	.word	0x200025e4

08005ee4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005ee4:	4801      	ldr	r0, [pc, #4]	; (8005eec <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8005ee6:	f002 b937 	b.w	8008158 <HAL_PCD_IRQHandler>
 8005eea:	bf00      	nop
 8005eec:	20003734 	.word	0x20003734

08005ef0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005ef0:	4801      	ldr	r0, [pc, #4]	; (8005ef8 <USART1_IRQHandler+0x8>)
 8005ef2:	f003 bcdb 	b.w	80098ac <HAL_UART_IRQHandler>
 8005ef6:	bf00      	nop
 8005ef8:	20002628 	.word	0x20002628

08005efc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005efc:	2001      	movs	r0, #1
 8005efe:	4770      	bx	lr

08005f00 <_kill>:

int _kill(int pid, int sig)
{
 8005f00:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005f02:	f005 fcff 	bl	800b904 <__errno>
 8005f06:	2316      	movs	r3, #22
 8005f08:	6003      	str	r3, [r0, #0]
	return -1;
}
 8005f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0e:	bd08      	pop	{r3, pc}

08005f10 <_exit>:

void _exit (int status)
{
 8005f10:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005f12:	f005 fcf7 	bl	800b904 <__errno>
 8005f16:	2316      	movs	r3, #22
 8005f18:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005f1a:	e7fe      	b.n	8005f1a <_exit+0xa>

08005f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	460e      	mov	r6, r1
 8005f20:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f22:	2500      	movs	r5, #0
 8005f24:	42a5      	cmp	r5, r4
 8005f26:	db01      	blt.n	8005f2c <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005f28:	4620      	mov	r0, r4
 8005f2a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005f2c:	f3af 8000 	nop.w
 8005f30:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f32:	3501      	adds	r5, #1
 8005f34:	e7f6      	b.n	8005f24 <_read+0x8>

08005f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f36:	b570      	push	{r4, r5, r6, lr}
 8005f38:	460e      	mov	r6, r1
 8005f3a:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f3c:	2500      	movs	r5, #0
 8005f3e:	42a5      	cmp	r5, r4
 8005f40:	db01      	blt.n	8005f46 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8005f42:	4620      	mov	r0, r4
 8005f44:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8005f46:	5d70      	ldrb	r0, [r6, r5]
 8005f48:	f7ff ff02 	bl	8005d50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f4c:	3501      	adds	r5, #1
 8005f4e:	e7f6      	b.n	8005f3e <_write+0x8>

08005f50 <_close>:

int _close(int file)
{
	return -1;
}
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	4770      	bx	lr

08005f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005f5a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005f5c:	604b      	str	r3, [r1, #4]
}
 8005f5e:	4770      	bx	lr

08005f60 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005f60:	2001      	movs	r0, #1
 8005f62:	4770      	bx	lr

08005f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005f64:	2000      	movs	r0, #0
 8005f66:	4770      	bx	lr

08005f68 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f68:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <_sbrk+0x30>)
{
 8005f6a:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8005f6c:	6819      	ldr	r1, [r3, #0]
{
 8005f6e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8005f70:	b909      	cbnz	r1, 8005f76 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8005f72:	490a      	ldr	r1, [pc, #40]	; (8005f9c <_sbrk+0x34>)
 8005f74:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	4909      	ldr	r1, [pc, #36]	; (8005fa0 <_sbrk+0x38>)
 8005f7a:	4c0a      	ldr	r4, [pc, #40]	; (8005fa4 <_sbrk+0x3c>)
 8005f7c:	4402      	add	r2, r0
 8005f7e:	1b09      	subs	r1, r1, r4
 8005f80:	428a      	cmp	r2, r1
 8005f82:	d906      	bls.n	8005f92 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8005f84:	f005 fcbe 	bl	800b904 <__errno>
 8005f88:	230c      	movs	r3, #12
 8005f8a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005f8c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8005f90:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8005f92:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8005f94:	e7fc      	b.n	8005f90 <_sbrk+0x28>
 8005f96:	bf00      	nop
 8005f98:	20000384 	.word	0x20000384
 8005f9c:	20003a30 	.word	0x20003a30
 8005fa0:	20005000 	.word	0x20005000
 8005fa4:	00000400 	.word	0x00000400

08005fa8 <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8005fa8:	4b01      	ldr	r3, [pc, #4]	; (8005fb0 <SystemInit+0x8>)
 8005faa:	4a02      	ldr	r2, [pc, #8]	; (8005fb4 <SystemInit+0xc>)
 8005fac:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005fae:	4770      	bx	lr
 8005fb0:	e000ed00 	.word	0xe000ed00
 8005fb4:	08005000 	.word	0x08005000

08005fb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005fb8:	480c      	ldr	r0, [pc, #48]	; (8005fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005fba:	490d      	ldr	r1, [pc, #52]	; (8005ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005fbc:	4a0d      	ldr	r2, [pc, #52]	; (8005ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005fc0:	e002      	b.n	8005fc8 <LoopCopyDataInit>

08005fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fc6:	3304      	adds	r3, #4

08005fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fcc:	d3f9      	bcc.n	8005fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fce:	4a0a      	ldr	r2, [pc, #40]	; (8005ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005fd0:	4c0a      	ldr	r4, [pc, #40]	; (8005ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8005fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fd4:	e001      	b.n	8005fda <LoopFillZerobss>

08005fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fd8:	3204      	adds	r2, #4

08005fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fdc:	d3fb      	bcc.n	8005fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005fde:	f7ff ffe3 	bl	8005fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005fe2:	f005 fc95 	bl	800b910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005fe6:	f005 fc69 	bl	800b8bc <main>
  bx lr
 8005fea:	4770      	bx	lr
  ldr r0, =_sdata
 8005fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ff0:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8005ff4:	0800f384 	.word	0x0800f384
  ldr r2, =_sbss
 8005ff8:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8005ffc:	20003a30 	.word	0x20003a30

08006000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006000:	e7fe      	b.n	8006000 <ADC1_2_IRQHandler>

08006002 <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
  bool ret = true;

  p_node->in  = 0;
 8006002:	2300      	movs	r3, #0
  p_node->out = 0;
  p_node->len = length;
  p_node->p_buf = p_buf;
 8006004:	e9c0 2102 	strd	r2, r1, [r0, #8]
  p_node->out = 0;
 8006008:	e9c0 3300 	strd	r3, r3, [r0]

  return ret;
}
 800600c:	2001      	movs	r0, #1
 800600e:	4770      	bx	lr

08006010 <qbufferRead>:

}


bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8006010:	b570      	push	{r4, r5, r6, lr}
  bool ret = true;

  for (int i=0; i<length; i++)
 8006012:	2400      	movs	r4, #0
 8006014:	42a2      	cmp	r2, r4
 8006016:	d101      	bne.n	800601c <qbufferRead+0xc>
  bool ret = true;
 8006018:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 800601a:	bd70      	pop	{r4, r5, r6, pc}
    if (p_node-> p_buf != NULL)
 800601c:	68c3      	ldr	r3, [r0, #12]
 800601e:	b113      	cbz	r3, 8006026 <qbufferRead+0x16>
      p_data[i] = p_node->p_buf[p_node->out];
 8006020:	6845      	ldr	r5, [r0, #4]
 8006022:	5d5b      	ldrb	r3, [r3, r5]
 8006024:	550b      	strb	r3, [r1, r4]
    if (p_node->out != p_node->in)
 8006026:	e9d0 5300 	ldrd	r5, r3, [r0]
 800602a:	42ab      	cmp	r3, r5
 800602c:	d008      	beq.n	8006040 <qbufferRead+0x30>
      p_node->out = (p_node->out + 1) % p_node->len;
 800602e:	6886      	ldr	r6, [r0, #8]
 8006030:	3301      	adds	r3, #1
 8006032:	fbb3 f5f6 	udiv	r5, r3, r6
 8006036:	fb06 3315 	mls	r3, r6, r5, r3
  for (int i=0; i<length; i++)
 800603a:	3401      	adds	r4, #1
      p_node->out = (p_node->out + 1) % p_node->len;
 800603c:	6043      	str	r3, [r0, #4]
  for (int i=0; i<length; i++)
 800603e:	e7e9      	b.n	8006014 <qbufferRead+0x4>
      ret =false;
 8006040:	2000      	movs	r0, #0
 8006042:	e7ea      	b.n	800601a <qbufferRead+0xa>

08006044 <qbufferAvailable>:
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node-> len;
 8006044:	e9d0 3200 	ldrd	r3, r2, [r0]
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	6882      	ldr	r2, [r0, #8]
 800604c:	fbb3 f0f2 	udiv	r0, r3, r2


  return ret;
}
 8006050:	fb02 3010 	mls	r0, r2, r0, r3
 8006054:	4770      	bx	lr

08006056 <cliToUpper>:

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
}

void cliToUpper(char *str)
{
 8006056:	b510      	push	{r4, lr}
 8006058:	1e42      	subs	r2, r0, #1
 800605a:	f100 010f 	add.w	r1, r0, #15
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
  {
    str_ch = str[i];
 800605e:	f812 3f01 	ldrb.w	r3, [r2, #1]!

    if (str_ch == 0)
 8006062:	b153      	cbz	r3, 800607a <cliToUpper+0x24>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8006064:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 8006068:	2c19      	cmp	r4, #25
    {
      str_ch = str_ch - 'a' + 'A';
 800606a:	bf9c      	itt	ls
 800606c:	3b20      	subls	r3, #32
 800606e:	b2db      	uxtbls	r3, r3
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8006070:	428a      	cmp	r2, r1
    }
    str[i] = str_ch;
 8006072:	7013      	strb	r3, [r2, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8006074:	d1f3      	bne.n	800605e <cliToUpper+0x8>
  }

  if (i == CLI_CMD_NAME_MAX)
  {
    str[i-1] = 0;
 8006076:	2300      	movs	r3, #0
 8006078:	73c3      	strb	r3, [r0, #15]
  }
}
 800607a:	bd10      	pop	{r4, pc}

0800607c <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <cliArgsGetStr+0x18>)
 800607e:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 8006082:	4282      	cmp	r2, r0
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 8006084:	bf86      	itte	hi
 8006086:	f8d3 3390 	ldrhi.w	r3, [r3, #912]	; 0x390
 800608a:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
    return 0;
 800608e:	2000      	movls	r0, #0

  return ret;
}
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20002240 	.word	0x20002240

08006098 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8006098:	b508      	push	{r3, lr}
 800609a:	4603      	mov	r3, r0
  bool ret = false;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 800609c:	4a08      	ldr	r2, [pc, #32]	; (80060c0 <cliArgsIsStr+0x28>)
{
 800609e:	4608      	mov	r0, r1
  if (index >= p_cli->cmd_args.argc)
 80060a0:	f8b2 138c 	ldrh.w	r1, [r2, #908]	; 0x38c
 80060a4:	4299      	cmp	r1, r3
 80060a6:	d909      	bls.n	80060bc <cliArgsIsStr+0x24>
  {
    return 0;
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80060a8:	f8d2 2390 	ldr.w	r2, [r2, #912]	; 0x390
 80060ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80060b0:	f7ff f84e 	bl	8005150 <strcmp>
 80060b4:	fab0 f080 	clz	r0, r0
 80060b8:	0940      	lsrs	r0, r0, #5
  {
    ret = true;
  }

  return ret;
}
 80060ba:	bd08      	pop	{r3, pc}
    return 0;
 80060bc:	2000      	movs	r0, #0
 80060be:	e7fc      	b.n	80060ba <cliArgsIsStr+0x22>
 80060c0:	20002240 	.word	0x20002240

080060c4 <cliArgsGetFloat>:
  if (index >= p_cli->cmd_args.argc)
 80060c4:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <cliArgsGetFloat+0x1c>)
 80060c6:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 80060ca:	4282      	cmp	r2, r0
 80060cc:	d906      	bls.n	80060dc <cliArgsGetFloat+0x18>
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80060ce:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80060d2:	2100      	movs	r1, #0
 80060d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80060d8:	f006 baea 	b.w	800c6b0 <strtof>
}
 80060dc:	2000      	movs	r0, #0
 80060de:	4770      	bx	lr
 80060e0:	20002240 	.word	0x20002240

080060e4 <cliArgsGetData>:
  if (index >= p_cli->cmd_args.argc)
 80060e4:	4b07      	ldr	r3, [pc, #28]	; (8006104 <cliArgsGetData+0x20>)
 80060e6:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 80060ea:	4282      	cmp	r2, r0
 80060ec:	d907      	bls.n	80060fe <cliArgsGetData+0x1a>
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80060f4:	4611      	mov	r1, r2
 80060f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80060fa:	f006 bbd3 	b.w	800c8a4 <strtoul>
}
 80060fe:	2000      	movs	r0, #0
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20002240 	.word	0x20002240

08006108 <cliLineChange.constprop.0>:
void cliLineChange(cli_t *p_cli, int8_t key_up)
 8006108:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->hist_line_count == 0)
 800610a:	4c25      	ldr	r4, [pc, #148]	; (80061a0 <cliLineChange.constprop.0+0x98>)
void cliLineChange(cli_t *p_cli, int8_t key_up)
 800610c:	4605      	mov	r5, r0
  if (p_cli->hist_line_count == 0)
 800610e:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
 8006112:	2b00      	cmp	r3, #0
 8006114:	d03e      	beq.n	8006194 <cliLineChange.constprop.0+0x8c>
  if (p_cli->line.cursor > 0)
 8006116:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 800611a:	b11a      	cbz	r2, 8006124 <cliLineChange.constprop.0+0x1c>
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800611c:	4921      	ldr	r1, [pc, #132]	; (80061a4 <cliLineChange.constprop.0+0x9c>)
 800611e:	7820      	ldrb	r0, [r4, #0]
 8006120:	f000 fd26 	bl	8006b70 <uartPrintf>
  if (p_cli->line.count > 0)
 8006124:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 8006128:	b11a      	cbz	r2, 8006132 <cliLineChange.constprop.0+0x2a>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800612a:	491f      	ldr	r1, [pc, #124]	; (80061a8 <cliLineChange.constprop.0+0xa0>)
 800612c:	7820      	ldrb	r0, [r4, #0]
 800612e:	f000 fd1f 	bl	8006b70 <uartPrintf>
  if (key_up == true)
 8006132:	2d01      	cmp	r5, #1
 8006134:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
 8006138:	d12d      	bne.n	8006196 <cliLineChange.constprop.0+0x8e>
    if (p_cli->hist_line_new == true)
 800613a:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
 800613e:	b11b      	cbz	r3, 8006148 <cliLineChange.constprop.0+0x40>
      p_cli->hist_line_i = p_cli->hist_line_last;
 8006140:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
 8006144:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8006148:	f994 2195 	ldrsb.w	r2, [r4, #405]	; 0x195
 800614c:	440a      	add	r2, r1
 800614e:	3a01      	subs	r2, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8006150:	fb92 f3f1 	sdiv	r3, r2, r1
 8006154:	fb01 2313 	mls	r3, r1, r3, r2
  p_cli->line = p_cli->line_buf[change_i];
 8006158:	2223      	movs	r2, #35	; 0x23
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800615a:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800615e:	b2db      	uxtb	r3, r3
  p_cli->line = p_cli->line_buf[change_i];
 8006160:	fb02 4303 	mla	r3, r2, r3, r4
 8006164:	4d11      	ldr	r5, [pc, #68]	; (80061ac <cliLineChange.constprop.0+0xa4>)
 8006166:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800616a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800616e:	462e      	mov	r6, r5
 8006170:	6810      	ldr	r0, [r2, #0]
 8006172:	6851      	ldr	r1, [r2, #4]
 8006174:	3208      	adds	r2, #8
 8006176:	c603      	stmia	r6!, {r0, r1}
 8006178:	429a      	cmp	r2, r3
 800617a:	4635      	mov	r5, r6
 800617c:	d1f7      	bne.n	800616e <cliLineChange.constprop.0+0x66>
 800617e:	7893      	ldrb	r3, [r2, #2]
 8006180:	8811      	ldrh	r1, [r2, #0]
 8006182:	70b3      	strb	r3, [r6, #2]
 8006184:	8031      	strh	r1, [r6, #0]
  p_cli->line.cursor = p_cli->line.count;
 8006186:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 800618a:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
  p_cli->hist_line_new = false;
 800618e:	2300      	movs	r3, #0
 8006190:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
}
 8006194:	bd70      	pop	{r4, r5, r6, pc}
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8006196:	f994 3195 	ldrsb.w	r3, [r4, #405]	; 0x195
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	e7d8      	b.n	8006150 <cliLineChange.constprop.0+0x48>
 800619e:	bf00      	nop
 80061a0:	20002240 	.word	0x20002240
 80061a4:	0800ed68 	.word	0x0800ed68
 80061a8:	0800ed6e 	.word	0x0800ed6e
 80061ac:	20002464 	.word	0x20002464

080061b0 <cliOpen>:
{
 80061b0:	b510      	push	{r4, lr}
  cli_node.ch = ch;
 80061b2:	4c03      	ldr	r4, [pc, #12]	; (80061c0 <cliOpen+0x10>)
 80061b4:	7020      	strb	r0, [r4, #0]
  cli_node.baud = baud;
 80061b6:	6061      	str	r1, [r4, #4]
  cli_node.is_open = uartOpen(ch, baud);
 80061b8:	f000 fc3c 	bl	8006a34 <uartOpen>
 80061bc:	7220      	strb	r0, [r4, #8]
}
 80061be:	bd10      	pop	{r4, pc}
 80061c0:	20002240 	.word	0x20002240

080061c4 <cliShowLog>:
{
 80061c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cli_node.is_log == true)
 80061c6:	4b23      	ldr	r3, [pc, #140]	; (8006254 <cliShowLog+0x90>)
{
 80061c8:	4604      	mov	r4, r0
  if (cli_node.is_log == true)
 80061ca:	7a5b      	ldrb	r3, [r3, #9]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d03f      	beq.n	8006250 <cliShowLog+0x8c>
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80061d0:	f890 2245 	ldrb.w	r2, [r0, #581]	; 0x245
 80061d4:	4920      	ldr	r1, [pc, #128]	; (8006258 <cliShowLog+0x94>)
 80061d6:	7a80      	ldrb	r0, [r0, #10]
 80061d8:	f000 fcca 	bl	8006b70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80061dc:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 80061e0:	491e      	ldr	r1, [pc, #120]	; (800625c <cliShowLog+0x98>)
 80061e2:	7aa0      	ldrb	r0, [r4, #10]
 80061e4:	f000 fcc4 	bl	8006b70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80061e8:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
 80061ec:	491c      	ldr	r1, [pc, #112]	; (8006260 <cliShowLog+0x9c>)
 80061ee:	7aa0      	ldrb	r0, [r4, #10]
 80061f0:	f000 fcbe 	bl	8006b70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80061f4:	491b      	ldr	r1, [pc, #108]	; (8006264 <cliShowLog+0xa0>)
 80061f6:	f504 7209 	add.w	r2, r4, #548	; 0x224
 80061fa:	7aa0      	ldrb	r0, [r4, #10]
 80061fc:	f000 fcb8 	bl	8006b70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8006200:	f994 2195 	ldrsb.w	r2, [r4, #405]	; 0x195
 8006204:	4918      	ldr	r1, [pc, #96]	; (8006268 <cliShowLog+0xa4>)
 8006206:	7aa0      	ldrb	r0, [r4, #10]
 8006208:	f000 fcb2 	bl	8006b70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800620c:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
 8006210:	4916      	ldr	r1, [pc, #88]	; (800626c <cliShowLog+0xa8>)
 8006212:	7aa0      	ldrb	r0, [r4, #10]
 8006214:	f000 fcac 	bl	8006b70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8006218:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
 800621c:	4914      	ldr	r1, [pc, #80]	; (8006270 <cliShowLog+0xac>)
 800621e:	7aa0      	ldrb	r0, [r4, #10]
 8006220:	f000 fca6 	bl	8006b70 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8006224:	2500      	movs	r5, #0
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8006226:	4f13      	ldr	r7, [pc, #76]	; (8006274 <cliShowLog+0xb0>)
 8006228:	f504 76cc 	add.w	r6, r4, #408	; 0x198
    for (int i=0; i<p_cli->hist_line_count; i++)
 800622c:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
 8006230:	7aa0      	ldrb	r0, [r4, #10]
 8006232:	429d      	cmp	r5, r3
 8006234:	db04      	blt.n	8006240 <cliShowLog+0x7c>
}
 8006236:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    uartPrintf(p_cli->log_ch, "\n");
 800623a:	490f      	ldr	r1, [pc, #60]	; (8006278 <cliShowLog+0xb4>)
 800623c:	f000 bc98 	b.w	8006b70 <uartPrintf>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8006240:	4633      	mov	r3, r6
 8006242:	462a      	mov	r2, r5
 8006244:	4639      	mov	r1, r7
 8006246:	f000 fc93 	bl	8006b70 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800624a:	3501      	adds	r5, #1
 800624c:	3623      	adds	r6, #35	; 0x23
 800624e:	e7ed      	b.n	800622c <cliShowLog+0x68>
}
 8006250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006252:	bf00      	nop
 8006254:	20002240 	.word	0x20002240
 8006258:	0800ed74 	.word	0x0800ed74
 800625c:	0800ed82 	.word	0x0800ed82
 8006260:	0800ed90 	.word	0x0800ed90
 8006264:	0800ed9e 	.word	0x0800ed9e
 8006268:	0800edac 	.word	0x0800edac
 800626c:	0800edba 	.word	0x0800edba
 8006270:	0800edc8 	.word	0x0800edc8
 8006274:	0800edd6 	.word	0x0800edd6
 8006278:	0800ee03 	.word	0x0800ee03

0800627c <cliPrintf>:
{
 800627c:	b40f      	push	{r0, r1, r2, r3}
 800627e:	b513      	push	{r0, r1, r4, lr}
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006280:	4c0a      	ldr	r4, [pc, #40]	; (80062ac <cliPrintf+0x30>)
{
 8006282:	ab04      	add	r3, sp, #16
 8006284:	f853 2b04 	ldr.w	r2, [r3], #4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006288:	f44f 7180 	mov.w	r1, #256	; 0x100
 800628c:	4620      	mov	r0, r4
  va_start (arg, fmt);
 800628e:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006290:	f006 fb3e 	bl	800c910 <vsniprintf>
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8006294:	4621      	mov	r1, r4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006296:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8006298:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 800629c:	f000 fc4e 	bl	8006b3c <uartWrite>
}
 80062a0:	b002      	add	sp, #8
 80062a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062a6:	b004      	add	sp, #16
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	20002251 	.word	0x20002251

080062b0 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  cli_t *p_cli = &cli_node;


  cliPrintf("\r\n");
 80062b2:	480f      	ldr	r0, [pc, #60]	; (80062f0 <cliShowList+0x40>)
 80062b4:	f7ff ffe2 	bl	800627c <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80062b8:	480e      	ldr	r0, [pc, #56]	; (80062f4 <cliShowList+0x44>)
 80062ba:	f7ff ffdf 	bl	800627c <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80062be:	480e      	ldr	r0, [pc, #56]	; (80062f8 <cliShowList+0x48>)
 80062c0:	2400      	movs	r4, #0
 80062c2:	4605      	mov	r5, r0
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
    cliPrintf("\r\n");
 80062c4:	4f0a      	ldr	r7, [pc, #40]	; (80062f0 <cliShowList+0x40>)
  for (int i=0; i<p_cli->cmd_count; i++)
 80062c6:	f8b5 3248 	ldrh.w	r3, [r5, #584]	; 0x248
 80062ca:	f100 0614 	add.w	r6, r0, #20
 80062ce:	42a3      	cmp	r3, r4
 80062d0:	dc04      	bgt.n	80062dc <cliShowList+0x2c>
  }

  cliPrintf("-----------------------------\r\n");
}
 80062d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  cliPrintf("-----------------------------\r\n");
 80062d6:	4809      	ldr	r0, [pc, #36]	; (80062fc <cliShowList+0x4c>)
 80062d8:	f7ff bfd0 	b.w	800627c <cliPrintf>
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80062dc:	f500 7013 	add.w	r0, r0, #588	; 0x24c
 80062e0:	f7ff ffcc 	bl	800627c <cliPrintf>
    cliPrintf("\r\n");
 80062e4:	4638      	mov	r0, r7
 80062e6:	f7ff ffc9 	bl	800627c <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80062ea:	3401      	adds	r4, #1
 80062ec:	4630      	mov	r0, r6
 80062ee:	e7ea      	b.n	80062c6 <cliShowList+0x16>
 80062f0:	0800ee02 	.word	0x0800ee02
 80062f4:	0800ede5 	.word	0x0800ede5
 80062f8:	20002240 	.word	0x20002240
 80062fc:	0800ee05 	.word	0x0800ee05

08006300 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8006300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8006304:	8803      	ldrh	r3, [r0, #0]
{
 8006306:	b085      	sub	sp, #20
  char **argv = args->argv;


  if(args->argc < 1)
 8006308:	b92b      	cbnz	r3, 8006316 <cliMemoryDump+0x16>
  {
    cliPrintf(">> md addr [size] \n");
 800630a:	482d      	ldr	r0, [pc, #180]	; (80063c0 <cliMemoryDump+0xc0>)
      }
      cliPrintf("|\n   ");
    }
    addr++;
  }
}
 800630c:	b005      	add	sp, #20
 800630e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cliPrintf(">> md addr [size] \n");
 8006312:	f7ff bfb3 	b.w	800627c <cliPrintf>
  if(argc > 1)
 8006316:	2b01      	cmp	r3, #1
  char **argv = args->argv;
 8006318:	6844      	ldr	r4, [r0, #4]
  if(argc > 1)
 800631a:	d915      	bls.n	8006348 <cliMemoryDump+0x48>
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800631c:	2200      	movs	r2, #0
 800631e:	6860      	ldr	r0, [r4, #4]
 8006320:	4611      	mov	r1, r2
 8006322:	f006 fabf 	bl	800c8a4 <strtoul>
 8006326:	4606      	mov	r6, r0
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8006328:	2200      	movs	r2, #0
 800632a:	6820      	ldr	r0, [r4, #0]
 800632c:	4611      	mov	r1, r2
 800632e:	f006 fab9 	bl	800c8a4 <strtoul>
 8006332:	4604      	mov	r4, r0
  cliPrintf("\n   ");
 8006334:	4823      	ldr	r0, [pc, #140]	; (80063c4 <cliMemoryDump+0xc4>)
 8006336:	f7ff ffa1 	bl	800627c <cliPrintf>
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800633a:	4627      	mov	r7, r4
  for (idx = 0; idx<size; idx++)
 800633c:	2500      	movs	r5, #0
 800633e:	42b5      	cmp	r5, r6
 8006340:	db04      	blt.n	800634c <cliMemoryDump+0x4c>
}
 8006342:	b005      	add	sp, #20
 8006344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int idx, size = 16;
 8006348:	2610      	movs	r6, #16
 800634a:	e7ed      	b.n	8006328 <cliMemoryDump+0x28>
    if((idx%4) == 0)
 800634c:	f015 0803 	ands.w	r8, r5, #3
 8006350:	d103      	bne.n	800635a <cliMemoryDump+0x5a>
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8006352:	4639      	mov	r1, r7
 8006354:	481c      	ldr	r0, [pc, #112]	; (80063c8 <cliMemoryDump+0xc8>)
 8006356:	f7ff ff91 	bl	800627c <cliPrintf>
    cliPrintf(" 0x%08X", *(addr));
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	481b      	ldr	r0, [pc, #108]	; (80063cc <cliMemoryDump+0xcc>)
 800635e:	f7ff ff8d 	bl	800627c <cliPrintf>
    if ((idx%4) == 3)
 8006362:	f1b8 0f03 	cmp.w	r8, #3
 8006366:	d124      	bne.n	80063b2 <cliMemoryDump+0xb2>
      cliPrintf ("  |");
 8006368:	4819      	ldr	r0, [pc, #100]	; (80063d0 <cliMemoryDump+0xd0>)
 800636a:	f7ff ff87 	bl	800627c <cliPrintf>
            cliPrintf(".");
 800636e:	f8df a068 	ldr.w	sl, [pc, #104]	; 80063d8 <cliMemoryDump+0xd8>
 8006372:	f104 0310 	add.w	r3, r4, #16
            cliPrintf("%c", asc[i]);
 8006376:	f8df b064 	ldr.w	fp, [pc, #100]	; 80063dc <cliMemoryDump+0xdc>
 800637a:	9301      	str	r3, [sp, #4]
        for (i=0;i<4;i++)
 800637c:	f04f 0900 	mov.w	r9, #0
        memcpy((char *)asc, (char *)ascptr, 4);
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	f10d 080c 	add.w	r8, sp, #12
 8006386:	9303      	str	r3, [sp, #12]
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8006388:	f818 1b01 	ldrb.w	r1, [r8], #1
 800638c:	f1a1 0220 	sub.w	r2, r1, #32
 8006390:	2a5e      	cmp	r2, #94	; 0x5e
 8006392:	d811      	bhi.n	80063b8 <cliMemoryDump+0xb8>
            cliPrintf("%c", asc[i]);
 8006394:	4658      	mov	r0, fp
 8006396:	f7ff ff71 	bl	800627c <cliPrintf>
        for (i=0;i<4;i++)
 800639a:	f109 0901 	add.w	r9, r9, #1
 800639e:	f1b9 0f04 	cmp.w	r9, #4
 80063a2:	d1f1      	bne.n	8006388 <cliMemoryDump+0x88>
      for (idx1= 0; idx1< 4; idx1++)
 80063a4:	9b01      	ldr	r3, [sp, #4]
        ascptr+=1;
 80063a6:	3404      	adds	r4, #4
      for (idx1= 0; idx1< 4; idx1++)
 80063a8:	429c      	cmp	r4, r3
 80063aa:	d1e7      	bne.n	800637c <cliMemoryDump+0x7c>
      cliPrintf("|\n   ");
 80063ac:	4809      	ldr	r0, [pc, #36]	; (80063d4 <cliMemoryDump+0xd4>)
 80063ae:	f7ff ff65 	bl	800627c <cliPrintf>
    addr++;
 80063b2:	3704      	adds	r7, #4
  for (idx = 0; idx<size; idx++)
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7c2      	b.n	800633e <cliMemoryDump+0x3e>
            cliPrintf(".");
 80063b8:	4650      	mov	r0, sl
 80063ba:	f7ff ff5f 	bl	800627c <cliPrintf>
 80063be:	e7ec      	b.n	800639a <cliMemoryDump+0x9a>
 80063c0:	0800ee25 	.word	0x0800ee25
 80063c4:	0800ee55 	.word	0x0800ee55
 80063c8:	0800ee39 	.word	0x0800ee39
 80063cc:	0800ee43 	.word	0x0800ee43
 80063d0:	0800ee4b 	.word	0x0800ee4b
 80063d4:	0800ee54 	.word	0x0800ee54
 80063d8:	0800ee52 	.word	0x0800ee52
 80063dc:	0800ee4f 	.word	0x0800ee4f

080063e0 <cliMain>:
{
 80063e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (cli_node.is_open != true)
 80063e4:	4caa      	ldr	r4, [pc, #680]	; (8006690 <cliMain+0x2b0>)
{
 80063e6:	b085      	sub	sp, #20
  if (cli_node.is_open != true)
 80063e8:	7a26      	ldrb	r6, [r4, #8]
 80063ea:	2e00      	cmp	r6, #0
 80063ec:	f000 8149 	beq.w	8006682 <cliMain+0x2a2>
  if (uartAvailable(cli_node.ch) > 0)
 80063f0:	7820      	ldrb	r0, [r4, #0]
 80063f2:	f000 fb75 	bl	8006ae0 <uartAvailable>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f000 8143 	beq.w	8006682 <cliMain+0x2a2>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 80063fc:	7820      	ldrb	r0, [r4, #0]
 80063fe:	f000 fb85 	bl	8006b0c <uartRead>
  if (p_cli->state == CLI_RX_IDLE)
 8006402:	7c21      	ldrb	r1, [r4, #16]
 8006404:	f88d 0007 	strb.w	r0, [sp, #7]
 8006408:	2900      	cmp	r1, #0
 800640a:	f040 80ed 	bne.w	80065e8 <cliMain+0x208>
    switch(rx_data)
 800640e:	281b      	cmp	r0, #27
 8006410:	f000 8132 	beq.w	8006678 <cliMain+0x298>
 8006414:	d853      	bhi.n	80064be <cliMain+0xde>
 8006416:	2808      	cmp	r0, #8
 8006418:	f000 8100 	beq.w	800661c <cliMain+0x23c>
 800641c:	280d      	cmp	r0, #13
 800641e:	d06a      	beq.n	80064f6 <cliMain+0x116>
        if ((line->count + 1) < line->buf_len)
 8006420:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8006424:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
 8006428:	1c59      	adds	r1, r3, #1
 800642a:	4291      	cmp	r1, r2
 800642c:	f280 8126 	bge.w	800667c <cliMain+0x29c>
          if (line->cursor == line->count)
 8006430:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 8006434:	429a      	cmp	r2, r3
 8006436:	d119      	bne.n	800646c <cliMain+0x8c>
            uartWrite(p_cli->ch, &rx_data, 1);
 8006438:	2201      	movs	r2, #1
 800643a:	f10d 0107 	add.w	r1, sp, #7
 800643e:	7820      	ldrb	r0, [r4, #0]
 8006440:	f000 fb7c 	bl	8006b3c <uartWrite>
            line->buf[line->cursor] = rx_data;
 8006444:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 8006448:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800644c:	18a3      	adds	r3, r4, r2
            line->cursor++;
 800644e:	3201      	adds	r2, #1
 8006450:	f884 2245 	strb.w	r2, [r4, #581]	; 0x245
            line->buf[line->count] = 0;
 8006454:	2200      	movs	r2, #0
            line->buf[line->cursor] = rx_data;
 8006456:	f883 1224 	strb.w	r1, [r3, #548]	; 0x224
            line->count++;
 800645a:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 800645e:	3301      	adds	r3, #1
 8006460:	b2db      	uxtb	r3, r3
 8006462:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 8006466:	4423      	add	r3, r4
 8006468:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
          if (line->cursor < line->count)
 800646c:	f894 1245 	ldrb.w	r1, [r4, #581]	; 0x245
 8006470:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8006474:	4299      	cmp	r1, r3
 8006476:	f080 80b7 	bcs.w	80065e8 <cliMain+0x208>
            for (int i=0; i<mov_len; i++)
 800647a:	2500      	movs	r5, #0
            mov_len = line->count - line->cursor;
 800647c:	1a58      	subs	r0, r3, r1
 800647e:	f503 7209 	add.w	r2, r3, #548	; 0x224
 8006482:	b2c0      	uxtb	r0, r0
            for (int i=0; i<mov_len; i++)
 8006484:	4422      	add	r2, r4
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8006486:	f812 7c01 	ldrb.w	r7, [r2, #-1]
            for (int i=0; i<mov_len; i++)
 800648a:	3501      	adds	r5, #1
 800648c:	4285      	cmp	r5, r0
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 800648e:	f802 7901 	strb.w	r7, [r2], #-1
            for (int i=0; i<mov_len; i++)
 8006492:	dbf8      	blt.n	8006486 <cliMain+0xa6>
            line->buf[line->cursor] = rx_data;
 8006494:	1860      	adds	r0, r4, r1
            line->cursor++;
 8006496:	3101      	adds	r1, #1
 8006498:	f884 1245 	strb.w	r1, [r4, #581]	; 0x245
            line->buf[line->count] = 0;
 800649c:	2100      	movs	r1, #0
            line->count++;
 800649e:	3301      	adds	r3, #1
            line->buf[line->cursor] = rx_data;
 80064a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
            line->count++;
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 80064aa:	4423      	add	r3, r4
            line->buf[line->cursor] = rx_data;
 80064ac:	f880 2224 	strb.w	r2, [r0, #548]	; 0x224
            line->buf[line->count] = 0;
 80064b0:	f883 1224 	strb.w	r1, [r3, #548]	; 0x224
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80064b4:	7820      	ldrb	r0, [r4, #0]
 80064b6:	4977      	ldr	r1, [pc, #476]	; (8006694 <cliMain+0x2b4>)
 80064b8:	f000 fb5a 	bl	8006b70 <uartPrintf>
 80064bc:	e094      	b.n	80065e8 <cliMain+0x208>
    switch(rx_data)
 80064be:	287f      	cmp	r0, #127	; 0x7f
 80064c0:	d1ae      	bne.n	8006420 <cliMain+0x40>
        if (line->cursor < line->count)
 80064c2:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80064c6:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 80064ca:	429a      	cmp	r2, r3
 80064cc:	f080 80d6 	bcs.w	800667c <cliMain+0x29c>
          for (int i=1; i<mov_len; i++)
 80064d0:	2001      	movs	r0, #1
          mov_len = line->count - line->cursor;
 80064d2:	1a99      	subs	r1, r3, r2
 80064d4:	f502 7209 	add.w	r2, r2, #548	; 0x224
 80064d8:	b2c9      	uxtb	r1, r1
          for (int i=1; i<mov_len; i++)
 80064da:	4422      	add	r2, r4
 80064dc:	4288      	cmp	r0, r1
 80064de:	f2c0 8098 	blt.w	8006612 <cliMain+0x232>
          line->buf[line->count] = 0;
 80064e2:	2200      	movs	r2, #0
          line->count--;
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
          line->buf[line->count] = 0;
 80064ec:	4423      	add	r3, r4
          uartPrintf(p_cli->ch, "\x1B[1P");
 80064ee:	496a      	ldr	r1, [pc, #424]	; (8006698 <cliMain+0x2b8>)
          line->buf[line->count] = 0;
 80064f0:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
          uartPrintf(p_cli->ch, "\x1B[1P");
 80064f4:	e075      	b.n	80065e2 <cliMain+0x202>
        if (line->count > 0)
 80064f6:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d065      	beq.n	80065ca <cliMain+0x1ea>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 80064fe:	2323      	movs	r3, #35	; 0x23
 8006500:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
 8006504:	f504 7509 	add.w	r5, r4, #548	; 0x224
 8006508:	fb03 4302 	mla	r3, r3, r2, r4
 800650c:	f504 7c11 	add.w	ip, r4, #580	; 0x244
 8006510:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8006514:	462f      	mov	r7, r5
 8006516:	cf03      	ldmia	r7!, {r0, r1}
 8006518:	4567      	cmp	r7, ip
 800651a:	6018      	str	r0, [r3, #0]
 800651c:	6059      	str	r1, [r3, #4]
 800651e:	463d      	mov	r5, r7
 8006520:	f103 0308 	add.w	r3, r3, #8
 8006524:	d1f6      	bne.n	8006514 <cliMain+0x134>
 8006526:	8838      	ldrh	r0, [r7, #0]
 8006528:	78b9      	ldrb	r1, [r7, #2]
 800652a:	8018      	strh	r0, [r3, #0]
 800652c:	7099      	strb	r1, [r3, #2]
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800652e:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
  p_cli->argc = 0;
 8006532:	2700      	movs	r7, #0
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8006534:	2b03      	cmp	r3, #3
    p_cli->hist_line_count++;
 8006536:	bf9c      	itt	ls
 8006538:	3301      	addls	r3, #1
 800653a:	f884 3197 	strbls.w	r3, [r4, #407]	; 0x197
  p_cli->hist_line_new  = true;
 800653e:	2301      	movs	r3, #1
  p_cli->hist_line_i    = p_cli->hist_line_last;
 8006540:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8006544:	3201      	adds	r2, #1
 8006546:	f002 0203 	and.w	r2, r2, #3
 800654a:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800654e:	4953      	ldr	r1, [pc, #332]	; (800669c <cliMain+0x2bc>)
 8006550:	4853      	ldr	r0, [pc, #332]	; (80066a0 <cliMain+0x2c0>)
 8006552:	aa02      	add	r2, sp, #8
  p_cli->hist_line_new  = true;
 8006554:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
  p_cli->argc = 0;
 8006558:	f8a4 7112 	strh.w	r7, [r4, #274]	; 0x112
  argv[argc] = NULL;
 800655c:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8006560:	f006 f920 	bl	800c7a4 <strtok_r>
 8006564:	463b      	mov	r3, r7
 8006566:	4605      	mov	r5, r0
    argv[argc++] = tok;
 8006568:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80066b8 <cliMain+0x2d8>
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800656c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800669c <cliMain+0x2bc>
 8006570:	b29a      	uxth	r2, r3
 8006572:	1c5f      	adds	r7, r3, #1
 8006574:	2d00      	cmp	r5, #0
 8006576:	d13f      	bne.n	80065f8 <cliMain+0x218>
  p_cli->argc = argc;
 8006578:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
  if (argc > 0)
 800657c:	b32a      	cbz	r2, 80065ca <cliMain+0x1ea>
    cliPrintf("\r\n");
 800657e:	4849      	ldr	r0, [pc, #292]	; (80066a4 <cliMain+0x2c4>)
 8006580:	f7ff fe7c 	bl	800627c <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 8006584:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8006588:	f7ff fd65 	bl	8006056 <cliToUpper>
    for (int i=0; i<p_cli->cmd_count; i++)
 800658c:	4f40      	ldr	r7, [pc, #256]	; (8006690 <cliMain+0x2b0>)
 800658e:	f8b4 8248 	ldrh.w	r8, [r4, #584]	; 0x248
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8006592:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
    for (int i=0; i<p_cli->cmd_count; i++)
 8006596:	4545      	cmp	r5, r8
 8006598:	da17      	bge.n	80065ca <cliMain+0x1ea>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800659a:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 800659e:	4648      	mov	r0, r9
 80065a0:	f7fe fdd6 	bl	8005150 <strcmp>
 80065a4:	3714      	adds	r7, #20
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d131      	bne.n	800660e <cliMain+0x22e>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80065aa:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80065ae:	483e      	ldr	r0, [pc, #248]	; (80066a8 <cliMain+0x2c8>)
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80065b0:	3b01      	subs	r3, #1
 80065b2:	f8a4 338c 	strh.w	r3, [r4, #908]	; 0x38c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80065b6:	2314      	movs	r3, #20
 80065b8:	fb03 4505 	mla	r5, r3, r5, r4
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80065bc:	f8c4 0390 	str.w	r0, [r4, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80065c0:	f8d5 325c 	ldr.w	r3, [r5, #604]	; 0x25c
 80065c4:	f500 701d 	add.w	r0, r0, #628	; 0x274
 80065c8:	4798      	blx	r3
        line->count = 0;
 80065ca:	2300      	movs	r3, #0
  uartPrintf(p_cli->ch, "\n\r");
 80065cc:	4937      	ldr	r1, [pc, #220]	; (80066ac <cliMain+0x2cc>)
 80065ce:	7820      	ldrb	r0, [r4, #0]
        line->count = 0;
 80065d0:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
        line->cursor = 0;
 80065d4:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        line->buf[0] = 0;
 80065d8:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
  uartPrintf(p_cli->ch, "\n\r");
 80065dc:	f000 fac8 	bl	8006b70 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 80065e0:	4933      	ldr	r1, [pc, #204]	; (80066b0 <cliMain+0x2d0>)
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80065e2:	7820      	ldrb	r0, [r4, #0]
 80065e4:	f000 fac4 	bl	8006b70 <uartPrintf>
  switch(p_cli->state)
 80065e8:	7c23      	ldrb	r3, [r4, #16]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d845      	bhi.n	800667c <cliMain+0x29c>
 80065f0:	e8df f003 	tbb	[pc, r3]
 80065f4:	db644b42 	.word	0xdb644b42
    argv[argc++] = tok;
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80065fe:	4649      	mov	r1, r9
 8006600:	2000      	movs	r0, #0
 8006602:	aa02      	add	r2, sp, #8
 8006604:	f006 f8ce 	bl	800c7a4 <strtok_r>
 8006608:	463b      	mov	r3, r7
 800660a:	4605      	mov	r5, r0
 800660c:	e7b0      	b.n	8006570 <cliMain+0x190>
    for (int i=0; i<p_cli->cmd_count; i++)
 800660e:	3501      	adds	r5, #1
 8006610:	e7c1      	b.n	8006596 <cliMain+0x1b6>
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8006612:	7855      	ldrb	r5, [r2, #1]
          for (int i=1; i<mov_len; i++)
 8006614:	3001      	adds	r0, #1
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8006616:	f802 5b01 	strb.w	r5, [r2], #1
          for (int i=1; i<mov_len; i++)
 800661a:	e75f      	b.n	80064dc <cliMain+0xfc>
        if (line->count > 0 && line->cursor > 0)
 800661c:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 8006620:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 8006624:	b92a      	cbnz	r2, 8006632 <cliMain+0x252>
        if (line->cursor > 0)
 8006626:	b34b      	cbz	r3, 800667c <cliMain+0x29c>
          line->cursor--;
 8006628:	3b01      	subs	r3, #1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800662a:	4922      	ldr	r1, [pc, #136]	; (80066b4 <cliMain+0x2d4>)
          line->cursor--;
 800662c:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8006630:	e7d7      	b.n	80065e2 <cliMain+0x202>
        if (line->count > 0 && line->cursor > 0)
 8006632:	b31b      	cbz	r3, 800667c <cliMain+0x29c>
          if (line->cursor == line->count)
 8006634:	429a      	cmp	r2, r3
 8006636:	d106      	bne.n	8006646 <cliMain+0x266>
            line->count--;
 8006638:	1e5a      	subs	r2, r3, #1
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	f884 2246 	strb.w	r2, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 8006640:	4422      	add	r2, r4
 8006642:	f882 1224 	strb.w	r1, [r2, #548]	; 0x224
          if (line->cursor < line->count)
 8006646:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 800664a:	429a      	cmp	r2, r3
 800664c:	d9ec      	bls.n	8006628 <cliMain+0x248>
            for (int i=0; i<mov_len; i++)
 800664e:	2500      	movs	r5, #0
            mov_len = line->count - line->cursor;
 8006650:	1ad0      	subs	r0, r2, r3
 8006652:	f203 2123 	addw	r1, r3, #547	; 0x223
 8006656:	b2c0      	uxtb	r0, r0
            for (int i=0; i<mov_len; i++)
 8006658:	4421      	add	r1, r4
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800665a:	784f      	ldrb	r7, [r1, #1]
            for (int i=0; i<mov_len; i++)
 800665c:	3501      	adds	r5, #1
 800665e:	4285      	cmp	r5, r0
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8006660:	f801 7b01 	strb.w	r7, [r1], #1
            for (int i=0; i<mov_len; i++)
 8006664:	dbf9      	blt.n	800665a <cliMain+0x27a>
            line->buf[line->count] = 0;
 8006666:	2100      	movs	r1, #0
            line->count--;
 8006668:	3a01      	subs	r2, #1
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	f884 2246 	strb.w	r2, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 8006670:	4422      	add	r2, r4
 8006672:	f882 1224 	strb.w	r1, [r2, #548]	; 0x224
        if (line->cursor > 0)
 8006676:	e7d7      	b.n	8006628 <cliMain+0x248>
      p_cli->state = CLI_RX_SP2;
 8006678:	2302      	movs	r3, #2
      p_cli->state = CLI_RX_IDLE;
 800667a:	7423      	strb	r3, [r4, #16]
  cliShowLog(p_cli);
 800667c:	4804      	ldr	r0, [pc, #16]	; (8006690 <cliMain+0x2b0>)
 800667e:	f7ff fda1 	bl	80061c4 <cliShowLog>
}
 8006682:	4630      	mov	r0, r6
 8006684:	b005      	add	sp, #20
 8006686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p_cli->state = CLI_RX_SP3;
 800668a:	2303      	movs	r3, #3
 800668c:	e7f5      	b.n	800667a <cliMain+0x29a>
 800668e:	bf00      	nop
 8006690:	20002240 	.word	0x20002240
 8006694:	0800ee72 	.word	0x0800ee72
 8006698:	0800ee6d 	.word	0x0800ee6d
 800669c:	0800ee5a 	.word	0x0800ee5a
 80066a0:	20002464 	.word	0x20002464
 80066a4:	0800ee02 	.word	0x0800ee02
 80066a8:	20002358 	.word	0x20002358
 80066ac:	0800ee61 	.word	0x0800ee61
 80066b0:	0800ee64 	.word	0x0800ee64
 80066b4:	0800ee6a 	.word	0x0800ee6a
 80066b8:	20002354 	.word	0x20002354
      p_cli->state = CLI_RX_IDLE;
 80066bc:	2300      	movs	r3, #0
      if (rx_data == CLI_KEY_LEFT)
 80066be:	f89d 2007 	ldrb.w	r2, [sp, #7]
      p_cli->state = CLI_RX_IDLE;
 80066c2:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 80066c4:	2a44      	cmp	r2, #68	; 0x44
 80066c6:	d110      	bne.n	80066ea <cliMain+0x30a>
        if (line->cursor > 0)
 80066c8:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 80066cc:	b38b      	cbz	r3, 8006732 <cliMain+0x352>
          line->cursor--;
 80066ce:	3b01      	subs	r3, #1
 80066d0:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
          tx_buf[0] = 0x1B;
 80066d4:	f645 331b 	movw	r3, #23323	; 0x5b1b
          tx_buf[2] = rx_data;
 80066d8:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 80066dc:	7820      	ldrb	r0, [r4, #0]
 80066de:	2203      	movs	r2, #3
 80066e0:	a902      	add	r1, sp, #8
          tx_buf[0] = 0x1B;
 80066e2:	f8ad 3008 	strh.w	r3, [sp, #8]
          uartWrite(p_cli->ch, tx_buf, 3);
 80066e6:	f000 fa29 	bl	8006b3c <uartWrite>
      if (rx_data == CLI_KEY_RIGHT)
 80066ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80066ee:	2b43      	cmp	r3, #67	; 0x43
 80066f0:	d114      	bne.n	800671c <cliMain+0x33c>
        if (line->cursor < line->buf_len)
 80066f2:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 80066f6:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
        uartWrite(p_cli->ch, tx_buf, 3);
 80066fa:	7820      	ldrb	r0, [r4, #0]
        if (line->cursor < line->buf_len)
 80066fc:	429a      	cmp	r2, r3
          line->cursor++;
 80066fe:	bf84      	itt	hi
 8006700:	3301      	addhi	r3, #1
 8006702:	f884 3245 	strbhi.w	r3, [r4, #581]	; 0x245
        tx_buf[0] = 0x1B;
 8006706:	f645 331b 	movw	r3, #23323	; 0x5b1b
 800670a:	f8ad 3008 	strh.w	r3, [sp, #8]
        tx_buf[2] = rx_data;
 800670e:	2343      	movs	r3, #67	; 0x43
        uartWrite(p_cli->ch, tx_buf, 3);
 8006710:	2203      	movs	r2, #3
 8006712:	a902      	add	r1, sp, #8
        tx_buf[2] = rx_data;
 8006714:	f88d 300a 	strb.w	r3, [sp, #10]
        uartWrite(p_cli->ch, tx_buf, 3);
 8006718:	f000 fa10 	bl	8006b3c <uartWrite>
      if (rx_data == CLI_KEY_UP)
 800671c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006720:	2b41      	cmp	r3, #65	; 0x41
 8006722:	d106      	bne.n	8006732 <cliMain+0x352>
        cliLineChange(p_cli, true);
 8006724:	2001      	movs	r0, #1
 8006726:	f7ff fcef 	bl	8006108 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800672a:	4921      	ldr	r1, [pc, #132]	; (80067b0 <cliMain+0x3d0>)
 800672c:	7820      	ldrb	r0, [r4, #0]
 800672e:	f000 fa1f 	bl	8006b70 <uartPrintf>
      if (rx_data == CLI_KEY_DOWN)
 8006732:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006736:	2b42      	cmp	r3, #66	; 0x42
 8006738:	d106      	bne.n	8006748 <cliMain+0x368>
        cliLineChange(p_cli, false);
 800673a:	2000      	movs	r0, #0
 800673c:	f7ff fce4 	bl	8006108 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8006740:	491b      	ldr	r1, [pc, #108]	; (80067b0 <cliMain+0x3d0>)
 8006742:	7820      	ldrb	r0, [r4, #0]
 8006744:	f000 fa14 	bl	8006b70 <uartPrintf>
      if (rx_data == CLI_KEY_HOME)
 8006748:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800674c:	2b31      	cmp	r3, #49	; 0x31
 800674e:	d10a      	bne.n	8006766 <cliMain+0x386>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8006750:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 8006754:	4917      	ldr	r1, [pc, #92]	; (80067b4 <cliMain+0x3d4>)
 8006756:	7820      	ldrb	r0, [r4, #0]
 8006758:	f000 fa0a 	bl	8006b70 <uartPrintf>
        line->cursor = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        p_cli->state = CLI_RX_SP4;
 8006762:	2304      	movs	r3, #4
 8006764:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_END)
 8006766:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800676a:	2b34      	cmp	r3, #52	; 0x34
 800676c:	d186      	bne.n	800667c <cliMain+0x29c>
        if (line->cursor < line->count)
 800676e:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 8006772:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 8006776:	4293      	cmp	r3, r2
 8006778:	d205      	bcs.n	8006786 <cliMain+0x3a6>
          mov_len = line->count - line->cursor;
 800677a:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 800677c:	490e      	ldr	r1, [pc, #56]	; (80067b8 <cliMain+0x3d8>)
 800677e:	7820      	ldrb	r0, [r4, #0]
 8006780:	b292      	uxth	r2, r2
 8006782:	f000 f9f5 	bl	8006b70 <uartPrintf>
        if (line->cursor > line->count)
 8006786:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 800678a:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 800678e:	429a      	cmp	r2, r3
 8006790:	d905      	bls.n	800679e <cliMain+0x3be>
          mov_len = line->cursor - line->count;
 8006792:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8006794:	4907      	ldr	r1, [pc, #28]	; (80067b4 <cliMain+0x3d4>)
 8006796:	7820      	ldrb	r0, [r4, #0]
 8006798:	b292      	uxth	r2, r2
 800679a:	f000 f9e9 	bl	8006b70 <uartPrintf>
        line->cursor = line->count;
 800679e:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 80067a2:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        p_cli->state = CLI_RX_SP4;
 80067a6:	2304      	movs	r3, #4
 80067a8:	e767      	b.n	800667a <cliMain+0x29a>
      p_cli->state = CLI_RX_IDLE;
 80067aa:	2300      	movs	r3, #0
 80067ac:	e765      	b.n	800667a <cliMain+0x29a>
 80067ae:	bf00      	nop
 80067b0:	20002464 	.word	0x20002464
 80067b4:	0800ed68 	.word	0x0800ed68
 80067b8:	0800ee7d 	.word	0x0800ee7d

080067bc <cliKeepLoop>:
{
 80067bc:	b508      	push	{r3, lr}
  if (uartAvailable(p_cli->ch) == 0)
 80067be:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <cliKeepLoop+0x14>)
 80067c0:	7818      	ldrb	r0, [r3, #0]
 80067c2:	f000 f98d 	bl	8006ae0 <uartAvailable>
}
 80067c6:	fab0 f080 	clz	r0, r0
 80067ca:	0940      	lsrs	r0, r0, #5
 80067cc:	bd08      	pop	{r3, pc}
 80067ce:	bf00      	nop
 80067d0:	20002240 	.word	0x20002240

080067d4 <cliAdd>:
{
 80067d4:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80067d6:	4d0e      	ldr	r5, [pc, #56]	; (8006810 <cliAdd+0x3c>)
{
 80067d8:	460e      	mov	r6, r1
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80067da:	f8b5 3248 	ldrh.w	r3, [r5, #584]	; 0x248
 80067de:	2b0f      	cmp	r3, #15
 80067e0:	d814      	bhi.n	800680c <cliAdd+0x38>
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80067e2:	2414      	movs	r4, #20
 80067e4:	435c      	muls	r4, r3
 80067e6:	f504 7313 	add.w	r3, r4, #588	; 0x24c
 80067ea:	442b      	add	r3, r5
 80067ec:	4601      	mov	r1, r0
  p_cli->cmd_list[index].cmd_func = p_func;
 80067ee:	442c      	add	r4, r5
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80067f0:	4618      	mov	r0, r3
 80067f2:	f005 f93d 	bl	800ba70 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80067f6:	f8c4 625c 	str.w	r6, [r4, #604]	; 0x25c
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80067fa:	f7ff fc2c 	bl	8006056 <cliToUpper>
  return ret;
 80067fe:	2001      	movs	r0, #1
  p_cli->cmd_count++;
 8006800:	f8b5 3248 	ldrh.w	r3, [r5, #584]	; 0x248
 8006804:	3301      	adds	r3, #1
 8006806:	f8a5 3248 	strh.w	r3, [r5, #584]	; 0x248
}
 800680a:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 800680c:	2000      	movs	r0, #0
 800680e:	e7fc      	b.n	800680a <cliAdd+0x36>
 8006810:	20002240 	.word	0x20002240

08006814 <cliInit>:
{
 8006814:	b508      	push	{r3, lr}
  cli_node.cmd_args.getData  = cliArgsGetData;
 8006816:	4911      	ldr	r1, [pc, #68]	; (800685c <cliInit+0x48>)
  cli_node.is_open = false;
 8006818:	4b11      	ldr	r3, [pc, #68]	; (8006860 <cliInit+0x4c>)
 800681a:	2200      	movs	r2, #0
  cli_node.cmd_args.getData  = cliArgsGetData;
 800681c:	f8c3 1394 	str.w	r1, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8006820:	4910      	ldr	r1, [pc, #64]	; (8006864 <cliInit+0x50>)
  cli_node.is_open = false;
 8006822:	811a      	strh	r2, [r3, #8]
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8006824:	f8c3 1398 	str.w	r1, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8006828:	490f      	ldr	r1, [pc, #60]	; (8006868 <cliInit+0x54>)
  cli_node.hist_line_new   = false;
 800682a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800682e:	f8c3 139c 	str.w	r1, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8006832:	490e      	ldr	r1, [pc, #56]	; (800686c <cliInit+0x58>)
  cliAdd("help", cliShowList);
 8006834:	480e      	ldr	r0, [pc, #56]	; (8006870 <cliInit+0x5c>)
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8006836:	f8c3 13a0 	str.w	r1, [r3, #928]	; 0x3a0
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800683a:	211f      	movs	r1, #31
 800683c:	f8a3 1244 	strh.w	r1, [r3, #580]	; 0x244
  cliAdd("help", cliShowList);
 8006840:	490c      	ldr	r1, [pc, #48]	; (8006874 <cliInit+0x60>)
  cli_node.state   = CLI_RX_IDLE;
 8006842:	741a      	strb	r2, [r3, #16]
  p_cli->line.count   = 0;
 8006844:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.buf[0]  = 0;
 8006848:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
  cliAdd("help", cliShowList);
 800684c:	f7ff ffc2 	bl	80067d4 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8006850:	4909      	ldr	r1, [pc, #36]	; (8006878 <cliInit+0x64>)
 8006852:	480a      	ldr	r0, [pc, #40]	; (800687c <cliInit+0x68>)
 8006854:	f7ff ffbe 	bl	80067d4 <cliAdd>
}
 8006858:	2001      	movs	r0, #1
 800685a:	bd08      	pop	{r3, pc}
 800685c:	080060e5 	.word	0x080060e5
 8006860:	20002240 	.word	0x20002240
 8006864:	080060c5 	.word	0x080060c5
 8006868:	0800607d 	.word	0x0800607d
 800686c:	08006099 	.word	0x08006099
 8006870:	0800ee83 	.word	0x0800ee83
 8006874:	080062b1 	.word	0x080062b1
 8006878:	08006301 	.word	0x08006301
 800687c:	0800ee88 	.word	0x0800ee88

08006880 <flashInit>:
//내부에서 쓰는 함수이므로 static 선언을 통해 외부로 사용되지 않게 막음
static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);


bool flashInit(void)
{
 8006880:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  for (int i = 0; i < FLASH_SECTOR_MAX; i++)
  {
    flash_tbl[i].addr   = 0x8000000 + i * 1024;
    flash_tbl[i].length = 1024;
 8006884:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006888:	4a05      	ldr	r2, [pc, #20]	; (80068a0 <flashInit+0x20>)
  for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 800688a:	4906      	ldr	r1, [pc, #24]	; (80068a4 <flashInit+0x24>)
    flash_tbl[i].addr   = 0x8000000 + i * 1024;
 800688c:	6013      	str	r3, [r2, #0]
    flash_tbl[i].length = 1024;
 800688e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8006892:	428b      	cmp	r3, r1
    flash_tbl[i].length = 1024;
 8006894:	8090      	strh	r0, [r2, #4]
  for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8006896:	f102 0208 	add.w	r2, r2, #8
 800689a:	d1f7      	bne.n	800688c <flashInit+0xc>
  }

  return true;

}
 800689c:	2001      	movs	r0, #1
 800689e:	4770      	bx	lr
 80068a0:	20000388 	.word	0x20000388
 80068a4:	08010000 	.word	0x08010000

080068a8 <ledOff.part.0>:

void ledOff(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80068a8:	4b02      	ldr	r3, [pc, #8]	; (80068b4 <ledOff.part.0+0xc>)
 80068aa:	79da      	ldrb	r2, [r3, #7]
 80068ac:	8899      	ldrh	r1, [r3, #4]
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	f001 bb9e 	b.w	8007ff0 <HAL_GPIO_WritePin>
 80068b4:	20000004 	.word	0x20000004

080068b8 <ledInit>:
{
 80068b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ba:	2401      	movs	r4, #1
 80068bc:	2300      	movs	r3, #0
 80068be:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068c2:	2302      	movs	r3, #2
 80068c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80068c6:	4b08      	ldr	r3, [pc, #32]	; (80068e8 <ledInit+0x30>)
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80068c8:	4669      	mov	r1, sp
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80068ca:	889a      	ldrh	r2, [r3, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80068cc:	6818      	ldr	r0, [r3, #0]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80068ce:	9200      	str	r2, [sp, #0]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80068d0:	f001 fa44 	bl	8007d5c <HAL_GPIO_Init>
  if (ch >= LED_MAX_CH) return;
 80068d4:	f7ff ffe8 	bl	80068a8 <ledOff.part.0>
  cliAdd("led", cliLed);
 80068d8:	4904      	ldr	r1, [pc, #16]	; (80068ec <ledInit+0x34>)
 80068da:	4805      	ldr	r0, [pc, #20]	; (80068f0 <ledInit+0x38>)
 80068dc:	f7ff ff7a 	bl	80067d4 <cliAdd>
}
 80068e0:	4620      	mov	r0, r4
 80068e2:	b004      	add	sp, #16
 80068e4:	bd10      	pop	{r4, pc}
 80068e6:	bf00      	nop
 80068e8:	20000004 	.word	0x20000004
 80068ec:	08006909 	.word	0x08006909
 80068f0:	0800ee8b 	.word	0x0800ee8b

080068f4 <ledToggle>:
}


void ledToggle(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;
 80068f4:	b920      	cbnz	r0, 8006900 <ledToggle+0xc>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80068f6:	4b03      	ldr	r3, [pc, #12]	; (8006904 <ledToggle+0x10>)
 80068f8:	8899      	ldrh	r1, [r3, #4]
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	f001 bb7d 	b.w	8007ffa <HAL_GPIO_TogglePin>
}
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000004 	.word	0x20000004

08006908 <cliLed>:
void cliLed(cli_args_t *args)
{
  bool ret = false;


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8006908:	8803      	ldrh	r3, [r0, #0]
{
 800690a:	b570      	push	{r4, r5, r6, lr}
  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 800690c:	2b03      	cmp	r3, #3
{
 800690e:	4605      	mov	r5, r0
  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8006910:	d122      	bne.n	8006958 <cliLed+0x50>
 8006912:	6943      	ldr	r3, [r0, #20]
 8006914:	4913      	ldr	r1, [pc, #76]	; (8006964 <cliLed+0x5c>)
 8006916:	2000      	movs	r0, #0
 8006918:	4798      	blx	r3
 800691a:	b1e8      	cbz	r0, 8006958 <cliLed+0x50>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = args->getData(1);
 800691c:	68ab      	ldr	r3, [r5, #8]
 800691e:	2001      	movs	r0, #1
 8006920:	4798      	blx	r3
    toggle_time = args->getData(2);
 8006922:	68ab      	ldr	r3, [r5, #8]
    led_ch      = args->getData(1);
 8006924:	b2c4      	uxtb	r4, r0
    toggle_time = args->getData(2);
 8006926:	2002      	movs	r0, #2
 8006928:	4798      	blx	r3
 800692a:	4606      	mov	r6, r0

    if (led_ch > 0)
 800692c:	b10c      	cbz	r4, 8006932 <cliLed+0x2a>
    {
      led_ch--;
 800692e:	3c01      	subs	r4, #1
 8006930:	b2e4      	uxtb	r4, r4
    }

    pre_time = millis();
 8006932:	f7ff fa0b 	bl	8005d4c <millis>
 8006936:	4605      	mov	r5, r0
    while(cliKeepLoop())
 8006938:	f7ff ff40 	bl	80067bc <cliKeepLoop>
 800693c:	b900      	cbnz	r0, 8006940 <cliLed+0x38>

  if (ret != true)
  {
    cliPrintf("led toggle ch[1~%d] time(ms)\n", LED_MAX_CH);
  }
}
 800693e:	bd70      	pop	{r4, r5, r6, pc}
      if (millis()-pre_time >= toggle_time)
 8006940:	f7ff fa04 	bl	8005d4c <millis>
 8006944:	1b40      	subs	r0, r0, r5
 8006946:	4286      	cmp	r6, r0
 8006948:	d8f6      	bhi.n	8006938 <cliLed+0x30>
        pre_time = millis();
 800694a:	f7ff f9ff 	bl	8005d4c <millis>
 800694e:	4605      	mov	r5, r0
        ledToggle(led_ch);
 8006950:	4620      	mov	r0, r4
 8006952:	f7ff ffcf 	bl	80068f4 <ledToggle>
 8006956:	e7ef      	b.n	8006938 <cliLed+0x30>
    cliPrintf("led toggle ch[1~%d] time(ms)\n", LED_MAX_CH);
 8006958:	2101      	movs	r1, #1
}
 800695a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cliPrintf("led toggle ch[1~%d] time(ms)\n", LED_MAX_CH);
 800695e:	4802      	ldr	r0, [pc, #8]	; (8006968 <cliLed+0x60>)
 8006960:	f7ff bc8c 	b.w	800627c <cliPrintf>
 8006964:	0800ee8f 	.word	0x0800ee8f
 8006968:	0800ee96 	.word	0x0800ee96

0800696c <resetInit>:

static uint32_t reset_count = 0;


bool resetInit(void)
{
 800696c:	b508      	push	{r3, lr}
  bool ret = true;

  //만약 Reset Pin이 눌렸다면
  if (RCC->CSR & (1<<26))
 800696e:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <resetInit+0x38>)
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	015b      	lsls	r3, r3, #5
 8006974:	d50f      	bpl.n	8006996 <resetInit+0x2a>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8006976:	2001      	movs	r0, #1
 8006978:	f000 f82e 	bl	80069d8 <rtcBackupRegRead>
 800697c:	1c41      	adds	r1, r0, #1
 800697e:	2001      	movs	r0, #1
 8006980:	f000 f830 	bl	80069e4 <rtcBackupRegWrite>
    delay(1000);
 8006984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006988:	f7ff f9d1 	bl	8005d2e <delay>
    reset_count = rtcBackupRegRead(1);
 800698c:	2001      	movs	r0, #1
 800698e:	f000 f823 	bl	80069d8 <rtcBackupRegRead>
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <resetInit+0x3c>)
 8006994:	6018      	str	r0, [r3, #0]
  }

  rtcBackupRegWrite(1, 0);
 8006996:	2100      	movs	r1, #0
 8006998:	2001      	movs	r0, #1
 800699a:	f000 f823 	bl	80069e4 <rtcBackupRegWrite>

  return ret;
}
 800699e:	2001      	movs	r0, #1
 80069a0:	bd08      	pop	{r3, pc}
 80069a2:	bf00      	nop
 80069a4:	40021000 	.word	0x40021000
 80069a8:	20000588 	.word	0x20000588

080069ac <rtcInit>:

static RTC_HandleTypeDef hrtc;


bool rtcInit(void)
{
 80069ac:	b508      	push	{r3, lr}
  bool ret = true;

  hrtc.Instance          = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80069ae:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance          = RTC;
 80069b2:	4807      	ldr	r0, [pc, #28]	; (80069d0 <rtcInit+0x24>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80069b4:	4a07      	ldr	r2, [pc, #28]	; (80069d4 <rtcInit+0x28>)
 80069b6:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.OutPut       = RTC_OUTPUTSOURCE_ALARM;
 80069ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069be:	6083      	str	r3, [r0, #8]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80069c0:	f002 fd80 	bl	80094c4 <HAL_RTC_Init>
 80069c4:	b108      	cbz	r0, 80069ca <rtcInit+0x1e>
  {
    Error_Handler();
 80069c6:	f7ff fa55 	bl	8005e74 <Error_Handler>
  }
  return ret;
}
 80069ca:	2001      	movs	r0, #1
 80069cc:	bd08      	pop	{r3, pc}
 80069ce:	bf00      	nop
 80069d0:	2000058c 	.word	0x2000058c
 80069d4:	40002800 	.word	0x40002800

080069d8 <rtcBackupRegRead>:


uint32_t rtcBackupRegRead(uint32_t index)
{
 80069d8:	4601      	mov	r1, r0
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80069da:	4801      	ldr	r0, [pc, #4]	; (80069e0 <rtcBackupRegRead+0x8>)
 80069dc:	f002 bdc8 	b.w	8009570 <HAL_RTCEx_BKUPRead>
 80069e0:	2000058c 	.word	0x2000058c

080069e4 <rtcBackupRegWrite>:
}


void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80069e4:	460a      	mov	r2, r1
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80069e6:	4601      	mov	r1, r0
 80069e8:	4801      	ldr	r0, [pc, #4]	; (80069f0 <rtcBackupRegWrite+0xc>)
 80069ea:	f002 bdb9 	b.w	8009560 <HAL_RTCEx_BKUPWrite>
 80069ee:	bf00      	nop
 80069f0:	2000058c 	.word	0x2000058c

080069f4 <HAL_RTC_MspInit>:
}


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80069f4:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 80069f6:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <HAL_RTC_MspInit+0x30>)
 80069f8:	6802      	ldr	r2, [r0, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d10e      	bne.n	8006a1c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80069fe:	f002 f993 	bl	8008d28 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8006a02:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <HAL_RTC_MspInit+0x34>)
 8006a04:	69da      	ldr	r2, [r3, #28]
 8006a06:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006a0a:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006a0c:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8006a18:	4b04      	ldr	r3, [pc, #16]	; (8006a2c <HAL_RTC_MspInit+0x38>)
 8006a1a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006a1c:	b003      	add	sp, #12
 8006a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a22:	bf00      	nop
 8006a24:	40002800 	.word	0x40002800
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	4242043c 	.word	0x4242043c

08006a30 <uartInit>:
  {
    is_open[i] = false;
  }

  return true;
}
 8006a30:	2001      	movs	r0, #1
 8006a32:	4770      	bx	lr

08006a34 <uartOpen>:


bool uartOpen(uint8_t ch, uint32_t baud)
{
 8006a34:	b573      	push	{r0, r1, r4, r5, r6, lr}
  bool ret = false;

  switch(ch)
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d040      	beq.n	8006abc <uartOpen+0x88>
 8006a3a:	2801      	cmp	r0, #1
 8006a3c:	d140      	bne.n	8006ac0 <uartOpen+0x8c>
      is_open[ch] = true;
      ret = true;
      break;

    case _DEF_UART2:
      huart1.Instance             = USART1;
 8006a3e:	4d22      	ldr	r5, [pc, #136]	; (8006ac8 <uartOpen+0x94>)
 8006a40:	4b22      	ldr	r3, [pc, #136]	; (8006acc <uartOpen+0x98>)
      huart1.Init.BaudRate        = baud;
      huart1.Init.WordLength      = UART_WORDLENGTH_8B;
 8006a42:	2400      	movs	r4, #0
      huart1.Init.BaudRate        = baud;
 8006a44:	e9c5 3100 	strd	r3, r1, [r5]
      huart1.Init.StopBits        = UART_STOPBITS_1;
      huart1.Init.Parity          = UART_PARITY_NONE;
      huart1.Init.Mode            = UART_MODE_TX_RX;
 8006a48:	230c      	movs	r3, #12
      huart1.Init.HwFlowCtl       = UART_HWCONTROL_NONE;
      huart1.Init.OverSampling    = UART_OVERSAMPLING_16;

      HAL_UART_DeInit(&huart1);

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8006a4a:	4e21      	ldr	r6, [pc, #132]	; (8006ad0 <uartOpen+0x9c>)
      HAL_UART_DeInit(&huart1);
 8006a4c:	4628      	mov	r0, r5
      huart1.Init.HwFlowCtl       = UART_HWCONTROL_NONE;
 8006a4e:	e9c5 3405 	strd	r3, r4, [r5, #20]
      huart1.Init.StopBits        = UART_STOPBITS_1;
 8006a52:	e9c5 4402 	strd	r4, r4, [r5, #8]
      huart1.Init.Parity          = UART_PARITY_NONE;
 8006a56:	612c      	str	r4, [r5, #16]
      huart1.Init.OverSampling    = UART_OVERSAMPLING_16;
 8006a58:	61ec      	str	r4, [r5, #28]
      HAL_UART_DeInit(&huart1);
 8006a5a:	f002 fe37 	bl	80096cc <HAL_UART_DeInit>
      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8006a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a62:	491c      	ldr	r1, [pc, #112]	; (8006ad4 <uartOpen+0xa0>)
 8006a64:	f106 0010 	add.w	r0, r6, #16
 8006a68:	f7ff facb 	bl	8006002 <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8006a6c:	4b1a      	ldr	r3, [pc, #104]	; (8006ad8 <uartOpen+0xa4>)

      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006a6e:	4621      	mov	r1, r4
      __HAL_RCC_DMA1_CLK_ENABLE();
 8006a70:	695a      	ldr	r2, [r3, #20]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006a72:	200f      	movs	r0, #15
      __HAL_RCC_DMA1_CLK_ENABLE();
 8006a74:	f042 0201 	orr.w	r2, r2, #1
 8006a78:	615a      	str	r2, [r3, #20]
 8006a7a:	695b      	ldr	r3, [r3, #20]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006a7c:	4622      	mov	r2, r4
      __HAL_RCC_DMA1_CLK_ENABLE();
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	9301      	str	r3, [sp, #4]
 8006a84:	9b01      	ldr	r3, [sp, #4]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006a86:	f000 ff77 	bl	8007978 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006a8a:	200f      	movs	r0, #15
 8006a8c:	f000 ffa6 	bl	80079dc <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8006a90:	4628      	mov	r0, r5
 8006a92:	f002 fded 	bl	8009670 <HAL_UART_Init>
 8006a96:	b9a8      	cbnz	r0, 8006ac4 <uartOpen+0x90>
      {
        ret = true;
        is_open[ch] = true;


        if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8006a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	490d      	ldr	r1, [pc, #52]	; (8006ad4 <uartOpen+0xa0>)
 8006aa0:	f003 f872 	bl	8009b88 <HAL_UART_Receive_DMA>
 8006aa4:	fab0 f080 	clz	r0, r0
        {
          ret = false;
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <uartOpen+0xa8>)
        if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8006aaa:	0940      	lsrs	r0, r0, #5
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	69b3      	ldr	r3, [r6, #24]
 8006ab2:	1a9b      	subs	r3, r3, r2
        qbuffer[ch].out = qbuffer[ch].in;
 8006ab4:	e9c6 3304 	strd	r3, r3, [r6, #16]
      break;
  }

  return ret;

}
 8006ab8:	b002      	add	sp, #8
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
  switch(ch)
 8006abc:	2001      	movs	r0, #1
 8006abe:	e7fb      	b.n	8006ab8 <uartOpen+0x84>
  bool ret = false;
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e7f9      	b.n	8006ab8 <uartOpen+0x84>
        ret = false;
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	e7f7      	b.n	8006ab8 <uartOpen+0x84>
 8006ac8:	20002628 	.word	0x20002628
 8006acc:	40013800 	.word	0x40013800
 8006ad0:	200005a0 	.word	0x200005a0
 8006ad4:	200005c0 	.word	0x200005c0
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	200025e4 	.word	0x200025e4

08006ae0 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
 8006ae0:	b118      	cbz	r0, 8006aea <uartAvailable+0xa>
 8006ae2:	2801      	cmp	r0, #1
 8006ae4:	d003      	beq.n	8006aee <uartAvailable+0xe>
      ret = qbufferAvailable(&qbuffer[ch]);
      break;
  }

  return ret;
}
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	4770      	bx	lr
      ret = cdcAvailable();
 8006aea:	f004 bc83 	b.w	800b3f4 <cdcAvailable>
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <uartAvailable+0x24>)
 8006af0:	4805      	ldr	r0, [pc, #20]	; (8006b08 <uartAvailable+0x28>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	6983      	ldr	r3, [r0, #24]
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	f840 3f10 	str.w	r3, [r0, #16]!
      ret = qbufferAvailable(&qbuffer[ch]);
 8006afe:	f7ff baa1 	b.w	8006044 <qbufferAvailable>
 8006b02:	bf00      	nop
 8006b04:	200025e4 	.word	0x200025e4
 8006b08:	200005a0 	.word	0x200005a0

08006b0c <uartRead>:


uint8_t  uartRead(uint8_t ch)
{
 8006b0c:	b507      	push	{r0, r1, r2, lr}
  uint8_t ret;

  switch(ch)
 8006b0e:	4602      	mov	r2, r0
 8006b10:	b130      	cbz	r0, 8006b20 <uartRead+0x14>
 8006b12:	2801      	cmp	r0, #1
 8006b14:	d009      	beq.n	8006b2a <uartRead+0x1e>
      break;
  }

  return ret;

}
 8006b16:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006b1a:	b003      	add	sp, #12
 8006b1c:	f85d fb04 	ldr.w	pc, [sp], #4
      ret = cdcRead();
 8006b20:	f004 fc7a 	bl	800b418 <cdcRead>
 8006b24:	f88d 0007 	strb.w	r0, [sp, #7]
      break;
 8006b28:	e7f5      	b.n	8006b16 <uartRead+0xa>
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8006b2a:	f10d 0107 	add.w	r1, sp, #7
 8006b2e:	4802      	ldr	r0, [pc, #8]	; (8006b38 <uartRead+0x2c>)
 8006b30:	f7ff fa6e 	bl	8006010 <qbufferRead>
      break;
 8006b34:	e7ef      	b.n	8006b16 <uartRead+0xa>
 8006b36:	bf00      	nop
 8006b38:	200005b0 	.word	0x200005b0

08006b3c <uartWrite>:


uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	b510      	push	{r4, lr}
 8006b40:	4608      	mov	r0, r1
 8006b42:	4614      	mov	r4, r2
  uint32_t ret = 0;
  HAL_StatusTypeDef status;

  switch(ch)
 8006b44:	b123      	cbz	r3, 8006b50 <uartWrite+0x14>
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d007      	beq.n	8006b5a <uartWrite+0x1e>
 8006b4a:	2400      	movs	r4, #0
        ret = length;
      }
      break;
  }
  return ret;
}
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	bd10      	pop	{r4, pc}
      ret = cdcWrite(p_data, length);
 8006b50:	4611      	mov	r1, r2
}
 8006b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ret = cdcWrite(p_data, length);
 8006b56:	f004 bceb 	b.w	800b530 <cdcWrite>
      status =  HAL_UART_Transmit(&huart1, p_data, length, 100);
 8006b5a:	2364      	movs	r3, #100	; 0x64
 8006b5c:	4803      	ldr	r0, [pc, #12]	; (8006b6c <uartWrite+0x30>)
 8006b5e:	b292      	uxth	r2, r2
 8006b60:	f002 fdcd 	bl	80096fe <HAL_UART_Transmit>
      if (status == HAL_OK)
 8006b64:	2800      	cmp	r0, #0
  uint32_t ret = 0;
 8006b66:	bf18      	it	ne
 8006b68:	2400      	movne	r4, #0
 8006b6a:	e7ef      	b.n	8006b4c <uartWrite+0x10>
 8006b6c:	20002628 	.word	0x20002628

08006b70 <uartPrintf>:


uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8006b70:	b40e      	push	{r1, r2, r3}
 8006b72:	b510      	push	{r4, lr}
 8006b74:	b0c3      	sub	sp, #268	; 0x10c
 8006b76:	ab45      	add	r3, sp, #276	; 0x114
 8006b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b7c:	4604      	mov	r4, r0
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
  len = vsnprintf(buf, 256, fmt, args);
 8006b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b82:	a802      	add	r0, sp, #8
  va_start(args, fmt);
 8006b84:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf, 256, fmt, args);
 8006b86:	f005 fec3 	bl	800c910 <vsniprintf>

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8006b8a:	a902      	add	r1, sp, #8
  len = vsnprintf(buf, 256, fmt, args);
 8006b8c:	4602      	mov	r2, r0
  ret = uartWrite(ch, (uint8_t *)buf, len);
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f7ff ffd4 	bl	8006b3c <uartWrite>

  va_end(args);

  return ret;
}
 8006b94:	b043      	add	sp, #268	; 0x10c
 8006b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b9a:	b003      	add	sp, #12
 8006b9c:	4770      	bx	lr

08006b9e <HAL_UART_ErrorCallback>:
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_UART_RxCpltCallback>:
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif /* 0 */
}
 8006ba0:	4770      	bx	lr
	...

08006ba4 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006baa:	2210      	movs	r2, #16
 8006bac:	2100      	movs	r1, #0
 8006bae:	a802      	add	r0, sp, #8
 8006bb0:	f004 fee0 	bl	800b974 <memset>
  if(uartHandle->Instance==USART1)
 8006bb4:	6832      	ldr	r2, [r6, #0]
 8006bb6:	4b25      	ldr	r3, [pc, #148]	; (8006c4c <HAL_UART_MspInit+0xa8>)
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d144      	bne.n	8006c46 <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006bbc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8006bc0:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bc2:	4823      	ldr	r0, [pc, #140]	; (8006c50 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bc8:	619a      	str	r2, [r3, #24]
 8006bca:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bcc:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8006bce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006bd2:	9200      	str	r2, [sp, #0]
 8006bd4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bd6:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bd8:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bda:	f042 0204 	orr.w	r2, r2, #4
 8006bde:	619a      	str	r2, [r3, #24]
 8006be0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006be2:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	9301      	str	r3, [sp, #4]
 8006bec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bf8:	f001 f8b0 	bl	8007d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c00:	4813      	ldr	r0, [pc, #76]	; (8006c50 <HAL_UART_MspInit+0xac>)
 8006c02:	a902      	add	r1, sp, #8

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006c04:	4c13      	ldr	r4, [pc, #76]	; (8006c54 <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c06:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c0a:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c0c:	f001 f8a6 	bl	8007d5c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006c10:	4b11      	ldr	r3, [pc, #68]	; (8006c58 <HAL_UART_MspInit+0xb4>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006c12:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c14:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c18:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c1a:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006c1e:	2320      	movs	r3, #32
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c20:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006c22:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c26:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006c28:	f000 ff10 	bl	8007a4c <HAL_DMA_Init>
 8006c2c:	b108      	cbz	r0, 8006c32 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8006c2e:	f7ff f921 	bl	8005e74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006c32:	2200      	movs	r2, #0
 8006c34:	2025      	movs	r0, #37	; 0x25
 8006c36:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006c38:	63b4      	str	r4, [r6, #56]	; 0x38
 8006c3a:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006c3c:	f000 fe9c 	bl	8007978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006c40:	2025      	movs	r0, #37	; 0x25
 8006c42:	f000 fecb 	bl	80079dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006c46:	b006      	add	sp, #24
 8006c48:	bd70      	pop	{r4, r5, r6, pc}
 8006c4a:	bf00      	nop
 8006c4c:	40013800 	.word	0x40013800
 8006c50:	40010800 	.word	0x40010800
 8006c54:	200025e4 	.word	0x200025e4
 8006c58:	40020058 	.word	0x40020058

08006c5c <HAL_UART_MspDeInit>:


void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 8006c5c:	6802      	ldr	r2, [r0, #0]
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <HAL_UART_MspDeInit+0x34>)
{
 8006c60:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 8006c62:	429a      	cmp	r2, r3
{
 8006c64:	4604      	mov	r4, r0
  if(uartHandle->Instance==USART1)
 8006c66:	d111      	bne.n	8006c8c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006c68:	4a0a      	ldr	r2, [pc, #40]	; (8006c94 <HAL_UART_MspDeInit+0x38>)

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006c6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 8006c6e:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006c70:	4809      	ldr	r0, [pc, #36]	; (8006c98 <HAL_UART_MspDeInit+0x3c>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8006c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c76:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006c78:	f001 f94c 	bl	8007f14 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006c7c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006c7e:	f000 ff13 	bl	8007aa8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006c86:	2025      	movs	r0, #37	; 0x25
 8006c88:	f000 beb6 	b.w	80079f8 <HAL_NVIC_DisableIRQ>
}
 8006c8c:	bd10      	pop	{r4, pc}
 8006c8e:	bf00      	nop
 8006c90:	40013800 	.word	0x40013800
 8006c94:	40021000 	.word	0x40021000
 8006c98:	40010800 	.word	0x40010800

08006c9c <usbInit>:




bool usbInit(void)
{
 8006c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool ret =true;

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006c9e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8006ca2:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca4:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006ca6:	e9cd 6300 	strd	r6, r3, [sp]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006caa:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cac:	4c0e      	ldr	r4, [pc, #56]	; (8006ce8 <usbInit+0x4c>)
 8006cae:	4669      	mov	r1, sp
 8006cb0:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb2:	e9cd 5302 	strd	r5, r3, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cb6:	f001 f851 	bl	8007d5c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8006cba:	462a      	mov	r2, r5
 8006cbc:	4631      	mov	r1, r6
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f001 f996 	bl	8007ff0 <HAL_GPIO_WritePin>
  delay(200);
 8006cc4:	20c8      	movs	r0, #200	; 0xc8
 8006cc6:	f7ff f832 	bl	8005d2e <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4631      	mov	r1, r6
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f001 f98e 	bl	8007ff0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	4669      	mov	r1, sp
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cd8:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cda:	f001 f83f 	bl	8007d5c <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 8006cde:	f004 fb1b 	bl	800b318 <MX_USB_DEVICE_Init>

  return ret;
}
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	b004      	add	sp, #16
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	40010800 	.word	0x40010800

08006cec <hwInit>:




void hwInit(void)
{
 8006cec:	b508      	push	{r3, lr}
  bspInit();
 8006cee:	f7ff f87d 	bl	8005dec <bspInit>
  cliInit();
 8006cf2:	f7ff fd8f 	bl	8006814 <cliInit>

  rtcInit();
 8006cf6:	f7ff fe59 	bl	80069ac <rtcInit>
  resetInit();
 8006cfa:	f7ff fe37 	bl	800696c <resetInit>
  ledInit();
 8006cfe:	f7ff fddb 	bl	80068b8 <ledInit>
  usbInit();
 8006d02:	f7ff ffcb 	bl	8006c9c <usbInit>
  uartInit();
 8006d06:	f7ff fe93 	bl	8006a30 <uartInit>
  flashInit();
}
 8006d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flashInit();
 8006d0e:	f7ff bdb7 	b.w	8006880 <flashInit>

08006d12 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d12:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006d14:	f000 f9ea 	bl	80070ec <vTaskStartScheduler>
  
  return osOK;
}
 8006d18:	2000      	movs	r0, #0
 8006d1a:	bd08      	pop	{r3, pc}

08006d1c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d1c:	b530      	push	{r4, r5, lr}
 8006d1e:	4604      	mov	r4, r0

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d20:	8a22      	ldrh	r2, [r4, #16]
 8006d22:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
{
 8006d26:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8006d28:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d2a:	bf0c      	ite	eq
 8006d2c:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8006d2e:	3403      	addne	r4, #3
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d30:	ad03      	add	r5, sp, #12
{
 8006d32:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d34:	e9d0 1000 	ldrd	r1, r0, [r0]
 8006d38:	e9cd 4500 	strd	r4, r5, [sp]
 8006d3c:	f000 f8e8 	bl	8006f10 <xTaskCreate>
 8006d40:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8006d42:	bf14      	ite	ne
 8006d44:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 8006d46:	9803      	ldreq	r0, [sp, #12]
}
 8006d48:	b005      	add	sp, #20
 8006d4a:	bd30      	pop	{r4, r5, pc}

08006d4c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d4c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d4e:	2801      	cmp	r0, #1
 8006d50:	bf38      	it	cc
 8006d52:	2001      	movcc	r0, #1
 8006d54:	f000 fb16 	bl	8007384 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d58:	2000      	movs	r0, #0
 8006d5a:	bd08      	pop	{r3, pc}

08006d5c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006d5c:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006d5e:	f000 fb6f 	bl	8007440 <xTaskGetSchedulerState>
 8006d62:	2801      	cmp	r0, #1
 8006d64:	d003      	beq.n	8006d6e <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8006d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006d6a:	f000 bc2b 	b.w	80075c4 <xPortSysTickHandler>
}
 8006d6e:	bd08      	pop	{r3, pc}

08006d70 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d70:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d74:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d78:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d7c:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d7e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d84:	4770      	bx	lr

08006d86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d8a:	4770      	bx	lr

08006d8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d8c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d8e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8006d90:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d92:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d98:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006d9a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d9c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006d9e:	3301      	adds	r3, #1
 8006da0:	6003      	str	r3, [r0, #0]
}
 8006da2:	4770      	bx	lr

08006da4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006da4:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006da6:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006da8:	1c63      	adds	r3, r4, #1
 8006daa:	d10a      	bne.n	8006dc2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dac:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006db2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006db4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006db6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006db8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006dba:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	6003      	str	r3, [r0, #0]
}
 8006dc0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dc2:	f100 0208 	add.w	r2, r0, #8
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	6852      	ldr	r2, [r2, #4]
 8006dca:	6815      	ldr	r5, [r2, #0]
 8006dcc:	42a5      	cmp	r5, r4
 8006dce:	d9fa      	bls.n	8006dc6 <vListInsert+0x22>
 8006dd0:	e7ed      	b.n	8006dae <vListInsert+0xa>

08006dd2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006dd2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dd4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8006dd8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006dda:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ddc:	6859      	ldr	r1, [r3, #4]
 8006dde:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006de0:	bf08      	it	eq
 8006de2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006de4:	2200      	movs	r2, #0
 8006de6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	3a01      	subs	r2, #1
 8006dec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006dee:	6818      	ldr	r0, [r3, #0]
}
 8006df0:	4770      	bx	lr
	...

08006df4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006df4:	4a06      	ldr	r2, [pc, #24]	; (8006e10 <prvResetNextTaskUnblockTime+0x1c>)
 8006df6:	6813      	ldr	r3, [r2, #0]
 8006df8:	6819      	ldr	r1, [r3, #0]
 8006dfa:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <prvResetNextTaskUnblockTime+0x20>)
 8006dfc:	b919      	cbnz	r1, 8006e06 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dfe:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e02:	601a      	str	r2, [r3, #0]
	}
}
 8006e04:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e0a:	68d2      	ldr	r2, [r2, #12]
 8006e0c:	6852      	ldr	r2, [r2, #4]
 8006e0e:	e7f8      	b.n	8006e02 <prvResetNextTaskUnblockTime+0xe>
 8006e10:	200006c4 	.word	0x200006c4
 8006e14:	2000079c 	.word	0x2000079c

08006e18 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e1a:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e1c:	4f1b      	ldr	r7, [pc, #108]	; (8006e8c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8006e1e:	681c      	ldr	r4, [r3, #0]
{
 8006e20:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e22:	6838      	ldr	r0, [r7, #0]
{
 8006e24:	460e      	mov	r6, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e26:	3004      	adds	r0, #4
 8006e28:	f7ff ffd3 	bl	8006dd2 <uxListRemove>
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	b940      	cbnz	r0, 8006e42 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	4817      	ldr	r0, [pc, #92]	; (8006e90 <prvAddCurrentTaskToDelayedList+0x78>)
 8006e34:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 8006e36:	2101      	movs	r1, #1
 8006e38:	6802      	ldr	r2, [r0, #0]
 8006e3a:	40b9      	lsls	r1, r7
 8006e3c:	ea22 0201 	bic.w	r2, r2, r1
 8006e40:	6002      	str	r2, [r0, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e42:	1c6a      	adds	r2, r5, #1
 8006e44:	d107      	bne.n	8006e56 <prvAddCurrentTaskToDelayedList+0x3e>
 8006e46:	b136      	cbz	r6, 8006e56 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e48:	6819      	ldr	r1, [r3, #0]
 8006e4a:	4812      	ldr	r0, [pc, #72]	; (8006e94 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006e4c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e52:	f7ff bf9b 	b.w	8006d8c <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	1964      	adds	r4, r4, r5
 8006e5a:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8006e5c:	d307      	bcc.n	8006e6e <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e5e:	4a0e      	ldr	r2, [pc, #56]	; (8006e98 <prvAddCurrentTaskToDelayedList+0x80>)
 8006e60:	6810      	ldr	r0, [r2, #0]
 8006e62:	6819      	ldr	r1, [r3, #0]
}
 8006e64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e68:	3104      	adds	r1, #4
 8006e6a:	f7ff bf9b 	b.w	8006da4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e6e:	4a0b      	ldr	r2, [pc, #44]	; (8006e9c <prvAddCurrentTaskToDelayedList+0x84>)
 8006e70:	6810      	ldr	r0, [r2, #0]
 8006e72:	6819      	ldr	r1, [r3, #0]
 8006e74:	3104      	adds	r1, #4
 8006e76:	f7ff ff95 	bl	8006da4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e7a:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <prvAddCurrentTaskToDelayedList+0x88>)
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006e80:	bf88      	it	hi
 8006e82:	601c      	strhi	r4, [r3, #0]
}
 8006e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e86:	bf00      	nop
 8006e88:	200007e4 	.word	0x200007e4
 8006e8c:	200006c0 	.word	0x200006c0
 8006e90:	2000076c 	.word	0x2000076c
 8006e94:	200007bc 	.word	0x200007bc
 8006e98:	200006c8 	.word	0x200006c8
 8006e9c:	200006c4 	.word	0x200006c4
 8006ea0:	2000079c 	.word	0x2000079c

08006ea4 <prvIdleTask>:
{
 8006ea4:	b580      	push	{r7, lr}
				taskYIELD();
 8006ea6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8006f0c <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006eaa:	4f14      	ldr	r7, [pc, #80]	; (8006efc <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eac:	4c14      	ldr	r4, [pc, #80]	; (8006f00 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8006eae:	4e15      	ldr	r6, [pc, #84]	; (8006f04 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	b963      	cbnz	r3, 8006ece <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006eb4:	4b14      	ldr	r3, [pc, #80]	; (8006f08 <prvIdleTask+0x64>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d9f8      	bls.n	8006eae <prvIdleTask+0xa>
				taskYIELD();
 8006ebc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ec0:	f8c8 3000 	str.w	r3, [r8]
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	e7ee      	b.n	8006eac <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8006ece:	f000 fb21 	bl	8007514 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed6:	1d28      	adds	r0, r5, #4
 8006ed8:	f7ff ff7b 	bl	8006dd2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006edc:	6833      	ldr	r3, [r6, #0]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8006ee8:	f000 fb36 	bl	8007558 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8006eec:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8006eee:	f000 fc9f 	bl	8007830 <vPortFree>
			vPortFree( pxTCB );
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 fc9c 	bl	8007830 <vPortFree>
	}
 8006ef8:	e7da      	b.n	8006eb0 <prvIdleTask+0xc>
 8006efa:	bf00      	nop
 8006efc:	200007d0 	.word	0x200007d0
 8006f00:	2000075c 	.word	0x2000075c
 8006f04:	20000758 	.word	0x20000758
 8006f08:	200006cc 	.word	0x200006cc
 8006f0c:	e000ed04 	.word	0xe000ed04

08006f10 <xTaskCreate>:
	{
 8006f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f14:	0095      	lsls	r5, r2, #2
	{
 8006f16:	4607      	mov	r7, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f18:	4628      	mov	r0, r5
	{
 8006f1a:	460e      	mov	r6, r1
 8006f1c:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f1e:	f000 fbfd 	bl	800771c <pvPortMalloc>
			if( pxStack != NULL )
 8006f22:	4681      	mov	r9, r0
 8006f24:	2800      	cmp	r0, #0
 8006f26:	f000 80ab 	beq.w	8007080 <xTaskCreate+0x170>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006f2a:	205c      	movs	r0, #92	; 0x5c
 8006f2c:	f000 fbf6 	bl	800771c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006f30:	4604      	mov	r4, r0
 8006f32:	2800      	cmp	r0, #0
 8006f34:	f000 80a1 	beq.w	800707a <xTaskCreate+0x16a>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f38:	462a      	mov	r2, r5
					pxNewTCB->pxStack = pxStack;
 8006f3a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f3e:	21a5      	movs	r1, #165	; 0xa5
 8006f40:	4648      	mov	r0, r9
 8006f42:	f004 fd17 	bl	800b974 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006f46:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f4a:	1e73      	subs	r3, r6, #1
 8006f4c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8006f50:	360f      	adds	r6, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f52:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006f56:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8006f5a:	7819      	ldrb	r1, [r3, #0]
 8006f5c:	b109      	cbz	r1, 8006f62 <xTaskCreate+0x52>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f5e:	42b3      	cmp	r3, r6
 8006f60:	d1f7      	bne.n	8006f52 <xTaskCreate+0x42>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f62:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006f64:	f04f 0a00 	mov.w	sl, #0
 8006f68:	2e06      	cmp	r6, #6
 8006f6a:	bf28      	it	cs
 8006f6c:	2606      	movcs	r6, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f6e:	f104 0904 	add.w	r9, r4, #4
 8006f72:	4648      	mov	r0, r9
		pxNewTCB->uxMutexesHeld = 0;
 8006f74:	e9c4 6a13 	strd	r6, sl, [r4, #76]	; 0x4c
	pxNewTCB->uxPriority = uxPriority;
 8006f78:	62e6      	str	r6, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f7a:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006f7e:	3d04      	subs	r5, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f80:	f7ff ff01 	bl	8006d86 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f84:	f1c6 0607 	rsb	r6, r6, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f88:	f104 0018 	add.w	r0, r4, #24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006f8c:	445d      	add	r5, fp
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f8e:	f7ff fefa 	bl	8006d86 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006f92:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f96:	4642      	mov	r2, r8
 8006f98:	4639      	mov	r1, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f9a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f9c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f9e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fa0:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fa4:	f025 0007 	bic.w	r0, r5, #7
 8006fa8:	f000 fa8a 	bl	80074c0 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 8006fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fae:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006fb0:	b103      	cbz	r3, 8006fb4 <xTaskCreate+0xa4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fb2:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8006fb4:	f000 faae 	bl	8007514 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006fb8:	4b38      	ldr	r3, [pc, #224]	; (800709c <xTaskCreate+0x18c>)
		if( pxCurrentTCB == NULL )
 8006fba:	4e39      	ldr	r6, [pc, #228]	; (80070a0 <xTaskCreate+0x190>)
		uxCurrentNumberOfTasks++;
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4f39      	ldr	r7, [pc, #228]	; (80070a4 <xTaskCreate+0x194>)
 8006fc0:	3201      	adds	r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006fc4:	6832      	ldr	r2, [r6, #0]
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	d15d      	bne.n	8007086 <xTaskCreate+0x176>
			pxCurrentTCB = pxNewTCB;
 8006fca:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d12b      	bne.n	800702a <xTaskCreate+0x11a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fd2:	4835      	ldr	r0, [pc, #212]	; (80070a8 <xTaskCreate+0x198>)
 8006fd4:	f7ff fecc 	bl	8006d70 <vListInitialise>
 8006fd8:	4834      	ldr	r0, [pc, #208]	; (80070ac <xTaskCreate+0x19c>)
 8006fda:	f7ff fec9 	bl	8006d70 <vListInitialise>
 8006fde:	4834      	ldr	r0, [pc, #208]	; (80070b0 <xTaskCreate+0x1a0>)
 8006fe0:	f7ff fec6 	bl	8006d70 <vListInitialise>
 8006fe4:	4833      	ldr	r0, [pc, #204]	; (80070b4 <xTaskCreate+0x1a4>)
 8006fe6:	f7ff fec3 	bl	8006d70 <vListInitialise>
 8006fea:	4833      	ldr	r0, [pc, #204]	; (80070b8 <xTaskCreate+0x1a8>)
 8006fec:	f7ff fec0 	bl	8006d70 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8006ff0:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80070e8 <xTaskCreate+0x1d8>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ff4:	4831      	ldr	r0, [pc, #196]	; (80070bc <xTaskCreate+0x1ac>)
 8006ff6:	f7ff febb 	bl	8006d70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ffa:	4d31      	ldr	r5, [pc, #196]	; (80070c0 <xTaskCreate+0x1b0>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ffc:	4831      	ldr	r0, [pc, #196]	; (80070c4 <xTaskCreate+0x1b4>)
 8006ffe:	f7ff feb7 	bl	8006d70 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8007002:	4640      	mov	r0, r8
 8007004:	f7ff feb4 	bl	8006d70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007008:	4628      	mov	r0, r5
 800700a:	f7ff feb1 	bl	8006d70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800700e:	482e      	ldr	r0, [pc, #184]	; (80070c8 <xTaskCreate+0x1b8>)
 8007010:	f7ff feae 	bl	8006d70 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007014:	482d      	ldr	r0, [pc, #180]	; (80070cc <xTaskCreate+0x1bc>)
 8007016:	f7ff feab 	bl	8006d70 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800701a:	482d      	ldr	r0, [pc, #180]	; (80070d0 <xTaskCreate+0x1c0>)
 800701c:	f7ff fea8 	bl	8006d70 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007020:	4b2c      	ldr	r3, [pc, #176]	; (80070d4 <xTaskCreate+0x1c4>)
 8007022:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007026:	4b2c      	ldr	r3, [pc, #176]	; (80070d8 <xTaskCreate+0x1c8>)
 8007028:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800702a:	2501      	movs	r5, #1
		uxTaskNumber++;
 800702c:	4a2b      	ldr	r2, [pc, #172]	; (80070dc <xTaskCreate+0x1cc>)
		prvAddTaskToReadyList( pxNewTCB );
 800702e:	492c      	ldr	r1, [pc, #176]	; (80070e0 <xTaskCreate+0x1d0>)
		uxTaskNumber++;
 8007030:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007032:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8007034:	3301      	adds	r3, #1
 8007036:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007038:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800703a:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800703c:	fa05 f302 	lsl.w	r3, r5, r2
 8007040:	4303      	orrs	r3, r0
 8007042:	2014      	movs	r0, #20
 8007044:	600b      	str	r3, [r1, #0]
 8007046:	4b18      	ldr	r3, [pc, #96]	; (80070a8 <xTaskCreate+0x198>)
 8007048:	4649      	mov	r1, r9
 800704a:	fb00 3002 	mla	r0, r0, r2, r3
 800704e:	f7ff fe9d 	bl	8006d8c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007052:	f000 fa81 	bl	8007558 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	b163      	cbz	r3, 8007074 <xTaskCreate+0x164>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800705a:	6833      	ldr	r3, [r6, #0]
 800705c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007060:	429a      	cmp	r2, r3
 8007062:	d207      	bcs.n	8007074 <xTaskCreate+0x164>
			taskYIELD_IF_USING_PREEMPTION();
 8007064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007068:	4b1e      	ldr	r3, [pc, #120]	; (80070e4 <xTaskCreate+0x1d4>)
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	f3bf 8f6f 	isb	sy
	}
 8007074:	4628      	mov	r0, r5
 8007076:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800707a:	4648      	mov	r0, r9
 800707c:	f000 fbd8 	bl	8007830 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007080:	f04f 35ff 	mov.w	r5, #4294967295
 8007084:	e7f6      	b.n	8007074 <xTaskCreate+0x164>
			if( xSchedulerRunning == pdFALSE )
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1ce      	bne.n	800702a <xTaskCreate+0x11a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800708c:	6833      	ldr	r3, [r6, #0]
 800708e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007092:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007094:	bf28      	it	cs
 8007096:	6034      	strcs	r4, [r6, #0]
 8007098:	e7c7      	b.n	800702a <xTaskCreate+0x11a>
 800709a:	bf00      	nop
 800709c:	20000758 	.word	0x20000758
 80070a0:	200006c0 	.word	0x200006c0
 80070a4:	200007b8 	.word	0x200007b8
 80070a8:	200006cc 	.word	0x200006cc
 80070ac:	200006e0 	.word	0x200006e0
 80070b0:	200006f4 	.word	0x200006f4
 80070b4:	20000708 	.word	0x20000708
 80070b8:	2000071c 	.word	0x2000071c
 80070bc:	20000730 	.word	0x20000730
 80070c0:	20000784 	.word	0x20000784
 80070c4:	20000744 	.word	0x20000744
 80070c8:	200007a4 	.word	0x200007a4
 80070cc:	200007d0 	.word	0x200007d0
 80070d0:	200007bc 	.word	0x200007bc
 80070d4:	200006c4 	.word	0x200006c4
 80070d8:	200006c8 	.word	0x200006c8
 80070dc:	20000768 	.word	0x20000768
 80070e0:	2000076c 	.word	0x2000076c
 80070e4:	e000ed04 	.word	0xe000ed04
 80070e8:	20000770 	.word	0x20000770

080070ec <vTaskStartScheduler>:
{
 80070ec:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80070ee:	2400      	movs	r4, #0
 80070f0:	4b16      	ldr	r3, [pc, #88]	; (800714c <vTaskStartScheduler+0x60>)
 80070f2:	2280      	movs	r2, #128	; 0x80
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	4916      	ldr	r1, [pc, #88]	; (8007150 <vTaskStartScheduler+0x64>)
 80070f8:	4623      	mov	r3, r4
 80070fa:	4816      	ldr	r0, [pc, #88]	; (8007154 <vTaskStartScheduler+0x68>)
 80070fc:	9400      	str	r4, [sp, #0]
 80070fe:	f7ff ff07 	bl	8006f10 <xTaskCreate>
	if( xReturn == pdPASS )
 8007102:	2801      	cmp	r0, #1
 8007104:	d114      	bne.n	8007130 <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007116:	f04f 32ff 	mov.w	r2, #4294967295
 800711a:	4b0f      	ldr	r3, [pc, #60]	; (8007158 <vTaskStartScheduler+0x6c>)
 800711c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800711e:	4b0f      	ldr	r3, [pc, #60]	; (800715c <vTaskStartScheduler+0x70>)
 8007120:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007122:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <vTaskStartScheduler+0x74>)
 8007124:	601c      	str	r4, [r3, #0]
}
 8007126:	b002      	add	sp, #8
 8007128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800712c:	f000 ba7a 	b.w	8007624 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007130:	3001      	adds	r0, #1
 8007132:	d108      	bne.n	8007146 <vTaskStartScheduler+0x5a>
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	e7fe      	b.n	8007144 <vTaskStartScheduler+0x58>
}
 8007146:	b002      	add	sp, #8
 8007148:	bd10      	pop	{r4, pc}
 800714a:	bf00      	nop
 800714c:	20000798 	.word	0x20000798
 8007150:	0800eeb4 	.word	0x0800eeb4
 8007154:	08006ea5 	.word	0x08006ea5
 8007158:	2000079c 	.word	0x2000079c
 800715c:	200007b8 	.word	0x200007b8
 8007160:	200007e4 	.word	0x200007e4

08007164 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007164:	4a02      	ldr	r2, [pc, #8]	; (8007170 <vTaskSuspendAll+0xc>)
 8007166:	6813      	ldr	r3, [r2, #0]
 8007168:	3301      	adds	r3, #1
 800716a:	6013      	str	r3, [r2, #0]
}
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	20000764 	.word	0x20000764

08007174 <xTaskIncrementTick>:
{
 8007174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007178:	4b3c      	ldr	r3, [pc, #240]	; (800726c <xTaskIncrementTick+0xf8>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d16e      	bne.n	800725e <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007180:	4b3b      	ldr	r3, [pc, #236]	; (8007270 <xTaskIncrementTick+0xfc>)
 8007182:	681d      	ldr	r5, [r3, #0]
 8007184:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007186:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007188:	b9bd      	cbnz	r5, 80071ba <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800718a:	4b3a      	ldr	r3, [pc, #232]	; (8007274 <xTaskIncrementTick+0x100>)
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	b142      	cbz	r2, 80071a4 <xTaskIncrementTick+0x30>
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	e7fe      	b.n	80071a2 <xTaskIncrementTick+0x2e>
 80071a4:	4a34      	ldr	r2, [pc, #208]	; (8007278 <xTaskIncrementTick+0x104>)
 80071a6:	6819      	ldr	r1, [r3, #0]
 80071a8:	6810      	ldr	r0, [r2, #0]
 80071aa:	6018      	str	r0, [r3, #0]
 80071ac:	6011      	str	r1, [r2, #0]
 80071ae:	4a33      	ldr	r2, [pc, #204]	; (800727c <xTaskIncrementTick+0x108>)
 80071b0:	6813      	ldr	r3, [r2, #0]
 80071b2:	3301      	adds	r3, #1
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	f7ff fe1d 	bl	8006df4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071ba:	4e31      	ldr	r6, [pc, #196]	; (8007280 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 80071bc:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071be:	6833      	ldr	r3, [r6, #0]
 80071c0:	4f30      	ldr	r7, [pc, #192]	; (8007284 <xTaskIncrementTick+0x110>)
 80071c2:	42ab      	cmp	r3, r5
 80071c4:	d910      	bls.n	80071e8 <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071c6:	4b30      	ldr	r3, [pc, #192]	; (8007288 <xTaskIncrementTick+0x114>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071cc:	2314      	movs	r3, #20
 80071ce:	4353      	muls	r3, r2
 80071d0:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	bf28      	it	cs
 80071d6:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 80071d8:	4b2c      	ldr	r3, [pc, #176]	; (800728c <xTaskIncrementTick+0x118>)
 80071da:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80071dc:	2b00      	cmp	r3, #0
}
 80071de:	bf0c      	ite	eq
 80071e0:	4620      	moveq	r0, r4
 80071e2:	2001      	movne	r0, #1
 80071e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071e8:	f8df a088 	ldr.w	sl, [pc, #136]	; 8007274 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80071ec:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8007294 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071f0:	f8da 3000 	ldr.w	r3, [sl]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	b91b      	cbnz	r3, 8007200 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071f8:	f04f 33ff 	mov.w	r3, #4294967295
 80071fc:	6033      	str	r3, [r6, #0]
					break;
 80071fe:	e7e2      	b.n	80071c6 <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007200:	f8da 3000 	ldr.w	r3, [sl]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800720a:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800720e:	4295      	cmp	r5, r2
 8007210:	d201      	bcs.n	8007216 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8007212:	6032      	str	r2, [r6, #0]
						break;
 8007214:	e7d7      	b.n	80071c6 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007216:	f10b 0804 	add.w	r8, fp, #4
 800721a:	4640      	mov	r0, r8
 800721c:	f7ff fdd9 	bl	8006dd2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007220:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8007224:	b11a      	cbz	r2, 800722e <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007226:	f10b 0018 	add.w	r0, fp, #24
 800722a:	f7ff fdd2 	bl	8006dd2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800722e:	2201      	movs	r2, #1
 8007230:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8007234:	f8d9 3000 	ldr.w	r3, [r9]
 8007238:	4082      	lsls	r2, r0
 800723a:	431a      	orrs	r2, r3
 800723c:	f8c9 2000 	str.w	r2, [r9]
 8007240:	2214      	movs	r2, #20
 8007242:	4641      	mov	r1, r8
 8007244:	fb02 7000 	mla	r0, r2, r0, r7
 8007248:	f7ff fda0 	bl	8006d8c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800724c:	4b0e      	ldr	r3, [pc, #56]	; (8007288 <xTaskIncrementTick+0x114>)
 800724e:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8007256:	429a      	cmp	r2, r3
 8007258:	bf28      	it	cs
 800725a:	2401      	movcs	r4, #1
 800725c:	e7c8      	b.n	80071f0 <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 800725e:	4a0c      	ldr	r2, [pc, #48]	; (8007290 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8007260:	2400      	movs	r4, #0
		++uxPendedTicks;
 8007262:	6813      	ldr	r3, [r2, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	e7b6      	b.n	80071d8 <xTaskIncrementTick+0x64>
 800726a:	bf00      	nop
 800726c:	20000764 	.word	0x20000764
 8007270:	200007e4 	.word	0x200007e4
 8007274:	200006c4 	.word	0x200006c4
 8007278:	200006c8 	.word	0x200006c8
 800727c:	200007a0 	.word	0x200007a0
 8007280:	2000079c 	.word	0x2000079c
 8007284:	200006cc 	.word	0x200006cc
 8007288:	200006c0 	.word	0x200006c0
 800728c:	200007e8 	.word	0x200007e8
 8007290:	20000760 	.word	0x20000760
 8007294:	2000076c 	.word	0x2000076c

08007298 <xTaskResumeAll>:
{
 8007298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800729c:	4c30      	ldr	r4, [pc, #192]	; (8007360 <xTaskResumeAll+0xc8>)
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	b943      	cbnz	r3, 80072b4 <xTaskResumeAll+0x1c>
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	e7fe      	b.n	80072b2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80072b4:	f000 f92e 	bl	8007514 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072be:	6824      	ldr	r4, [r4, #0]
 80072c0:	b12c      	cbz	r4, 80072ce <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80072c2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80072c4:	f000 f948 	bl	8007558 <vPortExitCritical>
}
 80072c8:	4620      	mov	r0, r4
 80072ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072ce:	4b25      	ldr	r3, [pc, #148]	; (8007364 <xTaskResumeAll+0xcc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d0f5      	beq.n	80072c2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072d6:	4d24      	ldr	r5, [pc, #144]	; (8007368 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80072d8:	4e24      	ldr	r6, [pc, #144]	; (800736c <xTaskResumeAll+0xd4>)
 80072da:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8007380 <xTaskResumeAll+0xe8>
 80072de:	e01f      	b.n	8007320 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80072e0:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 80072e2:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80072e4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072e6:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072ea:	f104 0018 	add.w	r0, r4, #24
 80072ee:	f7ff fd70 	bl	8006dd2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072f2:	4648      	mov	r0, r9
 80072f4:	f7ff fd6d 	bl	8006dd2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072f8:	2014      	movs	r0, #20
 80072fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80072fc:	6831      	ldr	r1, [r6, #0]
 80072fe:	fa07 f302 	lsl.w	r3, r7, r2
 8007302:	430b      	orrs	r3, r1
 8007304:	fb00 8002 	mla	r0, r0, r2, r8
 8007308:	4649      	mov	r1, r9
 800730a:	6033      	str	r3, [r6, #0]
 800730c:	f7ff fd3e 	bl	8006d8c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007310:	4b17      	ldr	r3, [pc, #92]	; (8007370 <xTaskResumeAll+0xd8>)
 8007312:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	429a      	cmp	r2, r3
 800731a:	d301      	bcc.n	8007320 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 800731c:	4b15      	ldr	r3, [pc, #84]	; (8007374 <xTaskResumeAll+0xdc>)
 800731e:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1dc      	bne.n	80072e0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8007326:	b10c      	cbz	r4, 800732c <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8007328:	f7ff fd64 	bl	8006df4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800732c:	4d12      	ldr	r5, [pc, #72]	; (8007378 <xTaskResumeAll+0xe0>)
 800732e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007330:	b144      	cbz	r4, 8007344 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8007332:	2701      	movs	r7, #1
 8007334:	4e0f      	ldr	r6, [pc, #60]	; (8007374 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8007336:	f7ff ff1d 	bl	8007174 <xTaskIncrementTick>
 800733a:	b100      	cbz	r0, 800733e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800733c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800733e:	3c01      	subs	r4, #1
 8007340:	d1f9      	bne.n	8007336 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8007342:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007344:	4b0b      	ldr	r3, [pc, #44]	; (8007374 <xTaskResumeAll+0xdc>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0ba      	beq.n	80072c2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800734c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <xTaskResumeAll+0xe4>)
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800735c:	2401      	movs	r4, #1
 800735e:	e7b1      	b.n	80072c4 <xTaskResumeAll+0x2c>
 8007360:	20000764 	.word	0x20000764
 8007364:	20000758 	.word	0x20000758
 8007368:	200007a4 	.word	0x200007a4
 800736c:	2000076c 	.word	0x2000076c
 8007370:	200006c0 	.word	0x200006c0
 8007374:	200007e8 	.word	0x200007e8
 8007378:	20000760 	.word	0x20000760
 800737c:	e000ed04 	.word	0xe000ed04
 8007380:	200006cc 	.word	0x200006cc

08007384 <vTaskDelay>:
	{
 8007384:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007386:	b940      	cbnz	r0, 800739a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8007388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800738c:	4b0d      	ldr	r3, [pc, #52]	; (80073c4 <vTaskDelay+0x40>)
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	f3bf 8f6f 	isb	sy
	}
 8007398:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800739a:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <vTaskDelay+0x44>)
 800739c:	6819      	ldr	r1, [r3, #0]
 800739e:	b141      	cbz	r1, 80073b2 <vTaskDelay+0x2e>
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	e7fe      	b.n	80073b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80073b2:	f7ff fed7 	bl	8007164 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073b6:	f7ff fd2f 	bl	8006e18 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80073ba:	f7ff ff6d 	bl	8007298 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80073be:	2800      	cmp	r0, #0
 80073c0:	d0e2      	beq.n	8007388 <vTaskDelay+0x4>
 80073c2:	e7e9      	b.n	8007398 <vTaskDelay+0x14>
 80073c4:	e000ed04 	.word	0xe000ed04
 80073c8:	20000764 	.word	0x20000764

080073cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073cc:	4b17      	ldr	r3, [pc, #92]	; (800742c <vTaskSwitchContext+0x60>)
{
 80073ce:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b17      	ldr	r3, [pc, #92]	; (8007430 <vTaskSwitchContext+0x64>)
 80073d4:	b112      	cbz	r2, 80073dc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80073d6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80073d8:	601a      	str	r2, [r3, #0]
}
 80073da:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80073dc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80073de:	4b15      	ldr	r3, [pc, #84]	; (8007434 <vTaskSwitchContext+0x68>)
 80073e0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80073e2:	fab3 f383 	clz	r3, r3
 80073e6:	2214      	movs	r2, #20
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	f1c3 031f 	rsb	r3, r3, #31
 80073ee:	435a      	muls	r2, r3
 80073f0:	4911      	ldr	r1, [pc, #68]	; (8007438 <vTaskSwitchContext+0x6c>)
 80073f2:	588c      	ldr	r4, [r1, r2]
 80073f4:	1888      	adds	r0, r1, r2
 80073f6:	b944      	cbnz	r4, 800740a <vTaskSwitchContext+0x3e>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	e7fe      	b.n	8007408 <vTaskSwitchContext+0x3c>
 800740a:	6844      	ldr	r4, [r0, #4]
 800740c:	3208      	adds	r2, #8
 800740e:	6864      	ldr	r4, [r4, #4]
 8007410:	440a      	add	r2, r1
 8007412:	4294      	cmp	r4, r2
 8007414:	bf08      	it	eq
 8007416:	6862      	ldreq	r2, [r4, #4]
 8007418:	6044      	str	r4, [r0, #4]
 800741a:	bf08      	it	eq
 800741c:	6042      	streq	r2, [r0, #4]
 800741e:	2214      	movs	r2, #20
 8007420:	fb02 1303 	mla	r3, r2, r3, r1
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	4b04      	ldr	r3, [pc, #16]	; (800743c <vTaskSwitchContext+0x70>)
 800742a:	e7d5      	b.n	80073d8 <vTaskSwitchContext+0xc>
 800742c:	20000764 	.word	0x20000764
 8007430:	200007e8 	.word	0x200007e8
 8007434:	2000076c 	.word	0x2000076c
 8007438:	200006cc 	.word	0x200006cc
 800743c:	200006c0 	.word	0x200006c0

08007440 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <xTaskGetSchedulerState+0x18>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	b133      	cbz	r3, 8007454 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007446:	4b05      	ldr	r3, [pc, #20]	; (800745c <xTaskGetSchedulerState+0x1c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800744c:	bf0c      	ite	eq
 800744e:	2002      	moveq	r0, #2
 8007450:	2000      	movne	r0, #0
 8007452:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007454:	2001      	movs	r0, #1
	}
 8007456:	4770      	bx	lr
 8007458:	200007b8 	.word	0x200007b8
 800745c:	20000764 	.word	0x20000764

08007460 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007460:	4806      	ldr	r0, [pc, #24]	; (800747c <prvPortStartFirstTask+0x1c>)
 8007462:	6800      	ldr	r0, [r0, #0]
 8007464:	6800      	ldr	r0, [r0, #0]
 8007466:	f380 8808 	msr	MSP, r0
 800746a:	b662      	cpsie	i
 800746c:	b661      	cpsie	f
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	df00      	svc	0
 8007478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800747a:	0000      	.short	0x0000
 800747c:	e000ed08 	.word	0xe000ed08

08007480 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8007480:	2300      	movs	r3, #0
{
 8007482:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8007484:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007486:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <prvTaskExitError+0x3c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3301      	adds	r3, #1
 800748c:	d008      	beq.n	80074a0 <prvTaskExitError+0x20>
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	e7fe      	b.n	800749e <prvTaskExitError+0x1e>
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80074b0:	9b01      	ldr	r3, [sp, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0fc      	beq.n	80074b0 <prvTaskExitError+0x30>
}
 80074b6:	b002      	add	sp, #8
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	2000000c 	.word	0x2000000c

080074c0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074c4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074ca:	f021 0101 	bic.w	r1, r1, #1
 80074ce:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074d2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074d6:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80074da:	3840      	subs	r0, #64	; 0x40
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	08007481 	.word	0x08007481
	...

080074f0 <SVC_Handler>:
	__asm volatile (
 80074f0:	4b07      	ldr	r3, [pc, #28]	; (8007510 <pxCurrentTCBConst2>)
 80074f2:	6819      	ldr	r1, [r3, #0]
 80074f4:	6808      	ldr	r0, [r1, #0]
 80074f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80074fa:	f380 8809 	msr	PSP, r0
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f04f 0000 	mov.w	r0, #0
 8007506:	f380 8811 	msr	BASEPRI, r0
 800750a:	f04e 0e0d 	orr.w	lr, lr, #13
 800750e:	4770      	bx	lr

08007510 <pxCurrentTCBConst2>:
 8007510:	200006c0 	.word	0x200006c0

08007514 <vPortEnterCritical>:
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007524:	4a0a      	ldr	r2, [pc, #40]	; (8007550 <vPortEnterCritical+0x3c>)
 8007526:	6813      	ldr	r3, [r2, #0]
 8007528:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800752a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800752c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800752e:	d10d      	bne.n	800754c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007530:	4b08      	ldr	r3, [pc, #32]	; (8007554 <vPortEnterCritical+0x40>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007538:	d008      	beq.n	800754c <vPortEnterCritical+0x38>
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	e7fe      	b.n	800754a <vPortEnterCritical+0x36>
	}
}
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	2000000c 	.word	0x2000000c
 8007554:	e000ed04 	.word	0xe000ed04

08007558 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007558:	4a08      	ldr	r2, [pc, #32]	; (800757c <vPortExitCritical+0x24>)
 800755a:	6813      	ldr	r3, [r2, #0]
 800755c:	b943      	cbnz	r3, 8007570 <vPortExitCritical+0x18>
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	e7fe      	b.n	800756e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007570:	3b01      	subs	r3, #1
 8007572:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007574:	b90b      	cbnz	r3, 800757a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007576:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800757a:	4770      	bx	lr
 800757c:	2000000c 	.word	0x2000000c

08007580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007580:	f3ef 8009 	mrs	r0, PSP
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <pxCurrentTCBConst>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007590:	6010      	str	r0, [r2, #0]
 8007592:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007596:	f04f 0050 	mov.w	r0, #80	; 0x50
 800759a:	f380 8811 	msr	BASEPRI, r0
 800759e:	f7ff ff15 	bl	80073cc <vTaskSwitchContext>
 80075a2:	f04f 0000 	mov.w	r0, #0
 80075a6:	f380 8811 	msr	BASEPRI, r0
 80075aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80075ae:	6819      	ldr	r1, [r3, #0]
 80075b0:	6808      	ldr	r0, [r1, #0]
 80075b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075b6:	f380 8809 	msr	PSP, r0
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	4770      	bx	lr

080075c0 <pxCurrentTCBConst>:
 80075c0:	200006c0 	.word	0x200006c0

080075c4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075c4:	b508      	push	{r3, lr}
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075d6:	f7ff fdcd 	bl	8007174 <xTaskIncrementTick>
 80075da:	b118      	cbz	r0, 80075e4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e0:	4b02      	ldr	r3, [pc, #8]	; (80075ec <xPortSysTickHandler+0x28>)
 80075e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80075e4:	2300      	movs	r3, #0
 80075e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80075ea:	bd08      	pop	{r3, pc}
 80075ec:	e000ed04 	.word	0xe000ed04

080075f0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	4a08      	ldr	r2, [pc, #32]	; (8007614 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075f4:	4908      	ldr	r1, [pc, #32]	; (8007618 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075f8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80075fe:	4b07      	ldr	r3, [pc, #28]	; (800761c <vPortSetupTimerInterrupt+0x2c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	fbb3 f3f1 	udiv	r3, r3, r1
 8007606:	4906      	ldr	r1, [pc, #24]	; (8007620 <vPortSetupTimerInterrupt+0x30>)
 8007608:	3b01      	subs	r3, #1
 800760a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800760c:	2307      	movs	r3, #7
 800760e:	6013      	str	r3, [r2, #0]
}
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	e000e010 	.word	0xe000e010
 8007618:	e000e018 	.word	0xe000e018
 800761c:	20000000 	.word	0x20000000
 8007620:	e000e014 	.word	0xe000e014

08007624 <xPortStartScheduler>:
{
 8007624:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007626:	4b26      	ldr	r3, [pc, #152]	; (80076c0 <xPortStartScheduler+0x9c>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007628:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800762a:	781a      	ldrb	r2, [r3, #0]
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007630:	22ff      	movs	r2, #255	; 0xff
 8007632:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007634:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007636:	4a23      	ldr	r2, [pc, #140]	; (80076c4 <xPortStartScheduler+0xa0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800763e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007642:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007646:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007648:	2307      	movs	r3, #7
 800764a:	4a1f      	ldr	r2, [pc, #124]	; (80076c8 <xPortStartScheduler+0xa4>)
 800764c:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800764e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007652:	1e5c      	subs	r4, r3, #1
 8007654:	0600      	lsls	r0, r0, #24
 8007656:	d40c      	bmi.n	8007672 <xPortStartScheduler+0x4e>
 8007658:	b111      	cbz	r1, 8007660 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800765a:	2b03      	cmp	r3, #3
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	d011      	beq.n	8007684 <xPortStartScheduler+0x60>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	e7fe      	b.n	8007670 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007672:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007676:	2101      	movs	r1, #1
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	b2db      	uxtb	r3, r3
 800767c:	f88d 3003 	strb.w	r3, [sp, #3]
 8007680:	4623      	mov	r3, r4
 8007682:	e7e4      	b.n	800764e <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007684:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 8007688:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800768a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800768c:	9b01      	ldr	r3, [sp, #4]
 800768e:	4a0c      	ldr	r2, [pc, #48]	; (80076c0 <xPortStartScheduler+0x9c>)
 8007690:	b2db      	uxtb	r3, r3
 8007692:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007694:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <xPortStartScheduler+0xa8>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800769c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80076a4:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80076a6:	f7ff ffa3 	bl	80075f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80076aa:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <xPortStartScheduler+0xac>)
 80076ac:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80076ae:	f7ff fed7 	bl	8007460 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80076b2:	f7ff fe8b 	bl	80073cc <vTaskSwitchContext>
	prvTaskExitError();
 80076b6:	f7ff fee3 	bl	8007480 <prvTaskExitError>
}
 80076ba:	4620      	mov	r0, r4
 80076bc:	b002      	add	sp, #8
 80076be:	bd10      	pop	{r4, pc}
 80076c0:	e000e400 	.word	0xe000e400
 80076c4:	200007ec 	.word	0x200007ec
 80076c8:	200007f0 	.word	0x200007f0
 80076cc:	e000ed20 	.word	0xe000ed20
 80076d0:	2000000c 	.word	0x2000000c

080076d4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076d4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076d6:	4b0f      	ldr	r3, [pc, #60]	; (8007714 <prvInsertBlockIntoFreeList+0x40>)
 80076d8:	461a      	mov	r2, r3
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4283      	cmp	r3, r0
 80076de:	d3fb      	bcc.n	80076d8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076e0:	6854      	ldr	r4, [r2, #4]
 80076e2:	1911      	adds	r1, r2, r4
 80076e4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076e6:	bf01      	itttt	eq
 80076e8:	6841      	ldreq	r1, [r0, #4]
 80076ea:	4610      	moveq	r0, r2
 80076ec:	1909      	addeq	r1, r1, r4
 80076ee:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076f0:	6844      	ldr	r4, [r0, #4]
 80076f2:	1901      	adds	r1, r0, r4
 80076f4:	428b      	cmp	r3, r1
 80076f6:	d107      	bne.n	8007708 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076f8:	4907      	ldr	r1, [pc, #28]	; (8007718 <prvInsertBlockIntoFreeList+0x44>)
 80076fa:	6809      	ldr	r1, [r1, #0]
 80076fc:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076fe:	bf1f      	itttt	ne
 8007700:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007702:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007704:	1909      	addne	r1, r1, r4
 8007706:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007708:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800770a:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800770c:	bf18      	it	ne
 800770e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007710:	bd10      	pop	{r4, pc}
 8007712:	bf00      	nop
 8007714:	20002004 	.word	0x20002004
 8007718:	200007f4 	.word	0x200007f4

0800771c <pvPortMalloc>:
{
 800771c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007720:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007722:	f7ff fd1f 	bl	8007164 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007726:	4b3b      	ldr	r3, [pc, #236]	; (8007814 <pvPortMalloc+0xf8>)
 8007728:	483b      	ldr	r0, [pc, #236]	; (8007818 <pvPortMalloc+0xfc>)
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	469c      	mov	ip, r3
 800772e:	b9d2      	cbnz	r2, 8007766 <pvPortMalloc+0x4a>
	xStart.xBlockSize = ( size_t ) 0;
 8007730:	2100      	movs	r1, #0
	uxAddress = ( size_t ) ucHeap;
 8007732:	4a3a      	ldr	r2, [pc, #232]	; (800781c <pvPortMalloc+0x100>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007734:	4b3a      	ldr	r3, [pc, #232]	; (8007820 <pvPortMalloc+0x104>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007736:	0755      	lsls	r5, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007738:	bf1c      	itt	ne
 800773a:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800773c:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007740:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007742:	6059      	str	r1, [r3, #4]
	uxAddress -= xHeapStructSize;
 8007744:	4b37      	ldr	r3, [pc, #220]	; (8007824 <pvPortMalloc+0x108>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007746:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800774a:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800774e:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007750:	e9c2 3100 	strd	r3, r1, [r2]
	pxEnd = ( void * ) uxAddress;
 8007754:	f8cc 3000 	str.w	r3, [ip]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007758:	4b33      	ldr	r3, [pc, #204]	; (8007828 <pvPortMalloc+0x10c>)
 800775a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800775c:	4b33      	ldr	r3, [pc, #204]	; (800782c <pvPortMalloc+0x110>)
 800775e:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007764:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007766:	6807      	ldr	r7, [r0, #0]
 8007768:	4227      	tst	r7, r4
 800776a:	d14e      	bne.n	800780a <pvPortMalloc+0xee>
			if( xWantedSize > 0 )
 800776c:	2c00      	cmp	r4, #0
 800776e:	d03f      	beq.n	80077f0 <pvPortMalloc+0xd4>
				xWantedSize += xHeapStructSize;
 8007770:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007774:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007776:	bf1c      	itt	ne
 8007778:	f023 0307 	bicne.w	r3, r3, #7
 800777c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800777e:	2b00      	cmp	r3, #0
 8007780:	d043      	beq.n	800780a <pvPortMalloc+0xee>
 8007782:	4a2a      	ldr	r2, [pc, #168]	; (800782c <pvPortMalloc+0x110>)
 8007784:	6816      	ldr	r6, [r2, #0]
 8007786:	4690      	mov	r8, r2
 8007788:	429e      	cmp	r6, r3
 800778a:	d33e      	bcc.n	800780a <pvPortMalloc+0xee>
				pxBlock = xStart.pxNextFreeBlock;
 800778c:	4a24      	ldr	r2, [pc, #144]	; (8007820 <pvPortMalloc+0x104>)
 800778e:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007790:	6869      	ldr	r1, [r5, #4]
 8007792:	4299      	cmp	r1, r3
 8007794:	d201      	bcs.n	800779a <pvPortMalloc+0x7e>
 8007796:	6828      	ldr	r0, [r5, #0]
 8007798:	b9a8      	cbnz	r0, 80077c6 <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 800779a:	f8dc 0000 	ldr.w	r0, [ip]
 800779e:	42a8      	cmp	r0, r5
 80077a0:	d033      	beq.n	800780a <pvPortMalloc+0xee>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077a2:	6828      	ldr	r0, [r5, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077a4:	1ac9      	subs	r1, r1, r3
 80077a6:	2910      	cmp	r1, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077a8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077aa:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077ac:	d912      	bls.n	80077d4 <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077ae:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077b0:	0742      	lsls	r2, r0, #29
 80077b2:	d00b      	beq.n	80077cc <pvPortMalloc+0xb0>
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	e7fe      	b.n	80077c4 <pvPortMalloc+0xa8>
 80077c6:	462a      	mov	r2, r5
 80077c8:	4605      	mov	r5, r0
 80077ca:	e7e1      	b.n	8007790 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077cc:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077ce:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077d0:	f7ff ff80 	bl	80076d4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077d4:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077d6:	4914      	ldr	r1, [pc, #80]	; (8007828 <pvPortMalloc+0x10c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077d8:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077da:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80077dc:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077de:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077e0:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077e4:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077e6:	bf38      	it	cc
 80077e8:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077ea:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077ec:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077ee:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80077f0:	f7ff fd52 	bl	8007298 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077f4:	0763      	lsls	r3, r4, #29
 80077f6:	d00a      	beq.n	800780e <pvPortMalloc+0xf2>
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	e7fe      	b.n	8007808 <pvPortMalloc+0xec>
void *pvReturn = NULL;
 800780a:	2400      	movs	r4, #0
 800780c:	e7f0      	b.n	80077f0 <pvPortMalloc+0xd4>
}
 800780e:	4620      	mov	r0, r4
 8007810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007814:	200007f4 	.word	0x200007f4
 8007818:	20001ff8 	.word	0x20001ff8
 800781c:	200007f8 	.word	0x200007f8
 8007820:	20002004 	.word	0x20002004
 8007824:	20001ff0 	.word	0x20001ff0
 8007828:	20002000 	.word	0x20002000
 800782c:	20001ffc 	.word	0x20001ffc

08007830 <vPortFree>:
{
 8007830:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007832:	4604      	mov	r4, r0
 8007834:	b370      	cbz	r0, 8007894 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007836:	4a18      	ldr	r2, [pc, #96]	; (8007898 <vPortFree+0x68>)
 8007838:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	4213      	tst	r3, r2
 8007840:	d108      	bne.n	8007854 <vPortFree+0x24>
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	e7fe      	b.n	8007852 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007854:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007858:	b141      	cbz	r1, 800786c <vPortFree+0x3c>
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	e7fe      	b.n	800786a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800786c:	ea23 0302 	bic.w	r3, r3, r2
 8007870:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007874:	f7ff fc76 	bl	8007164 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007878:	4a08      	ldr	r2, [pc, #32]	; (800789c <vPortFree+0x6c>)
 800787a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800787e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007880:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007884:	440b      	add	r3, r1
 8007886:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007888:	f7ff ff24 	bl	80076d4 <prvInsertBlockIntoFreeList>
}
 800788c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007890:	f7ff bd02 	b.w	8007298 <xTaskResumeAll>
}
 8007894:	bd10      	pop	{r4, pc}
 8007896:	bf00      	nop
 8007898:	20001ff8 	.word	0x20001ff8
 800789c:	20001ffc 	.word	0x20001ffc

080078a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80078a2:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <HAL_InitTick+0x3c>)
{
 80078a4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80078a6:	7818      	ldrb	r0, [r3, #0]
 80078a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078ac:	fbb3 f3f0 	udiv	r3, r3, r0
 80078b0:	4a0b      	ldr	r2, [pc, #44]	; (80078e0 <HAL_InitTick+0x40>)
 80078b2:	6810      	ldr	r0, [r2, #0]
 80078b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80078b8:	f000 f8b2 	bl	8007a20 <HAL_SYSTICK_Config>
 80078bc:	4604      	mov	r4, r0
 80078be:	b958      	cbnz	r0, 80078d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078c0:	2d0f      	cmp	r5, #15
 80078c2:	d809      	bhi.n	80078d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078c4:	4602      	mov	r2, r0
 80078c6:	4629      	mov	r1, r5
 80078c8:	f04f 30ff 	mov.w	r0, #4294967295
 80078cc:	f000 f854 	bl	8007978 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80078d0:	4620      	mov	r0, r4
 80078d2:	4b04      	ldr	r3, [pc, #16]	; (80078e4 <HAL_InitTick+0x44>)
 80078d4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80078d8:	2001      	movs	r0, #1
 80078da:	e7fc      	b.n	80078d6 <HAL_InitTick+0x36>
 80078dc:	20000010 	.word	0x20000010
 80078e0:	20000000 	.word	0x20000000
 80078e4:	20000014 	.word	0x20000014

080078e8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078e8:	4a07      	ldr	r2, [pc, #28]	; (8007908 <HAL_Init+0x20>)
{
 80078ea:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078ec:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078ee:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078f0:	f043 0310 	orr.w	r3, r3, #16
 80078f4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078f6:	f000 f82d 	bl	8007954 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80078fa:	2000      	movs	r0, #0
 80078fc:	f7ff ffd0 	bl	80078a0 <HAL_InitTick>
  HAL_MspInit();
 8007900:	f7fe faba 	bl	8005e78 <HAL_MspInit>
}
 8007904:	2000      	movs	r0, #0
 8007906:	bd08      	pop	{r3, pc}
 8007908:	40022000 	.word	0x40022000

0800790c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800790c:	4a03      	ldr	r2, [pc, #12]	; (800791c <HAL_IncTick+0x10>)
 800790e:	4b04      	ldr	r3, [pc, #16]	; (8007920 <HAL_IncTick+0x14>)
 8007910:	6811      	ldr	r1, [r2, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	440b      	add	r3, r1
 8007916:	6013      	str	r3, [r2, #0]
}
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	2000266c 	.word	0x2000266c
 8007920:	20000010 	.word	0x20000010

08007924 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007924:	4b01      	ldr	r3, [pc, #4]	; (800792c <HAL_GetTick+0x8>)
 8007926:	6818      	ldr	r0, [r3, #0]
}
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	2000266c 	.word	0x2000266c

08007930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007934:	f7ff fff6 	bl	8007924 <HAL_GetTick>
 8007938:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800793a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800793c:	bf1e      	ittt	ne
 800793e:	4b04      	ldrne	r3, [pc, #16]	; (8007950 <HAL_Delay+0x20>)
 8007940:	781b      	ldrbne	r3, [r3, #0]
 8007942:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007944:	f7ff ffee 	bl	8007924 <HAL_GetTick>
 8007948:	1b43      	subs	r3, r0, r5
 800794a:	42a3      	cmp	r3, r4
 800794c:	d3fa      	bcc.n	8007944 <HAL_Delay+0x14>
  {
  }
}
 800794e:	bd38      	pop	{r3, r4, r5, pc}
 8007950:	20000010 	.word	0x20000010

08007954 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007954:	4907      	ldr	r1, [pc, #28]	; (8007974 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007956:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007958:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800795a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800795e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007962:	0412      	lsls	r2, r2, #16
 8007964:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800796c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007970:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007972:	4770      	bx	lr
 8007974:	e000ed00 	.word	0xe000ed00

08007978 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007978:	4b16      	ldr	r3, [pc, #88]	; (80079d4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800797a:	b530      	push	{r4, r5, lr}
 800797c:	68dc      	ldr	r4, [r3, #12]
 800797e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007982:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007986:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007988:	2b04      	cmp	r3, #4
 800798a:	bf28      	it	cs
 800798c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800798e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007990:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007994:	bf98      	it	ls
 8007996:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007998:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800799c:	bf88      	it	hi
 800799e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079a0:	ea21 0303 	bic.w	r3, r1, r3
 80079a4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079a6:	fa05 f404 	lsl.w	r4, r5, r4
 80079aa:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80079ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079b0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b4:	bfac      	ite	ge
 80079b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ba:	4a07      	ldrlt	r2, [pc, #28]	; (80079d8 <HAL_NVIC_SetPriority+0x60>)
 80079bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80079c0:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079c2:	bfab      	itete	ge
 80079c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079c8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079cc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079d0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80079d2:	bd30      	pop	{r4, r5, pc}
 80079d4:	e000ed00 	.word	0xe000ed00
 80079d8:	e000ed14 	.word	0xe000ed14

080079dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80079dc:	2800      	cmp	r0, #0
 80079de:	db08      	blt.n	80079f2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079e0:	2301      	movs	r3, #1
 80079e2:	0942      	lsrs	r2, r0, #5
 80079e4:	f000 001f 	and.w	r0, r0, #31
 80079e8:	fa03 f000 	lsl.w	r0, r3, r0
 80079ec:	4b01      	ldr	r3, [pc, #4]	; (80079f4 <HAL_NVIC_EnableIRQ+0x18>)
 80079ee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80079f2:	4770      	bx	lr
 80079f4:	e000e100 	.word	0xe000e100

080079f8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80079f8:	2800      	cmp	r0, #0
 80079fa:	db0d      	blt.n	8007a18 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079fc:	2201      	movs	r2, #1
 80079fe:	0943      	lsrs	r3, r0, #5
 8007a00:	f000 001f 	and.w	r0, r0, #31
 8007a04:	fa02 f000 	lsl.w	r0, r2, r0
 8007a08:	4a04      	ldr	r2, [pc, #16]	; (8007a1c <HAL_NVIC_DisableIRQ+0x24>)
 8007a0a:	3320      	adds	r3, #32
 8007a0c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007a10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007a14:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	e000e100 	.word	0xe000e100

08007a20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a20:	3801      	subs	r0, #1
 8007a22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007a26:	d20a      	bcs.n	8007a3e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a28:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a2a:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a2c:	4a06      	ldr	r2, [pc, #24]	; (8007a48 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a2e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a30:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a34:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a36:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a38:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a3c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007a3e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	e000e010 	.word	0xe000e010
 8007a48:	e000ed00 	.word	0xe000ed00

08007a4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a4c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007a4e:	b320      	cbz	r0, 8007a9a <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007a50:	2214      	movs	r2, #20
 8007a52:	6801      	ldr	r1, [r0, #0]
 8007a54:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <HAL_DMA_Init+0x54>)
 8007a56:	440b      	add	r3, r1
 8007a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8007a60:	4b10      	ldr	r3, [pc, #64]	; (8007aa4 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007a62:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8007a64:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007a66:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8007a6a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a6c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007a6e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a72:	4323      	orrs	r3, r4
 8007a74:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007a76:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a7a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a7c:	6944      	ldr	r4, [r0, #20]
 8007a7e:	4323      	orrs	r3, r4
 8007a80:	6984      	ldr	r4, [r0, #24]
 8007a82:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a84:	69c4      	ldr	r4, [r0, #28]
 8007a86:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8007a88:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007a8a:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a90:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8007a92:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a94:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8007a96:	4618      	mov	r0, r3
}
 8007a98:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	e7fc      	b.n	8007a98 <HAL_DMA_Init+0x4c>
 8007a9e:	bf00      	nop
 8007aa0:	bffdfff8 	.word	0xbffdfff8
 8007aa4:	40020000 	.word	0x40020000

08007aa8 <HAL_DMA_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007aa8:	4603      	mov	r3, r0
{
 8007aaa:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8007aac:	b1e8      	cbz	r0, 8007aea <HAL_DMA_DeInit+0x42>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8007aae:	6801      	ldr	r1, [r0, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8007ab0:	2000      	movs	r0, #0
  __HAL_DMA_DISABLE(hdma);
 8007ab2:	680a      	ldr	r2, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
 8007ab4:	4c0e      	ldr	r4, [pc, #56]	; (8007af0 <HAL_DMA_DeInit+0x48>)
  __HAL_DMA_DISABLE(hdma);
 8007ab6:	f022 0201 	bic.w	r2, r2, #1
 8007aba:	600a      	str	r2, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007abc:	4a0d      	ldr	r2, [pc, #52]	; (8007af4 <HAL_DMA_DeInit+0x4c>)
  hdma->Instance->CCR  = 0U;
 8007abe:	6008      	str	r0, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007ac0:	440a      	add	r2, r1
  hdma->Instance->CNDTR = 0U;
 8007ac2:	6048      	str	r0, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8007ac4:	6088      	str	r0, [r1, #8]
  hdma->Instance->CMAR = 0U;
 8007ac6:	60c8      	str	r0, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007ac8:	2114      	movs	r1, #20
 8007aca:	fbb2 f2f1 	udiv	r2, r2, r1
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8007ace:	2101      	movs	r1, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007ad0:	0092      	lsls	r2, r2, #2
 8007ad2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8007ad4:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8007ad8:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8007ada:	6062      	str	r2, [r4, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
  hdma->XferHalfCpltCallback = NULL;
 8007adc:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;
 8007ae0:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ae4:	6398      	str	r0, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007ae6:	8418      	strh	r0, [r3, #32]

  return HAL_OK;
}
 8007ae8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007aea:	2001      	movs	r0, #1
 8007aec:	e7fc      	b.n	8007ae8 <HAL_DMA_DeInit+0x40>
 8007aee:	bf00      	nop
 8007af0:	40020000 	.word	0x40020000
 8007af4:	bffdfff8 	.word	0xbffdfff8

08007af8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007af8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007afa:	f890 4020 	ldrb.w	r4, [r0, #32]
 8007afe:	2c01      	cmp	r4, #1
 8007b00:	d034      	beq.n	8007b6c <HAL_DMA_Start_IT+0x74>
 8007b02:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b04:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8007b08:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b0c:	42a5      	cmp	r5, r4
 8007b0e:	f04f 0600 	mov.w	r6, #0
 8007b12:	f04f 0402 	mov.w	r4, #2
 8007b16:	d127      	bne.n	8007b68 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b18:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b1c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b1e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8007b20:	6826      	ldr	r6, [r4, #0]
 8007b22:	f026 0601 	bic.w	r6, r6, #1
 8007b26:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007b28:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8007b2c:	40bd      	lsls	r5, r7
 8007b2e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007b30:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b32:	6843      	ldr	r3, [r0, #4]
 8007b34:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8007b36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007b38:	bf0b      	itete	eq
 8007b3a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007b3c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007b3e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007b40:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8007b42:	b14b      	cbz	r3, 8007b58 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8007b4a:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b4c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	f043 0301 	orr.w	r3, r3, #1
 8007b54:	6023      	str	r3, [r4, #0]
}
 8007b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b58:	6823      	ldr	r3, [r4, #0]
 8007b5a:	f023 0304 	bic.w	r3, r3, #4
 8007b5e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	f043 030a 	orr.w	r3, r3, #10
 8007b66:	e7f0      	b.n	8007b4a <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8007b68:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8007b6c:	2002      	movs	r0, #2
 8007b6e:	e7f2      	b.n	8007b56 <HAL_DMA_Start_IT+0x5e>

08007b70 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b70:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d006      	beq.n	8007b86 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b78:	2304      	movs	r3, #4
 8007b7a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8007b82:	2001      	movs	r0, #1
 8007b84:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b86:	6803      	ldr	r3, [r0, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	f022 020e 	bic.w	r2, r2, #14
 8007b8e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	f022 0201 	bic.w	r2, r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 8007b9e:	408b      	lsls	r3, r1
 8007ba0:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8007ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ba6:	8403      	strh	r3, [r0, #32]
  return status; 
 8007ba8:	2000      	movs	r0, #0
}
 8007baa:	4770      	bx	lr

08007bac <HAL_DMA_Abort_IT>:
{  
 8007bac:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007bae:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d003      	beq.n	8007bbe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bb6:	2304      	movs	r3, #4
 8007bb8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8007bba:	2001      	movs	r0, #1
}
 8007bbc:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bbe:	6803      	ldr	r3, [r0, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	f022 020e 	bic.w	r2, r2, #14
 8007bc6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	f022 0201 	bic.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007bd0:	4a17      	ldr	r2, [pc, #92]	; (8007c30 <HAL_DMA_Abort_IT+0x84>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d01c      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x64>
 8007bd6:	3214      	adds	r2, #20
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d01b      	beq.n	8007c14 <HAL_DMA_Abort_IT+0x68>
 8007bdc:	3214      	adds	r2, #20
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d01a      	beq.n	8007c18 <HAL_DMA_Abort_IT+0x6c>
 8007be2:	3214      	adds	r2, #20
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d01a      	beq.n	8007c1e <HAL_DMA_Abort_IT+0x72>
 8007be8:	3214      	adds	r2, #20
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01a      	beq.n	8007c24 <HAL_DMA_Abort_IT+0x78>
 8007bee:	3214      	adds	r2, #20
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	bf0c      	ite	eq
 8007bf4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8007bf8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8007bfc:	4a0d      	ldr	r2, [pc, #52]	; (8007c34 <HAL_DMA_Abort_IT+0x88>)
 8007bfe:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8007c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c04:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8007c06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c08:	b17b      	cbz	r3, 8007c2a <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8007c0a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	e7d5      	b.n	8007bbc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007c10:	2301      	movs	r3, #1
 8007c12:	e7f3      	b.n	8007bfc <HAL_DMA_Abort_IT+0x50>
 8007c14:	2310      	movs	r3, #16
 8007c16:	e7f1      	b.n	8007bfc <HAL_DMA_Abort_IT+0x50>
 8007c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c1c:	e7ee      	b.n	8007bfc <HAL_DMA_Abort_IT+0x50>
 8007c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c22:	e7eb      	b.n	8007bfc <HAL_DMA_Abort_IT+0x50>
 8007c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c28:	e7e8      	b.n	8007bfc <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	e7c6      	b.n	8007bbc <HAL_DMA_Abort_IT+0x10>
 8007c2e:	bf00      	nop
 8007c30:	40020008 	.word	0x40020008
 8007c34:	40020000 	.word	0x40020000

08007c38 <HAL_DMA_IRQHandler>:
{
 8007c38:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007c3a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c3c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007c3e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c40:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8007c42:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007c44:	4095      	lsls	r5, r2
 8007c46:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8007c48:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007c4a:	d032      	beq.n	8007cb2 <HAL_DMA_IRQHandler+0x7a>
 8007c4c:	074d      	lsls	r5, r1, #29
 8007c4e:	d530      	bpl.n	8007cb2 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c54:	bf5e      	ittt	pl
 8007c56:	681a      	ldrpl	r2, [r3, #0]
 8007c58:	f022 0204 	bicpl.w	r2, r2, #4
 8007c5c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007c5e:	4a3d      	ldr	r2, [pc, #244]	; (8007d54 <HAL_DMA_IRQHandler+0x11c>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d019      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x60>
 8007c64:	3214      	adds	r2, #20
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d018      	beq.n	8007c9c <HAL_DMA_IRQHandler+0x64>
 8007c6a:	3214      	adds	r2, #20
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d017      	beq.n	8007ca0 <HAL_DMA_IRQHandler+0x68>
 8007c70:	3214      	adds	r2, #20
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d017      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x6e>
 8007c76:	3214      	adds	r2, #20
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d017      	beq.n	8007cac <HAL_DMA_IRQHandler+0x74>
 8007c7c:	3214      	adds	r2, #20
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	bf0c      	ite	eq
 8007c82:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8007c86:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8007c8a:	4a33      	ldr	r2, [pc, #204]	; (8007d58 <HAL_DMA_IRQHandler+0x120>)
 8007c8c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8007c8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d05c      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x116>
}
 8007c94:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8007c96:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007c98:	2304      	movs	r3, #4
 8007c9a:	e7f6      	b.n	8007c8a <HAL_DMA_IRQHandler+0x52>
 8007c9c:	2340      	movs	r3, #64	; 0x40
 8007c9e:	e7f4      	b.n	8007c8a <HAL_DMA_IRQHandler+0x52>
 8007ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ca4:	e7f1      	b.n	8007c8a <HAL_DMA_IRQHandler+0x52>
 8007ca6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007caa:	e7ee      	b.n	8007c8a <HAL_DMA_IRQHandler+0x52>
 8007cac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007cb0:	e7eb      	b.n	8007c8a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007cb2:	2502      	movs	r5, #2
 8007cb4:	4095      	lsls	r5, r2
 8007cb6:	4225      	tst	r5, r4
 8007cb8:	d035      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xee>
 8007cba:	078d      	lsls	r5, r1, #30
 8007cbc:	d533      	bpl.n	8007d26 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	0694      	lsls	r4, r2, #26
 8007cc2:	d406      	bmi.n	8007cd2 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	f022 020a 	bic.w	r2, r2, #10
 8007cca:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007cd2:	4a20      	ldr	r2, [pc, #128]	; (8007d54 <HAL_DMA_IRQHandler+0x11c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d019      	beq.n	8007d0c <HAL_DMA_IRQHandler+0xd4>
 8007cd8:	3214      	adds	r2, #20
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d018      	beq.n	8007d10 <HAL_DMA_IRQHandler+0xd8>
 8007cde:	3214      	adds	r2, #20
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d017      	beq.n	8007d14 <HAL_DMA_IRQHandler+0xdc>
 8007ce4:	3214      	adds	r2, #20
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d017      	beq.n	8007d1a <HAL_DMA_IRQHandler+0xe2>
 8007cea:	3214      	adds	r2, #20
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d017      	beq.n	8007d20 <HAL_DMA_IRQHandler+0xe8>
 8007cf0:	3214      	adds	r2, #20
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	bf0c      	ite	eq
 8007cf6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8007cfa:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8007cfe:	4a16      	ldr	r2, [pc, #88]	; (8007d58 <HAL_DMA_IRQHandler+0x120>)
 8007d00:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8007d02:	2300      	movs	r3, #0
 8007d04:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8007d08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007d0a:	e7c1      	b.n	8007c90 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e7f6      	b.n	8007cfe <HAL_DMA_IRQHandler+0xc6>
 8007d10:	2320      	movs	r3, #32
 8007d12:	e7f4      	b.n	8007cfe <HAL_DMA_IRQHandler+0xc6>
 8007d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d18:	e7f1      	b.n	8007cfe <HAL_DMA_IRQHandler+0xc6>
 8007d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d1e:	e7ee      	b.n	8007cfe <HAL_DMA_IRQHandler+0xc6>
 8007d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d24:	e7eb      	b.n	8007cfe <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007d26:	2508      	movs	r5, #8
 8007d28:	4095      	lsls	r5, r2
 8007d2a:	4225      	tst	r5, r4
 8007d2c:	d00f      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x116>
 8007d2e:	0709      	lsls	r1, r1, #28
 8007d30:	d50d      	bpl.n	8007d4e <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	f021 010e 	bic.w	r1, r1, #14
 8007d38:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	fa03 f202 	lsl.w	r2, r3, r2
 8007d40:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d42:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8007d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d48:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8007d4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007d4c:	e7a0      	b.n	8007c90 <HAL_DMA_IRQHandler+0x58>
}
 8007d4e:	bc70      	pop	{r4, r5, r6}
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40020008 	.word	0x40020008
 8007d58:	40020000 	.word	0x40020000

08007d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007d60:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8007d62:	4616      	mov	r6, r2
 8007d64:	4b64      	ldr	r3, [pc, #400]	; (8007ef8 <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007d66:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007f08 <HAL_GPIO_Init+0x1ac>
 8007d6a:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8007f0c <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d6e:	680d      	ldr	r5, [r1, #0]
 8007d70:	fa35 f406 	lsrs.w	r4, r5, r6
 8007d74:	d102      	bne.n	8007d7c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8007d76:	b003      	add	sp, #12
 8007d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8007d7c:	f04f 0801 	mov.w	r8, #1
 8007d80:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d84:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8007d88:	ea38 0505 	bics.w	r5, r8, r5
 8007d8c:	d17c      	bne.n	8007e88 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8007d8e:	684d      	ldr	r5, [r1, #4]
 8007d90:	2d03      	cmp	r5, #3
 8007d92:	d807      	bhi.n	8007da4 <HAL_GPIO_Init+0x48>
 8007d94:	3d01      	subs	r5, #1
 8007d96:	2d02      	cmp	r5, #2
 8007d98:	f200 8088 	bhi.w	8007eac <HAL_GPIO_Init+0x150>
 8007d9c:	e8df f005 	tbb	[pc, r5]
 8007da0:	9b96      	.short	0x9b96
 8007da2:	a1          	.byte	0xa1
 8007da3:	00          	.byte	0x00
 8007da4:	2d12      	cmp	r5, #18
 8007da6:	f000 8099 	beq.w	8007edc <HAL_GPIO_Init+0x180>
 8007daa:	d86f      	bhi.n	8007e8c <HAL_GPIO_Init+0x130>
 8007dac:	2d11      	cmp	r5, #17
 8007dae:	f000 808f 	beq.w	8007ed0 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007db2:	2cff      	cmp	r4, #255	; 0xff
 8007db4:	bf98      	it	ls
 8007db6:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007db8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007dbc:	bf88      	it	hi
 8007dbe:	f100 0a04 	addhi.w	sl, r0, #4
 8007dc2:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007dc6:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007dca:	bf88      	it	hi
 8007dcc:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007dce:	fa09 fb05 	lsl.w	fp, r9, r5
 8007dd2:	ea28 080b 	bic.w	r8, r8, fp
 8007dd6:	fa02 f505 	lsl.w	r5, r2, r5
 8007dda:	ea48 0505 	orr.w	r5, r8, r5
 8007dde:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007de2:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8007de6:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8007dea:	d04d      	beq.n	8007e88 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007dec:	4f43      	ldr	r7, [pc, #268]	; (8007efc <HAL_GPIO_Init+0x1a0>)
 8007dee:	f026 0803 	bic.w	r8, r6, #3
 8007df2:	69bd      	ldr	r5, [r7, #24]
 8007df4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8007df8:	f045 0501 	orr.w	r5, r5, #1
 8007dfc:	61bd      	str	r5, [r7, #24]
 8007dfe:	69bd      	ldr	r5, [r7, #24]
 8007e00:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8007e04:	f005 0501 	and.w	r5, r5, #1
 8007e08:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007e0a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007e0e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007e10:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8007e14:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007e18:	fa09 f90b 	lsl.w	r9, r9, fp
 8007e1c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007e20:	4d37      	ldr	r5, [pc, #220]	; (8007f00 <HAL_GPIO_Init+0x1a4>)
 8007e22:	42a8      	cmp	r0, r5
 8007e24:	d061      	beq.n	8007eea <HAL_GPIO_Init+0x18e>
 8007e26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e2a:	42a8      	cmp	r0, r5
 8007e2c:	d05f      	beq.n	8007eee <HAL_GPIO_Init+0x192>
 8007e2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e32:	42a8      	cmp	r0, r5
 8007e34:	d05d      	beq.n	8007ef2 <HAL_GPIO_Init+0x196>
 8007e36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e3a:	42a8      	cmp	r0, r5
 8007e3c:	bf0c      	ite	eq
 8007e3e:	2503      	moveq	r5, #3
 8007e40:	2504      	movne	r5, #4
 8007e42:	fa05 f50b 	lsl.w	r5, r5, fp
 8007e46:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8007e4a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8007e4e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e50:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8007e54:	bf14      	ite	ne
 8007e56:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007e58:	43a5      	biceq	r5, r4
 8007e5a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8007e5c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007e5e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8007e62:	bf14      	ite	ne
 8007e64:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007e66:	43a5      	biceq	r5, r4
 8007e68:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8007e6a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007e6c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8007e70:	bf14      	ite	ne
 8007e72:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007e74:	43a5      	biceq	r5, r4
 8007e76:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8007e78:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007e7a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8007e7e:	bf14      	ite	ne
 8007e80:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007e82:	ea25 0404 	biceq.w	r4, r5, r4
 8007e86:	60dc      	str	r4, [r3, #12]
	position++;
 8007e88:	3601      	adds	r6, #1
 8007e8a:	e770      	b.n	8007d6e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8007e8c:	4f1d      	ldr	r7, [pc, #116]	; (8007f04 <HAL_GPIO_Init+0x1a8>)
 8007e8e:	42bd      	cmp	r5, r7
 8007e90:	d00c      	beq.n	8007eac <HAL_GPIO_Init+0x150>
 8007e92:	d817      	bhi.n	8007ec4 <HAL_GPIO_Init+0x168>
 8007e94:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007f10 <HAL_GPIO_Init+0x1b4>
 8007e98:	454d      	cmp	r5, r9
 8007e9a:	d007      	beq.n	8007eac <HAL_GPIO_Init+0x150>
 8007e9c:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8007ea0:	454d      	cmp	r5, r9
 8007ea2:	d003      	beq.n	8007eac <HAL_GPIO_Init+0x150>
 8007ea4:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8007ea8:	454d      	cmp	r5, r9
 8007eaa:	d182      	bne.n	8007db2 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007eac:	688a      	ldr	r2, [r1, #8]
 8007eae:	b1d2      	cbz	r2, 8007ee6 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007eb0:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8007eb2:	bf08      	it	eq
 8007eb4:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007eb8:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8007ebc:	bf18      	it	ne
 8007ebe:	f8c0 8014 	strne.w	r8, [r0, #20]
 8007ec2:	e776      	b.n	8007db2 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007ec4:	4565      	cmp	r5, ip
 8007ec6:	d0f1      	beq.n	8007eac <HAL_GPIO_Init+0x150>
 8007ec8:	4575      	cmp	r5, lr
 8007eca:	e7ee      	b.n	8007eaa <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007ecc:	68ca      	ldr	r2, [r1, #12]
          break;
 8007ece:	e770      	b.n	8007db2 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007ed0:	68ca      	ldr	r2, [r1, #12]
 8007ed2:	3204      	adds	r2, #4
          break;
 8007ed4:	e76d      	b.n	8007db2 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007ed6:	68ca      	ldr	r2, [r1, #12]
 8007ed8:	3208      	adds	r2, #8
          break;
 8007eda:	e76a      	b.n	8007db2 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007edc:	68ca      	ldr	r2, [r1, #12]
 8007ede:	320c      	adds	r2, #12
          break;
 8007ee0:	e767      	b.n	8007db2 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	e765      	b.n	8007db2 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007ee6:	2204      	movs	r2, #4
 8007ee8:	e763      	b.n	8007db2 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007eea:	2500      	movs	r5, #0
 8007eec:	e7a9      	b.n	8007e42 <HAL_GPIO_Init+0xe6>
 8007eee:	2501      	movs	r5, #1
 8007ef0:	e7a7      	b.n	8007e42 <HAL_GPIO_Init+0xe6>
 8007ef2:	2502      	movs	r5, #2
 8007ef4:	e7a5      	b.n	8007e42 <HAL_GPIO_Init+0xe6>
 8007ef6:	bf00      	nop
 8007ef8:	40010400 	.word	0x40010400
 8007efc:	40021000 	.word	0x40021000
 8007f00:	40010800 	.word	0x40010800
 8007f04:	10220000 	.word	0x10220000
 8007f08:	10310000 	.word	0x10310000
 8007f0c:	10320000 	.word	0x10320000
 8007f10:	10120000 	.word	0x10120000

08007f14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007f18:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8007f1c:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007f1e:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007f22:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007f26:	eb00 030b 	add.w	r3, r0, fp
 8007f2a:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007f2c:	4b2e      	ldr	r3, [pc, #184]	; (8007fe8 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8007f2e:	fa31 f402 	lsrs.w	r4, r1, r2
 8007f32:	d102      	bne.n	8007f3a <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8007f34:	b003      	add	sp, #12
 8007f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007f3a:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 8007f3e:	400f      	ands	r7, r1
 8007f40:	d049      	beq.n	8007fd6 <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 8007f42:	f022 0403 	bic.w	r4, r2, #3
 8007f46:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007f4a:	4d28      	ldr	r5, [pc, #160]	; (8007fec <HAL_GPIO_DeInit+0xd8>)
 8007f4c:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007f50:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8007f54:	68a6      	ldr	r6, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007f56:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007f5a:	fa08 f90c 	lsl.w	r9, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007f5e:	42a8      	cmp	r0, r5
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007f60:	ea09 0e06 	and.w	lr, r9, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007f64:	d039      	beq.n	8007fda <HAL_GPIO_DeInit+0xc6>
 8007f66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f6a:	42a8      	cmp	r0, r5
 8007f6c:	d037      	beq.n	8007fde <HAL_GPIO_DeInit+0xca>
 8007f6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f72:	42a8      	cmp	r0, r5
 8007f74:	d035      	beq.n	8007fe2 <HAL_GPIO_DeInit+0xce>
 8007f76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f7a:	42a8      	cmp	r0, r5
 8007f7c:	bf0c      	ite	eq
 8007f7e:	2503      	moveq	r5, #3
 8007f80:	2504      	movne	r5, #4
 8007f82:	fa05 f50c 	lsl.w	r5, r5, ip
 8007f86:	4575      	cmp	r5, lr
 8007f88:	ea6f 0607 	mvn.w	r6, r7
 8007f8c:	d10f      	bne.n	8007fae <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8007f8e:	68a5      	ldr	r5, [r4, #8]
 8007f90:	ea25 0509 	bic.w	r5, r5, r9
 8007f94:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007f96:	681c      	ldr	r4, [r3, #0]
 8007f98:	4034      	ands	r4, r6
 8007f9a:	601c      	str	r4, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8007f9c:	685c      	ldr	r4, [r3, #4]
 8007f9e:	4034      	ands	r4, r6
 8007fa0:	605c      	str	r4, [r3, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8007fa2:	689c      	ldr	r4, [r3, #8]
 8007fa4:	4034      	ands	r4, r6
 8007fa6:	609c      	str	r4, [r3, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8007fa8:	68dc      	ldr	r4, [r3, #12]
 8007faa:	4034      	ands	r4, r6
 8007fac:	60dc      	str	r4, [r3, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007fae:	2fff      	cmp	r7, #255	; 0xff
 8007fb0:	bf94      	ite	ls
 8007fb2:	4607      	movls	r7, r0
 8007fb4:	9f01      	ldrhi	r7, [sp, #4]
 8007fb6:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007fba:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007fbc:	bf88      	it	hi
 8007fbe:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007fc0:	fa08 fc04 	lsl.w	ip, r8, r4
 8007fc4:	ea25 050c 	bic.w	r5, r5, ip
 8007fc8:	fa0b f404 	lsl.w	r4, fp, r4
 8007fcc:	4325      	orrs	r5, r4
 8007fce:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8007fd0:	68c4      	ldr	r4, [r0, #12]
 8007fd2:	4026      	ands	r6, r4
 8007fd4:	60c6      	str	r6, [r0, #12]
    position++;
 8007fd6:	3201      	adds	r2, #1
 8007fd8:	e7a9      	b.n	8007f2e <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007fda:	2500      	movs	r5, #0
 8007fdc:	e7d1      	b.n	8007f82 <HAL_GPIO_DeInit+0x6e>
 8007fde:	2501      	movs	r5, #1
 8007fe0:	e7cf      	b.n	8007f82 <HAL_GPIO_DeInit+0x6e>
 8007fe2:	2502      	movs	r5, #2
 8007fe4:	e7cd      	b.n	8007f82 <HAL_GPIO_DeInit+0x6e>
 8007fe6:	bf00      	nop
 8007fe8:	40010400 	.word	0x40010400
 8007fec:	40010800 	.word	0x40010800

08007ff0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ff0:	b10a      	cbz	r2, 8007ff6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007ff2:	6101      	str	r1, [r0, #16]
  }
}
 8007ff4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007ff6:	0409      	lsls	r1, r1, #16
 8007ff8:	e7fb      	b.n	8007ff2 <HAL_GPIO_WritePin+0x2>

08007ffa <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007ffa:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ffc:	ea01 0203 	and.w	r2, r1, r3
 8008000:	ea21 0103 	bic.w	r1, r1, r3
 8008004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008008:	6101      	str	r1, [r0, #16]
}
 800800a:	4770      	bx	lr

0800800c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800800c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800800e:	4604      	mov	r4, r0
{
 8008010:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8008012:	b310      	cbz	r0, 800805a <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008014:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8008018:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800801c:	b91b      	cbnz	r3, 8008026 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800801e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008022:	f003 fb17 	bl	800b654 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008026:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008028:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800802a:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 800802c:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8008030:	f855 0b10 	ldr.w	r0, [r5], #16
 8008034:	f001 fdd0 	bl	8009bd8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800803a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	1d27      	adds	r7, r4, #4
 8008040:	6033      	str	r3, [r6, #0]
 8008042:	4626      	mov	r6, r4
 8008044:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008048:	f856 0b10 	ldr.w	r0, [r6], #16
 800804c:	f001 fdb4 	bl	8009bb8 <USB_CoreInit>
 8008050:	4605      	mov	r5, r0
 8008052:	b120      	cbz	r0, 800805e <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008054:	2302      	movs	r3, #2
 8008056:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 800805a:	2501      	movs	r5, #1
 800805c:	e04c      	b.n	80080f8 <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800805e:	4601      	mov	r1, r0
 8008060:	6820      	ldr	r0, [r4, #0]
 8008062:	f001 fdc3 	bl	8009bec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008066:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008068:	f04f 0e01 	mov.w	lr, #1
 800806c:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800806e:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008070:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8008074:	b2ca      	uxtb	r2, r1
 8008076:	4594      	cmp	ip, r2
 8008078:	f101 0101 	add.w	r1, r1, #1
 800807c:	d81b      	bhi.n	80080b6 <HAL_PCD_Init+0xaa>
 800807e:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008080:	2528      	movs	r5, #40	; 0x28
 8008082:	4619      	mov	r1, r3
 8008084:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008086:	4584      	cmp	ip, r0
 8008088:	f103 0301 	add.w	r3, r3, #1
 800808c:	d820      	bhi.n	80080d0 <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800808e:	46ec      	mov	ip, sp
 8008090:	4635      	mov	r5, r6
 8008092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008094:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	f8cc 3000 	str.w	r3, [ip]
 800809e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80080a2:	6820      	ldr	r0, [r4, #0]
 80080a4:	f001 fda4 	bl	8009bf0 <USB_DevInit>
 80080a8:	2301      	movs	r3, #1
 80080aa:	4605      	mov	r5, r0
 80080ac:	b1e8      	cbz	r0, 80080ea <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080ae:	2202      	movs	r2, #2
 80080b0:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80080b4:	e7d1      	b.n	800805a <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 80080b6:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80080ba:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80080be:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80080c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80080c6:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80080c8:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80080cc:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080ce:	e7d1      	b.n	8008074 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 80080d0:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80080d4:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80080d8:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80080dc:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80080e0:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80080e4:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080e8:	e7cc      	b.n	8008084 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 80080ea:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 80080ee:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80080f0:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80080f4:	f002 f83a 	bl	800a16c <USB_DevDisconnect>

  return HAL_OK;
}
 80080f8:	4628      	mov	r0, r5
 80080fa:	b007      	add	sp, #28
 80080fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80080fe:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8008100:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8008104:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8008106:	2b01      	cmp	r3, #1
 8008108:	d010      	beq.n	800812c <HAL_PCD_Start+0x2e>
 800810a:	2501      	movs	r5, #1
 800810c:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8008110:	6800      	ldr	r0, [r0, #0]
 8008112:	f001 fd58 	bl	8009bc6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8008116:	4629      	mov	r1, r5
 8008118:	4620      	mov	r0, r4
 800811a:	f003 fbcc 	bl	800b8b6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800811e:	6820      	ldr	r0, [r4, #0]
 8008120:	f002 f822 	bl	800a168 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008124:	2000      	movs	r0, #0
 8008126:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800812a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800812c:	2002      	movs	r0, #2
 800812e:	e7fc      	b.n	800812a <HAL_PCD_Start+0x2c>

08008130 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008130:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8008132:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8008136:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8008138:	2a01      	cmp	r2, #1
 800813a:	d00b      	beq.n	8008154 <HAL_PCD_SetAddress+0x24>
 800813c:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800813e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8008142:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008146:	6800      	ldr	r0, [r0, #0]
 8008148:	f002 f808 	bl	800a15c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800814c:	2000      	movs	r0, #0
 800814e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8008152:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008154:	2002      	movs	r0, #2
 8008156:	e7fc      	b.n	8008152 <HAL_PCD_SetAddress+0x22>

08008158 <HAL_PCD_IRQHandler>:
{
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	4604      	mov	r4, r0
 800815e:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8008160:	6800      	ldr	r0, [r0, #0]
 8008162:	f002 f805 	bl	800a170 <USB_ReadInterrupts>
 8008166:	0400      	lsls	r0, r0, #16
 8008168:	d509      	bpl.n	800817e <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800816a:	f8df 998c 	ldr.w	r9, [pc, #2444]	; 8008af8 <HAL_PCD_IRQHandler+0x9a0>
 800816e:	f8df 898c 	ldr.w	r8, [pc, #2444]	; 8008afc <HAL_PCD_IRQHandler+0x9a4>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008172:	6820      	ldr	r0, [r4, #0]
 8008174:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8008178:	041d      	lsls	r5, r3, #16
 800817a:	f100 80c1 	bmi.w	8008300 <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800817e:	6820      	ldr	r0, [r4, #0]
 8008180:	f001 fff6 	bl	800a170 <USB_ReadInterrupts>
 8008184:	0541      	lsls	r1, r0, #21
 8008186:	d50f      	bpl.n	80081a8 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008188:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800818a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800818c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008194:	041b      	lsls	r3, r3, #16
 8008196:	0c1b      	lsrs	r3, r3, #16
 8008198:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800819c:	f003 fa95 	bl	800b6ca <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80081a0:	2100      	movs	r1, #0
 80081a2:	4620      	mov	r0, r4
 80081a4:	f7ff ffc4 	bl	8008130 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80081a8:	6820      	ldr	r0, [r4, #0]
 80081aa:	f001 ffe1 	bl	800a170 <USB_ReadInterrupts>
 80081ae:	0441      	lsls	r1, r0, #17
 80081b0:	d508      	bpl.n	80081c4 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80081b2:	6822      	ldr	r2, [r4, #0]
 80081b4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80081b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081bc:	041b      	lsls	r3, r3, #16
 80081be:	0c1b      	lsrs	r3, r3, #16
 80081c0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80081c4:	6820      	ldr	r0, [r4, #0]
 80081c6:	f001 ffd3 	bl	800a170 <USB_ReadInterrupts>
 80081ca:	0482      	lsls	r2, r0, #18
 80081cc:	d508      	bpl.n	80081e0 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80081d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081d8:	041b      	lsls	r3, r3, #16
 80081da:	0c1b      	lsrs	r3, r3, #16
 80081dc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80081e0:	6820      	ldr	r0, [r4, #0]
 80081e2:	f001 ffc5 	bl	800a170 <USB_ReadInterrupts>
 80081e6:	04c3      	lsls	r3, r0, #19
 80081e8:	d51c      	bpl.n	8008224 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80081ea:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80081ec:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80081ee:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80081f2:	f023 0304 	bic.w	r3, r3, #4
 80081f6:	041b      	lsls	r3, r3, #16
 80081f8:	0c1b      	lsrs	r3, r3, #16
 80081fa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80081fe:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008202:	f023 0308 	bic.w	r3, r3, #8
 8008206:	041b      	lsls	r3, r3, #16
 8008208:	0c1b      	lsrs	r3, r3, #16
 800820a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800820e:	f003 fa7f 	bl	800b710 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008212:	6822      	ldr	r2, [r4, #0]
 8008214:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800821c:	041b      	lsls	r3, r3, #16
 800821e:	0c1b      	lsrs	r3, r3, #16
 8008220:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8008224:	6820      	ldr	r0, [r4, #0]
 8008226:	f001 ffa3 	bl	800a170 <USB_ReadInterrupts>
 800822a:	0507      	lsls	r7, r0, #20
 800822c:	d546      	bpl.n	80082bc <HAL_PCD_IRQHandler+0x164>
 800822e:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	4606      	mov	r6, r0
 8008234:	4619      	mov	r1, r3
 8008236:	461a      	mov	r2, r3
 8008238:	f103 0520 	add.w	r5, r3, #32
 800823c:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8008240:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8008242:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8008246:	d1f9      	bne.n	800823c <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8008248:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800824c:	b292      	uxth	r2, r2
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8008256:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800825a:	f022 0201 	bic.w	r2, r2, #1
 800825e:	0412      	lsls	r2, r2, #16
 8008260:	0c12      	lsrs	r2, r2, #16
 8008262:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8008266:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800826a:	0556      	lsls	r6, r2, #21
 800826c:	d5fb      	bpl.n	8008266 <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800826e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8008272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008276:	0412      	lsls	r2, r2, #16
 8008278:	0c12      	lsrs	r2, r2, #16
 800827a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800827e:	f830 2b02 	ldrh.w	r2, [r0], #2
 8008282:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8008286:	428d      	cmp	r5, r1
 8008288:	d1f9      	bne.n	800827e <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800828a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800828e:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008290:	b292      	uxth	r2, r2
 8008292:	f042 0208 	orr.w	r2, r2, #8
 8008296:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800829a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800829e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082a2:	0412      	lsls	r2, r2, #16
 80082a4:	0c12      	lsrs	r2, r2, #16
 80082a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80082aa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80082ae:	b292      	uxth	r2, r2
 80082b0:	f042 0204 	orr.w	r2, r2, #4
 80082b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80082b8:	f003 fa1a 	bl	800b6f0 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80082bc:	6820      	ldr	r0, [r4, #0]
 80082be:	f001 ff57 	bl	800a170 <USB_ReadInterrupts>
 80082c2:	0582      	lsls	r2, r0, #22
 80082c4:	d50b      	bpl.n	80082de <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80082c6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80082c8:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80082ca:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80082ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082d2:	041b      	lsls	r3, r3, #16
 80082d4:	0c1b      	lsrs	r3, r3, #16
 80082d6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80082da:	f003 f9f2 	bl	800b6c2 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80082de:	6820      	ldr	r0, [r4, #0]
 80082e0:	f001 ff46 	bl	800a170 <USB_ReadInterrupts>
 80082e4:	05c3      	lsls	r3, r0, #23
 80082e6:	d508      	bpl.n	80082fa <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80082ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082f2:	041b      	lsls	r3, r3, #16
 80082f4:	0c1b      	lsrs	r3, r3, #16
 80082f6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80082fa:	b005      	add	sp, #20
 80082fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8008300:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8008304:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 8008306:	f016 060f 	ands.w	r6, r6, #15
 800830a:	f040 80bd 	bne.w	8008488 <HAL_PCD_IRQHandler+0x330>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800830e:	f011 0110 	ands.w	r1, r1, #16
 8008312:	d12d      	bne.n	8008370 <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008314:	8803      	ldrh	r3, [r0, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	ea03 0309 	and.w	r3, r3, r9
 800831c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008320:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008322:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008326:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800832a:	b29b      	uxth	r3, r3
 800832c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008330:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008334:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8008338:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800833a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800833e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8008340:	4413      	add	r3, r2
 8008342:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008344:	4620      	mov	r0, r4
 8008346:	f003 f9b4 	bl	800b6b2 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800834a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800834e:	2b00      	cmp	r3, #0
 8008350:	f43f af0f 	beq.w	8008172 <HAL_PCD_IRQHandler+0x1a>
 8008354:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008356:	2a00      	cmp	r2, #0
 8008358:	f47f af0b 	bne.w	8008172 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800835c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8008360:	6821      	ldr	r1, [r4, #0]
 8008362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008366:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800836a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800836e:	e700      	b.n	8008172 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008370:	8805      	ldrh	r5, [r0, #0]
 8008372:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008374:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8008378:	d021      	beq.n	80083be <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800837a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800837e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8008382:	b29b      	uxth	r3, r3
 8008384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008388:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800838c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008390:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8008394:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008398:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800839c:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80083a0:	f002 fa8a 	bl	800a8b8 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80083a4:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80083a6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80083a8:	8813      	ldrh	r3, [r2, #0]
 80083aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ae:	051b      	lsls	r3, r3, #20
 80083b0:	0d1b      	lsrs	r3, r3, #20
 80083b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b6:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80083b8:	f003 f96c 	bl	800b694 <HAL_PCD_SetupStageCallback>
 80083bc:	e6d9      	b.n	8008172 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80083be:	041a      	lsls	r2, r3, #16
 80083c0:	f57f aed7 	bpl.w	8008172 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80083c4:	8803      	ldrh	r3, [r0, #0]
 80083c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ca:	051b      	lsls	r3, r3, #20
 80083cc:	0d1b      	lsrs	r3, r3, #20
 80083ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80083d4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80083d8:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80083dc:	b29b      	uxth	r3, r3
 80083de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80083e6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80083ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ee:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80083f2:	b18b      	cbz	r3, 8008418 <HAL_PCD_IRQHandler+0x2c0>
 80083f4:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 80083f8:	b171      	cbz	r1, 8008418 <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80083fa:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80083fe:	f002 fa5b 	bl	800a8b8 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8008402:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008406:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800840a:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800840c:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800840e:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8008410:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008414:	f003 f944 	bl	800b6a0 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8008418:	6821      	ldr	r1, [r4, #0]
 800841a:	880b      	ldrh	r3, [r1, #0]
 800841c:	051b      	lsls	r3, r3, #20
 800841e:	f53f aea8 	bmi.w	8008172 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008422:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8008426:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 800842a:	b29b      	uxth	r3, r3
 800842c:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8008430:	b9cd      	cbnz	r5, 8008466 <HAL_PCD_IRQHandler+0x30e>
 8008432:	5ac2      	ldrh	r2, [r0, r3]
 8008434:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008438:	0412      	lsls	r2, r2, #16
 800843a:	0c12      	lsrs	r2, r2, #16
 800843c:	52c2      	strh	r2, [r0, r3]
 800843e:	5ac2      	ldrh	r2, [r0, r3]
 8008440:	b292      	uxth	r2, r2
 8008442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008446:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008448:	880b      	ldrh	r3, [r1, #0]
 800844a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800844e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008452:	041b      	lsls	r3, r3, #16
 8008454:	0c1b      	lsrs	r3, r3, #16
 8008456:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800845a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800845e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008462:	800b      	strh	r3, [r1, #0]
 8008464:	e685      	b.n	8008172 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008466:	2d3e      	cmp	r5, #62	; 0x3e
 8008468:	d806      	bhi.n	8008478 <HAL_PCD_IRQHandler+0x320>
 800846a:	086a      	lsrs	r2, r5, #1
 800846c:	07ef      	lsls	r7, r5, #31
 800846e:	bf48      	it	mi
 8008470:	3201      	addmi	r2, #1
 8008472:	0292      	lsls	r2, r2, #10
 8008474:	b292      	uxth	r2, r2
 8008476:	e7e6      	b.n	8008446 <HAL_PCD_IRQHandler+0x2ee>
 8008478:	096a      	lsrs	r2, r5, #5
 800847a:	06ee      	lsls	r6, r5, #27
 800847c:	bf08      	it	eq
 800847e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8008482:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8008486:	e7f5      	b.n	8008474 <HAL_PCD_IRQHandler+0x31c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008488:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800848c:	041d      	lsls	r5, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800848e:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008490:	f140 80f8 	bpl.w	8008684 <HAL_PCD_IRQHandler+0x52c>
        if (ep->doublebuffer == 0U)
 8008494:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008496:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800849a:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800849e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a2:	051b      	lsls	r3, r3, #20
 80084a4:	0d1b      	lsrs	r3, r3, #20
 80084a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084aa:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80084ae:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 80084b2:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 80084b6:	b9b3      	cbnz	r3, 80084e6 <HAL_PCD_IRQHandler+0x38e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80084b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80084bc:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	3306      	adds	r3, #6
 80084c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084c8:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 80084cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80084d0:	2d00      	cmp	r5, #0
 80084d2:	f000 80bb 	beq.w	800864c <HAL_PCD_IRQHandler+0x4f4>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80084d6:	462b      	mov	r3, r5
 80084d8:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80084dc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80084e0:	f002 f9ea 	bl	800a8b8 <USB_ReadPMA>
 80084e4:	e0b2      	b.n	800864c <HAL_PCD_IRQHandler+0x4f4>
          if (ep->type == EP_TYPE_BULK)
 80084e6:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 80084ea:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	f040 808b 	bne.w	800860a <HAL_PCD_IRQHandler+0x4b2>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80084f4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80084f8:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 80084fc:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
 8008500:	ea4f 0bcc 	mov.w	fp, ip, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008504:	b29b      	uxth	r3, r3
 8008506:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800850a:	d040      	beq.n	800858e <HAL_PCD_IRQHandler+0x436>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800850c:	449b      	add	fp, r3
 800850e:	f10b 0b02 	add.w	fp, fp, #2
 8008512:	f835 501b 	ldrh.w	r5, [r5, fp, lsl #1]
 8008516:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 800851a:	4295      	cmp	r5, r2
 800851c:	d913      	bls.n	8008546 <HAL_PCD_IRQHandler+0x3ee>
 800851e:	2300      	movs	r3, #0
 8008520:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008524:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8008528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800852c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008530:	041b      	lsls	r3, r3, #16
 8008532:	0c1b      	lsrs	r3, r3, #16
 8008534:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800853c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008540:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 8008544:	e004      	b.n	8008550 <HAL_PCD_IRQHandler+0x3f8>
      ep->xfer_len -= count;
 8008546:	1b52      	subs	r2, r2, r5
 8008548:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800854c:	2a00      	cmp	r2, #0
 800854e:	d0e9      	beq.n	8008524 <HAL_PCD_IRQHandler+0x3cc>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008550:	f1be 0f00 	cmp.w	lr, #0
 8008554:	d012      	beq.n	800857c <HAL_PCD_IRQHandler+0x424>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008556:	2328      	movs	r3, #40	; 0x28
 8008558:	fb03 4306 	mla	r3, r3, r6, r4
 800855c:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8008560:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856c:	041b      	lsls	r3, r3, #16
 800856e:	0c1b      	lsrs	r3, r3, #16
 8008570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008574:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008578:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 800857c:	2d00      	cmp	r5, #0
 800857e:	d065      	beq.n	800864c <HAL_PCD_IRQHandler+0x4f4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008580:	2128      	movs	r1, #40	; 0x28
 8008582:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008586:	462b      	mov	r3, r5
 8008588:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800858c:	e7a6      	b.n	80084dc <HAL_PCD_IRQHandler+0x384>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800858e:	445b      	add	r3, fp
 8008590:	3306      	adds	r3, #6
 8008592:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8008596:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 800859a:	4295      	cmp	r5, r2
 800859c:	d912      	bls.n	80085c4 <HAL_PCD_IRQHandler+0x46c>
 800859e:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80085a2:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80085a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ae:	041b      	lsls	r3, r3, #16
 80085b0:	0c1b      	lsrs	r3, r3, #16
 80085b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085be:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 80085c2:	e004      	b.n	80085ce <HAL_PCD_IRQHandler+0x476>
      ep->xfer_len -= count;
 80085c4:	1b52      	subs	r2, r2, r5
 80085c6:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80085ca:	2a00      	cmp	r2, #0
 80085cc:	d0e9      	beq.n	80085a2 <HAL_PCD_IRQHandler+0x44a>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80085ce:	f1be 0f00 	cmp.w	lr, #0
 80085d2:	d112      	bne.n	80085fa <HAL_PCD_IRQHandler+0x4a2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80085d4:	2328      	movs	r3, #40	; 0x28
 80085d6:	fb03 4306 	mla	r3, r3, r6, r4
 80085da:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 80085de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80085e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ea:	041b      	lsls	r3, r3, #16
 80085ec:	0c1b      	lsrs	r3, r3, #16
 80085ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80085fa:	b33d      	cbz	r5, 800864c <HAL_PCD_IRQHandler+0x4f4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80085fc:	2128      	movs	r1, #40	; 0x28
 80085fe:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008602:	462b      	mov	r3, r5
 8008604:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8008608:	e768      	b.n	80084dc <HAL_PCD_IRQHandler+0x384>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800860a:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 800860e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008616:	041b      	lsls	r3, r3, #16
 8008618:	0c1b      	lsrs	r3, r3, #16
 800861a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800861e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008622:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008626:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 800862a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800862e:	00db      	lsls	r3, r3, #3
 8008630:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008634:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8008638:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800863a:	d059      	beq.n	80086f0 <HAL_PCD_IRQHandler+0x598>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800863c:	3202      	adds	r2, #2
 800863e:	4413      	add	r3, r2
 8008640:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8008644:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8008648:	2d00      	cmp	r5, #0
 800864a:	d19c      	bne.n	8008586 <HAL_PCD_IRQHandler+0x42e>
        ep->xfer_count += count;
 800864c:	2128      	movs	r1, #40	; 0x28
 800864e:	4371      	muls	r1, r6
 8008650:	1863      	adds	r3, r4, r1
 8008652:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8008656:	442a      	add	r2, r5
 8008658:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800865c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8008660:	442a      	add	r2, r5
 8008662:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008666:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800866a:	b11a      	cbz	r2, 8008674 <HAL_PCD_IRQHandler+0x51c>
 800866c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8008670:	429d      	cmp	r5, r3
 8008672:	d246      	bcs.n	8008702 <HAL_PCD_IRQHandler+0x5aa>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008674:	2328      	movs	r3, #40	; 0x28
 8008676:	fb03 4306 	mla	r3, r3, r6, r4
 800867a:	4620      	mov	r0, r4
 800867c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8008680:	f003 f80e 	bl	800b6a0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008684:	0638      	lsls	r0, r7, #24
 8008686:	f57f ad74 	bpl.w	8008172 <HAL_PCD_IRQHandler+0x1a>
 800868a:	2528      	movs	r5, #40	; 0x28
 800868c:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800868e:	fb05 4506 	mla	r5, r5, r6, r4
 8008692:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8008696:	b29b      	uxth	r3, r3
 8008698:	ea03 0309 	and.w	r3, r3, r9
 800869c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086a0:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80086a4:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 80086a8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80086ac:	2a03      	cmp	r2, #3
 80086ae:	d004      	beq.n	80086ba <HAL_PCD_IRQHandler+0x562>
 80086b0:	b11a      	cbz	r2, 80086ba <HAL_PCD_IRQHandler+0x562>
 80086b2:	2a02      	cmp	r2, #2
 80086b4:	d13d      	bne.n	8008732 <HAL_PCD_IRQHandler+0x5da>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80086b6:	05f9      	lsls	r1, r7, #23
 80086b8:	d43b      	bmi.n	8008732 <HAL_PCD_IRQHandler+0x5da>
          if (ep->xfer_len > TxByteNbre)
 80086ba:	2128      	movs	r1, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80086bc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 80086c0:	fb01 4706 	mla	r7, r1, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80086c4:	b292      	uxth	r2, r2
 80086c6:	3202      	adds	r2, #2
 80086c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80086d0:	f8b3 e400 	ldrh.w	lr, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 80086d4:	f8d7 c040 	ldr.w	ip, [r7, #64]	; 0x40
 80086d8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80086dc:	45f4      	cmp	ip, lr
 80086de:	d817      	bhi.n	8008710 <HAL_PCD_IRQHandler+0x5b8>
 80086e0:	2300      	movs	r3, #0
 80086e2:	643b      	str	r3, [r7, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80086e4:	4620      	mov	r0, r4
 80086e6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80086ea:	f002 ffe2 	bl	800b6b2 <HAL_PCD_DataInStageCallback>
 80086ee:	e540      	b.n	8008172 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80086f0:	3206      	adds	r2, #6
 80086f2:	4413      	add	r3, r2
 80086f4:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 80086f8:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80086fc:	2d00      	cmp	r5, #0
 80086fe:	d0a5      	beq.n	800864c <HAL_PCD_IRQHandler+0x4f4>
 8008700:	e77f      	b.n	8008602 <HAL_PCD_IRQHandler+0x4aa>
        ep = &hpcd->OUT_ep[epindex];
 8008702:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8008706:	6820      	ldr	r0, [r4, #0]
 8008708:	4421      	add	r1, r4
 800870a:	f001 fd47 	bl	800a19c <USB_EPStartXfer>
 800870e:	e7b9      	b.n	8008684 <HAL_PCD_IRQHandler+0x52c>
            ep->xfer_len -= TxByteNbre;
 8008710:	ebac 030e 	sub.w	r3, ip, lr
 8008714:	643b      	str	r3, [r7, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0e4      	beq.n	80086e4 <HAL_PCD_IRQHandler+0x58c>
        ep = &hpcd->IN_ep[epindex];
 800871a:	fb06 1101 	mla	r1, r6, r1, r1
            ep->xfer_buff += TxByteNbre;
 800871e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8008720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8008722:	4472      	add	r2, lr
            ep->xfer_count += TxByteNbre;
 8008724:	4473      	add	r3, lr
            ep->xfer_buff += TxByteNbre;
 8008726:	63fa      	str	r2, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8008728:	647b      	str	r3, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800872a:	4421      	add	r1, r4
 800872c:	f001 fd36 	bl	800a19c <USB_EPStartXfer>
 8008730:	e51f      	b.n	8008172 <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008732:	2228      	movs	r2, #40	; 0x28
 8008734:	fb02 4206 	mla	r2, r2, r6, r4
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008738:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800873c:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8008740:	b289      	uxth	r1, r1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008742:	f017 0e40 	ands.w	lr, r7, #64	; 0x40
 8008746:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008748:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800874c:	4451      	add	r1, sl
 800874e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008752:	f000 80e9 	beq.w	8008928 <HAL_PCD_IRQHandler+0x7d0>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008756:	3102      	adds	r1, #2
 8008758:	f83c c011 	ldrh.w	ip, [ip, r1, lsl #1]
 800875c:	2128      	movs	r1, #40	; 0x28

    if (ep->xfer_len > TxByteNbre)
 800875e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008762:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 8008764:	bf28      	it	cs
 8008766:	2200      	movcs	r2, #0
 8008768:	fb01 4106 	mla	r1, r1, r6, r4
      ep->xfer_len -= TxByteNbre;
 800876c:	bf38      	it	cc
 800876e:	eba2 020c 	subcc.w	r2, r2, ip
 8008772:	640a      	str	r2, [r1, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008774:	b2bf      	uxth	r7, r7
 8008776:	2a00      	cmp	r2, #0
 8008778:	d15c      	bne.n	8008834 <HAL_PCD_IRQHandler+0x6dc>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800877a:	f895 1029 	ldrb.w	r1, [r5, #41]	; 0x29
 800877e:	2900      	cmp	r1, #0
 8008780:	d142      	bne.n	8008808 <HAL_PCD_IRQHandler+0x6b0>
 8008782:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	b28a      	uxth	r2, r1
 800878a:	f200 4104 	addw	r1, r0, #1028	; 0x404
 800878e:	4411      	add	r1, r2
 8008790:	5aca      	ldrh	r2, [r1, r3]
 8008792:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008796:	0412      	lsls	r2, r2, #16
 8008798:	0c12      	lsrs	r2, r2, #16
 800879a:	52ca      	strh	r2, [r1, r3]
 800879c:	5aca      	ldrh	r2, [r1, r3]
 800879e:	b292      	uxth	r2, r2
 80087a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087a4:	52ca      	strh	r2, [r1, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80087a6:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80087aa:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80087ae:	bbaa      	cbnz	r2, 800881c <HAL_PCD_IRQHandler+0x6c4>
 80087b0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80087b4:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80087b8:	b292      	uxth	r2, r2
 80087ba:	4410      	add	r0, r2
 80087bc:	011a      	lsls	r2, r3, #4
 80087be:	5a83      	ldrh	r3, [r0, r2]
 80087c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087c4:	041b      	lsls	r3, r3, #16
 80087c6:	0c1b      	lsrs	r3, r3, #16
 80087c8:	5283      	strh	r3, [r0, r2]
 80087ca:	5a83      	ldrh	r3, [r0, r2]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d2:	5283      	strh	r3, [r0, r2]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80087d4:	4620      	mov	r0, r4
 80087d6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80087da:	f002 ff6a 	bl	800b6b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80087de:	2f00      	cmp	r7, #0
 80087e0:	f000 80ea 	beq.w	80089b8 <HAL_PCD_IRQHandler+0x860>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80087e4:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80087e8:	6822      	ldr	r2, [r4, #0]
 80087ea:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80087ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f6:	041b      	lsls	r3, r3, #16
 80087f8:	0c1b      	lsrs	r3, r3, #16
 80087fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008802:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8008806:	e0d7      	b.n	80089b8 <HAL_PCD_IRQHandler+0x860>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008808:	2901      	cmp	r1, #1
 800880a:	d1cc      	bne.n	80087a6 <HAL_PCD_IRQHandler+0x64e>
 800880c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8008810:	011b      	lsls	r3, r3, #4
 8008812:	b28e      	uxth	r6, r1
 8008814:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8008818:	4431      	add	r1, r6
 800881a:	e7c3      	b.n	80087a4 <HAL_PCD_IRQHandler+0x64c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800881c:	2a01      	cmp	r2, #1
 800881e:	d1d9      	bne.n	80087d4 <HAL_PCD_IRQHandler+0x67c>
 8008820:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8008824:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8008828:	b292      	uxth	r2, r2
 800882a:	4410      	add	r0, r2
 800882c:	2200      	movs	r2, #0
 800882e:	011b      	lsls	r3, r3, #4
 8008830:	52c2      	strh	r2, [r0, r3]
 8008832:	e7cf      	b.n	80087d4 <HAL_PCD_IRQHandler+0x67c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008834:	b16f      	cbz	r7, 8008852 <HAL_PCD_IRQHandler+0x6fa>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008836:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800883a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800883e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008842:	0412      	lsls	r2, r2, #16
 8008844:	0c12      	lsrs	r2, r2, #16
 8008846:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800884a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800884e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8008852:	2328      	movs	r3, #40	; 0x28
 8008854:	fb03 4306 	mla	r3, r3, r6, r4
 8008858:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800885c:	2a01      	cmp	r2, #1
 800885e:	f040 80ab 	bne.w	80089b8 <HAL_PCD_IRQHandler+0x860>
        ep->xfer_count += TxByteNbre;
 8008862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8008864:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8008866:	4462      	add	r2, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8008868:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 800886a:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800886c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800886e:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8008870:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8008872:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8008874:	d327      	bcc.n	80088c6 <HAL_PCD_IRQHandler+0x76e>
          ep->xfer_len_db -= len;
 8008876:	1abf      	subs	r7, r7, r2
 8008878:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800887a:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 800887e:	b293      	uxth	r3, r2
 8008880:	2f00      	cmp	r7, #0
 8008882:	d143      	bne.n	800890c <HAL_PCD_IRQHandler+0x7b4>
 8008884:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8008888:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
 800888c:	b2bf      	uxth	r7, r7
 800888e:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 8008892:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8008896:	4477      	add	r7, lr
 8008898:	bb02      	cbnz	r2, 80088dc <HAL_PCD_IRQHandler+0x784>
 800889a:	f83c 2007 	ldrh.w	r2, [ip, r7]
 800889e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80088a2:	0412      	lsls	r2, r2, #16
 80088a4:	0c12      	lsrs	r2, r2, #16
 80088a6:	f82c 2007 	strh.w	r2, [ip, r7]
 80088aa:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80088ae:	b292      	uxth	r2, r2
 80088b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088b4:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80088b8:	2228      	movs	r2, #40	; 0x28
 80088ba:	fb02 4606 	mla	r6, r2, r6, r4
 80088be:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80088c0:	f001 fc5c 	bl	800a17c <USB_WritePMA>
 80088c4:	e078      	b.n	80089b8 <HAL_PCD_IRQHandler+0x860>
        else if (ep->xfer_len_db == 0U)
 80088c6:	b91f      	cbnz	r7, 80088d0 <HAL_PCD_IRQHandler+0x778>
    if (ep->xfer_len > TxByteNbre)
 80088c8:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80088ca:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
 80088ce:	e7d4      	b.n	800887a <HAL_PCD_IRQHandler+0x722>
          ep->xfer_fill_db = 0U;
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80088d6:	649a      	str	r2, [r3, #72]	; 0x48
 80088d8:	463a      	mov	r2, r7
 80088da:	e7ce      	b.n	800887a <HAL_PCD_IRQHandler+0x722>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80088dc:	2a3e      	cmp	r2, #62	; 0x3e
 80088de:	d80c      	bhi.n	80088fa <HAL_PCD_IRQHandler+0x7a2>
 80088e0:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80088e4:	07d2      	lsls	r2, r2, #31
 80088e6:	bf48      	it	mi
 80088e8:	f10e 0e01 	addmi.w	lr, lr, #1
 80088ec:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80088f0:	fa1f fe8e 	uxth.w	lr, lr
 80088f4:	f82c e007 	strh.w	lr, [ip, r7]
 80088f8:	e7de      	b.n	80088b8 <HAL_PCD_IRQHandler+0x760>
 80088fa:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 80088fe:	06d2      	lsls	r2, r2, #27
 8008900:	bf08      	it	eq
 8008902:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8008906:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800890a:	e7f1      	b.n	80088f0 <HAL_PCD_IRQHandler+0x798>
 800890c:	2f01      	cmp	r7, #1
 800890e:	d1d3      	bne.n	80088b8 <HAL_PCD_IRQHandler+0x760>
 8008910:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8008914:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 8008918:	fa1f fc82 	uxth.w	ip, r2
 800891c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8008920:	013f      	lsls	r7, r7, #4
 8008922:	4462      	add	r2, ip
 8008924:	52bb      	strh	r3, [r7, r2]
 8008926:	e7c7      	b.n	80088b8 <HAL_PCD_IRQHandler+0x760>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008928:	3106      	adds	r1, #6
 800892a:	f83c c011 	ldrh.w	ip, [ip, r1, lsl #1]
 800892e:	2128      	movs	r1, #40	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 8008930:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008934:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8008936:	bf88      	it	hi
 8008938:	4672      	movhi	r2, lr
 800893a:	fb01 4106 	mla	r1, r1, r6, r4
      ep->xfer_len -= TxByteNbre;
 800893e:	bf98      	it	ls
 8008940:	eba2 020c 	subls.w	r2, r2, ip
 8008944:	640a      	str	r2, [r1, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8008946:	b2bf      	uxth	r7, r7
 8008948:	2a00      	cmp	r2, #0
 800894a:	d15f      	bne.n	8008a0c <HAL_PCD_IRQHandler+0x8b4>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800894c:	f895 1029 	ldrb.w	r1, [r5, #41]	; 0x29
 8008950:	2900      	cmp	r1, #0
 8008952:	d145      	bne.n	80089e0 <HAL_PCD_IRQHandler+0x888>
 8008954:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	b28a      	uxth	r2, r1
 800895c:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8008960:	4411      	add	r1, r2
 8008962:	5aca      	ldrh	r2, [r1, r3]
 8008964:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008968:	0412      	lsls	r2, r2, #16
 800896a:	0c12      	lsrs	r2, r2, #16
 800896c:	52ca      	strh	r2, [r1, r3]
 800896e:	5aca      	ldrh	r2, [r1, r3]
 8008970:	b292      	uxth	r2, r2
 8008972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008976:	52ca      	strh	r2, [r1, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008978:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800897c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8008980:	2a00      	cmp	r2, #0
 8008982:	d137      	bne.n	80089f4 <HAL_PCD_IRQHandler+0x89c>
 8008984:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8008988:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800898c:	b292      	uxth	r2, r2
 800898e:	4410      	add	r0, r2
 8008990:	011a      	lsls	r2, r3, #4
 8008992:	5a83      	ldrh	r3, [r0, r2]
 8008994:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008998:	041b      	lsls	r3, r3, #16
 800899a:	0c1b      	lsrs	r3, r3, #16
 800899c:	5283      	strh	r3, [r0, r2]
 800899e:	5a83      	ldrh	r3, [r0, r2]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089a6:	5283      	strh	r3, [r0, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80089a8:	4620      	mov	r0, r4
 80089aa:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80089ae:	f002 fe80 	bl	800b6b2 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80089b2:	2f00      	cmp	r7, #0
 80089b4:	f43f af16 	beq.w	80087e4 <HAL_PCD_IRQHandler+0x68c>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80089b8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80089bc:	6822      	ldr	r2, [r4, #0]
 80089be:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089cc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80089d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80089dc:	f7ff bbc9 	b.w	8008172 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80089e0:	2901      	cmp	r1, #1
 80089e2:	d1c9      	bne.n	8008978 <HAL_PCD_IRQHandler+0x820>
 80089e4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	b28e      	uxth	r6, r1
 80089ec:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80089f0:	4431      	add	r1, r6
 80089f2:	e7c0      	b.n	8008976 <HAL_PCD_IRQHandler+0x81e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80089f4:	2a01      	cmp	r2, #1
 80089f6:	d1d7      	bne.n	80089a8 <HAL_PCD_IRQHandler+0x850>
 80089f8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80089fc:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8008a00:	b292      	uxth	r2, r2
 8008a02:	4410      	add	r0, r2
 8008a04:	2200      	movs	r2, #0
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	52c2      	strh	r2, [r0, r3]
 8008a0a:	e7cd      	b.n	80089a8 <HAL_PCD_IRQHandler+0x850>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008a0c:	b96f      	cbnz	r7, 8008a2a <HAL_PCD_IRQHandler+0x8d2>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008a0e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008a12:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008a16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a1a:	0412      	lsls	r2, r2, #16
 8008a1c:	0c12      	lsrs	r2, r2, #16
 8008a1e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008a22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a26:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8008a2a:	2328      	movs	r3, #40	; 0x28
 8008a2c:	fb03 4306 	mla	r3, r3, r6, r4
 8008a30:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8008a34:	2a01      	cmp	r2, #1
 8008a36:	d1bf      	bne.n	80089b8 <HAL_PCD_IRQHandler+0x860>
        ep->xfer_count += TxByteNbre;
 8008a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8008a3a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8008a3c:	4462      	add	r2, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8008a3e:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8008a40:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8008a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8008a44:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8008a46:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8008a48:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8008a4a:	d325      	bcc.n	8008a98 <HAL_PCD_IRQHandler+0x940>
          ep->xfer_len_db -= len;
 8008a4c:	1abf      	subs	r7, r7, r2
 8008a4e:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008a50:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8008a54:	b293      	uxth	r3, r2
 8008a56:	2f00      	cmp	r7, #0
 8008a58:	d141      	bne.n	8008ade <HAL_PCD_IRQHandler+0x986>
 8008a5a:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8008a5e:	fa1f f78c 	uxth.w	r7, ip
 8008a62:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 8008a66:	44bc      	add	ip, r7
 8008a68:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 8008a6c:	013f      	lsls	r7, r7, #4
 8008a6e:	b9f2      	cbnz	r2, 8008aae <HAL_PCD_IRQHandler+0x956>
 8008a70:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8008a74:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008a78:	0412      	lsls	r2, r2, #16
 8008a7a:	0c12      	lsrs	r2, r2, #16
 8008a7c:	f82c 2007 	strh.w	r2, [ip, r7]
 8008a80:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8008a84:	b292      	uxth	r2, r2
 8008a86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a8a:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008a8e:	2228      	movs	r2, #40	; 0x28
 8008a90:	fb02 4606 	mla	r6, r2, r6, r4
 8008a94:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8008a96:	e713      	b.n	80088c0 <HAL_PCD_IRQHandler+0x768>
        else if (ep->xfer_len_db == 0U)
 8008a98:	b91f      	cbnz	r7, 8008aa2 <HAL_PCD_IRQHandler+0x94a>
    if (ep->xfer_len >= TxByteNbre)
 8008a9a:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8008a9c:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
 8008aa0:	e7d6      	b.n	8008a50 <HAL_PCD_IRQHandler+0x8f8>
          ep->xfer_len_db = 0U;
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8008aa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8008aaa:	463a      	mov	r2, r7
 8008aac:	e7d0      	b.n	8008a50 <HAL_PCD_IRQHandler+0x8f8>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008aae:	2a3e      	cmp	r2, #62	; 0x3e
 8008ab0:	d80c      	bhi.n	8008acc <HAL_PCD_IRQHandler+0x974>
 8008ab2:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8008ab6:	07d2      	lsls	r2, r2, #31
 8008ab8:	bf48      	it	mi
 8008aba:	f10e 0e01 	addmi.w	lr, lr, #1
 8008abe:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8008ac2:	fa1f fe8e 	uxth.w	lr, lr
 8008ac6:	f82c e007 	strh.w	lr, [ip, r7]
 8008aca:	e7e0      	b.n	8008a8e <HAL_PCD_IRQHandler+0x936>
 8008acc:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8008ad0:	06d2      	lsls	r2, r2, #27
 8008ad2:	bf08      	it	eq
 8008ad4:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8008ad8:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8008adc:	e7f1      	b.n	8008ac2 <HAL_PCD_IRQHandler+0x96a>
 8008ade:	2f01      	cmp	r7, #1
 8008ae0:	d1d5      	bne.n	8008a8e <HAL_PCD_IRQHandler+0x936>
 8008ae2:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8008ae6:	b2ba      	uxth	r2, r7
 8008ae8:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 8008aec:	4417      	add	r7, r2
 8008aee:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8008af2:	0112      	lsls	r2, r2, #4
 8008af4:	52bb      	strh	r3, [r7, r2]
 8008af6:	e7ca      	b.n	8008a8e <HAL_PCD_IRQHandler+0x936>
 8008af8:	ffff8f0f 	.word	0xffff8f0f
 8008afc:	ffff8000 	.word	0xffff8000

08008b00 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8008b00:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	4605      	mov	r5, r0
 8008b08:	f001 0007 	and.w	r0, r1, #7
 8008b0c:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8008b10:	d01c      	beq.n	8008b4c <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 8008b12:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b14:	fb00 1101 	mla	r1, r0, r1, r1
 8008b18:	4429      	add	r1, r5
    ep->is_in = 1U;
 8008b1a:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
 8008b1c:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8008b1e:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b20:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8008b22:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8008b24:	b102      	cbz	r2, 8008b28 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8008b26:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8008b28:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8008b2a:	bf04      	itt	eq
 8008b2c:	2300      	moveq	r3, #0
 8008b2e:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8008b30:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d013      	beq.n	8008b60 <HAL_PCD_EP_Open+0x60>
 8008b38:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008b3a:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8008b3c:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008b40:	f001 f86a 	bl	8009c18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008b44:	2000      	movs	r0, #0
 8008b46:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8008b4c:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b4e:	fb01 f400 	mul.w	r4, r1, r0
 8008b52:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8008b56:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b58:	4429      	add	r1, r5
    ep->is_in = 0U;
 8008b5a:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8008b5e:	e7dd      	b.n	8008b1c <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8008b60:	2002      	movs	r0, #2
 8008b62:	e7f2      	b.n	8008b4a <HAL_PCD_EP_Open+0x4a>

08008b64 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8008b64:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8008b68:	b510      	push	{r4, lr}
 8008b6a:	f001 0207 	and.w	r2, r1, #7
 8008b6e:	4604      	mov	r4, r0
 8008b70:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8008b74:	d013      	beq.n	8008b9e <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 8008b76:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b78:	fb02 1101 	mla	r1, r2, r1, r1
 8008b7c:	4401      	add	r1, r0
    ep->is_in = 1U;
 8008b7e:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008b80:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008b82:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d013      	beq.n	8008bb2 <HAL_PCD_EP_Close+0x4e>
 8008b8a:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008b8c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008b8e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008b92:	f001 f999 	bl	8009ec8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008b96:	2000      	movs	r0, #0
 8008b98:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8008b9c:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b9e:	fb01 f302 	mul.w	r3, r1, r2
 8008ba2:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8008ba6:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008ba8:	4403      	add	r3, r0
 8008baa:	2000      	movs	r0, #0
 8008bac:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8008bb0:	e7e6      	b.n	8008b80 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8008bb2:	2002      	movs	r0, #2
 8008bb4:	e7f2      	b.n	8008b9c <HAL_PCD_EP_Close+0x38>

08008bb6 <HAL_PCD_EP_Receive>:
{
 8008bb6:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8008bb8:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 8008bba:	2600      	movs	r6, #0
 8008bbc:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8008bc0:	434c      	muls	r4, r1
 8008bc2:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8008bc4:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bc8:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008bcc:	4401      	add	r1, r0
  ep->xfer_len = len;
 8008bce:	e9c5 235f 	strd	r2, r3, [r5, #380]	; 0x17c
  ep->xfer_count = 0U;
 8008bd2:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8008bd6:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008bda:	6800      	ldr	r0, [r0, #0]
 8008bdc:	f001 fade 	bl	800a19c <USB_EPStartXfer>
}
 8008be0:	4630      	mov	r0, r6
 8008be2:	bd70      	pop	{r4, r5, r6, pc}

08008be4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008be4:	2328      	movs	r3, #40	; 0x28
 8008be6:	f001 0107 	and.w	r1, r1, #7
 8008bea:	fb03 0101 	mla	r1, r3, r1, r0
}
 8008bee:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_PCD_EP_Transmit>:
{
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8008bfa:	2128      	movs	r1, #40	; 0x28
 8008bfc:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8008c00:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8008c02:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8008c06:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c08:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 8008c0c:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c10:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 8008c12:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8008c14:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8008c16:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c1a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c1e:	6800      	ldr	r0, [r0, #0]
 8008c20:	f001 fabc 	bl	800a19c <USB_EPStartXfer>
}
 8008c24:	4630      	mov	r0, r6
 8008c26:	bd70      	pop	{r4, r5, r6, pc}

08008c28 <HAL_PCD_EP_SetStall>:
{
 8008c28:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008c2a:	6843      	ldr	r3, [r0, #4]
 8008c2c:	f001 0507 	and.w	r5, r1, #7
 8008c30:	429d      	cmp	r5, r3
{
 8008c32:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008c34:	d828      	bhi.n	8008c88 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8008c36:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008c3a:	f04f 0328 	mov.w	r3, #40	; 0x28
 8008c3e:	d01a      	beq.n	8008c76 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c40:	fb05 3303 	mla	r3, r5, r3, r3
 8008c44:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8008c46:	2301      	movs	r3, #1
 8008c48:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8008c4a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c4c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8008c4e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8008c50:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d019      	beq.n	8008c8c <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008c58:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008c5a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008c5e:	f001 fa12 	bl	800a086 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c62:	b925      	cbnz	r5, 8008c6e <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008c64:	6820      	ldr	r0, [r4, #0]
 8008c66:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8008c6a:	f001 fa85 	bl	800a178 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8008c6e:	2000      	movs	r0, #0
 8008c70:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8008c74:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8008c76:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8008c78:	434b      	muls	r3, r1
 8008c7a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8008c7e:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8008c80:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008c82:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8008c86:	e7e0      	b.n	8008c4a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8008c88:	2001      	movs	r0, #1
 8008c8a:	e7f3      	b.n	8008c74 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8008c8c:	2002      	movs	r0, #2
 8008c8e:	e7f1      	b.n	8008c74 <HAL_PCD_EP_SetStall+0x4c>

08008c90 <HAL_PCD_EP_ClrStall>:
{
 8008c90:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008c92:	6843      	ldr	r3, [r0, #4]
 8008c94:	f001 020f 	and.w	r2, r1, #15
 8008c98:	429a      	cmp	r2, r3
{
 8008c9a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008c9c:	d826      	bhi.n	8008cec <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8008c9e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008ca2:	f001 0207 	and.w	r2, r1, #7
 8008ca6:	f04f 0128 	mov.w	r1, #40	; 0x28
 8008caa:	d015      	beq.n	8008cd8 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 8008cac:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cae:	fb02 1101 	mla	r1, r2, r1, r1
 8008cb2:	4401      	add	r1, r0
    ep->is_in = 1U;
 8008cb4:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 8008cb6:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cb8:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8008cba:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8008cbc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d015      	beq.n	8008cf0 <HAL_PCD_EP_ClrStall+0x60>
 8008cc4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008cc6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008cc8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008ccc:	f001 f9fb 	bl	800a0c6 <USB_EPClearStall>
  return HAL_OK;
 8008cd0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8008cd2:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cd8:	fb01 f302 	mul.w	r3, r1, r2
 8008cdc:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8008ce0:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008ce2:	4403      	add	r3, r0
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8008cea:	e7e4      	b.n	8008cb6 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8008cec:	2001      	movs	r0, #1
 8008cee:	e7f2      	b.n	8008cd6 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8008cf0:	2002      	movs	r0, #2
 8008cf2:	e7f0      	b.n	8008cd6 <HAL_PCD_EP_ClrStall+0x46>

08008cf4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008cf8:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cfc:	bf1b      	ittet	ne
 8008cfe:	f001 0107 	andne.w	r1, r1, #7
 8008d02:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008d06:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d0a:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8008d0c:	bf08      	it	eq
 8008d0e:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008d12:	b299      	uxth	r1, r3
 8008d14:	b91a      	cbnz	r2, 8008d1e <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008d16:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008d18:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8008d1e:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008d20:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8008d22:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008d24:	e7f9      	b.n	8008d1a <HAL_PCDEx_PMAConfig+0x26>
	...

08008d28 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008d28:	2201      	movs	r2, #1
 8008d2a:	4b01      	ldr	r3, [pc, #4]	; (8008d30 <HAL_PWR_EnableBkUpAccess+0x8>)
 8008d2c:	601a      	str	r2, [r3, #0]
}
 8008d2e:	4770      	bx	lr
 8008d30:	420e0020 	.word	0x420e0020

08008d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d38:	4605      	mov	r5, r0
 8008d3a:	b338      	cbz	r0, 8008d8c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d3c:	6803      	ldr	r3, [r0, #0]
 8008d3e:	07db      	lsls	r3, r3, #31
 8008d40:	d410      	bmi.n	8008d64 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d42:	682b      	ldr	r3, [r5, #0]
 8008d44:	079f      	lsls	r7, r3, #30
 8008d46:	d45e      	bmi.n	8008e06 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	0719      	lsls	r1, r3, #28
 8008d4c:	f100 8095 	bmi.w	8008e7a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	075a      	lsls	r2, r3, #29
 8008d54:	f100 80bf 	bmi.w	8008ed6 <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d58:	69e8      	ldr	r0, [r5, #28]
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	f040 812c 	bne.w	8008fb8 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8008d60:	2000      	movs	r0, #0
 8008d62:	e029      	b.n	8008db8 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d64:	4c8f      	ldr	r4, [pc, #572]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	f003 030c 	and.w	r3, r3, #12
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d007      	beq.n	8008d80 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008d70:	6863      	ldr	r3, [r4, #4]
 8008d72:	f003 030c 	and.w	r3, r3, #12
 8008d76:	2b08      	cmp	r3, #8
 8008d78:	d10a      	bne.n	8008d90 <HAL_RCC_OscConfig+0x5c>
 8008d7a:	6863      	ldr	r3, [r4, #4]
 8008d7c:	03de      	lsls	r6, r3, #15
 8008d7e:	d507      	bpl.n	8008d90 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	039c      	lsls	r4, r3, #14
 8008d84:	d5dd      	bpl.n	8008d42 <HAL_RCC_OscConfig+0xe>
 8008d86:	686b      	ldr	r3, [r5, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1da      	bne.n	8008d42 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8008d8c:	2001      	movs	r0, #1
 8008d8e:	e013      	b.n	8008db8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d90:	686b      	ldr	r3, [r5, #4]
 8008d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d96:	d112      	bne.n	8008dbe <HAL_RCC_OscConfig+0x8a>
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008da0:	f7fe fdc0 	bl	8007924 <HAL_GetTick>
 8008da4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	0398      	lsls	r0, r3, #14
 8008daa:	d4ca      	bmi.n	8008d42 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dac:	f7fe fdba 	bl	8007924 <HAL_GetTick>
 8008db0:	1b80      	subs	r0, r0, r6
 8008db2:	2864      	cmp	r0, #100	; 0x64
 8008db4:	d9f7      	bls.n	8008da6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8008db6:	2003      	movs	r0, #3
}
 8008db8:	b002      	add	sp, #8
 8008dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dbe:	b99b      	cbnz	r3, 8008de8 <HAL_RCC_OscConfig+0xb4>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dc6:	6023      	str	r3, [r4, #0]
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008dd0:	f7fe fda8 	bl	8007924 <HAL_GetTick>
 8008dd4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	0399      	lsls	r1, r3, #14
 8008dda:	d5b2      	bpl.n	8008d42 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ddc:	f7fe fda2 	bl	8007924 <HAL_GetTick>
 8008de0:	1b80      	subs	r0, r0, r6
 8008de2:	2864      	cmp	r0, #100	; 0x64
 8008de4:	d9f7      	bls.n	8008dd6 <HAL_RCC_OscConfig+0xa2>
 8008de6:	e7e6      	b.n	8008db6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	d103      	bne.n	8008df8 <HAL_RCC_OscConfig+0xc4>
 8008df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	e7cf      	b.n	8008d98 <HAL_RCC_OscConfig+0x64>
 8008df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e04:	e7cb      	b.n	8008d9e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e06:	4c67      	ldr	r4, [pc, #412]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008e08:	6863      	ldr	r3, [r4, #4]
 8008e0a:	f013 0f0c 	tst.w	r3, #12
 8008e0e:	d007      	beq.n	8008e20 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008e10:	6863      	ldr	r3, [r4, #4]
 8008e12:	f003 030c 	and.w	r3, r3, #12
 8008e16:	2b08      	cmp	r3, #8
 8008e18:	d110      	bne.n	8008e3c <HAL_RCC_OscConfig+0x108>
 8008e1a:	6863      	ldr	r3, [r4, #4]
 8008e1c:	03da      	lsls	r2, r3, #15
 8008e1e:	d40d      	bmi.n	8008e3c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	079b      	lsls	r3, r3, #30
 8008e24:	d502      	bpl.n	8008e2c <HAL_RCC_OscConfig+0xf8>
 8008e26:	692b      	ldr	r3, [r5, #16]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d1af      	bne.n	8008d8c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	696a      	ldr	r2, [r5, #20]
 8008e30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008e34:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	e785      	b.n	8008d48 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e3c:	692a      	ldr	r2, [r5, #16]
 8008e3e:	4b5a      	ldr	r3, [pc, #360]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008e40:	b16a      	cbz	r2, 8008e5e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8008e42:	2201      	movs	r2, #1
 8008e44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008e46:	f7fe fd6d 	bl	8007924 <HAL_GetTick>
 8008e4a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	079f      	lsls	r7, r3, #30
 8008e50:	d4ec      	bmi.n	8008e2c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e52:	f7fe fd67 	bl	8007924 <HAL_GetTick>
 8008e56:	1b80      	subs	r0, r0, r6
 8008e58:	2802      	cmp	r0, #2
 8008e5a:	d9f7      	bls.n	8008e4c <HAL_RCC_OscConfig+0x118>
 8008e5c:	e7ab      	b.n	8008db6 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8008e5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008e60:	f7fe fd60 	bl	8007924 <HAL_GetTick>
 8008e64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	0798      	lsls	r0, r3, #30
 8008e6a:	f57f af6d 	bpl.w	8008d48 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e6e:	f7fe fd59 	bl	8007924 <HAL_GetTick>
 8008e72:	1b80      	subs	r0, r0, r6
 8008e74:	2802      	cmp	r0, #2
 8008e76:	d9f6      	bls.n	8008e66 <HAL_RCC_OscConfig+0x132>
 8008e78:	e79d      	b.n	8008db6 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e7a:	69aa      	ldr	r2, [r5, #24]
 8008e7c:	4e49      	ldr	r6, [pc, #292]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008e7e:	4b4b      	ldr	r3, [pc, #300]	; (8008fac <HAL_RCC_OscConfig+0x278>)
 8008e80:	b1da      	cbz	r2, 8008eba <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8008e82:	2201      	movs	r2, #1
 8008e84:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008e86:	f7fe fd4d 	bl	8007924 <HAL_GetTick>
 8008e8a:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e8e:	079b      	lsls	r3, r3, #30
 8008e90:	d50d      	bpl.n	8008eae <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008e92:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008e96:	4b46      	ldr	r3, [pc, #280]	; (8008fb0 <HAL_RCC_OscConfig+0x27c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e9e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8008ea0:	bf00      	nop
  }
  while (Delay --);
 8008ea2:	9b01      	ldr	r3, [sp, #4]
 8008ea4:	1e5a      	subs	r2, r3, #1
 8008ea6:	9201      	str	r2, [sp, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f9      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x16c>
 8008eac:	e750      	b.n	8008d50 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008eae:	f7fe fd39 	bl	8007924 <HAL_GetTick>
 8008eb2:	1b00      	subs	r0, r0, r4
 8008eb4:	2802      	cmp	r0, #2
 8008eb6:	d9e9      	bls.n	8008e8c <HAL_RCC_OscConfig+0x158>
 8008eb8:	e77d      	b.n	8008db6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8008eba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008ebc:	f7fe fd32 	bl	8007924 <HAL_GetTick>
 8008ec0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ec2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008ec4:	079f      	lsls	r7, r3, #30
 8008ec6:	f57f af43 	bpl.w	8008d50 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008eca:	f7fe fd2b 	bl	8007924 <HAL_GetTick>
 8008ece:	1b00      	subs	r0, r0, r4
 8008ed0:	2802      	cmp	r0, #2
 8008ed2:	d9f6      	bls.n	8008ec2 <HAL_RCC_OscConfig+0x18e>
 8008ed4:	e76f      	b.n	8008db6 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ed6:	4c33      	ldr	r4, [pc, #204]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008ed8:	69e3      	ldr	r3, [r4, #28]
 8008eda:	00d8      	lsls	r0, r3, #3
 8008edc:	d424      	bmi.n	8008f28 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8008ede:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ee0:	69e3      	ldr	r3, [r4, #28]
 8008ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ee6:	61e3      	str	r3, [r4, #28]
 8008ee8:	69e3      	ldr	r3, [r4, #28]
 8008eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ef2:	4e30      	ldr	r6, [pc, #192]	; (8008fb4 <HAL_RCC_OscConfig+0x280>)
 8008ef4:	6833      	ldr	r3, [r6, #0]
 8008ef6:	05d9      	lsls	r1, r3, #23
 8008ef8:	d518      	bpl.n	8008f2c <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008efa:	68eb      	ldr	r3, [r5, #12]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d126      	bne.n	8008f4e <HAL_RCC_OscConfig+0x21a>
 8008f00:	6a23      	ldr	r3, [r4, #32]
 8008f02:	f043 0301 	orr.w	r3, r3, #1
 8008f06:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008f08:	f7fe fd0c 	bl	8007924 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f0c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008f10:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f12:	6a23      	ldr	r3, [r4, #32]
 8008f14:	079b      	lsls	r3, r3, #30
 8008f16:	d53f      	bpl.n	8008f98 <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8008f18:	2f00      	cmp	r7, #0
 8008f1a:	f43f af1d 	beq.w	8008d58 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f1e:	69e3      	ldr	r3, [r4, #28]
 8008f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f24:	61e3      	str	r3, [r4, #28]
 8008f26:	e717      	b.n	8008d58 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8008f28:	2700      	movs	r7, #0
 8008f2a:	e7e2      	b.n	8008ef2 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f2c:	6833      	ldr	r3, [r6, #0]
 8008f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f32:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8008f34:	f7fe fcf6 	bl	8007924 <HAL_GetTick>
 8008f38:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f3a:	6833      	ldr	r3, [r6, #0]
 8008f3c:	05da      	lsls	r2, r3, #23
 8008f3e:	d4dc      	bmi.n	8008efa <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f40:	f7fe fcf0 	bl	8007924 <HAL_GetTick>
 8008f44:	eba0 0008 	sub.w	r0, r0, r8
 8008f48:	2864      	cmp	r0, #100	; 0x64
 8008f4a:	d9f6      	bls.n	8008f3a <HAL_RCC_OscConfig+0x206>
 8008f4c:	e733      	b.n	8008db6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f4e:	b9ab      	cbnz	r3, 8008f7c <HAL_RCC_OscConfig+0x248>
 8008f50:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f52:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f56:	f023 0301 	bic.w	r3, r3, #1
 8008f5a:	6223      	str	r3, [r4, #32]
 8008f5c:	6a23      	ldr	r3, [r4, #32]
 8008f5e:	f023 0304 	bic.w	r3, r3, #4
 8008f62:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008f64:	f7fe fcde 	bl	8007924 <HAL_GetTick>
 8008f68:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f6a:	6a23      	ldr	r3, [r4, #32]
 8008f6c:	0798      	lsls	r0, r3, #30
 8008f6e:	d5d3      	bpl.n	8008f18 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f70:	f7fe fcd8 	bl	8007924 <HAL_GetTick>
 8008f74:	1b80      	subs	r0, r0, r6
 8008f76:	4540      	cmp	r0, r8
 8008f78:	d9f7      	bls.n	8008f6a <HAL_RCC_OscConfig+0x236>
 8008f7a:	e71c      	b.n	8008db6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f7c:	2b05      	cmp	r3, #5
 8008f7e:	6a23      	ldr	r3, [r4, #32]
 8008f80:	d103      	bne.n	8008f8a <HAL_RCC_OscConfig+0x256>
 8008f82:	f043 0304 	orr.w	r3, r3, #4
 8008f86:	6223      	str	r3, [r4, #32]
 8008f88:	e7ba      	b.n	8008f00 <HAL_RCC_OscConfig+0x1cc>
 8008f8a:	f023 0301 	bic.w	r3, r3, #1
 8008f8e:	6223      	str	r3, [r4, #32]
 8008f90:	6a23      	ldr	r3, [r4, #32]
 8008f92:	f023 0304 	bic.w	r3, r3, #4
 8008f96:	e7b6      	b.n	8008f06 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f98:	f7fe fcc4 	bl	8007924 <HAL_GetTick>
 8008f9c:	1b80      	subs	r0, r0, r6
 8008f9e:	4540      	cmp	r0, r8
 8008fa0:	d9b7      	bls.n	8008f12 <HAL_RCC_OscConfig+0x1de>
 8008fa2:	e708      	b.n	8008db6 <HAL_RCC_OscConfig+0x82>
 8008fa4:	40021000 	.word	0x40021000
 8008fa8:	42420000 	.word	0x42420000
 8008fac:	42420480 	.word	0x42420480
 8008fb0:	20000000 	.word	0x20000000
 8008fb4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fb8:	4b2a      	ldr	r3, [pc, #168]	; (8009064 <HAL_RCC_OscConfig+0x330>)
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	461c      	mov	r4, r3
 8008fbe:	f002 020c 	and.w	r2, r2, #12
 8008fc2:	2a08      	cmp	r2, #8
 8008fc4:	d03d      	beq.n	8009042 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	4e27      	ldr	r6, [pc, #156]	; (8009068 <HAL_RCC_OscConfig+0x334>)
 8008fca:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008fcc:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fce:	d12b      	bne.n	8009028 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8008fd0:	f7fe fca8 	bl	8007924 <HAL_GetTick>
 8008fd4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	0199      	lsls	r1, r3, #6
 8008fda:	d41f      	bmi.n	800901c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008fdc:	6a2b      	ldr	r3, [r5, #32]
 8008fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fe2:	d105      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008fe4:	6862      	ldr	r2, [r4, #4]
 8008fe6:	68a9      	ldr	r1, [r5, #8]
 8008fe8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008fec:	430a      	orrs	r2, r1
 8008fee:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ff0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008ff2:	6862      	ldr	r2, [r4, #4]
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8008ffe:	2301      	movs	r3, #1
 8009000:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009002:	f7fe fc8f 	bl	8007924 <HAL_GetTick>
 8009006:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	019a      	lsls	r2, r3, #6
 800900c:	f53f aea8 	bmi.w	8008d60 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009010:	f7fe fc88 	bl	8007924 <HAL_GetTick>
 8009014:	1b40      	subs	r0, r0, r5
 8009016:	2802      	cmp	r0, #2
 8009018:	d9f6      	bls.n	8009008 <HAL_RCC_OscConfig+0x2d4>
 800901a:	e6cc      	b.n	8008db6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800901c:	f7fe fc82 	bl	8007924 <HAL_GetTick>
 8009020:	1bc0      	subs	r0, r0, r7
 8009022:	2802      	cmp	r0, #2
 8009024:	d9d7      	bls.n	8008fd6 <HAL_RCC_OscConfig+0x2a2>
 8009026:	e6c6      	b.n	8008db6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8009028:	f7fe fc7c 	bl	8007924 <HAL_GetTick>
 800902c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	019b      	lsls	r3, r3, #6
 8009032:	f57f ae95 	bpl.w	8008d60 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009036:	f7fe fc75 	bl	8007924 <HAL_GetTick>
 800903a:	1b40      	subs	r0, r0, r5
 800903c:	2802      	cmp	r0, #2
 800903e:	d9f6      	bls.n	800902e <HAL_RCC_OscConfig+0x2fa>
 8009040:	e6b9      	b.n	8008db6 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009042:	2801      	cmp	r0, #1
 8009044:	f43f aeb8 	beq.w	8008db8 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8009048:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800904a:	6a2a      	ldr	r2, [r5, #32]
 800904c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8009050:	4291      	cmp	r1, r2
 8009052:	f47f ae9b 	bne.w	8008d8c <HAL_RCC_OscConfig+0x58>
 8009056:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009058:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800905c:	4293      	cmp	r3, r2
 800905e:	f43f ae7f 	beq.w	8008d60 <HAL_RCC_OscConfig+0x2c>
 8009062:	e693      	b.n	8008d8c <HAL_RCC_OscConfig+0x58>
 8009064:	40021000 	.word	0x40021000
 8009068:	42420060 	.word	0x42420060

0800906c <HAL_RCC_GetSysClockFreq>:
{
 800906c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800906e:	4b18      	ldr	r3, [pc, #96]	; (80090d0 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8009070:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009072:	ac02      	add	r4, sp, #8
 8009074:	f103 0510 	add.w	r5, r3, #16
 8009078:	4622      	mov	r2, r4
 800907a:	6818      	ldr	r0, [r3, #0]
 800907c:	6859      	ldr	r1, [r3, #4]
 800907e:	3308      	adds	r3, #8
 8009080:	c203      	stmia	r2!, {r0, r1}
 8009082:	42ab      	cmp	r3, r5
 8009084:	4614      	mov	r4, r2
 8009086:	d1f7      	bne.n	8009078 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009088:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800908c:	4911      	ldr	r1, [pc, #68]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800908e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8009092:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8009094:	f003 020c 	and.w	r2, r3, #12
 8009098:	2a08      	cmp	r2, #8
 800909a:	d117      	bne.n	80090cc <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800909c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80090a0:	a806      	add	r0, sp, #24
 80090a2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80090a4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80090a6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80090aa:	d50c      	bpl.n	80090c6 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80090ac:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80090ae:	480a      	ldr	r0, [pc, #40]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80090b0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80090b4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80090b6:	aa06      	add	r2, sp, #24
 80090b8:	4413      	add	r3, r2
 80090ba:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80090be:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80090c2:	b007      	add	sp, #28
 80090c4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80090c6:	4805      	ldr	r0, [pc, #20]	; (80090dc <HAL_RCC_GetSysClockFreq+0x70>)
 80090c8:	4350      	muls	r0, r2
 80090ca:	e7fa      	b.n	80090c2 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80090cc:	4802      	ldr	r0, [pc, #8]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80090ce:	e7f8      	b.n	80090c2 <HAL_RCC_GetSysClockFreq+0x56>
 80090d0:	0800eeb9 	.word	0x0800eeb9
 80090d4:	40021000 	.word	0x40021000
 80090d8:	007a1200 	.word	0x007a1200
 80090dc:	003d0900 	.word	0x003d0900

080090e0 <HAL_RCC_ClockConfig>:
{
 80090e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80090e6:	4604      	mov	r4, r0
 80090e8:	b910      	cbnz	r0, 80090f0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80090ea:	2001      	movs	r0, #1
}
 80090ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090f0:	4a44      	ldr	r2, [pc, #272]	; (8009204 <HAL_RCC_ClockConfig+0x124>)
 80090f2:	6813      	ldr	r3, [r2, #0]
 80090f4:	f003 0307 	and.w	r3, r3, #7
 80090f8:	428b      	cmp	r3, r1
 80090fa:	d328      	bcc.n	800914e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090fc:	6821      	ldr	r1, [r4, #0]
 80090fe:	078e      	lsls	r6, r1, #30
 8009100:	d430      	bmi.n	8009164 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009102:	07ca      	lsls	r2, r1, #31
 8009104:	d443      	bmi.n	800918e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009106:	4a3f      	ldr	r2, [pc, #252]	; (8009204 <HAL_RCC_ClockConfig+0x124>)
 8009108:	6813      	ldr	r3, [r2, #0]
 800910a:	f003 0307 	and.w	r3, r3, #7
 800910e:	42ab      	cmp	r3, r5
 8009110:	d865      	bhi.n	80091de <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009112:	6822      	ldr	r2, [r4, #0]
 8009114:	4d3c      	ldr	r5, [pc, #240]	; (8009208 <HAL_RCC_ClockConfig+0x128>)
 8009116:	f012 0f04 	tst.w	r2, #4
 800911a:	d16c      	bne.n	80091f6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800911c:	0713      	lsls	r3, r2, #28
 800911e:	d506      	bpl.n	800912e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009120:	686b      	ldr	r3, [r5, #4]
 8009122:	6922      	ldr	r2, [r4, #16]
 8009124:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009128:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800912c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800912e:	f7ff ff9d 	bl	800906c <HAL_RCC_GetSysClockFreq>
 8009132:	686b      	ldr	r3, [r5, #4]
 8009134:	4a35      	ldr	r2, [pc, #212]	; (800920c <HAL_RCC_ClockConfig+0x12c>)
 8009136:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800913a:	5cd3      	ldrb	r3, [r2, r3]
 800913c:	40d8      	lsrs	r0, r3
 800913e:	4b34      	ldr	r3, [pc, #208]	; (8009210 <HAL_RCC_ClockConfig+0x130>)
 8009140:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8009142:	4b34      	ldr	r3, [pc, #208]	; (8009214 <HAL_RCC_ClockConfig+0x134>)
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	f7fe fbab 	bl	80078a0 <HAL_InitTick>
  return HAL_OK;
 800914a:	2000      	movs	r0, #0
 800914c:	e7ce      	b.n	80090ec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800914e:	6813      	ldr	r3, [r2, #0]
 8009150:	f023 0307 	bic.w	r3, r3, #7
 8009154:	430b      	orrs	r3, r1
 8009156:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009158:	6813      	ldr	r3, [r2, #0]
 800915a:	f003 0307 	and.w	r3, r3, #7
 800915e:	428b      	cmp	r3, r1
 8009160:	d1c3      	bne.n	80090ea <HAL_RCC_ClockConfig+0xa>
 8009162:	e7cb      	b.n	80090fc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009164:	4b28      	ldr	r3, [pc, #160]	; (8009208 <HAL_RCC_ClockConfig+0x128>)
 8009166:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800916a:	bf1e      	ittt	ne
 800916c:	685a      	ldrne	r2, [r3, #4]
 800916e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8009172:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009174:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009176:	bf42      	ittt	mi
 8009178:	685a      	ldrmi	r2, [r3, #4]
 800917a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800917e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	68a0      	ldr	r0, [r4, #8]
 8009184:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009188:	4302      	orrs	r2, r0
 800918a:	605a      	str	r2, [r3, #4]
 800918c:	e7b9      	b.n	8009102 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800918e:	6862      	ldr	r2, [r4, #4]
 8009190:	4e1d      	ldr	r6, [pc, #116]	; (8009208 <HAL_RCC_ClockConfig+0x128>)
 8009192:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009194:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009196:	d11a      	bne.n	80091ce <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009198:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800919c:	d0a5      	beq.n	80090ea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800919e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091a0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091a4:	f023 0303 	bic.w	r3, r3, #3
 80091a8:	4313      	orrs	r3, r2
 80091aa:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80091ac:	f7fe fbba 	bl	8007924 <HAL_GetTick>
 80091b0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091b2:	6873      	ldr	r3, [r6, #4]
 80091b4:	6862      	ldr	r2, [r4, #4]
 80091b6:	f003 030c 	and.w	r3, r3, #12
 80091ba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80091be:	d0a2      	beq.n	8009106 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091c0:	f7fe fbb0 	bl	8007924 <HAL_GetTick>
 80091c4:	1bc0      	subs	r0, r0, r7
 80091c6:	4540      	cmp	r0, r8
 80091c8:	d9f3      	bls.n	80091b2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80091ca:	2003      	movs	r0, #3
 80091cc:	e78e      	b.n	80090ec <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091ce:	2a02      	cmp	r2, #2
 80091d0:	d102      	bne.n	80091d8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80091d6:	e7e1      	b.n	800919c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091d8:	f013 0f02 	tst.w	r3, #2
 80091dc:	e7de      	b.n	800919c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091de:	6813      	ldr	r3, [r2, #0]
 80091e0:	f023 0307 	bic.w	r3, r3, #7
 80091e4:	432b      	orrs	r3, r5
 80091e6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091e8:	6813      	ldr	r3, [r2, #0]
 80091ea:	f003 0307 	and.w	r3, r3, #7
 80091ee:	42ab      	cmp	r3, r5
 80091f0:	f47f af7b 	bne.w	80090ea <HAL_RCC_ClockConfig+0xa>
 80091f4:	e78d      	b.n	8009112 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091f6:	686b      	ldr	r3, [r5, #4]
 80091f8:	68e1      	ldr	r1, [r4, #12]
 80091fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80091fe:	430b      	orrs	r3, r1
 8009200:	606b      	str	r3, [r5, #4]
 8009202:	e78b      	b.n	800911c <HAL_RCC_ClockConfig+0x3c>
 8009204:	40022000 	.word	0x40022000
 8009208:	40021000 	.word	0x40021000
 800920c:	0800ed50 	.word	0x0800ed50
 8009210:	20000000 	.word	0x20000000
 8009214:	20000014 	.word	0x20000014

08009218 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009218:	4b04      	ldr	r3, [pc, #16]	; (800922c <HAL_RCC_GetPCLK1Freq+0x14>)
 800921a:	4a05      	ldr	r2, [pc, #20]	; (8009230 <HAL_RCC_GetPCLK1Freq+0x18>)
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009222:	5cd3      	ldrb	r3, [r2, r3]
 8009224:	4a03      	ldr	r2, [pc, #12]	; (8009234 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009226:	6810      	ldr	r0, [r2, #0]
}
 8009228:	40d8      	lsrs	r0, r3
 800922a:	4770      	bx	lr
 800922c:	40021000 	.word	0x40021000
 8009230:	0800ed60 	.word	0x0800ed60
 8009234:	20000000 	.word	0x20000000

08009238 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009238:	4b04      	ldr	r3, [pc, #16]	; (800924c <HAL_RCC_GetPCLK2Freq+0x14>)
 800923a:	4a05      	ldr	r2, [pc, #20]	; (8009250 <HAL_RCC_GetPCLK2Freq+0x18>)
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009242:	5cd3      	ldrb	r3, [r2, r3]
 8009244:	4a03      	ldr	r2, [pc, #12]	; (8009254 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009246:	6810      	ldr	r0, [r2, #0]
}
 8009248:	40d8      	lsrs	r0, r3
 800924a:	4770      	bx	lr
 800924c:	40021000 	.word	0x40021000
 8009250:	0800ed60 	.word	0x0800ed60
 8009254:	20000000 	.word	0x20000000

08009258 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009258:	6803      	ldr	r3, [r0, #0]
{
 800925a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800925e:	07d9      	lsls	r1, r3, #31
{
 8009260:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009262:	d520      	bpl.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009264:	4c35      	ldr	r4, [pc, #212]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8009266:	69e3      	ldr	r3, [r4, #28]
 8009268:	00da      	lsls	r2, r3, #3
 800926a:	d432      	bmi.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800926c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800926e:	69e3      	ldr	r3, [r4, #28]
 8009270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009274:	61e3      	str	r3, [r4, #28]
 8009276:	69e3      	ldr	r3, [r4, #28]
 8009278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800927c:	9301      	str	r3, [sp, #4]
 800927e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009280:	4e2f      	ldr	r6, [pc, #188]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009282:	6833      	ldr	r3, [r6, #0]
 8009284:	05db      	lsls	r3, r3, #23
 8009286:	d526      	bpl.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009288:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800928a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800928e:	d136      	bne.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009290:	6a23      	ldr	r3, [r4, #32]
 8009292:	686a      	ldr	r2, [r5, #4]
 8009294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009298:	4313      	orrs	r3, r2
 800929a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800929c:	b11f      	cbz	r7, 80092a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800929e:	69e3      	ldr	r3, [r4, #28]
 80092a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092a4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092a6:	6828      	ldr	r0, [r5, #0]
 80092a8:	0783      	lsls	r3, r0, #30
 80092aa:	d506      	bpl.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092ac:	4923      	ldr	r1, [pc, #140]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80092ae:	68ab      	ldr	r3, [r5, #8]
 80092b0:	684a      	ldr	r2, [r1, #4]
 80092b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80092b6:	431a      	orrs	r2, r3
 80092b8:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092ba:	f010 0010 	ands.w	r0, r0, #16
 80092be:	d01b      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092c0:	4a1e      	ldr	r2, [pc, #120]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80092c2:	68e9      	ldr	r1, [r5, #12]
 80092c4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80092c6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80092cc:	430b      	orrs	r3, r1
 80092ce:	6053      	str	r3, [r2, #4]
 80092d0:	e012      	b.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 80092d2:	2700      	movs	r7, #0
 80092d4:	e7d4      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092d6:	6833      	ldr	r3, [r6, #0]
 80092d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092dc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80092de:	f7fe fb21 	bl	8007924 <HAL_GetTick>
 80092e2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092e4:	6833      	ldr	r3, [r6, #0]
 80092e6:	05d8      	lsls	r0, r3, #23
 80092e8:	d4ce      	bmi.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092ea:	f7fe fb1b 	bl	8007924 <HAL_GetTick>
 80092ee:	eba0 0008 	sub.w	r0, r0, r8
 80092f2:	2864      	cmp	r0, #100	; 0x64
 80092f4:	d9f6      	bls.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80092f6:	2003      	movs	r0, #3
}
 80092f8:	b002      	add	sp, #8
 80092fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80092fe:	686a      	ldr	r2, [r5, #4]
 8009300:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8009304:	429a      	cmp	r2, r3
 8009306:	d0c3      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8009308:	2001      	movs	r0, #1
 800930a:	4a0e      	ldr	r2, [pc, #56]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800930c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800930e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009310:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009312:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009316:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8009318:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800931a:	07d9      	lsls	r1, r3, #31
 800931c:	d5b8      	bpl.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800931e:	f7fe fb01 	bl	8007924 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009322:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8009326:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009328:	6a23      	ldr	r3, [r4, #32]
 800932a:	079a      	lsls	r2, r3, #30
 800932c:	d4b0      	bmi.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800932e:	f7fe faf9 	bl	8007924 <HAL_GetTick>
 8009332:	1b80      	subs	r0, r0, r6
 8009334:	4540      	cmp	r0, r8
 8009336:	d9f7      	bls.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8009338:	e7dd      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800933a:	bf00      	nop
 800933c:	40021000 	.word	0x40021000
 8009340:	40007000 	.word	0x40007000
 8009344:	42420440 	.word	0x42420440

08009348 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009348:	4602      	mov	r2, r0
 800934a:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800934c:	4b34      	ldr	r3, [pc, #208]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 800934e:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009350:	ad02      	add	r5, sp, #8
 8009352:	f103 0610 	add.w	r6, r3, #16
 8009356:	462c      	mov	r4, r5
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	6859      	ldr	r1, [r3, #4]
 800935c:	3308      	adds	r3, #8
 800935e:	c403      	stmia	r4!, {r0, r1}
 8009360:	42b3      	cmp	r3, r6
 8009362:	4625      	mov	r5, r4
 8009364:	d1f7      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009366:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800936a:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800936c:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8009370:	d049      	beq.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8009372:	2a10      	cmp	r2, #16
 8009374:	d003      	beq.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8009376:	2a01      	cmp	r2, #1
 8009378:	d026      	beq.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
  uint32_t temp_reg = 0U, frequency = 0U;
 800937a:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 800937c:	e038      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      temp_reg = RCC->CFGR;
 800937e:	4b29      	ldr	r3, [pc, #164]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8009380:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8009382:	6818      	ldr	r0, [r3, #0]
 8009384:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8009388:	d032      	beq.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800938a:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800938e:	a806      	add	r0, sp, #24
 8009390:	4402      	add	r2, r0
 8009392:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009396:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009398:	bf41      	itttt	mi
 800939a:	685a      	ldrmi	r2, [r3, #4]
 800939c:	a906      	addmi	r1, sp, #24
 800939e:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80093a2:	1852      	addmi	r2, r2, r1
 80093a4:	bf44      	itt	mi
 80093a6:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80093aa:	4a1f      	ldrmi	r2, [pc, #124]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80093ac:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80093ae:	bf4c      	ite	mi
 80093b0:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80093b4:	4a1d      	ldrpl	r2, [pc, #116]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80093b6:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80093b8:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80093bc:	d418      	bmi.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (pllclk * 2) / 3;
 80093be:	2303      	movs	r3, #3
 80093c0:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80093c2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80093c6:	e013      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80093c8:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80093cc:	4a15      	ldr	r2, [pc, #84]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80093ce:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80093d0:	4019      	ands	r1, r3
 80093d2:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80093d6:	d01f      	beq.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80093d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e0:	d108      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        frequency = LSI_VALUE;
 80093e2:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80093e6:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80093e8:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 80093ec:	bf18      	it	ne
 80093ee:	4618      	movne	r0, r3
}
 80093f0:	b006      	add	sp, #24
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80093f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093f8:	d1bf      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 80093fa:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80093fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009400:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009404:	e7f2      	b.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8009406:	f7ff ff17 	bl	8009238 <HAL_RCC_GetPCLK2Freq>
 800940a:	4b06      	ldr	r3, [pc, #24]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8009412:	3301      	adds	r3, #1
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	e7d4      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSE_VALUE;
 8009418:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800941c:	e7e8      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 800941e:	bf00      	nop
 8009420:	0800eeb9 	.word	0x0800eeb9
 8009424:	40021000 	.word	0x40021000
 8009428:	007a1200 	.word	0x007a1200
 800942c:	003d0900 	.word	0x003d0900

08009430 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8009434:	f7fe fa76 	bl	8007924 <HAL_GetTick>
 8009438:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	0692      	lsls	r2, r2, #26
 8009440:	d505      	bpl.n	800944e <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 8009442:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	f042 0210 	orr.w	r2, r2, #16
 800944a:	605a      	str	r2, [r3, #4]
}
 800944c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800944e:	f7fe fa69 	bl	8007924 <HAL_GetTick>
 8009452:	1b40      	subs	r0, r0, r5
 8009454:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009458:	d9ef      	bls.n	800943a <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 800945a:	2003      	movs	r0, #3
 800945c:	e7f6      	b.n	800944c <RTC_EnterInitMode+0x1c>

0800945e <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800945e:	6802      	ldr	r2, [r0, #0]
{
 8009460:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009462:	6853      	ldr	r3, [r2, #4]
{
 8009464:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009466:	f023 0310 	bic.w	r3, r3, #16
 800946a:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 800946c:	f7fe fa5a 	bl	8007924 <HAL_GetTick>
 8009470:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	069b      	lsls	r3, r3, #26
 8009478:	d501      	bpl.n	800947e <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800947a:	2000      	movs	r0, #0
}
 800947c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800947e:	f7fe fa51 	bl	8007924 <HAL_GetTick>
 8009482:	1b40      	subs	r0, r0, r5
 8009484:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009488:	d9f3      	bls.n	8009472 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 800948a:	2003      	movs	r0, #3
 800948c:	e7f6      	b.n	800947c <RTC_ExitInitMode+0x1e>

0800948e <HAL_RTC_WaitForSynchro>:
{
 800948e:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8009490:	4604      	mov	r4, r0
 8009492:	b1a8      	cbz	r0, 80094c0 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8009494:	6802      	ldr	r2, [r0, #0]
 8009496:	6853      	ldr	r3, [r2, #4]
 8009498:	f023 0308 	bic.w	r3, r3, #8
 800949c:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800949e:	f7fe fa41 	bl	8007924 <HAL_GetTick>
 80094a2:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	071b      	lsls	r3, r3, #28
 80094aa:	d501      	bpl.n	80094b0 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80094ac:	2000      	movs	r0, #0
}
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80094b0:	f7fe fa38 	bl	8007924 <HAL_GetTick>
 80094b4:	1b40      	subs	r0, r0, r5
 80094b6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80094ba:	d9f3      	bls.n	80094a4 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80094bc:	2003      	movs	r0, #3
 80094be:	e7f6      	b.n	80094ae <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 80094c0:	2001      	movs	r0, #1
 80094c2:	e7f4      	b.n	80094ae <HAL_RTC_WaitForSynchro+0x20>

080094c4 <HAL_RTC_Init>:
{
 80094c4:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 80094c6:	4604      	mov	r4, r0
 80094c8:	b170      	cbz	r0, 80094e8 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80094ca:	7c43      	ldrb	r3, [r0, #17]
 80094cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80094d0:	b913      	cbnz	r3, 80094d8 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80094d2:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 80094d4:	f7fd fa8e 	bl	80069f4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80094d8:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094da:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 80094dc:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094de:	f7ff ffd6 	bl	800948e <HAL_RTC_WaitForSynchro>
 80094e2:	b118      	cbz	r0, 80094ec <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80094e4:	2304      	movs	r3, #4
 80094e6:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80094e8:	2001      	movs	r0, #1
 80094ea:	e036      	b.n	800955a <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80094ec:	4620      	mov	r0, r4
 80094ee:	f7ff ff9f 	bl	8009430 <RTC_EnterInitMode>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d1f6      	bne.n	80094e4 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80094f6:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80094f8:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80094fa:	6853      	ldr	r3, [r2, #4]
 80094fc:	f023 0307 	bic.w	r3, r3, #7
 8009500:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8009502:	4a16      	ldr	r2, [pc, #88]	; (800955c <HAL_RTC_Init+0x98>)
 8009504:	b118      	cbz	r0, 800950e <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8009506:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009508:	f021 0101 	bic.w	r1, r1, #1
 800950c:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800950e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009510:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8009514:	4303      	orrs	r3, r0
 8009516:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8009518:	6860      	ldr	r0, [r4, #4]
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	d105      	bne.n	800952a <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800951e:	2001      	movs	r0, #1
 8009520:	f7ff ff12 	bl	8009348 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8009524:	2800      	cmp	r0, #0
 8009526:	d0dd      	beq.n	80094e4 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8009528:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800952a:	6822      	ldr	r2, [r4, #0]
 800952c:	6893      	ldr	r3, [r2, #8]
 800952e:	f023 030f 	bic.w	r3, r3, #15
 8009532:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8009536:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8009538:	68d3      	ldr	r3, [r2, #12]
 800953a:	b280      	uxth	r0, r0
 800953c:	0c1b      	lsrs	r3, r3, #16
 800953e:	041b      	lsls	r3, r3, #16
 8009540:	4318      	orrs	r0, r3
 8009542:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009544:	4620      	mov	r0, r4
 8009546:	f7ff ff8a 	bl	800945e <RTC_ExitInitMode>
 800954a:	2301      	movs	r3, #1
 800954c:	b110      	cbz	r0, 8009554 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800954e:	2204      	movs	r2, #4
 8009550:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8009552:	e7c9      	b.n	80094e8 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8009554:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8009556:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8009558:	7463      	strb	r3, [r4, #17]
}
 800955a:	bd10      	pop	{r4, pc}
 800955c:	40006c00 	.word	0x40006c00

08009560 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 8009560:	0089      	lsls	r1, r1, #2
 8009562:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8009566:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800956a:	b292      	uxth	r2, r2
 800956c:	600a      	str	r2, [r1, #0]
}
 800956e:	4770      	bx	lr

08009570 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 8009570:	0089      	lsls	r1, r1, #2
 8009572:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8009576:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800957a:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 800957c:	b280      	uxth	r0, r0
 800957e:	4770      	bx	lr

08009580 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009580:	6803      	ldr	r3, [r0, #0]
 8009582:	68da      	ldr	r2, [r3, #12]
 8009584:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009588:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958a:	695a      	ldr	r2, [r3, #20]
 800958c:	f022 0201 	bic.w	r2, r2, #1
 8009590:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009592:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8009594:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009596:	bf02      	ittt	eq
 8009598:	68da      	ldreq	r2, [r3, #12]
 800959a:	f022 0210 	biceq.w	r2, r2, #16
 800959e:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095a0:	2320      	movs	r3, #32
 80095a2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a6:	2300      	movs	r3, #0
 80095a8:	6303      	str	r3, [r0, #48]	; 0x30
}
 80095aa:	4770      	bx	lr

080095ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095ac:	b510      	push	{r4, lr}
 80095ae:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095b0:	6803      	ldr	r3, [r0, #0]
 80095b2:	68c1      	ldr	r1, [r0, #12]
 80095b4:	691a      	ldr	r2, [r3, #16]
 80095b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80095ba:	430a      	orrs	r2, r1
 80095bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80095be:	6882      	ldr	r2, [r0, #8]
 80095c0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80095c2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80095c4:	4302      	orrs	r2, r0
 80095c6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80095c8:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80095cc:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80095d0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80095d2:	430a      	orrs	r2, r1
 80095d4:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80095d6:	695a      	ldr	r2, [r3, #20]
 80095d8:	69a1      	ldr	r1, [r4, #24]
 80095da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80095de:	430a      	orrs	r2, r1
 80095e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80095e2:	4a0e      	ldr	r2, [pc, #56]	; (800961c <UART_SetConfig+0x70>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d115      	bne.n	8009614 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80095e8:	f7ff fe26 	bl	8009238 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095ec:	2319      	movs	r3, #25
 80095ee:	4343      	muls	r3, r0
 80095f0:	6862      	ldr	r2, [r4, #4]
 80095f2:	6820      	ldr	r0, [r4, #0]
 80095f4:	0092      	lsls	r2, r2, #2
 80095f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80095fa:	2264      	movs	r2, #100	; 0x64
 80095fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009600:	fb02 3311 	mls	r3, r2, r1, r3
 8009604:	011b      	lsls	r3, r3, #4
 8009606:	3332      	adds	r3, #50	; 0x32
 8009608:	fbb3 f3f2 	udiv	r3, r3, r2
 800960c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8009610:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8009612:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8009614:	f7ff fe00 	bl	8009218 <HAL_RCC_GetPCLK1Freq>
 8009618:	e7e8      	b.n	80095ec <UART_SetConfig+0x40>
 800961a:	bf00      	nop
 800961c:	40013800 	.word	0x40013800

08009620 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8009620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009622:	4604      	mov	r4, r0
 8009624:	460e      	mov	r6, r1
 8009626:	4617      	mov	r7, r2
 8009628:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800962a:	6822      	ldr	r2, [r4, #0]
 800962c:	6813      	ldr	r3, [r2, #0]
 800962e:	ea36 0303 	bics.w	r3, r6, r3
 8009632:	d101      	bne.n	8009638 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8009634:	2000      	movs	r0, #0
 8009636:	e014      	b.n	8009662 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8009638:	1c6b      	adds	r3, r5, #1
 800963a:	d0f7      	beq.n	800962c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800963c:	b995      	cbnz	r5, 8009664 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800963e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8009640:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009642:	68da      	ldr	r2, [r3, #12]
 8009644:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009648:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800964a:	695a      	ldr	r2, [r3, #20]
 800964c:	f022 0201 	bic.w	r2, r2, #1
 8009650:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8009652:	2320      	movs	r3, #32
 8009654:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009658:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800965c:	2300      	movs	r3, #0
 800965e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009664:	f7fe f95e 	bl	8007924 <HAL_GetTick>
 8009668:	1bc0      	subs	r0, r0, r7
 800966a:	4285      	cmp	r5, r0
 800966c:	d2dd      	bcs.n	800962a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800966e:	e7e6      	b.n	800963e <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

08009670 <HAL_UART_Init>:
{
 8009670:	b510      	push	{r4, lr}
  if (huart == NULL)
 8009672:	4604      	mov	r4, r0
 8009674:	b340      	cbz	r0, 80096c8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009676:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800967a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800967e:	b91b      	cbnz	r3, 8009688 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8009680:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8009684:	f7fd fa8e 	bl	8006ba4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8009688:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800968a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800968c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8009690:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8009692:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8009694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009698:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800969a:	f7ff ff87 	bl	80095ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800969e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096a2:	691a      	ldr	r2, [r3, #16]
 80096a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096aa:	695a      	ldr	r2, [r3, #20]
 80096ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096b0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80096b2:	68da      	ldr	r2, [r3, #12]
 80096b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096b8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80096ba:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096bc:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80096be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80096c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80096c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80096c8:	2001      	movs	r0, #1
 80096ca:	e7fc      	b.n	80096c6 <HAL_UART_Init+0x56>

080096cc <HAL_UART_DeInit>:
{
 80096cc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80096ce:	4604      	mov	r4, r0
 80096d0:	b198      	cbz	r0, 80096fa <HAL_UART_DeInit+0x2e>
  huart->gState = HAL_UART_STATE_BUSY;
 80096d2:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80096d4:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80096d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80096da:	68d3      	ldr	r3, [r2, #12]
 80096dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096e0:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 80096e2:	f7fd fabb 	bl	8006c5c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e6:	2000      	movs	r0, #0
 80096e8:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(huart);
 80096ea:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 80096ee:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80096f2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f6:	6320      	str	r0, [r4, #48]	; 0x30
}
 80096f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80096fa:	2001      	movs	r0, #1
 80096fc:	e7fc      	b.n	80096f8 <HAL_UART_DeInit+0x2c>

080096fe <HAL_UART_Transmit>:
{
 80096fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009702:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8009704:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8009708:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800970a:	2b20      	cmp	r3, #32
{
 800970c:	460e      	mov	r6, r1
 800970e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8009710:	d148      	bne.n	80097a4 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8009712:	2900      	cmp	r1, #0
 8009714:	d044      	beq.n	80097a0 <HAL_UART_Transmit+0xa2>
 8009716:	2a00      	cmp	r2, #0
 8009718:	d042      	beq.n	80097a0 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 800971a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800971e:	2b01      	cmp	r3, #1
 8009720:	d040      	beq.n	80097a4 <HAL_UART_Transmit+0xa6>
 8009722:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009724:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8009726:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800972a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972c:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800972e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8009732:	f7fe f8f7 	bl	8007924 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009736:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8009738:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800973a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 800973e:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8009740:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009742:	d103      	bne.n	800974c <HAL_UART_Transmit+0x4e>
 8009744:	6923      	ldr	r3, [r4, #16]
 8009746:	b90b      	cbnz	r3, 800974c <HAL_UART_Transmit+0x4e>
 8009748:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800974a:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800974c:	2300      	movs	r3, #0
 800974e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8009752:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009754:	b29b      	uxth	r3, r3
 8009756:	b953      	cbnz	r3, 800976e <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009758:	464b      	mov	r3, r9
 800975a:	4642      	mov	r2, r8
 800975c:	2140      	movs	r1, #64	; 0x40
 800975e:	4620      	mov	r0, r4
 8009760:	f7ff ff5e 	bl	8009620 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8009764:	b950      	cbnz	r0, 800977c <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8009766:	2320      	movs	r3, #32
 8009768:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800976c:	e007      	b.n	800977e <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800976e:	464b      	mov	r3, r9
 8009770:	4642      	mov	r2, r8
 8009772:	2180      	movs	r1, #128	; 0x80
 8009774:	4620      	mov	r0, r4
 8009776:	f7ff ff53 	bl	8009620 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800977a:	b110      	cbz	r0, 8009782 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800977c:	2003      	movs	r0, #3
}
 800977e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8009782:	6822      	ldr	r2, [r4, #0]
 8009784:	b94e      	cbnz	r6, 800979a <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009786:	f835 3b02 	ldrh.w	r3, [r5], #2
 800978a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800978e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8009790:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8009792:	3901      	subs	r1, #1
 8009794:	b289      	uxth	r1, r1
 8009796:	84e1      	strh	r1, [r4, #38]	; 0x26
 8009798:	e7db      	b.n	8009752 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800979a:	f816 3b01 	ldrb.w	r3, [r6], #1
 800979e:	e7f6      	b.n	800978e <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80097a0:	2001      	movs	r0, #1
 80097a2:	e7ec      	b.n	800977e <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80097a4:	2002      	movs	r0, #2
 80097a6:	e7ea      	b.n	800977e <HAL_UART_Transmit+0x80>

080097a8 <HAL_UART_TxCpltCallback>:
 80097a8:	4770      	bx	lr

080097aa <HAL_UART_RxHalfCpltCallback>:
 80097aa:	4770      	bx	lr

080097ac <UART_DMAError>:
{
 80097ac:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80097b0:	6803      	ldr	r3, [r0, #0]
 80097b2:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80097b4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80097b8:	2921      	cmp	r1, #33	; 0x21
 80097ba:	d10a      	bne.n	80097d2 <UART_DMAError+0x26>
 80097bc:	0612      	lsls	r2, r2, #24
 80097be:	d508      	bpl.n	80097d2 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 80097c0:	2200      	movs	r2, #0
 80097c2:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80097c4:	68da      	ldr	r2, [r3, #12]
 80097c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80097ca:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80097cc:	2220      	movs	r2, #32
 80097ce:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097d2:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80097d4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80097d8:	2a22      	cmp	r2, #34	; 0x22
 80097da:	d105      	bne.n	80097e8 <UART_DMAError+0x3c>
 80097dc:	065b      	lsls	r3, r3, #25
 80097de:	d503      	bpl.n	80097e8 <UART_DMAError+0x3c>
    huart->RxXferCount = 0x00U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80097e4:	f7ff fecc 	bl	8009580 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80097ea:	f043 0310 	orr.w	r3, r3, #16
 80097ee:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 80097f0:	f7fd f9d5 	bl	8006b9e <HAL_UART_ErrorCallback>
}
 80097f4:	bd08      	pop	{r3, pc}

080097f6 <UART_DMAAbortOnError>:
{
 80097f6:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80097f8:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80097fc:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80097fe:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8009800:	f7fd f9cd 	bl	8006b9e <HAL_UART_ErrorCallback>
}
 8009804:	bd08      	pop	{r3, pc}

08009806 <HAL_UARTEx_RxEventCallback>:
}
 8009806:	4770      	bx	lr

08009808 <UART_Receive_IT>:
{
 8009808:	b513      	push	{r0, r1, r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800980a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800980e:	2b22      	cmp	r3, #34	; 0x22
 8009810:	d149      	bne.n	80098a6 <UART_Receive_IT+0x9e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009812:	6881      	ldr	r1, [r0, #8]
 8009814:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009816:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800981a:	6802      	ldr	r2, [r0, #0]
 800981c:	d133      	bne.n	8009886 <UART_Receive_IT+0x7e>
 800981e:	6901      	ldr	r1, [r0, #16]
 8009820:	2900      	cmp	r1, #0
 8009822:	d133      	bne.n	800988c <UART_Receive_IT+0x84>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009824:	6852      	ldr	r2, [r2, #4]
 8009826:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800982a:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 800982e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8009830:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8009832:	3c01      	subs	r4, #1
 8009834:	b2a4      	uxth	r4, r4
 8009836:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8009838:	bb1c      	cbnz	r4, 8009882 <UART_Receive_IT+0x7a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800983a:	6803      	ldr	r3, [r0, #0]
 800983c:	68da      	ldr	r2, [r3, #12]
 800983e:	f022 0220 	bic.w	r2, r2, #32
 8009842:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009844:	68da      	ldr	r2, [r3, #12]
 8009846:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800984a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800984c:	695a      	ldr	r2, [r3, #20]
 800984e:	f022 0201 	bic.w	r2, r2, #1
 8009852:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8009854:	2220      	movs	r2, #32
 8009856:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800985a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800985c:	2a01      	cmp	r2, #1
 800985e:	d11f      	bne.n	80098a0 <UART_Receive_IT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009860:	6304      	str	r4, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	f022 0210 	bic.w	r2, r2, #16
 8009868:	60da      	str	r2, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	06d2      	lsls	r2, r2, #27
 800986e:	d505      	bpl.n	800987c <UART_Receive_IT+0x74>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009870:	9401      	str	r4, [sp, #4]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	9201      	str	r2, [sp, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800987c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800987e:	f7ff ffc2 	bl	8009806 <HAL_UARTEx_RxEventCallback>
 8009882:	2000      	movs	r0, #0
 8009884:	e010      	b.n	80098a8 <UART_Receive_IT+0xa0>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009886:	b939      	cbnz	r1, 8009898 <UART_Receive_IT+0x90>
 8009888:	6901      	ldr	r1, [r0, #16]
 800988a:	b929      	cbnz	r1, 8009898 <UART_Receive_IT+0x90>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800988c:	6852      	ldr	r2, [r2, #4]
 800988e:	b2d2      	uxtb	r2, r2
 8009890:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8009892:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009894:	3301      	adds	r3, #1
 8009896:	e7ca      	b.n	800982e <UART_Receive_IT+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009898:	6852      	ldr	r2, [r2, #4]
 800989a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800989e:	e7f7      	b.n	8009890 <UART_Receive_IT+0x88>
       HAL_UART_RxCpltCallback(huart);
 80098a0:	f7fd f97e 	bl	8006ba0 <HAL_UART_RxCpltCallback>
 80098a4:	e7ed      	b.n	8009882 <UART_Receive_IT+0x7a>
    return HAL_BUSY;
 80098a6:	2002      	movs	r0, #2
}
 80098a8:	b002      	add	sp, #8
 80098aa:	bd10      	pop	{r4, pc}

080098ac <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80098ac:	6803      	ldr	r3, [r0, #0]
{
 80098ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80098b0:	681a      	ldr	r2, [r3, #0]
{
 80098b2:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80098b4:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098b8:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098ba:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80098bc:	d108      	bne.n	80098d0 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098be:	0695      	lsls	r5, r2, #26
 80098c0:	d55f      	bpl.n	8009982 <HAL_UART_IRQHandler+0xd6>
 80098c2:	068d      	lsls	r5, r1, #26
 80098c4:	d55d      	bpl.n	8009982 <HAL_UART_IRQHandler+0xd6>
}
 80098c6:	b003      	add	sp, #12
 80098c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      UART_Receive_IT(huart);
 80098cc:	f7ff bf9c 	b.w	8009808 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80098d0:	f005 0001 	and.w	r0, r5, #1
 80098d4:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80098d8:	4305      	orrs	r5, r0
 80098da:	d052      	beq.n	8009982 <HAL_UART_IRQHandler+0xd6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80098dc:	07d5      	lsls	r5, r2, #31
 80098de:	d505      	bpl.n	80098ec <HAL_UART_IRQHandler+0x40>
 80098e0:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098e2:	bf42      	ittt	mi
 80098e4:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 80098e6:	f043 0301 	orrmi.w	r3, r3, #1
 80098ea:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098ec:	0755      	lsls	r5, r2, #29
 80098ee:	d504      	bpl.n	80098fa <HAL_UART_IRQHandler+0x4e>
 80098f0:	b118      	cbz	r0, 80098fa <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098f4:	f043 0302 	orr.w	r3, r3, #2
 80098f8:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098fa:	0793      	lsls	r3, r2, #30
 80098fc:	d504      	bpl.n	8009908 <HAL_UART_IRQHandler+0x5c>
 80098fe:	b118      	cbz	r0, 8009908 <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009900:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009902:	f043 0304 	orr.w	r3, r3, #4
 8009906:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009908:	0715      	lsls	r5, r2, #28
 800990a:	d507      	bpl.n	800991c <HAL_UART_IRQHandler+0x70>
 800990c:	f001 0320 	and.w	r3, r1, #32
 8009910:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009912:	bf1e      	ittt	ne
 8009914:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 8009916:	f043 0308 	orrne.w	r3, r3, #8
 800991a:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800991c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800991e:	b353      	cbz	r3, 8009976 <HAL_UART_IRQHandler+0xca>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009920:	0692      	lsls	r2, r2, #26
 8009922:	d504      	bpl.n	800992e <HAL_UART_IRQHandler+0x82>
 8009924:	068b      	lsls	r3, r1, #26
 8009926:	d502      	bpl.n	800992e <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8009928:	4620      	mov	r0, r4
 800992a:	f7ff ff6d 	bl	8009808 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800992e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8009930:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009932:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009934:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009936:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800993a:	f005 0508 	and.w	r5, r5, #8
 800993e:	431d      	orrs	r5, r3
 8009940:	d01b      	beq.n	800997a <HAL_UART_IRQHandler+0xce>
        UART_EndRxTransfer(huart);
 8009942:	f7ff fe1d 	bl	8009580 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	695a      	ldr	r2, [r3, #20]
 800994a:	0655      	lsls	r5, r2, #25
 800994c:	d510      	bpl.n	8009970 <HAL_UART_IRQHandler+0xc4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800994e:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8009950:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009956:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8009958:	b150      	cbz	r0, 8009970 <HAL_UART_IRQHandler+0xc4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800995a:	4b53      	ldr	r3, [pc, #332]	; (8009aa8 <HAL_UART_IRQHandler+0x1fc>)
 800995c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800995e:	f7fe f925 	bl	8007bac <HAL_DMA_Abort_IT>
 8009962:	b140      	cbz	r0, 8009976 <HAL_UART_IRQHandler+0xca>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009964:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009966:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8009968:	b003      	add	sp, #12
 800996a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800996e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8009970:	4620      	mov	r0, r4
 8009972:	f7fd f914 	bl	8006b9e <HAL_UART_ErrorCallback>
}
 8009976:	b003      	add	sp, #12
 8009978:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 800997a:	f7fd f910 	bl	8006b9e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800997e:	6425      	str	r5, [r4, #64]	; 0x40
 8009980:	e7f9      	b.n	8009976 <HAL_UART_IRQHandler+0xca>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009982:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009984:	2801      	cmp	r0, #1
 8009986:	d155      	bne.n	8009a34 <HAL_UART_IRQHandler+0x188>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009988:	06d0      	lsls	r0, r2, #27
 800998a:	d553      	bpl.n	8009a34 <HAL_UART_IRQHandler+0x188>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800998c:	06cd      	lsls	r5, r1, #27
 800998e:	d551      	bpl.n	8009a34 <HAL_UART_IRQHandler+0x188>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009990:	2100      	movs	r1, #0
 8009992:	9101      	str	r1, [sp, #4]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	9201      	str	r2, [sp, #4]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	9201      	str	r2, [sp, #4]
 800999c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800999e:	695a      	ldr	r2, [r3, #20]
 80099a0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80099a4:	d02a      	beq.n	80099fc <HAL_UART_IRQHandler+0x150>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099a6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80099a8:	6802      	ldr	r2, [r0, #0]
 80099aa:	6852      	ldr	r2, [r2, #4]
 80099ac:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80099ae:	2a00      	cmp	r2, #0
 80099b0:	d0e1      	beq.n	8009976 <HAL_UART_IRQHandler+0xca>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80099b2:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80099b4:	4295      	cmp	r5, r2
 80099b6:	d9de      	bls.n	8009976 <HAL_UART_IRQHandler+0xca>
        huart->RxXferCount = nb_remaining_rx_data;
 80099b8:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099ba:	6982      	ldr	r2, [r0, #24]
 80099bc:	2a20      	cmp	r2, #32
 80099be:	d015      	beq.n	80099ec <HAL_UART_IRQHandler+0x140>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c8:	695a      	ldr	r2, [r3, #20]
 80099ca:	f022 0201 	bic.w	r2, r2, #1
 80099ce:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099d0:	695a      	ldr	r2, [r3, #20]
 80099d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099d6:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 80099d8:	2220      	movs	r2, #32
 80099da:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099de:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099e0:	68da      	ldr	r2, [r3, #12]
 80099e2:	f022 0210 	bic.w	r2, r2, #16
 80099e6:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099e8:	f7fe f8c2 	bl	8007b70 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099ec:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80099ee:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80099f0:	1ac9      	subs	r1, r1, r3
 80099f2:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099f4:	4620      	mov	r0, r4
 80099f6:	f7ff ff06 	bl	8009806 <HAL_UARTEx_RxEventCallback>
 80099fa:	e7bc      	b.n	8009976 <HAL_UART_IRQHandler+0xca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099fc:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80099fe:	b288      	uxth	r0, r1
      if (  (huart->RxXferCount > 0U)
 8009a00:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8009a02:	b289      	uxth	r1, r1
 8009a04:	2900      	cmp	r1, #0
 8009a06:	d0b6      	beq.n	8009976 <HAL_UART_IRQHandler+0xca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a08:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8009a0a:	1a09      	subs	r1, r1, r0
 8009a0c:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8009a0e:	2900      	cmp	r1, #0
 8009a10:	d0b1      	beq.n	8009976 <HAL_UART_IRQHandler+0xca>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a12:	68d8      	ldr	r0, [r3, #12]
 8009a14:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8009a18:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a1a:	6958      	ldr	r0, [r3, #20]
 8009a1c:	f020 0001 	bic.w	r0, r0, #1
 8009a20:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8009a22:	2020      	movs	r0, #32
 8009a24:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a28:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2a:	68da      	ldr	r2, [r3, #12]
 8009a2c:	f022 0210 	bic.w	r2, r2, #16
 8009a30:	60da      	str	r2, [r3, #12]
 8009a32:	e7df      	b.n	80099f4 <HAL_UART_IRQHandler+0x148>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a34:	0610      	lsls	r0, r2, #24
 8009a36:	d526      	bpl.n	8009a86 <HAL_UART_IRQHandler+0x1da>
 8009a38:	060d      	lsls	r5, r1, #24
 8009a3a:	d524      	bpl.n	8009a86 <HAL_UART_IRQHandler+0x1da>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a3c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8009a40:	2a21      	cmp	r2, #33	; 0x21
 8009a42:	d198      	bne.n	8009976 <HAL_UART_IRQHandler+0xca>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a44:	68a1      	ldr	r1, [r4, #8]
 8009a46:	6a22      	ldr	r2, [r4, #32]
 8009a48:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009a4c:	d116      	bne.n	8009a7c <HAL_UART_IRQHandler+0x1d0>
 8009a4e:	6921      	ldr	r1, [r4, #16]
 8009a50:	b9a1      	cbnz	r1, 8009a7c <HAL_UART_IRQHandler+0x1d0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a52:	f832 1b02 	ldrh.w	r1, [r2], #2
 8009a56:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8009a5a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a5c:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8009a5e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8009a60:	3a01      	subs	r2, #1
 8009a62:	b292      	uxth	r2, r2
 8009a64:	84e2      	strh	r2, [r4, #38]	; 0x26
 8009a66:	2a00      	cmp	r2, #0
 8009a68:	d185      	bne.n	8009976 <HAL_UART_IRQHandler+0xca>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a6a:	68da      	ldr	r2, [r3, #12]
 8009a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a70:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a72:	68da      	ldr	r2, [r3, #12]
 8009a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a78:	60da      	str	r2, [r3, #12]
 8009a7a:	e77c      	b.n	8009976 <HAL_UART_IRQHandler+0xca>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a7c:	1c51      	adds	r1, r2, #1
 8009a7e:	6221      	str	r1, [r4, #32]
 8009a80:	7812      	ldrb	r2, [r2, #0]
 8009a82:	605a      	str	r2, [r3, #4]
 8009a84:	e7eb      	b.n	8009a5e <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a86:	0650      	lsls	r0, r2, #25
 8009a88:	f57f af75 	bpl.w	8009976 <HAL_UART_IRQHandler+0xca>
 8009a8c:	064a      	lsls	r2, r1, #25
 8009a8e:	f57f af72 	bpl.w	8009976 <HAL_UART_IRQHandler+0xca>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a92:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8009a94:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a9a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8009a9c:	2320      	movs	r3, #32
 8009a9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8009aa2:	f7ff fe81 	bl	80097a8 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8009aa6:	e766      	b.n	8009976 <HAL_UART_IRQHandler+0xca>
 8009aa8:	080097f7 	.word	0x080097f7

08009aac <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aac:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8009aae:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ab0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d104      	bne.n	8009ac0 <UART_DMARxHalfCplt+0x14>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009ab6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8009ab8:	0849      	lsrs	r1, r1, #1
 8009aba:	f7ff fea4 	bl	8009806 <HAL_UARTEx_RxEventCallback>
}
 8009abe:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8009ac0:	f7ff fe73 	bl	80097aa <HAL_UART_RxHalfCpltCallback>
}
 8009ac4:	e7fb      	b.n	8009abe <UART_DMARxHalfCplt+0x12>

08009ac6 <UART_DMAReceiveCplt>:
{
 8009ac6:	b508      	push	{r3, lr}
 8009ac8:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009aca:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009acc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f013 0320 	ands.w	r3, r3, #32
 8009ad4:	d117      	bne.n	8009b06 <UART_DMAReceiveCplt+0x40>
    huart->RxXferCount = 0U;
 8009ad6:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ad8:	6803      	ldr	r3, [r0, #0]
 8009ada:	68da      	ldr	r2, [r3, #12]
 8009adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ae0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ae2:	695a      	ldr	r2, [r3, #20]
 8009ae4:	f022 0201 	bic.w	r2, r2, #1
 8009ae8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aea:	695a      	ldr	r2, [r3, #20]
 8009aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009af0:	615a      	str	r2, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8009af2:	2220      	movs	r2, #32
 8009af4:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8009afa:	2a01      	cmp	r2, #1
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009afc:	bf02      	ittt	eq
 8009afe:	68da      	ldreq	r2, [r3, #12]
 8009b00:	f022 0210 	biceq.w	r2, r2, #16
 8009b04:	60da      	streq	r2, [r3, #12]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b06:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d103      	bne.n	8009b14 <UART_DMAReceiveCplt+0x4e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b0c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8009b0e:	f7ff fe7a 	bl	8009806 <HAL_UARTEx_RxEventCallback>
}
 8009b12:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8009b14:	f7fd f844 	bl	8006ba0 <HAL_UART_RxCpltCallback>
}
 8009b18:	e7fb      	b.n	8009b12 <UART_DMAReceiveCplt+0x4c>
	...

08009b1c <UART_Start_Receive_DMA>:
{
 8009b1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b1e:	4613      	mov	r3, r2
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b20:	2500      	movs	r5, #0
  huart->RxXferSize = Size;
 8009b22:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b24:	2222      	movs	r2, #34	; 0x22
{
 8009b26:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8009b28:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b2a:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b2c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b30:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8009b32:	4a12      	ldr	r2, [pc, #72]	; (8009b7c <UART_Start_Receive_DMA+0x60>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009b34:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b36:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b38:	4a11      	ldr	r2, [pc, #68]	; (8009b80 <UART_Start_Receive_DMA+0x64>)
 8009b3a:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b3c:	4a11      	ldr	r2, [pc, #68]	; (8009b84 <UART_Start_Receive_DMA+0x68>)
  huart->hdmarx->XferAbortCallback = NULL;
 8009b3e:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009b42:	460a      	mov	r2, r1
 8009b44:	1d31      	adds	r1, r6, #4
 8009b46:	f7fd ffd7 	bl	8007af8 <HAL_DMA_Start_IT>
}
 8009b4a:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	9501      	str	r5, [sp, #4]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	9201      	str	r2, [sp, #4]
 8009b54:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 8009b56:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009b5a:	9201      	str	r2, [sp, #4]
 8009b5c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b5e:	68da      	ldr	r2, [r3, #12]
 8009b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b64:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b66:	695a      	ldr	r2, [r3, #20]
 8009b68:	f042 0201 	orr.w	r2, r2, #1
 8009b6c:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b6e:	695a      	ldr	r2, [r3, #20]
 8009b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b74:	615a      	str	r2, [r3, #20]
}
 8009b76:	b002      	add	sp, #8
 8009b78:	bd70      	pop	{r4, r5, r6, pc}
 8009b7a:	bf00      	nop
 8009b7c:	08009ac7 	.word	0x08009ac7
 8009b80:	08009aad 	.word	0x08009aad
 8009b84:	080097ad 	.word	0x080097ad

08009b88 <HAL_UART_Receive_DMA>:
{
 8009b88:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b8a:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8009b8e:	2e20      	cmp	r6, #32
 8009b90:	d110      	bne.n	8009bb4 <HAL_UART_Receive_DMA+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8009b92:	b161      	cbz	r1, 8009bae <HAL_UART_Receive_DMA+0x26>
 8009b94:	b15a      	cbz	r2, 8009bae <HAL_UART_Receive_DMA+0x26>
    __HAL_LOCK(huart);
 8009b96:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8009b9a:	2c01      	cmp	r4, #1
 8009b9c:	d00a      	beq.n	8009bb4 <HAL_UART_Receive_DMA+0x2c>
 8009b9e:	2401      	movs	r4, #1
 8009ba0:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba4:	2400      	movs	r4, #0
 8009ba6:	6304      	str	r4, [r0, #48]	; 0x30
}
 8009ba8:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8009baa:	f7ff bfb7 	b.w	8009b1c <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8009bae:	2001      	movs	r0, #1
}
 8009bb0:	bc70      	pop	{r4, r5, r6}
 8009bb2:	4770      	bx	lr
    return HAL_BUSY;
 8009bb4:	2002      	movs	r0, #2
 8009bb6:	e7fb      	b.n	8009bb0 <HAL_UART_Receive_DMA+0x28>

08009bb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009bb8:	b084      	sub	sp, #16
 8009bba:	a801      	add	r0, sp, #4
 8009bbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8009bc0:	b004      	add	sp, #16
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	4770      	bx	lr

08009bc6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009bc6:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009bc8:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8009bcc:	2000      	movs	r0, #0
 8009bce:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8009bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8009bd6:	4770      	bx	lr

08009bd8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009bd8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8009bdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009be0:	045b      	lsls	r3, r3, #17
 8009be2:	0c5b      	lsrs	r3, r3, #17
 8009be4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8009be8:	2000      	movs	r0, #0
 8009bea:	4770      	bx	lr

08009bec <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8009bec:	2000      	movs	r0, #0
 8009bee:	4770      	bx	lr

08009bf0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	a803      	add	r0, sp, #12
 8009bf8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009bfc:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8009c04:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009c08:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009c0c:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8009c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c14:	b004      	add	sp, #16
 8009c16:	4770      	bx	lr

08009c18 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c18:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009c1a:	780d      	ldrb	r5, [r1, #0]
{
 8009c1c:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009c1e:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8009c22:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009c24:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8009c28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009c2c:	0412      	lsls	r2, r2, #16
 8009c2e:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8009c30:	2803      	cmp	r0, #3
 8009c32:	d84f      	bhi.n	8009cd4 <USB_ActivateEndpoint+0xbc>
 8009c34:	e8df f000 	tbb	[pc, r0]
 8009c38:	47494b02 	.word	0x47494b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009c40:	f248 0480 	movw	r4, #32896	; 0x8080
 8009c44:	4322      	orrs	r2, r4
 8009c46:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009c4a:	780e      	ldrb	r6, [r1, #0]
 8009c4c:	4d9b      	ldr	r5, [pc, #620]	; (8009ebc <USB_ActivateEndpoint+0x2a4>)
 8009c4e:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8009c52:	b292      	uxth	r2, r2
 8009c54:	402a      	ands	r2, r5
 8009c56:	4332      	orrs	r2, r6
 8009c58:	4322      	orrs	r2, r4
 8009c5a:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8009c5e:	7b0c      	ldrb	r4, [r1, #12]
 8009c60:	780a      	ldrb	r2, [r1, #0]
 8009c62:	2c00      	cmp	r4, #0
 8009c64:	f040 8089 	bne.w	8009d7a <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 8009c68:	88cc      	ldrh	r4, [r1, #6]
 8009c6a:	784e      	ldrb	r6, [r1, #1]
 8009c6c:	0864      	lsrs	r4, r4, #1
 8009c6e:	0064      	lsls	r4, r4, #1
 8009c70:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8009c74:	b386      	cbz	r6, 8009cd8 <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009c76:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8009c7a:	b2b6      	uxth	r6, r6
 8009c7c:	4432      	add	r2, r6
 8009c7e:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c82:	780c      	ldrb	r4, [r1, #0]
 8009c84:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009c88:	0652      	lsls	r2, r2, #25
 8009c8a:	d509      	bpl.n	8009ca0 <USB_ActivateEndpoint+0x88>
 8009c8c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009c90:	b292      	uxth	r2, r2
 8009c92:	402a      	ands	r2, r5
 8009c94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c98:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009c9c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8009ca0:	78ca      	ldrb	r2, [r1, #3]
 8009ca2:	780c      	ldrb	r4, [r1, #0]
 8009ca4:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ca6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009caa:	4985      	ldr	r1, [pc, #532]	; (8009ec0 <USB_ActivateEndpoint+0x2a8>)
 8009cac:	b292      	uxth	r2, r2
 8009cae:	ea02 0201 	and.w	r2, r2, r1
 8009cb2:	bf18      	it	ne
 8009cb4:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009cc0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8009cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8009cc6:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8009cca:	2000      	movs	r0, #0
      break;
 8009ccc:	e7b8      	b.n	8009c40 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009cce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 8009cd2:	e7fa      	b.n	8009cca <USB_ActivateEndpoint+0xb2>
      ret = HAL_ERROR;
 8009cd4:	2001      	movs	r0, #1
 8009cd6:	e7b3      	b.n	8009c40 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009cd8:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009cdc:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009cde:	b2ad      	uxth	r5, r5
 8009ce0:	442a      	add	r2, r5
 8009ce2:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009ce6:	780a      	ldrb	r2, [r1, #0]
 8009ce8:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8009cec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8009cf0:	b2a4      	uxth	r4, r4
 8009cf2:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8009cf6:	bb7e      	cbnz	r6, 8009d58 <USB_ActivateEndpoint+0x140>
 8009cf8:	5b15      	ldrh	r5, [r2, r4]
 8009cfa:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8009cfe:	042d      	lsls	r5, r5, #16
 8009d00:	0c2d      	lsrs	r5, r5, #16
 8009d02:	5315      	strh	r5, [r2, r4]
 8009d04:	5b15      	ldrh	r5, [r2, r4]
 8009d06:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8009d0a:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8009d0e:	b2ad      	uxth	r5, r5
 8009d10:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d12:	780c      	ldrb	r4, [r1, #0]
 8009d14:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009d18:	0455      	lsls	r5, r2, #17
 8009d1a:	d50d      	bpl.n	8009d38 <USB_ActivateEndpoint+0x120>
 8009d1c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009d20:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009d24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d28:	0412      	lsls	r2, r2, #16
 8009d2a:	0c12      	lsrs	r2, r2, #16
 8009d2c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009d30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d34:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d38:	7809      	ldrb	r1, [r1, #0]
 8009d3a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009d3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d46:	0412      	lsls	r2, r2, #16
 8009d48:	0c12      	lsrs	r2, r2, #16
 8009d4a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d56:	e071      	b.n	8009e3c <USB_ActivateEndpoint+0x224>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009d58:	2e3e      	cmp	r6, #62	; 0x3e
 8009d5a:	d805      	bhi.n	8009d68 <USB_ActivateEndpoint+0x150>
 8009d5c:	0875      	lsrs	r5, r6, #1
 8009d5e:	07f7      	lsls	r7, r6, #31
 8009d60:	bf48      	it	mi
 8009d62:	3501      	addmi	r5, #1
 8009d64:	02ad      	lsls	r5, r5, #10
 8009d66:	e7d2      	b.n	8009d0e <USB_ActivateEndpoint+0xf6>
 8009d68:	0977      	lsrs	r7, r6, #5
 8009d6a:	4d56      	ldr	r5, [pc, #344]	; (8009ec4 <USB_ActivateEndpoint+0x2ac>)
 8009d6c:	06f6      	lsls	r6, r6, #27
 8009d6e:	bf08      	it	eq
 8009d70:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8009d74:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8009d78:	e7c9      	b.n	8009d0e <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009d7a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009d7e:	b2a4      	uxth	r4, r4
 8009d80:	402c      	ands	r4, r5
 8009d82:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8009d86:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8009d8a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009d8e:	780a      	ldrb	r2, [r1, #0]
 8009d90:	890c      	ldrh	r4, [r1, #8]
 8009d92:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8009d96:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8009d9a:	0864      	lsrs	r4, r4, #1
 8009d9c:	b2b6      	uxth	r6, r6
 8009d9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009da2:	0064      	lsls	r4, r4, #1
 8009da4:	5394      	strh	r4, [r2, r6]
 8009da6:	780a      	ldrb	r2, [r1, #0]
 8009da8:	894c      	ldrh	r4, [r1, #10]
 8009daa:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8009dae:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8009db2:	0864      	lsrs	r4, r4, #1
 8009db4:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8009db8:	0064      	lsls	r4, r4, #1
 8009dba:	b2b6      	uxth	r6, r6
 8009dbc:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 8009dbe:	784a      	ldrb	r2, [r1, #1]
 8009dc0:	780c      	ldrb	r4, [r1, #0]
 8009dc2:	2a00      	cmp	r2, #0
 8009dc4:	d13d      	bne.n	8009e42 <USB_ActivateEndpoint+0x22a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009dc6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009dca:	0452      	lsls	r2, r2, #17
 8009dcc:	d509      	bpl.n	8009de2 <USB_ActivateEndpoint+0x1ca>
 8009dce:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009dd2:	b292      	uxth	r2, r2
 8009dd4:	402a      	ands	r2, r5
 8009dd6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009dda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009dde:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009de2:	780c      	ldrb	r4, [r1, #0]
 8009de4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009de8:	0657      	lsls	r7, r2, #25
 8009dea:	d50d      	bpl.n	8009e08 <USB_ActivateEndpoint+0x1f0>
 8009dec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009df0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009df4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009df8:	0412      	lsls	r2, r2, #16
 8009dfa:	0c12      	lsrs	r2, r2, #16
 8009dfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e00:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009e04:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e08:	f248 0480 	movw	r4, #32896	; 0x8080
 8009e0c:	780d      	ldrb	r5, [r1, #0]
 8009e0e:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8009e12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e1a:	0412      	lsls	r2, r2, #16
 8009e1c:	0c12      	lsrs	r2, r2, #16
 8009e1e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8009e22:	4322      	orrs	r2, r4
 8009e24:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e28:	7809      	ldrb	r1, [r1, #0]
 8009e2a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009e2e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e36:	0412      	lsls	r2, r2, #16
 8009e38:	0c12      	lsrs	r2, r2, #16
 8009e3a:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e3c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8009e40:	e740      	b.n	8009cc4 <USB_ActivateEndpoint+0xac>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e42:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009e46:	0456      	lsls	r6, r2, #17
 8009e48:	d509      	bpl.n	8009e5e <USB_ActivateEndpoint+0x246>
 8009e4a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009e4e:	b292      	uxth	r2, r2
 8009e50:	402a      	ands	r2, r5
 8009e52:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009e56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e5a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e5e:	780c      	ldrb	r4, [r1, #0]
 8009e60:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009e64:	0652      	lsls	r2, r2, #25
 8009e66:	d50d      	bpl.n	8009e84 <USB_ActivateEndpoint+0x26c>
 8009e68:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009e6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009e70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e74:	0412      	lsls	r2, r2, #16
 8009e76:	0c12      	lsrs	r2, r2, #16
 8009e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e7c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009e80:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8009e84:	78ca      	ldrb	r2, [r1, #3]
 8009e86:	780c      	ldrb	r4, [r1, #0]
 8009e88:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e8a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009e8e:	4d0c      	ldr	r5, [pc, #48]	; (8009ec0 <USB_ActivateEndpoint+0x2a8>)
 8009e90:	b292      	uxth	r2, r2
 8009e92:	ea02 0205 	and.w	r2, r2, r5
 8009e96:	bf18      	it	ne
 8009e98:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ea4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ea8:	7809      	ldrb	r1, [r1, #0]
 8009eaa:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009eae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009eb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009eb6:	0412      	lsls	r2, r2, #16
 8009eb8:	0c12      	lsrs	r2, r2, #16
 8009eba:	e748      	b.n	8009d4e <USB_ActivateEndpoint+0x136>
 8009ebc:	ffff8f8f 	.word	0xffff8f8f
 8009ec0:	ffff8fbf 	.word	0xffff8fbf
 8009ec4:	ffff8000 	.word	0xffff8000

08009ec8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ec8:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8009eca:	7b0c      	ldrb	r4, [r1, #12]
 8009ecc:	784b      	ldrb	r3, [r1, #1]
 8009ece:	780a      	ldrb	r2, [r1, #0]
 8009ed0:	2c00      	cmp	r4, #0
 8009ed2:	d13d      	bne.n	8009f50 <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 8009ed4:	b313      	cbz	r3, 8009f1c <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ed6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009eda:	065c      	lsls	r4, r3, #25
 8009edc:	d50d      	bpl.n	8009efa <USB_DeactivateEndpoint+0x32>
 8009ede:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eea:	041b      	lsls	r3, r3, #16
 8009eec:	0c1b      	lsrs	r3, r3, #16
 8009eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ef2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ef6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009efa:	780a      	ldrb	r2, [r1, #0]
 8009efc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f08:	041b      	lsls	r3, r3, #16
 8009f0a:	0c1b      	lsrs	r3, r3, #16
 8009f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8009f18:	2000      	movs	r0, #0
 8009f1a:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009f20:	045b      	lsls	r3, r3, #17
 8009f22:	d50d      	bpl.n	8009f40 <USB_DeactivateEndpoint+0x78>
 8009f24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f30:	041b      	lsls	r3, r3, #16
 8009f32:	0c1b      	lsrs	r3, r3, #16
 8009f34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f3c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f40:	780a      	ldrb	r2, [r1, #0]
 8009f42:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f4e:	e7db      	b.n	8009f08 <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d14e      	bne.n	8009ff2 <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009f58:	045c      	lsls	r4, r3, #17
 8009f5a:	d50d      	bpl.n	8009f78 <USB_DeactivateEndpoint+0xb0>
 8009f5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f68:	041b      	lsls	r3, r3, #16
 8009f6a:	0c1b      	lsrs	r3, r3, #16
 8009f6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f78:	780a      	ldrb	r2, [r1, #0]
 8009f7a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009f7e:	065b      	lsls	r3, r3, #25
 8009f80:	d50d      	bpl.n	8009f9e <USB_DeactivateEndpoint+0xd6>
 8009f82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f8e:	041b      	lsls	r3, r3, #16
 8009f90:	0c1b      	lsrs	r3, r3, #16
 8009f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8009f9e:	780a      	ldrb	r2, [r1, #0]
 8009fa0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fac:	041b      	lsls	r3, r3, #16
 8009fae:	0c1b      	lsrs	r3, r3, #16
 8009fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fb8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fbc:	f248 0280 	movw	r2, #32896	; 0x8080
 8009fc0:	780c      	ldrb	r4, [r1, #0]
 8009fc2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8009fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fce:	041b      	lsls	r3, r3, #16
 8009fd0:	0c1b      	lsrs	r3, r3, #16
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fd8:	7809      	ldrb	r1, [r1, #0]
 8009fda:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fe6:	041b      	lsls	r3, r3, #16
 8009fe8:	0c1b      	lsrs	r3, r3, #16
 8009fea:	4313      	orrs	r3, r2
 8009fec:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8009ff0:	e792      	b.n	8009f18 <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ff2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009ff6:	045c      	lsls	r4, r3, #17
 8009ff8:	d50d      	bpl.n	800a016 <USB_DeactivateEndpoint+0x14e>
 8009ffa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a006:	041b      	lsls	r3, r3, #16
 800a008:	0c1b      	lsrs	r3, r3, #16
 800a00a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a00e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a012:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a016:	780a      	ldrb	r2, [r1, #0]
 800a018:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a01c:	065b      	lsls	r3, r3, #25
 800a01e:	d50d      	bpl.n	800a03c <USB_DeactivateEndpoint+0x174>
 800a020:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a02c:	041b      	lsls	r3, r3, #16
 800a02e:	0c1b      	lsrs	r3, r3, #16
 800a030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a034:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a038:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800a03c:	780a      	ldrb	r2, [r1, #0]
 800a03e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a04a:	041b      	lsls	r3, r3, #16
 800a04c:	0c1b      	lsrs	r3, r3, #16
 800a04e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a056:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a05a:	f248 0280 	movw	r2, #32896	; 0x8080
 800a05e:	780c      	ldrb	r4, [r1, #0]
 800a060:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800a064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a06c:	041b      	lsls	r3, r3, #16
 800a06e:	0c1b      	lsrs	r3, r3, #16
 800a070:	4313      	orrs	r3, r2
 800a072:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a076:	7809      	ldrb	r1, [r1, #0]
 800a078:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800a07c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a084:	e7af      	b.n	8009fe6 <USB_DeactivateEndpoint+0x11e>

0800a086 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800a086:	784b      	ldrb	r3, [r1, #1]
 800a088:	780a      	ldrb	r2, [r1, #0]
 800a08a:	b18b      	cbz	r3, 800a0b0 <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a08c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a098:	041b      	lsls	r3, r3, #16
 800a09a:	0c1b      	lsrs	r3, r3, #16
 800a09c:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a0a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a0b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a0b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0bc:	041b      	lsls	r3, r3, #16
 800a0be:	0c1b      	lsrs	r3, r3, #16
 800a0c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a0c4:	e7ec      	b.n	800a0a0 <USB_EPSetStall+0x1a>

0800a0c6 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800a0c6:	7b0b      	ldrb	r3, [r1, #12]
 800a0c8:	bb43      	cbnz	r3, 800a11c <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 800a0ca:	784b      	ldrb	r3, [r1, #1]
 800a0cc:	780a      	ldrb	r2, [r1, #0]
 800a0ce:	b33b      	cbz	r3, 800a120 <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a0d4:	065b      	lsls	r3, r3, #25
 800a0d6:	d50d      	bpl.n	800a0f4 <USB_EPClearStall+0x2e>
 800a0d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a0dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e4:	041b      	lsls	r3, r3, #16
 800a0e6:	0c1b      	lsrs	r3, r3, #16
 800a0e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800a0f4:	78cb      	ldrb	r3, [r1, #3]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d010      	beq.n	800a11c <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a0fa:	780a      	ldrb	r2, [r1, #0]
 800a0fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a108:	041b      	lsls	r3, r3, #16
 800a10a:	0c1b      	lsrs	r3, r3, #16
 800a10c:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a118:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800a11c:	2000      	movs	r0, #0
 800a11e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a120:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a124:	045b      	lsls	r3, r3, #17
 800a126:	d50d      	bpl.n	800a144 <USB_EPClearStall+0x7e>
 800a128:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a12c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a134:	041b      	lsls	r3, r3, #16
 800a136:	0c1b      	lsrs	r3, r3, #16
 800a138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a140:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a144:	780a      	ldrb	r2, [r1, #0]
 800a146:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a14a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a152:	041b      	lsls	r3, r3, #16
 800a154:	0c1b      	lsrs	r3, r3, #16
 800a156:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a15a:	e7d9      	b.n	800a110 <USB_EPClearStall+0x4a>

0800a15c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800a15c:	b911      	cbnz	r1, 800a164 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a15e:	2380      	movs	r3, #128	; 0x80
 800a160:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800a164:	2000      	movs	r0, #0
 800a166:	4770      	bx	lr

0800a168 <USB_DevConnect>:
 800a168:	2000      	movs	r0, #0
 800a16a:	4770      	bx	lr

0800a16c <USB_DevDisconnect>:
 800a16c:	2000      	movs	r0, #0
 800a16e:	4770      	bx	lr

0800a170 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a170:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800a174:	b280      	uxth	r0, r0
 800a176:	4770      	bx	lr

0800a178 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800a178:	2000      	movs	r0, #0
 800a17a:	4770      	bx	lr

0800a17c <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a17c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a180:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a186:	085b      	lsrs	r3, r3, #1
 800a188:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d100      	bne.n	800a192 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800a190:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a192:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800a196:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 800a19a:	e7f7      	b.n	800a18c <USB_WritePMA+0x10>

0800a19c <USB_EPStartXfer>:
{
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800a1a0:	7849      	ldrb	r1, [r1, #1]
{
 800a1a2:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 800a1a4:	2901      	cmp	r1, #1
 800a1a6:	7b22      	ldrb	r2, [r4, #12]
 800a1a8:	f040 8255 	bne.w	800a656 <USB_EPStartXfer+0x4ba>
    if (ep->xfer_len > ep->maxpacket)
 800a1ac:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800a1b0:	69a6      	ldr	r6, [r4, #24]
 800a1b2:	6961      	ldr	r1, [r4, #20]
 800a1b4:	4566      	cmp	r6, ip
 800a1b6:	bf28      	it	cs
 800a1b8:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 800a1ba:	bb02      	cbnz	r2, 800a1fe <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a1bc:	b2b6      	uxth	r6, r6
 800a1be:	88e2      	ldrh	r2, [r4, #6]
 800a1c0:	4633      	mov	r3, r6
 800a1c2:	f7ff ffdb 	bl	800a17c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a1c6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800a1ca:	7821      	ldrb	r1, [r4, #0]
 800a1cc:	b290      	uxth	r0, r2
 800a1ce:	f205 4204 	addw	r2, r5, #1028	; 0x404
 800a1d2:	0109      	lsls	r1, r1, #4
 800a1d4:	4402      	add	r2, r0
 800a1d6:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a1d8:	7822      	ldrb	r2, [r4, #0]
 800a1da:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800a1de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1e6:	041b      	lsls	r3, r3, #16
 800a1e8:	0c1b      	lsrs	r3, r3, #16
 800a1ea:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 800a1ee:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 800a1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 800a1fe:	78e2      	ldrb	r2, [r4, #3]
 800a200:	7827      	ldrb	r7, [r4, #0]
 800a202:	2a02      	cmp	r2, #2
 800a204:	6a23      	ldr	r3, [r4, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a206:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
      if (ep->type == EP_TYPE_BULK)
 800a20a:	f040 811e 	bne.w	800a44a <USB_EPStartXfer+0x2ae>
        if (ep->xfer_len_db > ep->maxpacket)
 800a20e:	459c      	cmp	ip, r3
 800a210:	f080 8101 	bcs.w	800a416 <USB_EPStartXfer+0x27a>
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a214:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a218:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a21c:	0412      	lsls	r2, r2, #16
 800a21e:	0c12      	lsrs	r2, r2, #16
 800a220:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800a224:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a228:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a22c:	7822      	ldrb	r2, [r4, #0]
          ep->xfer_len_db -= len;
 800a22e:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a230:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 800a234:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a236:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a23a:	b2b3      	uxth	r3, r6
 800a23c:	7860      	ldrb	r0, [r4, #1]
 800a23e:	d075      	beq.n	800a32c <USB_EPStartXfer+0x190>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a240:	2800      	cmp	r0, #0
 800a242:	d153      	bne.n	800a2ec <USB_EPStartXfer+0x150>
 800a244:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800a248:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 800a24c:	b280      	uxth	r0, r0
 800a24e:	4438      	add	r0, r7
 800a250:	0112      	lsls	r2, r2, #4
 800a252:	2e00      	cmp	r6, #0
 800a254:	d137      	bne.n	800a2c6 <USB_EPStartXfer+0x12a>
 800a256:	5a87      	ldrh	r7, [r0, r2]
 800a258:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 800a25c:	043f      	lsls	r7, r7, #16
 800a25e:	0c3f      	lsrs	r7, r7, #16
 800a260:	5287      	strh	r7, [r0, r2]
 800a262:	5a87      	ldrh	r7, [r0, r2]
 800a264:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 800a268:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 800a26c:	b2bf      	uxth	r7, r7
 800a26e:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a270:	4628      	mov	r0, r5
 800a272:	8962      	ldrh	r2, [r4, #10]
 800a274:	f7ff ff82 	bl	800a17c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800a278:	6a22      	ldr	r2, [r4, #32]
 800a27a:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800a27c:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800a27e:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800a280:	bf8a      	itet	hi
 800a282:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800a284:	2300      	movls	r3, #0
 800a286:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a288:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 800a28a:	4431      	add	r1, r6
 800a28c:	6223      	str	r3, [r4, #32]
 800a28e:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a290:	b293      	uxth	r3, r2
 800a292:	2800      	cmp	r0, #0
 800a294:	f040 8159 	bne.w	800a54a <USB_EPStartXfer+0x3ae>
 800a298:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800a29c:	7826      	ldrb	r6, [r4, #0]
 800a29e:	b280      	uxth	r0, r0
 800a2a0:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800a2a4:	0136      	lsls	r6, r6, #4
 800a2a6:	4438      	add	r0, r7
 800a2a8:	bb5a      	cbnz	r2, 800a302 <USB_EPStartXfer+0x166>
 800a2aa:	5a32      	ldrh	r2, [r6, r0]
 800a2ac:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a2b0:	0412      	lsls	r2, r2, #16
 800a2b2:	0c12      	lsrs	r2, r2, #16
 800a2b4:	5232      	strh	r2, [r6, r0]
 800a2b6:	5a32      	ldrh	r2, [r6, r0]
 800a2b8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a2bc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a2c0:	b292      	uxth	r2, r2
 800a2c2:	5232      	strh	r2, [r6, r0]
 800a2c4:	e026      	b.n	800a314 <USB_EPStartXfer+0x178>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a2c6:	2e3e      	cmp	r6, #62	; 0x3e
 800a2c8:	d806      	bhi.n	800a2d8 <USB_EPStartXfer+0x13c>
 800a2ca:	0877      	lsrs	r7, r6, #1
 800a2cc:	f016 0f01 	tst.w	r6, #1
 800a2d0:	bf18      	it	ne
 800a2d2:	3701      	addne	r7, #1
 800a2d4:	02bf      	lsls	r7, r7, #10
 800a2d6:	e7c9      	b.n	800a26c <USB_EPStartXfer+0xd0>
 800a2d8:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 800a2dc:	06f7      	lsls	r7, r6, #27
 800a2de:	4fa1      	ldr	r7, [pc, #644]	; (800a564 <USB_EPStartXfer+0x3c8>)
 800a2e0:	bf08      	it	eq
 800a2e2:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800a2e6:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 800a2ea:	e7bf      	b.n	800a26c <USB_EPStartXfer+0xd0>
 800a2ec:	2801      	cmp	r0, #1
 800a2ee:	d1bf      	bne.n	800a270 <USB_EPStartXfer+0xd4>
 800a2f0:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800a2f4:	0112      	lsls	r2, r2, #4
 800a2f6:	b287      	uxth	r7, r0
 800a2f8:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800a2fc:	4438      	add	r0, r7
 800a2fe:	5283      	strh	r3, [r0, r2]
 800a300:	e7b6      	b.n	800a270 <USB_EPStartXfer+0xd4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a302:	2a3e      	cmp	r2, #62	; 0x3e
 800a304:	d809      	bhi.n	800a31a <USB_EPStartXfer+0x17e>
 800a306:	0857      	lsrs	r7, r2, #1
 800a308:	07d2      	lsls	r2, r2, #31
 800a30a:	bf48      	it	mi
 800a30c:	3701      	addmi	r7, #1
 800a30e:	02bf      	lsls	r7, r7, #10
 800a310:	b2bf      	uxth	r7, r7
 800a312:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a314:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a316:	4628      	mov	r0, r5
 800a318:	e094      	b.n	800a444 <USB_EPStartXfer+0x2a8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a31a:	0957      	lsrs	r7, r2, #5
 800a31c:	06d2      	lsls	r2, r2, #27
 800a31e:	4a91      	ldr	r2, [pc, #580]	; (800a564 <USB_EPStartXfer+0x3c8>)
 800a320:	bf08      	it	eq
 800a322:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800a326:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800a32a:	e7c9      	b.n	800a2c0 <USB_EPStartXfer+0x124>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d153      	bne.n	800a3d8 <USB_EPStartXfer+0x23c>
 800a330:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800a334:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800a338:	b280      	uxth	r0, r0
 800a33a:	4438      	add	r0, r7
 800a33c:	0112      	lsls	r2, r2, #4
 800a33e:	2e00      	cmp	r6, #0
 800a340:	d137      	bne.n	800a3b2 <USB_EPStartXfer+0x216>
 800a342:	5a87      	ldrh	r7, [r0, r2]
 800a344:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 800a348:	043f      	lsls	r7, r7, #16
 800a34a:	0c3f      	lsrs	r7, r7, #16
 800a34c:	5287      	strh	r7, [r0, r2]
 800a34e:	5a87      	ldrh	r7, [r0, r2]
 800a350:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 800a354:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 800a358:	b2bf      	uxth	r7, r7
 800a35a:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a35c:	4628      	mov	r0, r5
 800a35e:	8922      	ldrh	r2, [r4, #8]
 800a360:	f7ff ff0c 	bl	800a17c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800a364:	6a22      	ldr	r2, [r4, #32]
 800a366:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800a368:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800a36a:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800a36c:	bf8a      	itet	hi
 800a36e:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800a370:	2300      	movls	r3, #0
 800a372:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a374:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 800a376:	4431      	add	r1, r6
 800a378:	6223      	str	r3, [r4, #32]
 800a37a:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a37c:	b293      	uxth	r3, r2
 800a37e:	2800      	cmp	r0, #0
 800a380:	f040 815c 	bne.w	800a63c <USB_EPStartXfer+0x4a0>
 800a384:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800a388:	7826      	ldrb	r6, [r4, #0]
 800a38a:	b280      	uxth	r0, r0
 800a38c:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 800a390:	0136      	lsls	r6, r6, #4
 800a392:	4438      	add	r0, r7
 800a394:	bb5a      	cbnz	r2, 800a3ee <USB_EPStartXfer+0x252>
 800a396:	5a32      	ldrh	r2, [r6, r0]
 800a398:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a39c:	0412      	lsls	r2, r2, #16
 800a39e:	0c12      	lsrs	r2, r2, #16
 800a3a0:	5232      	strh	r2, [r6, r0]
 800a3a2:	5a32      	ldrh	r2, [r6, r0]
 800a3a4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a3a8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a3ac:	b292      	uxth	r2, r2
 800a3ae:	5232      	strh	r2, [r6, r0]
 800a3b0:	e026      	b.n	800a400 <USB_EPStartXfer+0x264>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a3b2:	2e3e      	cmp	r6, #62	; 0x3e
 800a3b4:	d806      	bhi.n	800a3c4 <USB_EPStartXfer+0x228>
 800a3b6:	0877      	lsrs	r7, r6, #1
 800a3b8:	f016 0f01 	tst.w	r6, #1
 800a3bc:	bf18      	it	ne
 800a3be:	3701      	addne	r7, #1
 800a3c0:	02bf      	lsls	r7, r7, #10
 800a3c2:	e7c9      	b.n	800a358 <USB_EPStartXfer+0x1bc>
 800a3c4:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 800a3c8:	06f7      	lsls	r7, r6, #27
 800a3ca:	4f66      	ldr	r7, [pc, #408]	; (800a564 <USB_EPStartXfer+0x3c8>)
 800a3cc:	bf08      	it	eq
 800a3ce:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800a3d2:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 800a3d6:	e7bf      	b.n	800a358 <USB_EPStartXfer+0x1bc>
 800a3d8:	2801      	cmp	r0, #1
 800a3da:	d1bf      	bne.n	800a35c <USB_EPStartXfer+0x1c0>
 800a3dc:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800a3e0:	0112      	lsls	r2, r2, #4
 800a3e2:	b287      	uxth	r7, r0
 800a3e4:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800a3e8:	4438      	add	r0, r7
 800a3ea:	5283      	strh	r3, [r0, r2]
 800a3ec:	e7b6      	b.n	800a35c <USB_EPStartXfer+0x1c0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3ee:	2a3e      	cmp	r2, #62	; 0x3e
 800a3f0:	d808      	bhi.n	800a404 <USB_EPStartXfer+0x268>
 800a3f2:	0857      	lsrs	r7, r2, #1
 800a3f4:	07d2      	lsls	r2, r2, #31
 800a3f6:	bf48      	it	mi
 800a3f8:	3701      	addmi	r7, #1
 800a3fa:	02bf      	lsls	r7, r7, #10
 800a3fc:	b2bf      	uxth	r7, r7
 800a3fe:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a400:	8962      	ldrh	r2, [r4, #10]
 800a402:	e788      	b.n	800a316 <USB_EPStartXfer+0x17a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a404:	0957      	lsrs	r7, r2, #5
 800a406:	06d2      	lsls	r2, r2, #27
 800a408:	4a56      	ldr	r2, [pc, #344]	; (800a564 <USB_EPStartXfer+0x3c8>)
 800a40a:	bf08      	it	eq
 800a40c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800a410:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800a414:	e7ca      	b.n	800a3ac <USB_EPStartXfer+0x210>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a416:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800a41a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a41e:	0412      	lsls	r2, r2, #16
 800a420:	0c12      	lsrs	r2, r2, #16
 800a422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a426:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a42a:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a42e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a432:	7826      	ldrb	r6, [r4, #0]
 800a434:	b297      	uxth	r7, r2
 800a436:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800a43a:	443a      	add	r2, r7
 800a43c:	0136      	lsls	r6, r6, #4
 800a43e:	b29b      	uxth	r3, r3
 800a440:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a442:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a444:	f7ff fe9a 	bl	800a17c <USB_WritePMA>
 800a448:	e6c6      	b.n	800a1d8 <USB_EPStartXfer+0x3c>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800a44a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a44e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a452:	0412      	lsls	r2, r2, #16
 800a454:	0c12      	lsrs	r2, r2, #16
 800a456:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800a45a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a45e:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a462:	7822      	ldrb	r2, [r4, #0]
        ep->xfer_len_db -= len;
 800a464:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a466:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
        ep->xfer_len_db -= len;
 800a46a:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a46c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a470:	b2b3      	uxth	r3, r6
 800a472:	7860      	ldrb	r0, [r4, #1]
 800a474:	d078      	beq.n	800a568 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a476:	2800      	cmp	r0, #0
 800a478:	d151      	bne.n	800a51e <USB_EPStartXfer+0x382>
 800a47a:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800a47e:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 800a482:	b280      	uxth	r0, r0
 800a484:	4438      	add	r0, r7
 800a486:	0112      	lsls	r2, r2, #4
 800a488:	2e00      	cmp	r6, #0
 800a48a:	d135      	bne.n	800a4f8 <USB_EPStartXfer+0x35c>
 800a48c:	5a87      	ldrh	r7, [r0, r2]
 800a48e:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 800a492:	043f      	lsls	r7, r7, #16
 800a494:	0c3f      	lsrs	r7, r7, #16
 800a496:	5287      	strh	r7, [r0, r2]
 800a498:	5a87      	ldrh	r7, [r0, r2]
 800a49a:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 800a49e:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 800a4a2:	b2bf      	uxth	r7, r7
 800a4a4:	5287      	strh	r7, [r0, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4a6:	8962      	ldrh	r2, [r4, #10]
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f7ff fe67 	bl	800a17c <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 800a4ae:	6a22      	ldr	r2, [r4, #32]
 800a4b0:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 800a4b2:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800a4b4:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 800a4b6:	bf8a      	itet	hi
 800a4b8:	1b93      	subhi	r3, r2, r6
            ep->xfer_len_db = 0U;
 800a4ba:	2300      	movls	r3, #0
 800a4bc:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 800a4be:	4431      	add	r1, r6
 800a4c0:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db -= len;
 800a4c2:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 800a4c4:	2a00      	cmp	r2, #0
 800a4c6:	f43f ae87 	beq.w	800a1d8 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a4ca:	7860      	ldrb	r0, [r4, #1]
 800a4cc:	b293      	uxth	r3, r2
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d13b      	bne.n	800a54a <USB_EPStartXfer+0x3ae>
 800a4d2:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 800a4d6:	7827      	ldrb	r7, [r4, #0]
 800a4d8:	b2b0      	uxth	r0, r6
 800a4da:	2a3e      	cmp	r2, #62	; 0x3e
 800a4dc:	f205 4604 	addw	r6, r5, #1028	; 0x404
 800a4e0:	ea4f 1707 	mov.w	r7, r7, lsl #4
 800a4e4:	4406      	add	r6, r0
 800a4e6:	d825      	bhi.n	800a534 <USB_EPStartXfer+0x398>
 800a4e8:	0850      	lsrs	r0, r2, #1
 800a4ea:	07d2      	lsls	r2, r2, #31
 800a4ec:	bf48      	it	mi
 800a4ee:	3001      	addmi	r0, #1
 800a4f0:	0280      	lsls	r0, r0, #10
 800a4f2:	b280      	uxth	r0, r0
 800a4f4:	53b8      	strh	r0, [r7, r6]
 800a4f6:	e70d      	b.n	800a314 <USB_EPStartXfer+0x178>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4f8:	2e3e      	cmp	r6, #62	; 0x3e
 800a4fa:	d806      	bhi.n	800a50a <USB_EPStartXfer+0x36e>
 800a4fc:	0877      	lsrs	r7, r6, #1
 800a4fe:	f016 0f01 	tst.w	r6, #1
 800a502:	bf18      	it	ne
 800a504:	3701      	addne	r7, #1
 800a506:	02bf      	lsls	r7, r7, #10
 800a508:	e7cb      	b.n	800a4a2 <USB_EPStartXfer+0x306>
 800a50a:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 800a50e:	06f7      	lsls	r7, r6, #27
 800a510:	4f14      	ldr	r7, [pc, #80]	; (800a564 <USB_EPStartXfer+0x3c8>)
 800a512:	bf08      	it	eq
 800a514:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800a518:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 800a51c:	e7c1      	b.n	800a4a2 <USB_EPStartXfer+0x306>
 800a51e:	2801      	cmp	r0, #1
 800a520:	d1c1      	bne.n	800a4a6 <USB_EPStartXfer+0x30a>
 800a522:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800a526:	0112      	lsls	r2, r2, #4
 800a528:	b287      	uxth	r7, r0
 800a52a:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800a52e:	4438      	add	r0, r7
 800a530:	5283      	strh	r3, [r0, r2]
 800a532:	e7b8      	b.n	800a4a6 <USB_EPStartXfer+0x30a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a534:	0950      	lsrs	r0, r2, #5
 800a536:	06d2      	lsls	r2, r2, #27
 800a538:	4a0a      	ldr	r2, [pc, #40]	; (800a564 <USB_EPStartXfer+0x3c8>)
 800a53a:	bf08      	it	eq
 800a53c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a540:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a544:	b292      	uxth	r2, r2
 800a546:	53ba      	strh	r2, [r7, r6]
 800a548:	e6e4      	b.n	800a314 <USB_EPStartXfer+0x178>
 800a54a:	2801      	cmp	r0, #1
 800a54c:	f47f aee2 	bne.w	800a314 <USB_EPStartXfer+0x178>
 800a550:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800a554:	7820      	ldrb	r0, [r4, #0]
 800a556:	b296      	uxth	r6, r2
 800a558:	f205 4204 	addw	r2, r5, #1028	; 0x404
 800a55c:	0100      	lsls	r0, r0, #4
 800a55e:	4432      	add	r2, r6
 800a560:	5283      	strh	r3, [r0, r2]
 800a562:	e6d7      	b.n	800a314 <USB_EPStartXfer+0x178>
 800a564:	ffff8000 	.word	0xffff8000
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a568:	2800      	cmp	r0, #0
 800a56a:	d151      	bne.n	800a610 <USB_EPStartXfer+0x474>
 800a56c:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800a570:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800a574:	b280      	uxth	r0, r0
 800a576:	4438      	add	r0, r7
 800a578:	0112      	lsls	r2, r2, #4
 800a57a:	2e00      	cmp	r6, #0
 800a57c:	d135      	bne.n	800a5ea <USB_EPStartXfer+0x44e>
 800a57e:	5a87      	ldrh	r7, [r0, r2]
 800a580:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 800a584:	043f      	lsls	r7, r7, #16
 800a586:	0c3f      	lsrs	r7, r7, #16
 800a588:	5287      	strh	r7, [r0, r2]
 800a58a:	5a87      	ldrh	r7, [r0, r2]
 800a58c:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 800a590:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 800a594:	b2bf      	uxth	r7, r7
 800a596:	5287      	strh	r7, [r0, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a598:	8922      	ldrh	r2, [r4, #8]
 800a59a:	4628      	mov	r0, r5
 800a59c:	f7ff fdee 	bl	800a17c <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 800a5a0:	6a22      	ldr	r2, [r4, #32]
 800a5a2:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 800a5a4:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800a5a6:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 800a5a8:	bf8a      	itet	hi
 800a5aa:	1b93      	subhi	r3, r2, r6
            ep->xfer_len_db = 0U;
 800a5ac:	2300      	movls	r3, #0
 800a5ae:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 800a5b0:	4431      	add	r1, r6
 800a5b2:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db -= len;
 800a5b4:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 800a5b6:	2a00      	cmp	r2, #0
 800a5b8:	f43f ae0e 	beq.w	800a1d8 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a5bc:	7860      	ldrb	r0, [r4, #1]
 800a5be:	b293      	uxth	r3, r2
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d13b      	bne.n	800a63c <USB_EPStartXfer+0x4a0>
 800a5c4:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 800a5c8:	7827      	ldrb	r7, [r4, #0]
 800a5ca:	b2b0      	uxth	r0, r6
 800a5cc:	2a3e      	cmp	r2, #62	; 0x3e
 800a5ce:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 800a5d2:	ea4f 1707 	mov.w	r7, r7, lsl #4
 800a5d6:	4406      	add	r6, r0
 800a5d8:	d825      	bhi.n	800a626 <USB_EPStartXfer+0x48a>
 800a5da:	0850      	lsrs	r0, r2, #1
 800a5dc:	07d2      	lsls	r2, r2, #31
 800a5de:	bf48      	it	mi
 800a5e0:	3001      	addmi	r0, #1
 800a5e2:	0280      	lsls	r0, r0, #10
 800a5e4:	b280      	uxth	r0, r0
 800a5e6:	53b8      	strh	r0, [r7, r6]
 800a5e8:	e70a      	b.n	800a400 <USB_EPStartXfer+0x264>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a5ea:	2e3e      	cmp	r6, #62	; 0x3e
 800a5ec:	d806      	bhi.n	800a5fc <USB_EPStartXfer+0x460>
 800a5ee:	0877      	lsrs	r7, r6, #1
 800a5f0:	f016 0f01 	tst.w	r6, #1
 800a5f4:	bf18      	it	ne
 800a5f6:	3701      	addne	r7, #1
 800a5f8:	02bf      	lsls	r7, r7, #10
 800a5fa:	e7cb      	b.n	800a594 <USB_EPStartXfer+0x3f8>
 800a5fc:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 800a600:	06f7      	lsls	r7, r6, #27
 800a602:	4fac      	ldr	r7, [pc, #688]	; (800a8b4 <USB_EPStartXfer+0x718>)
 800a604:	bf08      	it	eq
 800a606:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800a60a:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 800a60e:	e7c1      	b.n	800a594 <USB_EPStartXfer+0x3f8>
 800a610:	2801      	cmp	r0, #1
 800a612:	d1c1      	bne.n	800a598 <USB_EPStartXfer+0x3fc>
 800a614:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800a618:	0112      	lsls	r2, r2, #4
 800a61a:	b287      	uxth	r7, r0
 800a61c:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800a620:	4438      	add	r0, r7
 800a622:	5283      	strh	r3, [r0, r2]
 800a624:	e7b8      	b.n	800a598 <USB_EPStartXfer+0x3fc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a626:	0950      	lsrs	r0, r2, #5
 800a628:	06d2      	lsls	r2, r2, #27
 800a62a:	4aa2      	ldr	r2, [pc, #648]	; (800a8b4 <USB_EPStartXfer+0x718>)
 800a62c:	bf08      	it	eq
 800a62e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a632:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a636:	b292      	uxth	r2, r2
 800a638:	53ba      	strh	r2, [r7, r6]
 800a63a:	e6e1      	b.n	800a400 <USB_EPStartXfer+0x264>
 800a63c:	2801      	cmp	r0, #1
 800a63e:	f47f aedf 	bne.w	800a400 <USB_EPStartXfer+0x264>
 800a642:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800a646:	7820      	ldrb	r0, [r4, #0]
 800a648:	b296      	uxth	r6, r2
 800a64a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800a64e:	0100      	lsls	r0, r0, #4
 800a650:	4432      	add	r2, r6
 800a652:	5283      	strh	r3, [r0, r2]
 800a654:	e6d4      	b.n	800a400 <USB_EPStartXfer+0x264>
    if (ep->doublebuffer == 0U)
 800a656:	2a00      	cmp	r2, #0
 800a658:	d13b      	bne.n	800a6d2 <USB_EPStartXfer+0x536>
      if (ep->xfer_len > ep->maxpacket)
 800a65a:	69a3      	ldr	r3, [r4, #24]
 800a65c:	6921      	ldr	r1, [r4, #16]
 800a65e:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 800a660:	bf84      	itt	hi
 800a662:	1a5a      	subhi	r2, r3, r1
 800a664:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a666:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800a66a:	7820      	ldrb	r0, [r4, #0]
 800a66c:	61a2      	str	r2, [r4, #24]
 800a66e:	b28a      	uxth	r2, r1
 800a670:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800a674:	0100      	lsls	r0, r0, #4
 800a676:	4411      	add	r1, r2
 800a678:	b96b      	cbnz	r3, 800a696 <USB_EPStartXfer+0x4fa>
 800a67a:	5a43      	ldrh	r3, [r0, r1]
 800a67c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a680:	041b      	lsls	r3, r3, #16
 800a682:	0c1b      	lsrs	r3, r3, #16
 800a684:	5243      	strh	r3, [r0, r1]
 800a686:	5a43      	ldrh	r3, [r0, r1]
 800a688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a68c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a690:	b29b      	uxth	r3, r3
 800a692:	5243      	strh	r3, [r0, r1]
 800a694:	e008      	b.n	800a6a8 <USB_EPStartXfer+0x50c>
 800a696:	2b3e      	cmp	r3, #62	; 0x3e
 800a698:	d812      	bhi.n	800a6c0 <USB_EPStartXfer+0x524>
 800a69a:	085a      	lsrs	r2, r3, #1
 800a69c:	07df      	lsls	r7, r3, #31
 800a69e:	bf48      	it	mi
 800a6a0:	3201      	addmi	r2, #1
 800a6a2:	0292      	lsls	r2, r2, #10
 800a6a4:	b292      	uxth	r2, r2
 800a6a6:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a6a8:	7822      	ldrb	r2, [r4, #0]
 800a6aa:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800a6ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6b6:	041b      	lsls	r3, r3, #16
 800a6b8:	0c1b      	lsrs	r3, r3, #16
 800a6ba:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a6be:	e596      	b.n	800a1ee <USB_EPStartXfer+0x52>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a6c0:	095a      	lsrs	r2, r3, #5
 800a6c2:	06de      	lsls	r6, r3, #27
 800a6c4:	4b7b      	ldr	r3, [pc, #492]	; (800a8b4 <USB_EPStartXfer+0x718>)
 800a6c6:	bf08      	it	eq
 800a6c8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a6cc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a6d0:	e7de      	b.n	800a690 <USB_EPStartXfer+0x4f4>
      if (ep->type == EP_TYPE_BULK)
 800a6d2:	78e3      	ldrb	r3, [r4, #3]
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d17e      	bne.n	800a7d6 <USB_EPStartXfer+0x63a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a6d8:	b9b9      	cbnz	r1, 800a70a <USB_EPStartXfer+0x56e>
 800a6da:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a6de:	7821      	ldrb	r1, [r4, #0]
 800a6e0:	b293      	uxth	r3, r2
 800a6e2:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800a6e6:	6920      	ldr	r0, [r4, #16]
 800a6e8:	0109      	lsls	r1, r1, #4
 800a6ea:	441a      	add	r2, r3
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d144      	bne.n	800a77a <USB_EPStartXfer+0x5de>
 800a6f0:	5a8b      	ldrh	r3, [r1, r2]
 800a6f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6f6:	041b      	lsls	r3, r3, #16
 800a6f8:	0c1b      	lsrs	r3, r3, #16
 800a6fa:	528b      	strh	r3, [r1, r2]
 800a6fc:	5a8b      	ldrh	r3, [r1, r2]
 800a6fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a706:	b29b      	uxth	r3, r3
 800a708:	528b      	strh	r3, [r1, r2]
 800a70a:	7862      	ldrb	r2, [r4, #1]
 800a70c:	7823      	ldrb	r3, [r4, #0]
 800a70e:	2a00      	cmp	r2, #0
 800a710:	d155      	bne.n	800a7be <USB_EPStartXfer+0x622>
 800a712:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800a716:	6920      	ldr	r0, [r4, #16]
 800a718:	b28a      	uxth	r2, r1
 800a71a:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800a71e:	4411      	add	r1, r2
 800a720:	011b      	lsls	r3, r3, #4
 800a722:	2800      	cmp	r0, #0
 800a724:	d13a      	bne.n	800a79c <USB_EPStartXfer+0x600>
 800a726:	5aca      	ldrh	r2, [r1, r3]
 800a728:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a72c:	0412      	lsls	r2, r2, #16
 800a72e:	0c12      	lsrs	r2, r2, #16
 800a730:	52ca      	strh	r2, [r1, r3]
 800a732:	5aca      	ldrh	r2, [r1, r3]
 800a734:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a738:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a73c:	b292      	uxth	r2, r2
 800a73e:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 800a740:	69e3      	ldr	r3, [r4, #28]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d0b0      	beq.n	800a6a8 <USB_EPStartXfer+0x50c>
 800a746:	f244 0340 	movw	r3, #16448	; 0x4040
 800a74a:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a74c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a750:	ea03 0001 	and.w	r0, r3, r1
 800a754:	438b      	bics	r3, r1
 800a756:	d001      	beq.n	800a75c <USB_EPStartXfer+0x5c0>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d1a5      	bne.n	800a6a8 <USB_EPStartXfer+0x50c>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a75c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800a760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a768:	041b      	lsls	r3, r3, #16
 800a76a:	0c1b      	lsrs	r3, r3, #16
 800a76c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a770:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a774:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800a778:	e796      	b.n	800a6a8 <USB_EPStartXfer+0x50c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a77a:	283e      	cmp	r0, #62	; 0x3e
 800a77c:	d805      	bhi.n	800a78a <USB_EPStartXfer+0x5ee>
 800a77e:	0843      	lsrs	r3, r0, #1
 800a780:	07c0      	lsls	r0, r0, #31
 800a782:	bf48      	it	mi
 800a784:	3301      	addmi	r3, #1
 800a786:	029b      	lsls	r3, r3, #10
 800a788:	e7bd      	b.n	800a706 <USB_EPStartXfer+0x56a>
 800a78a:	0946      	lsrs	r6, r0, #5
 800a78c:	4b49      	ldr	r3, [pc, #292]	; (800a8b4 <USB_EPStartXfer+0x718>)
 800a78e:	06c7      	lsls	r7, r0, #27
 800a790:	bf08      	it	eq
 800a792:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800a796:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 800a79a:	e7b4      	b.n	800a706 <USB_EPStartXfer+0x56a>
 800a79c:	283e      	cmp	r0, #62	; 0x3e
 800a79e:	d805      	bhi.n	800a7ac <USB_EPStartXfer+0x610>
 800a7a0:	0842      	lsrs	r2, r0, #1
 800a7a2:	07c0      	lsls	r0, r0, #31
 800a7a4:	bf48      	it	mi
 800a7a6:	3201      	addmi	r2, #1
 800a7a8:	0292      	lsls	r2, r2, #10
 800a7aa:	e7c7      	b.n	800a73c <USB_EPStartXfer+0x5a0>
 800a7ac:	0946      	lsrs	r6, r0, #5
 800a7ae:	4a41      	ldr	r2, [pc, #260]	; (800a8b4 <USB_EPStartXfer+0x718>)
 800a7b0:	06c7      	lsls	r7, r0, #27
 800a7b2:	bf08      	it	eq
 800a7b4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800a7b8:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800a7bc:	e7be      	b.n	800a73c <USB_EPStartXfer+0x5a0>
 800a7be:	2a01      	cmp	r2, #1
 800a7c0:	d1be      	bne.n	800a740 <USB_EPStartXfer+0x5a4>
 800a7c2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800a7c6:	011b      	lsls	r3, r3, #4
 800a7c8:	b291      	uxth	r1, r2
 800a7ca:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800a7ce:	440a      	add	r2, r1
 800a7d0:	8a21      	ldrh	r1, [r4, #16]
 800a7d2:	52d1      	strh	r1, [r2, r3]
 800a7d4:	e7b4      	b.n	800a740 <USB_EPStartXfer+0x5a4>
      else if (ep->type == EP_TYPE_ISOC)
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d16a      	bne.n	800a8b0 <USB_EPStartXfer+0x714>
        if (ep->xfer_len > ep->maxpacket)
 800a7da:	69a3      	ldr	r3, [r4, #24]
 800a7dc:	6922      	ldr	r2, [r4, #16]
 800a7de:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 800a7e0:	bf94      	ite	ls
 800a7e2:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 800a7e4:	1a98      	subhi	r0, r3, r2
 800a7e6:	61a0      	str	r0, [r4, #24]
 800a7e8:	bf88      	it	hi
 800a7ea:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a7ec:	b9a9      	cbnz	r1, 800a81a <USB_EPStartXfer+0x67e>
 800a7ee:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800a7f2:	7820      	ldrb	r0, [r4, #0]
 800a7f4:	b28a      	uxth	r2, r1
 800a7f6:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800a7fa:	0100      	lsls	r0, r0, #4
 800a7fc:	4411      	add	r1, r2
 800a7fe:	bb33      	cbnz	r3, 800a84e <USB_EPStartXfer+0x6b2>
 800a800:	5a42      	ldrh	r2, [r0, r1]
 800a802:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a806:	0412      	lsls	r2, r2, #16
 800a808:	0c12      	lsrs	r2, r2, #16
 800a80a:	5242      	strh	r2, [r0, r1]
 800a80c:	5a42      	ldrh	r2, [r0, r1]
 800a80e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a812:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a816:	b292      	uxth	r2, r2
 800a818:	5242      	strh	r2, [r0, r1]
 800a81a:	7861      	ldrb	r1, [r4, #1]
 800a81c:	7822      	ldrb	r2, [r4, #0]
 800a81e:	2900      	cmp	r1, #0
 800a820:	d139      	bne.n	800a896 <USB_EPStartXfer+0x6fa>
 800a822:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800a826:	0112      	lsls	r2, r2, #4
 800a828:	b281      	uxth	r1, r0
 800a82a:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800a82e:	4408      	add	r0, r1
 800a830:	b9f3      	cbnz	r3, 800a870 <USB_EPStartXfer+0x6d4>
 800a832:	5a83      	ldrh	r3, [r0, r2]
 800a834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a838:	041b      	lsls	r3, r3, #16
 800a83a:	0c1b      	lsrs	r3, r3, #16
 800a83c:	5283      	strh	r3, [r0, r2]
 800a83e:	5a83      	ldrh	r3, [r0, r2]
 800a840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a848:	b29b      	uxth	r3, r3
 800a84a:	5283      	strh	r3, [r0, r2]
 800a84c:	e72c      	b.n	800a6a8 <USB_EPStartXfer+0x50c>
 800a84e:	2b3e      	cmp	r3, #62	; 0x3e
 800a850:	d805      	bhi.n	800a85e <USB_EPStartXfer+0x6c2>
 800a852:	085a      	lsrs	r2, r3, #1
 800a854:	07de      	lsls	r6, r3, #31
 800a856:	bf48      	it	mi
 800a858:	3201      	addmi	r2, #1
 800a85a:	0292      	lsls	r2, r2, #10
 800a85c:	e7db      	b.n	800a816 <USB_EPStartXfer+0x67a>
 800a85e:	095e      	lsrs	r6, r3, #5
 800a860:	4a14      	ldr	r2, [pc, #80]	; (800a8b4 <USB_EPStartXfer+0x718>)
 800a862:	06df      	lsls	r7, r3, #27
 800a864:	bf08      	it	eq
 800a866:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800a86a:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800a86e:	e7d2      	b.n	800a816 <USB_EPStartXfer+0x67a>
 800a870:	2b3e      	cmp	r3, #62	; 0x3e
 800a872:	d807      	bhi.n	800a884 <USB_EPStartXfer+0x6e8>
 800a874:	0859      	lsrs	r1, r3, #1
 800a876:	07de      	lsls	r6, r3, #31
 800a878:	bf48      	it	mi
 800a87a:	3101      	addmi	r1, #1
 800a87c:	0289      	lsls	r1, r1, #10
 800a87e:	b289      	uxth	r1, r1
 800a880:	5281      	strh	r1, [r0, r2]
 800a882:	e711      	b.n	800a6a8 <USB_EPStartXfer+0x50c>
 800a884:	0959      	lsrs	r1, r3, #5
 800a886:	06db      	lsls	r3, r3, #27
 800a888:	4b0a      	ldr	r3, [pc, #40]	; (800a8b4 <USB_EPStartXfer+0x718>)
 800a88a:	bf08      	it	eq
 800a88c:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800a890:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800a894:	e7d8      	b.n	800a848 <USB_EPStartXfer+0x6ac>
 800a896:	2901      	cmp	r1, #1
 800a898:	f47f af06 	bne.w	800a6a8 <USB_EPStartXfer+0x50c>
 800a89c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800a8a0:	0112      	lsls	r2, r2, #4
 800a8a2:	b288      	uxth	r0, r1
 800a8a4:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800a8a8:	4401      	add	r1, r0
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	528b      	strh	r3, [r1, r2]
 800a8ae:	e6fb      	b.n	800a6a8 <USB_EPStartXfer+0x50c>
        return HAL_ERROR;
 800a8b0:	2001      	movs	r0, #1
 800a8b2:	e4a3      	b.n	800a1fc <USB_EPStartXfer+0x60>
 800a8b4:	ffff8000 	.word	0xffff8000

0800a8b8 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a8b8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 800a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a8be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a8c2:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 800a8c4:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a8c6:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 800a8c8:	462e      	mov	r6, r5
 800a8ca:	3402      	adds	r4, #2
 800a8cc:	b936      	cbnz	r6, 800a8dc <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a8ce:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800a8d0:	bf44      	itt	mi
 800a8d2:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a8d6:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800a8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 800a8dc:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 800a8e0:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 800a8e2:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a8e4:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a8e8:	0a00      	lsrs	r0, r0, #8
 800a8ea:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 800a8ee:	e7ec      	b.n	800a8ca <USB_ReadPMA+0x12>

0800a8f0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a8f0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800a8f4:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a8f6:	b16b      	cbz	r3, 800a914 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8f8:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a8fc:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800a900:	28ff      	cmp	r0, #255	; 0xff
 800a902:	d007      	beq.n	800a914 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	4621      	mov	r1, r4
 800a908:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800a90c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800a90e:	23ff      	movs	r3, #255	; 0xff
 800a910:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800a914:	2000      	movs	r0, #0
 800a916:	bd10      	pop	{r4, pc}

0800a918 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a918:	2343      	movs	r3, #67	; 0x43
 800a91a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800a91c:	4800      	ldr	r0, [pc, #0]	; (800a920 <USBD_CDC_GetFSCfgDesc+0x8>)
 800a91e:	4770      	bx	lr
 800a920:	20000050 	.word	0x20000050

0800a924 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a924:	2343      	movs	r3, #67	; 0x43
 800a926:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800a928:	4800      	ldr	r0, [pc, #0]	; (800a92c <USBD_CDC_GetHSCfgDesc+0x8>)
 800a92a:	4770      	bx	lr
 800a92c:	20000094 	.word	0x20000094

0800a930 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a930:	2343      	movs	r3, #67	; 0x43
 800a932:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800a934:	4800      	ldr	r0, [pc, #0]	; (800a938 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800a936:	4770      	bx	lr
 800a938:	200000e4 	.word	0x200000e4

0800a93c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a93c:	230a      	movs	r3, #10
 800a93e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800a940:	4800      	ldr	r0, [pc, #0]	; (800a944 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800a942:	4770      	bx	lr
 800a944:	200000d8 	.word	0x200000d8

0800a948 <USBD_CDC_DataOut>:
{
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a94c:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a950:	f000 ffa8 	bl	800b8a4 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 800a954:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a958:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800a95c:	b14b      	cbz	r3, 800a972 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a95e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800a962:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800a96c:	4798      	blx	r3
    return USBD_OK;
 800a96e:	2000      	movs	r0, #0
}
 800a970:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800a972:	2002      	movs	r0, #2
 800a974:	e7fc      	b.n	800a970 <USBD_CDC_DataOut+0x28>

0800a976 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a976:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800a97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData != NULL)
 800a97c:	b1d2      	cbz	r2, 800a9b4 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a97e:	2714      	movs	r7, #20
 800a980:	fb07 0701 	mla	r7, r7, r1, r0
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	b18b      	cbz	r3, 800a9ac <USBD_CDC_DataIn+0x36>
 800a988:	2628      	movs	r6, #40	; 0x28
 800a98a:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 800a98e:	fb06 4501 	mla	r5, r6, r1, r4
 800a992:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800a994:	fbb3 f4f5 	udiv	r4, r3, r5
 800a998:	fb05 3414 	mls	r4, r5, r4, r3
 800a99c:	b934      	cbnz	r4, 800a9ac <USBD_CDC_DataIn+0x36>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a99e:	4623      	mov	r3, r4
 800a9a0:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 800a9a2:	61fc      	str	r4, [r7, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a9a4:	f000 ff62 	bl	800b86c <USBD_LL_Transmit>
    return USBD_OK;
 800a9a8:	4620      	mov	r0, r4
}
 800a9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 800a9b2:	e7fa      	b.n	800a9aa <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 800a9b4:	2002      	movs	r0, #2
 800a9b6:	e7f8      	b.n	800a9aa <USBD_CDC_DataIn+0x34>

0800a9b8 <USBD_CDC_Setup>:
{
 800a9b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 800a9bc:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9c0:	780a      	ldrb	r2, [r1, #0]
{
 800a9c2:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9c4:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 800a9c8:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9ca:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800a9ce:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800a9d2:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9d6:	d028      	beq.n	800aa2a <USBD_CDC_Setup+0x72>
 800a9d8:	2c20      	cmp	r4, #32
 800a9da:	d142      	bne.n	800aa62 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 800a9dc:	88cc      	ldrh	r4, [r1, #6]
 800a9de:	784b      	ldrb	r3, [r1, #1]
 800a9e0:	b1e4      	cbz	r4, 800aa1c <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 800a9e2:	0612      	lsls	r2, r2, #24
 800a9e4:	d511      	bpl.n	800aa0a <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a9e6:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	88f2      	ldrh	r2, [r6, #6]
 800a9fc:	f000 fc4b 	bl	800b296 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800aa00:	4644      	mov	r4, r8
}
 800aa02:	4620      	mov	r0, r4
 800aa04:	b003      	add	sp, #12
 800aa06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 800aa0e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aa12:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aa16:	f000 fc53 	bl	800b2c0 <USBD_CtlPrepareRx>
 800aa1a:	e7f1      	b.n	800aa00 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa1c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800aa20:	4618      	mov	r0, r3
 800aa22:	6895      	ldr	r5, [r2, #8]
 800aa24:	4622      	mov	r2, r4
 800aa26:	47a8      	blx	r5
 800aa28:	e7eb      	b.n	800aa02 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800aa2a:	784b      	ldrb	r3, [r1, #1]
 800aa2c:	2b0a      	cmp	r3, #10
 800aa2e:	d00c      	beq.n	800aa4a <USBD_CDC_Setup+0x92>
 800aa30:	2b0b      	cmp	r3, #11
 800aa32:	d012      	beq.n	800aa5a <USBD_CDC_Setup+0xa2>
 800aa34:	b9ab      	cbnz	r3, 800aa62 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa36:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d111      	bne.n	800aa62 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800aa3e:	2202      	movs	r2, #2
 800aa40:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa44:	f000 fc27 	bl	800b296 <USBD_CtlSendData>
 800aa48:	e7db      	b.n	800aa02 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa4a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d107      	bne.n	800aa62 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa52:	2201      	movs	r2, #1
 800aa54:	f10d 0105 	add.w	r1, sp, #5
 800aa58:	e7f4      	b.n	800aa44 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d0cf      	beq.n	800aa02 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 800aa62:	4631      	mov	r1, r6
 800aa64:	4628      	mov	r0, r5
 800aa66:	f000 fbef 	bl	800b248 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa6a:	2402      	movs	r4, #2
          break;
 800aa6c:	e7c9      	b.n	800aa02 <USBD_CDC_Setup+0x4a>

0800aa6e <USBD_CDC_DeInit>:
{
 800aa6e:	b538      	push	{r3, r4, r5, lr}
 800aa70:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800aa72:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800aa74:	2181      	movs	r1, #129	; 0x81
 800aa76:	f000 feaf 	bl	800b7d8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800aa7e:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aa80:	f000 feaa 	bl	800b7d8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aa84:	2182      	movs	r1, #130	; 0x82
 800aa86:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800aa88:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aa8c:	f000 fea4 	bl	800b7d8 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800aa90:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aa94:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800aa96:	b14b      	cbz	r3, 800aaac <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aa98:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800aaa0:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800aaa4:	f000 ff06 	bl	800b8b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800aaa8:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800aaac:	2000      	movs	r0, #0
 800aaae:	bd38      	pop	{r3, r4, r5, pc}

0800aab0 <USBD_CDC_Init>:
{
 800aab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aab4:	7c03      	ldrb	r3, [r0, #16]
{
 800aab6:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aab8:	bbbb      	cbnz	r3, 800ab2a <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aaba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aabe:	2202      	movs	r2, #2
 800aac0:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aac2:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aac4:	f000 fe78 	bl	800b7b8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aac8:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aacc:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aace:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aad0:	4629      	mov	r1, r5
 800aad2:	2202      	movs	r2, #2
 800aad4:	4620      	mov	r0, r4
 800aad6:	f000 fe6f 	bl	800b7b8 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aada:	2308      	movs	r3, #8
 800aadc:	2203      	movs	r2, #3
 800aade:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aae0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aae4:	4620      	mov	r0, r4
 800aae6:	f000 fe67 	bl	800b7b8 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aaea:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aaee:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aaf0:	f000 fedc 	bl	800b8ac <USBD_static_malloc>
 800aaf4:	4605      	mov	r5, r0
 800aaf6:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800aafa:	b340      	cbz	r0, 800ab4e <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 800aafc:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ab00:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4798      	blx	r3
    hcdc->TxState = 0U;
 800ab08:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800ab0c:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab10:	7c26      	ldrb	r6, [r4, #16]
 800ab12:	b99e      	cbnz	r6, 800ab3c <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab18:	4639      	mov	r1, r7
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800ab20:	f000 feb2 	bl	800b888 <USBD_LL_PrepareReceive>
}
 800ab24:	4630      	mov	r0, r6
 800ab26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ab2a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ab2c:	2340      	movs	r3, #64	; 0x40
 800ab2e:	2202      	movs	r2, #2
 800ab30:	2181      	movs	r1, #129	; 0x81
 800ab32:	f000 fe41 	bl	800b7b8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ab36:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ab38:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ab3a:	e7c8      	b.n	800aace <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab3c:	2340      	movs	r3, #64	; 0x40
 800ab3e:	4639      	mov	r1, r7
 800ab40:	4620      	mov	r0, r4
 800ab42:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800ab46:	f000 fe9f 	bl	800b888 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800ab4a:	4646      	mov	r6, r8
 800ab4c:	e7ea      	b.n	800ab24 <USBD_CDC_Init+0x74>
    ret = 1U;
 800ab4e:	463e      	mov	r6, r7
 800ab50:	e7e8      	b.n	800ab24 <USBD_CDC_Init+0x74>

0800ab52 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800ab52:	b119      	cbz	r1, 800ab5c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800ab54:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 800ab58:	2000      	movs	r0, #0
 800ab5a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800ab5c:	2002      	movs	r0, #2
  }

  return ret;
}
 800ab5e:	4770      	bx	lr

0800ab60 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab60:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800ab64:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800ab66:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ab6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800ab6e:	4770      	bx	lr

0800ab70 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800ab70:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 800ab74:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800ab76:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800ab7a:	4770      	bx	lr

0800ab7c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab7c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800ab80:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 800ab82:	b182      	cbz	r2, 800aba6 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 800ab84:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800ab88:	2301      	movs	r3, #1
 800ab8a:	b974      	cbnz	r4, 800abaa <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ab8c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ab90:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ab94:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ab96:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ab98:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	f000 fe65 	bl	800b86c <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800aba2:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800aba4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800aba6:	2002      	movs	r0, #2
 800aba8:	e7fc      	b.n	800aba4 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 800abaa:	4618      	mov	r0, r3
 800abac:	e7fa      	b.n	800aba4 <USBD_CDC_TransmitPacket+0x28>

0800abae <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abae:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800abb2:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800abb4:	b182      	cbz	r2, 800abd8 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abb6:	7c04      	ldrb	r4, [r0, #16]
 800abb8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800abbc:	b934      	cbnz	r4, 800abcc <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800abbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abc2:	2101      	movs	r1, #1
 800abc4:	f000 fe60 	bl	800b888 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800abc8:	4620      	mov	r0, r4
 800abca:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800abcc:	2340      	movs	r3, #64	; 0x40
 800abce:	2101      	movs	r1, #1
 800abd0:	f000 fe5a 	bl	800b888 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800abd4:	2400      	movs	r4, #0
 800abd6:	e7f7      	b.n	800abc8 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800abd8:	2402      	movs	r4, #2
 800abda:	e7f5      	b.n	800abc8 <USBD_CDC_ReceivePacket+0x1a>

0800abdc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800abdc:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800abde:	b180      	cbz	r0, 800ac02 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800abe0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800abe4:	b113      	cbz	r3, 800abec <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800abec:	b109      	cbz	r1, 800abf2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800abee:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abf2:	2301      	movs	r3, #1
  pdev->id = id;
 800abf4:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abf6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800abfa:	f000 fd8d 	bl	800b718 <USBD_LL_Init>

  return USBD_OK;
 800abfe:	2000      	movs	r0, #0
}
 800ac00:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800ac02:	2002      	movs	r0, #2
 800ac04:	e7fc      	b.n	800ac00 <USBD_Init+0x24>

0800ac06 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800ac06:	b119      	cbz	r1, 800ac10 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ac08:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ac10:	2002      	movs	r0, #2
  }

  return status;
}
 800ac12:	4770      	bx	lr

0800ac14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ac14:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ac16:	f000 fdc1 	bl	800b79c <USBD_LL_Start>

  return USBD_OK;
}
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	bd08      	pop	{r3, pc}

0800ac1e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ac1e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800ac20:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ac24:	b90b      	cbnz	r3, 800ac2a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ac26:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800ac28:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4798      	blx	r3
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d0fa      	beq.n	800ac28 <USBD_SetClassConfig+0xa>
 800ac32:	e7f8      	b.n	800ac26 <USBD_SetClassConfig+0x8>

0800ac34 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ac34:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ac36:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	4798      	blx	r3

  return USBD_OK;
}
 800ac3e:	2000      	movs	r0, #0
 800ac40:	bd08      	pop	{r3, pc}

0800ac42 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac42:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac44:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 800ac48:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f000 fae8 	bl	800b220 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac50:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800ac52:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800ac56:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800ac5a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800ac5e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800ac62:	f001 031f 	and.w	r3, r1, #31
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d008      	beq.n	800ac7c <USBD_LL_SetupStage+0x3a>
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d00b      	beq.n	800ac86 <USBD_LL_SetupStage+0x44>
 800ac6e:	b97b      	cbnz	r3, 800ac90 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ac70:	4629      	mov	r1, r5
 800ac72:	4620      	mov	r0, r4
 800ac74:	f000 f8fc 	bl	800ae70 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 800ac78:	2000      	movs	r0, #0
 800ac7a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f000 fa20 	bl	800b0c4 <USBD_StdItfReq>
      break;
 800ac84:	e7f8      	b.n	800ac78 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 800ac86:	4629      	mov	r1, r5
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 fa3f 	bl	800b10c <USBD_StdEPReq>
      break;
 800ac8e:	e7f3      	b.n	800ac78 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac90:	4620      	mov	r0, r4
 800ac92:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800ac96:	f000 fdad 	bl	800b7f4 <USBD_LL_StallEP>
      break;
 800ac9a:	e7ed      	b.n	800ac78 <USBD_LL_SetupStage+0x36>

0800ac9c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aca2:	460d      	mov	r5, r1
 800aca4:	bb39      	cbnz	r1, 800acf6 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aca6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800acaa:	2b03      	cmp	r3, #3
 800acac:	d11c      	bne.n	800ace8 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 800acae:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 800acb2:	4291      	cmp	r1, r2
 800acb4:	d90b      	bls.n	800acce <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 800acb6:	1a89      	subs	r1, r1, r2

        USBD_CtlContinueRx(pdev, pdata,
 800acb8:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 800acba:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800acbe:	bf8c      	ite	hi
 800acc0:	b28a      	uxthhi	r2, r1
 800acc2:	b292      	uxthls	r2, r2
 800acc4:	4631      	mov	r1, r6
 800acc6:	f000 fb08 	bl	800b2da <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800acca:	4628      	mov	r0, r5
 800accc:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800acce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	b123      	cbz	r3, 800ace0 <USBD_LL_DataOutStage+0x44>
 800acd6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800acda:	2a03      	cmp	r2, #3
 800acdc:	d100      	bne.n	800ace0 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 800acde:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 fb02 	bl	800b2ea <USBD_CtlSendStatus>
 800ace6:	e7f0      	b.n	800acca <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ace8:	2b05      	cmp	r3, #5
 800acea:	d1ee      	bne.n	800acca <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 800acec:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800acf0:	f000 fd80 	bl	800b7f4 <USBD_LL_StallEP>
 800acf4:	e7e9      	b.n	800acca <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800acf6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800acfa:	699b      	ldr	r3, [r3, #24]
 800acfc:	b133      	cbz	r3, 800ad0c <USBD_LL_DataOutStage+0x70>
 800acfe:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ad02:	2a03      	cmp	r2, #3
 800ad04:	d102      	bne.n	800ad0c <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800ad06:	4798      	blx	r3
  return USBD_OK;
 800ad08:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 800ad0a:	e7de      	b.n	800acca <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 800ad0c:	2502      	movs	r5, #2
 800ad0e:	e7dc      	b.n	800acca <USBD_LL_DataOutStage+0x2e>

0800ad10 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad12:	4604      	mov	r4, r0
 800ad14:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ad16:	460d      	mov	r5, r1
 800ad18:	2900      	cmp	r1, #0
 800ad1a:	d147      	bne.n	800adac <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad1c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d13c      	bne.n	800ad9e <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad24:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800ad28:	429e      	cmp	r6, r3
 800ad2a:	d914      	bls.n	800ad56 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800ad2c:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ad2e:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 800ad30:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	f000 fabc 	bl	800b2b0 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad38:	462b      	mov	r3, r5
 800ad3a:	462a      	mov	r2, r5
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 fda2 	bl	800b888 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ad44:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d102      	bne.n	800ad52 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800ad52:	4628      	mov	r0, r5
 800ad54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ad56:	69c2      	ldr	r2, [r0, #28]
 800ad58:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad5c:	fb03 2616 	mls	r6, r3, r6, r2
 800ad60:	b95e      	cbnz	r6, 800ad7a <USBD_LL_DataInStage+0x6a>
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d809      	bhi.n	800ad7a <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 800ad66:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d205      	bcs.n	800ad7a <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad6e:	460a      	mov	r2, r1
 800ad70:	f000 fa9e 	bl	800b2b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad74:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800ad78:	e7de      	b.n	800ad38 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ad7a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	b12b      	cbz	r3, 800ad8e <USBD_LL_DataInStage+0x7e>
 800ad82:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800ad86:	2a03      	cmp	r2, #3
 800ad88:	d101      	bne.n	800ad8e <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800ad8e:	2180      	movs	r1, #128	; 0x80
 800ad90:	4620      	mov	r0, r4
 800ad92:	f000 fd2f 	bl	800b7f4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 fab2 	bl	800b300 <USBD_CtlReceiveStatus>
 800ad9c:	e7d2      	b.n	800ad44 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ad9e:	f033 0304 	bics.w	r3, r3, #4
 800ada2:	d1cf      	bne.n	800ad44 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800ada4:	2180      	movs	r1, #128	; 0x80
 800ada6:	f000 fd25 	bl	800b7f4 <USBD_LL_StallEP>
 800adaa:	e7cb      	b.n	800ad44 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 800adac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800adb0:	695b      	ldr	r3, [r3, #20]
 800adb2:	b133      	cbz	r3, 800adc2 <USBD_LL_DataInStage+0xb2>
 800adb4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800adb8:	2a03      	cmp	r2, #3
 800adba:	d102      	bne.n	800adc2 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 800adbc:	4798      	blx	r3
  return USBD_OK;
 800adbe:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 800adc0:	e7c7      	b.n	800ad52 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 800adc2:	2502      	movs	r5, #2
 800adc4:	e7c5      	b.n	800ad52 <USBD_LL_DataInStage+0x42>

0800adc6 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adc6:	2200      	movs	r2, #0
{
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800adcc:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800adce:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800add0:	4611      	mov	r1, r2
 800add2:	2340      	movs	r3, #64	; 0x40
 800add4:	f000 fcf0 	bl	800b7b8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800add8:	4633      	mov	r3, r6
 800adda:	2180      	movs	r1, #128	; 0x80
 800addc:	2200      	movs	r2, #0
 800adde:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ade0:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ade4:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ade8:	f000 fce6 	bl	800b7b8 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800adec:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800adee:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800adf2:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800adf4:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adf6:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800adfa:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800adfe:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae00:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800ae04:	b123      	cbz	r3, 800ae10 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae06:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	4798      	blx	r3
  }

  return USBD_OK;
}
 800ae10:	2000      	movs	r0, #0
 800ae12:	bd70      	pop	{r4, r5, r6, pc}

0800ae14 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800ae14:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800ae16:	2000      	movs	r0, #0
 800ae18:	4770      	bx	lr

0800ae1a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800ae1a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ae1e:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ae22:	2304      	movs	r3, #4
 800ae24:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800ae28:	2000      	movs	r0, #0
 800ae2a:	4770      	bx	lr

0800ae2c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae2c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ae30:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae32:	bf04      	itt	eq
 800ae34:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800ae38:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	4770      	bx	lr

0800ae40 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae40:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae42:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ae46:	2a03      	cmp	r2, #3
 800ae48:	d104      	bne.n	800ae54 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800ae4a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ae4e:	69db      	ldr	r3, [r3, #28]
 800ae50:	b103      	cbz	r3, 800ae54 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800ae52:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800ae54:	2000      	movs	r0, #0
 800ae56:	bd08      	pop	{r3, pc}

0800ae58 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800ae5c:	2180      	movs	r1, #128	; 0x80
 800ae5e:	f000 fcc9 	bl	800b7f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ae62:	4620      	mov	r0, r4
}
 800ae64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800ae68:	2100      	movs	r1, #0
 800ae6a:	f000 bcc3 	b.w	800b7f4 <USBD_LL_StallEP>
	...

0800ae70 <USBD_StdDevReq>:
{
 800ae70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae72:	780b      	ldrb	r3, [r1, #0]
 800ae74:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae7a:	2b20      	cmp	r3, #32
{
 800ae7c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae7e:	d012      	beq.n	800aea6 <USBD_StdDevReq+0x36>
 800ae80:	2b40      	cmp	r3, #64	; 0x40
 800ae82:	d010      	beq.n	800aea6 <USBD_StdDevReq+0x36>
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d151      	bne.n	800af2c <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 800ae88:	784b      	ldrb	r3, [r1, #1]
 800ae8a:	2b09      	cmp	r3, #9
 800ae8c:	d84e      	bhi.n	800af2c <USBD_StdDevReq+0xbc>
 800ae8e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ae92:	00ee      	.short	0x00ee
 800ae94:	004d010a 	.word	0x004d010a
 800ae98:	004d0103 	.word	0x004d0103
 800ae9c:	00130087 	.word	0x00130087
 800aea0:	00d6004d 	.word	0x00d6004d
 800aea4:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 800aea6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800aeaa:	4629      	mov	r1, r5
 800aeac:	4620      	mov	r0, r4
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	4798      	blx	r3
}
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	b003      	add	sp, #12
 800aeb6:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800aebe:	884b      	ldrh	r3, [r1, #2]
 800aec0:	0a1a      	lsrs	r2, r3, #8
 800aec2:	3a01      	subs	r2, #1
 800aec4:	2a06      	cmp	r2, #6
 800aec6:	d831      	bhi.n	800af2c <USBD_StdDevReq+0xbc>
 800aec8:	e8df f002 	tbb	[pc, r2]
 800aecc:	30231604 	.word	0x30231604
 800aed0:	4830      	.short	0x4830
 800aed2:	52          	.byte	0x52
 800aed3:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aed4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800aed8:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aeda:	7c20      	ldrb	r0, [r4, #16]
 800aedc:	f10d 0106 	add.w	r1, sp, #6
 800aee0:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800aee2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aee6:	2a00      	cmp	r2, #0
 800aee8:	d056      	beq.n	800af98 <USBD_StdDevReq+0x128>
 800aeea:	88eb      	ldrh	r3, [r5, #6]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d14a      	bne.n	800af86 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 800aef0:	4620      	mov	r0, r4
 800aef2:	f000 f9fa 	bl	800b2ea <USBD_CtlSendStatus>
 800aef6:	e7dc      	b.n	800aeb2 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aef8:	7c02      	ldrb	r2, [r0, #16]
 800aefa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800aefe:	b932      	cbnz	r2, 800af0e <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800af00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800af02:	f10d 0006 	add.w	r0, sp, #6
 800af06:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af08:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af0a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800af0c:	e7e9      	b.n	800aee2 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800af0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af10:	e7f7      	b.n	800af02 <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b05      	cmp	r3, #5
 800af16:	d809      	bhi.n	800af2c <USBD_StdDevReq+0xbc>
 800af18:	e8df f003 	tbb	[pc, r3]
 800af1c:	14100c03 	.word	0x14100c03
 800af20:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af22:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800af26:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1d6      	bne.n	800aeda <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 800af2c:	4620      	mov	r0, r4
 800af2e:	f7ff ff93 	bl	800ae58 <USBD_CtlError.constprop.0>
        break;
 800af32:	e7be      	b.n	800aeb2 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af34:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	e7f5      	b.n	800af28 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af3c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	e7f1      	b.n	800af28 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af44:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	e7ed      	b.n	800af28 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af4c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	e7e9      	b.n	800af28 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af54:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	e7e5      	b.n	800af28 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af5c:	7c03      	ldrb	r3, [r0, #16]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1e4      	bne.n	800af2c <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af62:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800af66:	f10d 0006 	add.w	r0, sp, #6
 800af6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6c:	4798      	blx	r3
  if (err != 0U)
 800af6e:	e7b8      	b.n	800aee2 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af70:	7c03      	ldrb	r3, [r0, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1da      	bne.n	800af2c <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800af76:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800af7a:	f10d 0006 	add.w	r0, sp, #6
 800af7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af80:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af82:	2307      	movs	r3, #7
 800af84:	e7c1      	b.n	800af0a <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 800af86:	429a      	cmp	r2, r3
 800af88:	bf28      	it	cs
 800af8a:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af8c:	4601      	mov	r1, r0
 800af8e:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800af90:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af94:	f000 f97f 	bl	800b296 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800af98:	88eb      	ldrh	r3, [r5, #6]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d189      	bne.n	800aeb2 <USBD_StdDevReq+0x42>
 800af9e:	e7a7      	b.n	800aef0 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800afa0:	888b      	ldrh	r3, [r1, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1c2      	bne.n	800af2c <USBD_StdDevReq+0xbc>
 800afa6:	88cb      	ldrh	r3, [r1, #6]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1bf      	bne.n	800af2c <USBD_StdDevReq+0xbc>
 800afac:	884d      	ldrh	r5, [r1, #2]
 800afae:	2d7f      	cmp	r5, #127	; 0x7f
 800afb0:	d8bc      	bhi.n	800af2c <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afb2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d0b8      	beq.n	800af2c <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800afba:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800afbc:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afc0:	f000 fc46 	bl	800b850 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800afc4:	4620      	mov	r0, r4
 800afc6:	f000 f990 	bl	800b2ea <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800afca:	b11d      	cbz	r5, 800afd4 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afcc:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800afce:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800afd2:	e76e      	b.n	800aeb2 <USBD_StdDevReq+0x42>
 800afd4:	2301      	movs	r3, #1
 800afd6:	e7fa      	b.n	800afce <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 800afd8:	7889      	ldrb	r1, [r1, #2]
 800afda:	4d39      	ldr	r5, [pc, #228]	; (800b0c0 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800afdc:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800afde:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800afe0:	d8a4      	bhi.n	800af2c <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800afe2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d008      	beq.n	800affc <USBD_StdDevReq+0x18c>
 800afea:	2b03      	cmp	r3, #3
 800afec:	d015      	beq.n	800b01a <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800afee:	f7ff ff33 	bl	800ae58 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800aff2:	4620      	mov	r0, r4
 800aff4:	7829      	ldrb	r1, [r5, #0]
 800aff6:	f7ff fe1d 	bl	800ac34 <USBD_ClrClassConfig>
        break;
 800affa:	e75a      	b.n	800aeb2 <USBD_StdDevReq+0x42>
        if (cfgidx)
 800affc:	2900      	cmp	r1, #0
 800affe:	f43f af77 	beq.w	800aef0 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800b002:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b004:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800b006:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b008:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b00c:	4620      	mov	r0, r4
 800b00e:	f7ff fe06 	bl	800ac1e <USBD_SetClassConfig>
 800b012:	2802      	cmp	r0, #2
 800b014:	f47f af6c 	bne.w	800aef0 <USBD_StdDevReq+0x80>
 800b018:	e788      	b.n	800af2c <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 800b01a:	b931      	cbnz	r1, 800b02a <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b01c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800b01e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b020:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 800b024:	f7ff fe06 	bl	800ac34 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b028:	e762      	b.n	800aef0 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 800b02a:	6841      	ldr	r1, [r0, #4]
 800b02c:	2901      	cmp	r1, #1
 800b02e:	f43f af5f 	beq.w	800aef0 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b032:	b2c9      	uxtb	r1, r1
 800b034:	f7ff fdfe 	bl	800ac34 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b038:	7829      	ldrb	r1, [r5, #0]
 800b03a:	6061      	str	r1, [r4, #4]
 800b03c:	e7e6      	b.n	800b00c <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 800b03e:	88ca      	ldrh	r2, [r1, #6]
 800b040:	2a01      	cmp	r2, #1
 800b042:	f47f af73 	bne.w	800af2c <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800b046:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d80a      	bhi.n	800b064 <USBD_StdDevReq+0x1f4>
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f43f af6c 	beq.w	800af2c <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 800b054:	4601      	mov	r1, r0
 800b056:	2300      	movs	r3, #0
 800b058:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b05c:	4620      	mov	r0, r4
 800b05e:	f000 f91a 	bl	800b296 <USBD_CtlSendData>
      break;
 800b062:	e726      	b.n	800aeb2 <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 800b064:	2b03      	cmp	r3, #3
 800b066:	f47f af61 	bne.w	800af2c <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b06a:	1d01      	adds	r1, r0, #4
 800b06c:	e7f6      	b.n	800b05c <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 800b06e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b072:	3b01      	subs	r3, #1
 800b074:	2b02      	cmp	r3, #2
 800b076:	f63f af59 	bhi.w	800af2c <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 800b07a:	88cb      	ldrh	r3, [r1, #6]
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	f47f af55 	bne.w	800af2c <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b082:	2301      	movs	r3, #1
 800b084:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800b086:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800b08a:	b10b      	cbz	r3, 800b090 <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b08c:	2303      	movs	r3, #3
 800b08e:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b090:	2202      	movs	r2, #2
 800b092:	f104 010c 	add.w	r1, r4, #12
 800b096:	e7e1      	b.n	800b05c <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b098:	884b      	ldrh	r3, [r1, #2]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	f47f af09 	bne.w	800aeb2 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800b0a0:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800b0a4:	e724      	b.n	800aef0 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 800b0a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	f63f af3d 	bhi.w	800af2c <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0b2:	884b      	ldrh	r3, [r1, #2]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	f47f aefc 	bne.w	800aeb2 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	e7f0      	b.n	800b0a0 <USBD_StdDevReq+0x230>
 800b0be:	bf00      	nop
 800b0c0:	2000200c 	.word	0x2000200c

0800b0c4 <USBD_StdItfReq>:
{
 800b0c4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0c6:	780b      	ldrb	r3, [r1, #0]
{
 800b0c8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0ca:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800b0ce:	2a40      	cmp	r2, #64	; 0x40
{
 800b0d0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0d2:	d001      	beq.n	800b0d8 <USBD_StdItfReq+0x14>
 800b0d4:	065b      	lsls	r3, r3, #25
 800b0d6:	d415      	bmi.n	800b104 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 800b0d8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d810      	bhi.n	800b104 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b0e2:	792b      	ldrb	r3, [r5, #4]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d80d      	bhi.n	800b104 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0e8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0f4:	88eb      	ldrh	r3, [r5, #6]
 800b0f6:	b91b      	cbnz	r3, 800b100 <USBD_StdItfReq+0x3c>
 800b0f8:	b910      	cbnz	r0, 800b100 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 f8f5 	bl	800b2ea <USBD_CtlSendStatus>
}
 800b100:	2000      	movs	r0, #0
 800b102:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800b104:	4620      	mov	r0, r4
 800b106:	f7ff fea7 	bl	800ae58 <USBD_CtlError.constprop.0>
          break;
 800b10a:	e7f9      	b.n	800b100 <USBD_StdItfReq+0x3c>

0800b10c <USBD_StdEPReq>:
{
 800b10c:	b538      	push	{r3, r4, r5, lr}
 800b10e:	780a      	ldrb	r2, [r1, #0]
 800b110:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b112:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800b116:	2a20      	cmp	r2, #32
{
 800b118:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b11a:	d027      	beq.n	800b16c <USBD_StdEPReq+0x60>
 800b11c:	2a40      	cmp	r2, #64	; 0x40
 800b11e:	d025      	beq.n	800b16c <USBD_StdEPReq+0x60>
 800b120:	bb92      	cbnz	r2, 800b188 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 800b122:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800b124:	888d      	ldrh	r5, [r1, #4]
 800b126:	2a01      	cmp	r2, #1
 800b128:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 800b12a:	d03d      	beq.n	800b1a8 <USBD_StdEPReq+0x9c>
 800b12c:	2a03      	cmp	r2, #3
 800b12e:	d025      	beq.n	800b17c <USBD_StdEPReq+0x70>
 800b130:	bb52      	cbnz	r2, 800b188 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 800b132:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b136:	2b02      	cmp	r3, #2
 800b138:	d04d      	beq.n	800b1d6 <USBD_StdEPReq+0xca>
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d124      	bne.n	800b188 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 800b13e:	2214      	movs	r2, #20
 800b140:	f001 030f 	and.w	r3, r1, #15
 800b144:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b148:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800b14c:	d054      	beq.n	800b1f8 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	b1d3      	cbz	r3, 800b188 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b152:	2314      	movs	r3, #20
 800b154:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800b158:	fb05 3303 	mla	r3, r5, r3, r3
 800b15c:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b15e:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800b162:	d155      	bne.n	800b210 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 800b164:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b166:	2202      	movs	r2, #2
 800b168:	4629      	mov	r1, r5
 800b16a:	e041      	b.n	800b1f0 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 800b16c:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 800b170:	4619      	mov	r1, r3
 800b172:	4620      	mov	r0, r4
 800b174:	6892      	ldr	r2, [r2, #8]
 800b176:	4790      	blx	r2
}
 800b178:	2000      	movs	r0, #0
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 800b17c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800b180:	2a02      	cmp	r2, #2
 800b182:	d01f      	beq.n	800b1c4 <USBD_StdEPReq+0xb8>
 800b184:	2a03      	cmp	r2, #3
 800b186:	d003      	beq.n	800b190 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 800b188:	4620      	mov	r0, r4
 800b18a:	f7ff fe65 	bl	800ae58 <USBD_CtlError.constprop.0>
              break;
 800b18e:	e7f3      	b.n	800b178 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b190:	885a      	ldrh	r2, [r3, #2]
 800b192:	b92a      	cbnz	r2, 800b1a0 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 800b194:	064a      	lsls	r2, r1, #25
 800b196:	d003      	beq.n	800b1a0 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b198:	88db      	ldrh	r3, [r3, #6]
 800b19a:	b90b      	cbnz	r3, 800b1a0 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 800b19c:	f000 fb2a 	bl	800b7f4 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f000 f8a2 	bl	800b2ea <USBD_CtlSendStatus>
              break;
 800b1a6:	e7e7      	b.n	800b178 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 800b1a8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800b1ac:	2a02      	cmp	r2, #2
 800b1ae:	d009      	beq.n	800b1c4 <USBD_StdEPReq+0xb8>
 800b1b0:	2a03      	cmp	r2, #3
 800b1b2:	d1e9      	bne.n	800b188 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1b4:	885b      	ldrh	r3, [r3, #2]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1de      	bne.n	800b178 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800b1ba:	064d      	lsls	r5, r1, #25
 800b1bc:	d0f0      	beq.n	800b1a0 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b1be:	f000 fb27 	bl	800b810 <USBD_LL_ClearStallEP>
 800b1c2:	e7ed      	b.n	800b1a0 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1c4:	064b      	lsls	r3, r1, #25
 800b1c6:	d0df      	beq.n	800b188 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 800b1c8:	f000 fb14 	bl	800b7f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b1cc:	2180      	movs	r1, #128	; 0x80
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f000 fb10 	bl	800b7f4 <USBD_LL_StallEP>
 800b1d4:	e7d0      	b.n	800b178 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1d6:	064a      	lsls	r2, r1, #25
 800b1d8:	d1d6      	bne.n	800b188 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1da:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 800b1dc:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b1e0:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1e4:	bf4c      	ite	mi
 800b1e6:	f100 0114 	addmi.w	r1, r0, #20
 800b1ea:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800b1ee:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 f850 	bl	800b296 <USBD_CtlSendData>
              break;
 800b1f6:	e7bf      	b.n	800b178 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1f8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d0c3      	beq.n	800b188 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b200:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b202:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b206:	fb03 0505 	mla	r5, r3, r5, r0
 800b20a:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800b20e:	e7a6      	b.n	800b15e <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b210:	4620      	mov	r0, r4
 800b212:	f000 fb0b 	bl	800b82c <USBD_LL_IsStallEP>
 800b216:	b108      	cbz	r0, 800b21c <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 800b218:	2301      	movs	r3, #1
 800b21a:	e7a3      	b.n	800b164 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 800b21c:	6028      	str	r0, [r5, #0]
 800b21e:	e7a2      	b.n	800b166 <USBD_StdEPReq+0x5a>

0800b220 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800b220:	780b      	ldrb	r3, [r1, #0]
 800b222:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b224:	784b      	ldrb	r3, [r1, #1]
 800b226:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b228:	78ca      	ldrb	r2, [r1, #3]
 800b22a:	788b      	ldrb	r3, [r1, #2]
 800b22c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b230:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b232:	794a      	ldrb	r2, [r1, #5]
 800b234:	790b      	ldrb	r3, [r1, #4]
 800b236:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b23a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b23c:	79ca      	ldrb	r2, [r1, #7]
 800b23e:	798b      	ldrb	r3, [r1, #6]
 800b240:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b244:	80c3      	strh	r3, [r0, #6]
}
 800b246:	4770      	bx	lr

0800b248 <USBD_CtlError>:
{
 800b248:	b510      	push	{r4, lr}
 800b24a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800b24c:	2180      	movs	r1, #128	; 0x80
 800b24e:	f000 fad1 	bl	800b7f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b252:	4620      	mov	r0, r4
}
 800b254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800b258:	2100      	movs	r1, #0
 800b25a:	f000 bacb 	b.w	800b7f4 <USBD_LL_StallEP>

0800b25e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b25e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800b260:	b188      	cbz	r0, 800b286 <USBD_GetString+0x28>
 800b262:	2500      	movs	r5, #0
 800b264:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800b266:	462b      	mov	r3, r5
 800b268:	3501      	adds	r5, #1
 800b26a:	5d44      	ldrb	r4, [r0, r5]
 800b26c:	2c00      	cmp	r4, #0
 800b26e:	d1fa      	bne.n	800b266 <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b270:	b2db      	uxtb	r3, r3
 800b272:	3301      	adds	r3, #1
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b278:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b27a:	2303      	movs	r3, #3
 800b27c:	704b      	strb	r3, [r1, #1]
 800b27e:	2302      	movs	r3, #2
    while (*desc != '\0')
 800b280:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b284:	b905      	cbnz	r5, 800b288 <USBD_GetString+0x2a>
}
 800b286:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800b288:	1c5a      	adds	r2, r3, #1
 800b28a:	54cd      	strb	r5, [r1, r3]
 800b28c:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800b28e:	3302      	adds	r3, #2
 800b290:	b2db      	uxtb	r3, r3
 800b292:	548c      	strb	r4, [r1, r2]
 800b294:	e7f4      	b.n	800b280 <USBD_GetString+0x22>

0800b296 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b296:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b298:	2202      	movs	r2, #2
{
 800b29a:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800b29c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b2a0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2a4:	460a      	mov	r2, r1
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	f000 fae0 	bl	800b86c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	bd10      	pop	{r4, pc}

0800b2b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b2b0:	b508      	push	{r3, lr}
 800b2b2:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2b4:	460a      	mov	r2, r1
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	f000 fad8 	bl	800b86c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b2bc:	2000      	movs	r0, #0
 800b2be:	bd08      	pop	{r3, pc}

0800b2c0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b2c0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b2c2:	2203      	movs	r2, #3
{
 800b2c4:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800b2c6:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b2ca:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2ce:	460a      	mov	r2, r1
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	f000 fad9 	bl	800b888 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	bd10      	pop	{r4, pc}

0800b2da <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b2da:	b508      	push	{r3, lr}
 800b2dc:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2de:	460a      	mov	r2, r1
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	f000 fad1 	bl	800b888 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	bd08      	pop	{r3, pc}

0800b2ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b2ea:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2ec:	2304      	movs	r3, #4
 800b2ee:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	f000 fab8 	bl	800b86c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	bd08      	pop	{r3, pc}

0800b300 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b300:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b302:	2305      	movs	r3, #5
 800b304:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b308:	2300      	movs	r3, #0
 800b30a:	461a      	mov	r2, r3
 800b30c:	4619      	mov	r1, r3
 800b30e:	f000 fabb 	bl	800b888 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b312:	2000      	movs	r0, #0
 800b314:	bd08      	pop	{r3, pc}
	...

0800b318 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b318:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b31a:	2200      	movs	r2, #0
 800b31c:	490e      	ldr	r1, [pc, #56]	; (800b358 <MX_USB_DEVICE_Init+0x40>)
 800b31e:	480f      	ldr	r0, [pc, #60]	; (800b35c <MX_USB_DEVICE_Init+0x44>)
 800b320:	f7ff fc5c 	bl	800abdc <USBD_Init>
 800b324:	b108      	cbz	r0, 800b32a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800b326:	f7fa fda5 	bl	8005e74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b32a:	490d      	ldr	r1, [pc, #52]	; (800b360 <MX_USB_DEVICE_Init+0x48>)
 800b32c:	480b      	ldr	r0, [pc, #44]	; (800b35c <MX_USB_DEVICE_Init+0x44>)
 800b32e:	f7ff fc6a 	bl	800ac06 <USBD_RegisterClass>
 800b332:	b108      	cbz	r0, 800b338 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800b334:	f7fa fd9e 	bl	8005e74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b338:	490a      	ldr	r1, [pc, #40]	; (800b364 <MX_USB_DEVICE_Init+0x4c>)
 800b33a:	4808      	ldr	r0, [pc, #32]	; (800b35c <MX_USB_DEVICE_Init+0x44>)
 800b33c:	f7ff fc09 	bl	800ab52 <USBD_CDC_RegisterInterface>
 800b340:	b108      	cbz	r0, 800b346 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800b342:	f7fa fd97 	bl	8005e74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b346:	4805      	ldr	r0, [pc, #20]	; (800b35c <MX_USB_DEVICE_Init+0x44>)
 800b348:	f7ff fc64 	bl	800ac14 <USBD_Start>
 800b34c:	b118      	cbz	r0, 800b356 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b34e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800b352:	f7fa bd8f 	b.w	8005e74 <Error_Handler>
}
 800b356:	bd08      	pop	{r3, pc}
 800b358:	20000144 	.word	0x20000144
 800b35c:	20002670 	.word	0x20002670
 800b360:	20000018 	.word	0x20000018
 800b364:	20000130 	.word	0x20000130

0800b368 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800b368:	2000      	movs	r0, #0
 800b36a:	4770      	bx	lr

0800b36c <CDC_Init_FS>:
{
 800b36c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b36e:	4c06      	ldr	r4, [pc, #24]	; (800b388 <CDC_Init_FS+0x1c>)
 800b370:	2200      	movs	r2, #0
 800b372:	4620      	mov	r0, r4
 800b374:	4905      	ldr	r1, [pc, #20]	; (800b38c <CDC_Init_FS+0x20>)
 800b376:	f7ff fbf3 	bl	800ab60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b37a:	4620      	mov	r0, r4
 800b37c:	4904      	ldr	r1, [pc, #16]	; (800b390 <CDC_Init_FS+0x24>)
 800b37e:	f7ff fbf7 	bl	800ab70 <USBD_CDC_SetRxBuffer>
}
 800b382:	2000      	movs	r0, #0
 800b384:	bd10      	pop	{r4, pc}
 800b386:	bf00      	nop
 800b388:	20002670 	.word	0x20002670
 800b38c:	20002b34 	.word	0x20002b34
 800b390:	20002934 	.word	0x20002934

0800b394 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b394:	2820      	cmp	r0, #32
 800b396:	d003      	beq.n	800b3a0 <CDC_Control_FS+0xc>
 800b398:	2821      	cmp	r0, #33	; 0x21
 800b39a:	d017      	beq.n	800b3cc <CDC_Control_FS+0x38>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800b39c:	2000      	movs	r0, #0
 800b39e:	4770      	bx	lr
      LineCoding.bitrate    = (uint32_t)(pbuf[0]);
 800b3a0:	780b      	ldrb	r3, [r1, #0]
 800b3a2:	4a13      	ldr	r2, [pc, #76]	; (800b3f0 <CDC_Control_FS+0x5c>)
 800b3a4:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[1]<<8);
 800b3a6:	7848      	ldrb	r0, [r1, #1]
 800b3a8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800b3ac:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[2]<<16);
 800b3ae:	7888      	ldrb	r0, [r1, #2]
 800b3b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b3b4:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[3]<<24);
 800b3b6:	78c8      	ldrb	r0, [r1, #3]
 800b3b8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800b3bc:	6013      	str	r3, [r2, #0]
      LineCoding.format     = pbuf[4];
 800b3be:	790b      	ldrb	r3, [r1, #4]
 800b3c0:	7113      	strb	r3, [r2, #4]
      LineCoding.paritytype = pbuf[5];
 800b3c2:	794b      	ldrb	r3, [r1, #5]
 800b3c4:	7153      	strb	r3, [r2, #5]
      LineCoding.datatype   = pbuf[6];
 800b3c6:	798b      	ldrb	r3, [r1, #6]
 800b3c8:	7193      	strb	r3, [r2, #6]
    break;
 800b3ca:	e7e7      	b.n	800b39c <CDC_Control_FS+0x8>
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800b3cc:	4b08      	ldr	r3, [pc, #32]	; (800b3f0 <CDC_Control_FS+0x5c>)
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	700a      	strb	r2, [r1, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	0a12      	lsrs	r2, r2, #8
 800b3d6:	704a      	strb	r2, [r1, #1]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800b3d8:	885a      	ldrh	r2, [r3, #2]
 800b3da:	708a      	strb	r2, [r1, #2]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800b3dc:	78da      	ldrb	r2, [r3, #3]
 800b3de:	70ca      	strb	r2, [r1, #3]
      pbuf[4] = LineCoding.format;
 800b3e0:	791a      	ldrb	r2, [r3, #4]
 800b3e2:	710a      	strb	r2, [r1, #4]
      pbuf[5] = LineCoding.paritytype;
 800b3e4:	795a      	ldrb	r2, [r3, #5]
 800b3e6:	714a      	strb	r2, [r1, #5]
      pbuf[6] = LineCoding.datatype;
 800b3e8:	799b      	ldrb	r3, [r3, #6]
 800b3ea:	718b      	strb	r3, [r1, #6]
    break;
 800b3ec:	e7d6      	b.n	800b39c <CDC_Control_FS+0x8>
 800b3ee:	bf00      	nop
 800b3f0:	20000128 	.word	0x20000128

0800b3f4 <cdcAvailable>:
  ret = (rx_in - rx_out) % rx_len;
 800b3f4:	4a05      	ldr	r2, [pc, #20]	; (800b40c <cdcAvailable+0x18>)
 800b3f6:	4b06      	ldr	r3, [pc, #24]	; (800b410 <cdcAvailable+0x1c>)
 800b3f8:	6810      	ldr	r0, [r2, #0]
 800b3fa:	4a06      	ldr	r2, [pc, #24]	; (800b414 <cdcAvailable+0x20>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	6812      	ldr	r2, [r2, #0]
 800b400:	1a1b      	subs	r3, r3, r0
 800b402:	fbb3 f0f2 	udiv	r0, r3, r2
}
 800b406:	fb02 3010 	mls	r0, r2, r0, r3
 800b40a:	4770      	bx	lr
 800b40c:	20002014 	.word	0x20002014
 800b410:	20002010 	.word	0x20002010
 800b414:	20000140 	.word	0x20000140

0800b418 <cdcRead>:
  ret = rx_buf[rx_out];
 800b418:	4909      	ldr	r1, [pc, #36]	; (800b440 <cdcRead+0x28>)
 800b41a:	4a0a      	ldr	r2, [pc, #40]	; (800b444 <cdcRead+0x2c>)
 800b41c:	680b      	ldr	r3, [r1, #0]
{
 800b41e:	b510      	push	{r4, lr}
  ret = rx_buf[rx_out];
 800b420:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
  if (rx_out != rx_in)
 800b424:	4a08      	ldr	r2, [pc, #32]	; (800b448 <cdcRead+0x30>)
 800b426:	6812      	ldr	r2, [r2, #0]
 800b428:	4293      	cmp	r3, r2
 800b42a:	d007      	beq.n	800b43c <cdcRead+0x24>
    rx_out = (rx_out + 1) % rx_len;
 800b42c:	4a07      	ldr	r2, [pc, #28]	; (800b44c <cdcRead+0x34>)
 800b42e:	3301      	adds	r3, #1
 800b430:	6814      	ldr	r4, [r2, #0]
 800b432:	fbb3 f2f4 	udiv	r2, r3, r4
 800b436:	fb04 3312 	mls	r3, r4, r2, r3
 800b43a:	600b      	str	r3, [r1, #0]
}
 800b43c:	bd10      	pop	{r4, pc}
 800b43e:	bf00      	nop
 800b440:	20002014 	.word	0x20002014
 800b444:	20002d34 	.word	0x20002d34
 800b448:	20002010 	.word	0x20002010
 800b44c:	20000140 	.word	0x20000140

0800b450 <cdcDataIn>:
  rx_buf[rx_in] = rx_data;
 800b450:	4908      	ldr	r1, [pc, #32]	; (800b474 <cdcDataIn+0x24>)
 800b452:	4a09      	ldr	r2, [pc, #36]	; (800b478 <cdcDataIn+0x28>)
 800b454:	680b      	ldr	r3, [r1, #0]
 800b456:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  next_rx_in = (rx_in + 1) % rx_len;
 800b45a:	4a08      	ldr	r2, [pc, #32]	; (800b47c <cdcDataIn+0x2c>)
 800b45c:	3301      	adds	r3, #1
 800b45e:	6810      	ldr	r0, [r2, #0]
 800b460:	fbb3 f2f0 	udiv	r2, r3, r0
 800b464:	fb00 3312 	mls	r3, r0, r2, r3
  if(next_rx_in != rx_out)
 800b468:	4a05      	ldr	r2, [pc, #20]	; (800b480 <cdcDataIn+0x30>)
 800b46a:	6812      	ldr	r2, [r2, #0]
 800b46c:	429a      	cmp	r2, r3
    rx_in = next_rx_in;
 800b46e:	bf18      	it	ne
 800b470:	600b      	strne	r3, [r1, #0]
}
 800b472:	4770      	bx	lr
 800b474:	20002010 	.word	0x20002010
 800b478:	20002d34 	.word	0x20002d34
 800b47c:	20000140 	.word	0x20000140
 800b480:	20002014 	.word	0x20002014

0800b484 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b484:	b570      	push	{r4, r5, r6, lr}
 800b486:	4604      	mov	r4, r0
 800b488:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */

  for(int i = 0; i < *Len; i++)
 800b48a:	2500      	movs	r5, #0
 800b48c:	6833      	ldr	r3, [r6, #0]
 800b48e:	42ab      	cmp	r3, r5
 800b490:	d810      	bhi.n	800b4b4 <CDC_Receive_FS+0x30>
  }

  uint32_t buf_len;

  // 수신 버퍼에서 비어있는 데이터 양
  buf_len = (rx_len - cdcAvailable()) - 1 ;
 800b492:	4b0d      	ldr	r3, [pc, #52]	; (800b4c8 <CDC_Receive_FS+0x44>)
 800b494:	6819      	ldr	r1, [r3, #0]
 800b496:	f7ff ffad 	bl	800b3f4 <cdcAvailable>
 800b49a:	3901      	subs	r1, #1
 800b49c:	1a09      	subs	r1, r1, r0

  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 800b49e:	293f      	cmp	r1, #63	; 0x3f
 800b4a0:	d90d      	bls.n	800b4be <CDC_Receive_FS+0x3a>
  {
    // 다음 데이터도 보내줘.
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	4809      	ldr	r0, [pc, #36]	; (800b4cc <CDC_Receive_FS+0x48>)
 800b4a6:	f7ff fb63 	bl	800ab70 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b4aa:	4808      	ldr	r0, [pc, #32]	; (800b4cc <CDC_Receive_FS+0x48>)
 800b4ac:	f7ff fb7f 	bl	800abae <USBD_CDC_ReceivePacket>
    rx_full = true;
  }

  return (USBD_OK);
  /* USER CODE END 6 */
}
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	bd70      	pop	{r4, r5, r6, pc}
     cdcDataIn(Buf[i]);
 800b4b4:	5d60      	ldrb	r0, [r4, r5]
 800b4b6:	f7ff ffcb 	bl	800b450 <cdcDataIn>
  for(int i = 0; i < *Len; i++)
 800b4ba:	3501      	adds	r5, #1
 800b4bc:	e7e6      	b.n	800b48c <CDC_Receive_FS+0x8>
    rx_full = true;
 800b4be:	2201      	movs	r2, #1
 800b4c0:	4b03      	ldr	r3, [pc, #12]	; (800b4d0 <CDC_Receive_FS+0x4c>)
 800b4c2:	701a      	strb	r2, [r3, #0]
 800b4c4:	e7f4      	b.n	800b4b0 <CDC_Receive_FS+0x2c>
 800b4c6:	bf00      	nop
 800b4c8:	20000140 	.word	0x20000140
 800b4cc:	20002670 	.word	0x20002670
 800b4d0:	2000200d 	.word	0x2000200d

0800b4d4 <USB_CDC_SOF>:
{
 800b4d4:	b538      	push	{r3, r4, r5, lr}
  if (rx_full == true)
 800b4d6:	4d09      	ldr	r5, [pc, #36]	; (800b4fc <USB_CDC_SOF+0x28>)
{
 800b4d8:	4604      	mov	r4, r0
  if (rx_full == true)
 800b4da:	782b      	ldrb	r3, [r5, #0]
 800b4dc:	b163      	cbz	r3, 800b4f8 <USB_CDC_SOF+0x24>
      buf_len = (rx_len - cdcAvailable()) - 1 ;
 800b4de:	4b08      	ldr	r3, [pc, #32]	; (800b500 <USB_CDC_SOF+0x2c>)
 800b4e0:	6819      	ldr	r1, [r3, #0]
 800b4e2:	f7ff ff87 	bl	800b3f4 <cdcAvailable>
 800b4e6:	3901      	subs	r1, #1
 800b4e8:	1a09      	subs	r1, r1, r0
      if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 800b4ea:	293f      	cmp	r1, #63	; 0x3f
 800b4ec:	d904      	bls.n	800b4f8 <USB_CDC_SOF+0x24>
        USBD_CDC_ReceivePacket(pdev);
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f7ff fb5d 	bl	800abae <USBD_CDC_ReceivePacket>
        rx_full = false;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	702b      	strb	r3, [r5, #0]
}
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	bd38      	pop	{r3, r4, r5, pc}
 800b4fc:	2000200d 	.word	0x2000200d
 800b500:	20000140 	.word	0x20000140

0800b504 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b504:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b506:	4c09      	ldr	r4, [pc, #36]	; (800b52c <CDC_Transmit_FS+0x28>)
{
 800b508:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b50a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800b50e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b512:	b943      	cbnz	r3, 800b526 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b514:	4601      	mov	r1, r0
 800b516:	4620      	mov	r0, r4
 800b518:	f7ff fb22 	bl	800ab60 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b51c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800b51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b522:	f7ff bb2b 	b.w	800ab7c <USBD_CDC_TransmitPacket>
}
 800b526:	2001      	movs	r0, #1
 800b528:	bd10      	pop	{r4, pc}
 800b52a:	bf00      	nop
 800b52c:	20002670 	.word	0x20002670

0800b530 <cdcWrite>:
{
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	460c      	mov	r4, r1
 800b534:	4606      	mov	r6, r0
  pre_time = millis();
 800b536:	f7fa fc09 	bl	8005d4c <millis>
 800b53a:	4605      	mov	r5, r0
    ret = CDC_Transmit_FS(p_data, length);
 800b53c:	b2a7      	uxth	r7, r4
 800b53e:	4639      	mov	r1, r7
 800b540:	4630      	mov	r0, r6
 800b542:	f7ff ffdf 	bl	800b504 <CDC_Transmit_FS>
    if (ret == USBD_OK)
 800b546:	b110      	cbz	r0, 800b54e <cdcWrite+0x1e>
    else if (ret == USBD_FAIL)
 800b548:	2802      	cmp	r0, #2
 800b54a:	d102      	bne.n	800b552 <cdcWrite+0x22>
      return 0;
 800b54c:	2400      	movs	r4, #0
}
 800b54e:	4620      	mov	r0, r4
 800b550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (millis() - pre_time >= 100)
 800b552:	f7fa fbfb 	bl	8005d4c <millis>
 800b556:	1b43      	subs	r3, r0, r5
 800b558:	2b63      	cmp	r3, #99	; 0x63
 800b55a:	d9f0      	bls.n	800b53e <cdcWrite+0xe>
 800b55c:	e7f6      	b.n	800b54c <cdcWrite+0x1c>
	...

0800b560 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b560:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800b562:	4801      	ldr	r0, [pc, #4]	; (800b568 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800b564:	800b      	strh	r3, [r1, #0]
}
 800b566:	4770      	bx	lr
 800b568:	20000160 	.word	0x20000160

0800b56c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b56c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800b56e:	4801      	ldr	r0, [pc, #4]	; (800b574 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800b570:	800b      	strh	r3, [r1, #0]
}
 800b572:	4770      	bx	lr
 800b574:	20000174 	.word	0x20000174

0800b578 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b578:	2300      	movs	r3, #0
 800b57a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800b57c:	461e      	mov	r6, r3
 800b57e:	1c4d      	adds	r5, r1, #1
    if (((value >> 28)) < 0xA)
 800b580:	0f04      	lsrs	r4, r0, #28
 800b582:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800b586:	bf34      	ite	cc
 800b588:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b58a:	3437      	addcs	r4, #55	; 0x37
 800b58c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800b590:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
 800b594:	3301      	adds	r3, #1
  for (idx = 0; idx < len; idx++)
 800b596:	b2dc      	uxtb	r4, r3
 800b598:	42a2      	cmp	r2, r4
    value = value << 4;
 800b59a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800b59e:	d8ef      	bhi.n	800b580 <IntToUnicode+0x8>
  }
}
 800b5a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5a4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800b5a4:	231a      	movs	r3, #26
{
 800b5a6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800b5a8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b5aa:	4b09      	ldr	r3, [pc, #36]	; (800b5d0 <USBD_FS_SerialStrDescriptor+0x2c>)
 800b5ac:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b5ae:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800b5b0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800b5b2:	18c0      	adds	r0, r0, r3
 800b5b4:	d00a      	beq.n	800b5cc <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b5b6:	4b07      	ldr	r3, [pc, #28]	; (800b5d4 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b5b8:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b5ba:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b5bc:	4906      	ldr	r1, [pc, #24]	; (800b5d8 <USBD_FS_SerialStrDescriptor+0x34>)
 800b5be:	f7ff ffdb 	bl	800b578 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b5c2:	2204      	movs	r2, #4
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	4905      	ldr	r1, [pc, #20]	; (800b5dc <USBD_FS_SerialStrDescriptor+0x38>)
 800b5c8:	f7ff ffd6 	bl	800b578 <IntToUnicode>
}
 800b5cc:	4804      	ldr	r0, [pc, #16]	; (800b5e0 <USBD_FS_SerialStrDescriptor+0x3c>)
 800b5ce:	bd10      	pop	{r4, pc}
 800b5d0:	1ffff7e8 	.word	0x1ffff7e8
 800b5d4:	1ffff7ec 	.word	0x1ffff7ec
 800b5d8:	2000017a 	.word	0x2000017a
 800b5dc:	2000018a 	.word	0x2000018a
 800b5e0:	20000178 	.word	0x20000178

0800b5e4 <USBD_FS_ManufacturerStrDescriptor>:
{
 800b5e4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b5e6:	4c04      	ldr	r4, [pc, #16]	; (800b5f8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800b5e8:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b5ea:	4804      	ldr	r0, [pc, #16]	; (800b5fc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	f7ff fe36 	bl	800b25e <USBD_GetString>
}
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	bd10      	pop	{r4, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20003534 	.word	0x20003534
 800b5fc:	0800eeca 	.word	0x0800eeca

0800b600 <USBD_FS_ProductStrDescriptor>:
{
 800b600:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b602:	4c04      	ldr	r4, [pc, #16]	; (800b614 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800b604:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b606:	4804      	ldr	r0, [pc, #16]	; (800b618 <USBD_FS_ProductStrDescriptor+0x18>)
 800b608:	4621      	mov	r1, r4
 800b60a:	f7ff fe28 	bl	800b25e <USBD_GetString>
}
 800b60e:	4620      	mov	r0, r4
 800b610:	bd10      	pop	{r4, pc}
 800b612:	bf00      	nop
 800b614:	20003534 	.word	0x20003534
 800b618:	0800eedd 	.word	0x0800eedd

0800b61c <USBD_FS_ConfigStrDescriptor>:
{
 800b61c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b61e:	4c04      	ldr	r4, [pc, #16]	; (800b630 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800b620:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b622:	4804      	ldr	r0, [pc, #16]	; (800b634 <USBD_FS_ConfigStrDescriptor+0x18>)
 800b624:	4621      	mov	r1, r4
 800b626:	f7ff fe1a 	bl	800b25e <USBD_GetString>
}
 800b62a:	4620      	mov	r0, r4
 800b62c:	bd10      	pop	{r4, pc}
 800b62e:	bf00      	nop
 800b630:	20003534 	.word	0x20003534
 800b634:	0800eef3 	.word	0x0800eef3

0800b638 <USBD_FS_InterfaceStrDescriptor>:
{
 800b638:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b63a:	4c04      	ldr	r4, [pc, #16]	; (800b64c <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800b63c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b63e:	4804      	ldr	r0, [pc, #16]	; (800b650 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800b640:	4621      	mov	r1, r4
 800b642:	f7ff fe0c 	bl	800b25e <USBD_GetString>
}
 800b646:	4620      	mov	r0, r4
 800b648:	bd10      	pop	{r4, pc}
 800b64a:	bf00      	nop
 800b64c:	20003534 	.word	0x20003534
 800b650:	0800eefe 	.word	0x0800eefe

0800b654 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b654:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800b656:	4b0e      	ldr	r3, [pc, #56]	; (800b690 <HAL_PCD_MspInit+0x3c>)
 800b658:	6802      	ldr	r2, [r0, #0]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d115      	bne.n	800b68a <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b65e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800b662:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b664:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800b666:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b66a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b66c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800b66e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b670:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800b672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b676:	9301      	str	r3, [sp, #4]
 800b678:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b67a:	f7fc f97d 	bl	8007978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b67e:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b680:	b003      	add	sp, #12
 800b682:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b686:	f7fc b9a9 	b.w	80079dc <HAL_NVIC_EnableIRQ>
}
 800b68a:	b003      	add	sp, #12
 800b68c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b690:	40005c00 	.word	0x40005c00

0800b694 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b694:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800b698:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800b69c:	f7ff bad1 	b.w	800ac42 <USBD_LL_SetupStage>

0800b6a0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b6a0:	2328      	movs	r3, #40	; 0x28
 800b6a2:	fb03 0301 	mla	r3, r3, r1, r0
 800b6a6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800b6aa:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b6ae:	f7ff baf5 	b.w	800ac9c <USBD_LL_DataOutStage>

0800b6b2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6b2:	2328      	movs	r3, #40	; 0x28
 800b6b4:	fb03 0301 	mla	r3, r3, r1, r0
 800b6b8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800b6bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6be:	f7ff bb27 	b.w	800ad10 <USBD_LL_DataInStage>

0800b6c2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6c2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800b6c6:	f7ff bbbb 	b.w	800ae40 <USBD_LL_SOF>

0800b6ca <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b6ca:	6883      	ldr	r3, [r0, #8]
{
 800b6cc:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b6ce:	2b02      	cmp	r3, #2
{
 800b6d0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b6d2:	d001      	beq.n	800b6d8 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800b6d4:	f7fa fbce 	bl	8005e74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b6d8:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800b6dc:	2101      	movs	r1, #1
 800b6de:	f7ff fb99 	bl	800ae14 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b6e2:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800b6e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b6ea:	f7ff bb6c 	b.w	800adc6 <USBD_LL_Reset>
	...

0800b6f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f0:	b510      	push	{r4, lr}
 800b6f2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b6f4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800b6f8:	f7ff fb8f 	bl	800ae1a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b6fc:	69a3      	ldr	r3, [r4, #24]
 800b6fe:	b123      	cbz	r3, 800b70a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b700:	4a02      	ldr	r2, [pc, #8]	; (800b70c <HAL_PCD_SuspendCallback+0x1c>)
 800b702:	6913      	ldr	r3, [r2, #16]
 800b704:	f043 0306 	orr.w	r3, r3, #6
 800b708:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b70a:	bd10      	pop	{r4, pc}
 800b70c:	e000ed00 	.word	0xe000ed00

0800b710 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b710:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800b714:	f7ff bb8a 	b.w	800ae2c <USBD_LL_Resume>

0800b718 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b718:	2308      	movs	r3, #8
{
 800b71a:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b71c:	4a1d      	ldr	r2, [pc, #116]	; (800b794 <USBD_LL_Init+0x7c>)
{
 800b71e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800b720:	481d      	ldr	r0, [pc, #116]	; (800b798 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b722:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b726:	2302      	movs	r3, #2
 800b728:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b72a:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800b72c:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b730:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b734:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b738:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b73a:	f7fc fc67 	bl	800800c <HAL_PCD_Init>
 800b73e:	b108      	cbz	r0, 800b744 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 800b740:	f7fa fb98 	bl	8005e74 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b744:	2200      	movs	r2, #0
 800b746:	2318      	movs	r3, #24
 800b748:	4611      	mov	r1, r2
 800b74a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800b74e:	f7fd fad1 	bl	8008cf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b752:	2358      	movs	r3, #88	; 0x58
 800b754:	2200      	movs	r2, #0
 800b756:	2180      	movs	r1, #128	; 0x80
 800b758:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800b75c:	f7fd faca 	bl	8008cf4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b760:	23c0      	movs	r3, #192	; 0xc0
 800b762:	2200      	movs	r2, #0
 800b764:	2181      	movs	r1, #129	; 0x81
 800b766:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800b76a:	f7fd fac3 	bl	8008cf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b76e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b772:	2200      	movs	r2, #0
 800b774:	2101      	movs	r1, #1
 800b776:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800b77a:	f7fd fabb 	bl	8008cf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b77e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b782:	2200      	movs	r2, #0
 800b784:	2182      	movs	r1, #130	; 0x82
 800b786:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800b78a:	f7fd fab3 	bl	8008cf4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800b78e:	2000      	movs	r0, #0
 800b790:	bd10      	pop	{r4, pc}
 800b792:	bf00      	nop
 800b794:	40005c00 	.word	0x40005c00
 800b798:	20003734 	.word	0x20003734

0800b79c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b79c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800b79e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800b7a2:	f7fc fcac 	bl	80080fe <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800b7a6:	2803      	cmp	r0, #3
 800b7a8:	bf96      	itet	ls
 800b7aa:	4b02      	ldrls	r3, [pc, #8]	; (800b7b4 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 800b7ac:	2002      	movhi	r0, #2
 800b7ae:	5c18      	ldrbls	r0, [r3, r0]
}
 800b7b0:	bd08      	pop	{r3, pc}
 800b7b2:	bf00      	nop
 800b7b4:	0800ef0c 	.word	0x0800ef0c

0800b7b8 <USBD_LL_OpenEP>:
{
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7bc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 800b7c0:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7c2:	4623      	mov	r3, r4
 800b7c4:	f7fd f99c 	bl	8008b00 <HAL_PCD_EP_Open>
  switch (hal_status)
 800b7c8:	2803      	cmp	r0, #3
 800b7ca:	bf96      	itet	ls
 800b7cc:	4b01      	ldrls	r3, [pc, #4]	; (800b7d4 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7ce:	2002      	movhi	r0, #2
 800b7d0:	5c18      	ldrbls	r0, [r3, r0]
}
 800b7d2:	bd10      	pop	{r4, pc}
 800b7d4:	0800ef0c 	.word	0x0800ef0c

0800b7d8 <USBD_LL_CloseEP>:
{
 800b7d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800b7de:	f7fd f9c1 	bl	8008b64 <HAL_PCD_EP_Close>
  switch (hal_status)
 800b7e2:	2803      	cmp	r0, #3
 800b7e4:	bf96      	itet	ls
 800b7e6:	4b02      	ldrls	r3, [pc, #8]	; (800b7f0 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7e8:	2002      	movhi	r0, #2
 800b7ea:	5c18      	ldrbls	r0, [r3, r0]
}
 800b7ec:	bd08      	pop	{r3, pc}
 800b7ee:	bf00      	nop
 800b7f0:	0800ef0c 	.word	0x0800ef0c

0800b7f4 <USBD_LL_StallEP>:
{
 800b7f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b7f6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800b7fa:	f7fd fa15 	bl	8008c28 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800b7fe:	2803      	cmp	r0, #3
 800b800:	bf96      	itet	ls
 800b802:	4b02      	ldrls	r3, [pc, #8]	; (800b80c <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b804:	2002      	movhi	r0, #2
 800b806:	5c18      	ldrbls	r0, [r3, r0]
}
 800b808:	bd08      	pop	{r3, pc}
 800b80a:	bf00      	nop
 800b80c:	0800ef0c 	.word	0x0800ef0c

0800b810 <USBD_LL_ClearStallEP>:
{
 800b810:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b812:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800b816:	f7fd fa3b 	bl	8008c90 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800b81a:	2803      	cmp	r0, #3
 800b81c:	bf96      	itet	ls
 800b81e:	4b02      	ldrls	r3, [pc, #8]	; (800b828 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b820:	2002      	movhi	r0, #2
 800b822:	5c18      	ldrbls	r0, [r3, r0]
}
 800b824:	bd08      	pop	{r3, pc}
 800b826:	bf00      	nop
 800b828:	0800ef0c 	.word	0x0800ef0c

0800b82c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b82c:	2328      	movs	r3, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 800b82e:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b832:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b836:	bf1b      	ittet	ne
 800b838:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800b83c:	fb01 3103 	mlane	r1, r1, r3, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b840:	fb03 2101 	mlaeq	r1, r3, r1, r2
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b844:	1889      	addne	r1, r1, r2
 800b846:	bf14      	ite	ne
 800b848:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b84a:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 800b84e:	4770      	bx	lr

0800b850 <USBD_LL_SetUSBAddress>:
{
 800b850:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b852:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800b856:	f7fc fc6b 	bl	8008130 <HAL_PCD_SetAddress>
  switch (hal_status)
 800b85a:	2803      	cmp	r0, #3
 800b85c:	bf96      	itet	ls
 800b85e:	4b02      	ldrls	r3, [pc, #8]	; (800b868 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b860:	2002      	movhi	r0, #2
 800b862:	5c18      	ldrbls	r0, [r3, r0]
}
 800b864:	bd08      	pop	{r3, pc}
 800b866:	bf00      	nop
 800b868:	0800ef0c 	.word	0x0800ef0c

0800b86c <USBD_LL_Transmit>:
{
 800b86c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b86e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800b872:	f7fd f9bf 	bl	8008bf4 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800b876:	2803      	cmp	r0, #3
 800b878:	bf96      	itet	ls
 800b87a:	4b02      	ldrls	r3, [pc, #8]	; (800b884 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b87c:	2002      	movhi	r0, #2
 800b87e:	5c18      	ldrbls	r0, [r3, r0]
}
 800b880:	bd08      	pop	{r3, pc}
 800b882:	bf00      	nop
 800b884:	0800ef0c 	.word	0x0800ef0c

0800b888 <USBD_LL_PrepareReceive>:
{
 800b888:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b88a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800b88e:	f7fd f992 	bl	8008bb6 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800b892:	2803      	cmp	r0, #3
 800b894:	bf96      	itet	ls
 800b896:	4b02      	ldrls	r3, [pc, #8]	; (800b8a0 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b898:	2002      	movhi	r0, #2
 800b89a:	5c18      	ldrbls	r0, [r3, r0]
}
 800b89c:	bd08      	pop	{r3, pc}
 800b89e:	bf00      	nop
 800b8a0:	0800ef0c 	.word	0x0800ef0c

0800b8a4 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b8a4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800b8a8:	f7fd b99c 	b.w	8008be4 <HAL_PCD_EP_GetRxCount>

0800b8ac <USBD_static_malloc>:
}
 800b8ac:	4800      	ldr	r0, [pc, #0]	; (800b8b0 <USBD_static_malloc+0x4>)
 800b8ae:	4770      	bx	lr
 800b8b0:	20002018 	.word	0x20002018

0800b8b4 <USBD_static_free>:
}
 800b8b4:	4770      	bx	lr

0800b8b6 <HAL_PCDEx_SetConnectionState>:
}
 800b8b6:	4770      	bx	lr

0800b8b8 <threadMain>:

static void threadMain(void const *argument)
{
  UNUSED(argument);

  apMain();
 800b8b8:	f7fa ba32 	b.w	8005d20 <apMain>

0800b8bc <main>:
{
 800b8bc:	b530      	push	{r4, r5, lr}
  osThreadDef(threadMain, threadMain, _HW_DEF_RTOS_THREAD_PRI_MAIN, 0, _HW_DEF_RTOS_THREAD_MEM_MAIN);
 800b8be:	4d0e      	ldr	r5, [pc, #56]	; (800b8f8 <main+0x3c>)
{
 800b8c0:	b087      	sub	sp, #28
  osThreadDef(threadMain, threadMain, _HW_DEF_RTOS_THREAD_PRI_MAIN, 0, _HW_DEF_RTOS_THREAD_MEM_MAIN);
 800b8c2:	ac01      	add	r4, sp, #4
  hwInit();
 800b8c4:	f7fb fa12 	bl	8006cec <hwInit>
  apInit();
 800b8c8:	f7fa f9fe 	bl	8005cc8 <apInit>
  osThreadDef(threadMain, threadMain, _HW_DEF_RTOS_THREAD_PRI_MAIN, 0, _HW_DEF_RTOS_THREAD_MEM_MAIN);
 800b8cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8d0:	682b      	ldr	r3, [r5, #0]
  if (osThreadCreate(osThread(threadMain), NULL) != NULL)
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	a801      	add	r0, sp, #4
  osThreadDef(threadMain, threadMain, _HW_DEF_RTOS_THREAD_PRI_MAIN, 0, _HW_DEF_RTOS_THREAD_MEM_MAIN);
 800b8d6:	6023      	str	r3, [r4, #0]
  if (osThreadCreate(osThread(threadMain), NULL) != NULL)
 800b8d8:	f7fb fa20 	bl	8006d1c <osThreadCreate>
 800b8dc:	b918      	cbnz	r0, 800b8e6 <main+0x2a>
    logPrintf("threadMain \t\t: Fail\r\n");
 800b8de:	4807      	ldr	r0, [pc, #28]	; (800b8fc <main+0x40>)
 800b8e0:	f000 f8be 	bl	800ba60 <puts>
    while(1);
 800b8e4:	e7fe      	b.n	800b8e4 <main+0x28>
    logPrintf("threadMain \t\t: OK\r\n");
 800b8e6:	4806      	ldr	r0, [pc, #24]	; (800b900 <main+0x44>)
 800b8e8:	f000 f8ba 	bl	800ba60 <puts>
  osKernelStart();
 800b8ec:	f7fb fa11 	bl	8006d12 <osKernelStart>
}
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	b007      	add	sp, #28
 800b8f4:	bd30      	pop	{r4, r5, pc}
 800b8f6:	bf00      	nop
 800b8f8:	0800ed0c 	.word	0x0800ed0c
 800b8fc:	0800ef2e 	.word	0x0800ef2e
 800b900:	0800ef1b 	.word	0x0800ef1b

0800b904 <__errno>:
 800b904:	4b01      	ldr	r3, [pc, #4]	; (800b90c <__errno+0x8>)
 800b906:	6818      	ldr	r0, [r3, #0]
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	20000194 	.word	0x20000194

0800b910 <__libc_init_array>:
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	2600      	movs	r6, #0
 800b914:	4d0c      	ldr	r5, [pc, #48]	; (800b948 <__libc_init_array+0x38>)
 800b916:	4c0d      	ldr	r4, [pc, #52]	; (800b94c <__libc_init_array+0x3c>)
 800b918:	1b64      	subs	r4, r4, r5
 800b91a:	10a4      	asrs	r4, r4, #2
 800b91c:	42a6      	cmp	r6, r4
 800b91e:	d109      	bne.n	800b934 <__libc_init_array+0x24>
 800b920:	f003 f9dc 	bl	800ecdc <_init>
 800b924:	2600      	movs	r6, #0
 800b926:	4d0a      	ldr	r5, [pc, #40]	; (800b950 <__libc_init_array+0x40>)
 800b928:	4c0a      	ldr	r4, [pc, #40]	; (800b954 <__libc_init_array+0x44>)
 800b92a:	1b64      	subs	r4, r4, r5
 800b92c:	10a4      	asrs	r4, r4, #2
 800b92e:	42a6      	cmp	r6, r4
 800b930:	d105      	bne.n	800b93e <__libc_init_array+0x2e>
 800b932:	bd70      	pop	{r4, r5, r6, pc}
 800b934:	f855 3b04 	ldr.w	r3, [r5], #4
 800b938:	4798      	blx	r3
 800b93a:	3601      	adds	r6, #1
 800b93c:	e7ee      	b.n	800b91c <__libc_init_array+0xc>
 800b93e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b942:	4798      	blx	r3
 800b944:	3601      	adds	r6, #1
 800b946:	e7f2      	b.n	800b92e <__libc_init_array+0x1e>
 800b948:	0800f37c 	.word	0x0800f37c
 800b94c:	0800f37c 	.word	0x0800f37c
 800b950:	0800f37c 	.word	0x0800f37c
 800b954:	0800f380 	.word	0x0800f380

0800b958 <memcpy>:
 800b958:	440a      	add	r2, r1
 800b95a:	4291      	cmp	r1, r2
 800b95c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b960:	d100      	bne.n	800b964 <memcpy+0xc>
 800b962:	4770      	bx	lr
 800b964:	b510      	push	{r4, lr}
 800b966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b96a:	4291      	cmp	r1, r2
 800b96c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b970:	d1f9      	bne.n	800b966 <memcpy+0xe>
 800b972:	bd10      	pop	{r4, pc}

0800b974 <memset>:
 800b974:	4603      	mov	r3, r0
 800b976:	4402      	add	r2, r0
 800b978:	4293      	cmp	r3, r2
 800b97a:	d100      	bne.n	800b97e <memset+0xa>
 800b97c:	4770      	bx	lr
 800b97e:	f803 1b01 	strb.w	r1, [r3], #1
 800b982:	e7f9      	b.n	800b978 <memset+0x4>

0800b984 <_puts_r>:
 800b984:	b570      	push	{r4, r5, r6, lr}
 800b986:	460e      	mov	r6, r1
 800b988:	4605      	mov	r5, r0
 800b98a:	b118      	cbz	r0, 800b994 <_puts_r+0x10>
 800b98c:	6983      	ldr	r3, [r0, #24]
 800b98e:	b90b      	cbnz	r3, 800b994 <_puts_r+0x10>
 800b990:	f001 f9a6 	bl	800cce0 <__sinit>
 800b994:	69ab      	ldr	r3, [r5, #24]
 800b996:	68ac      	ldr	r4, [r5, #8]
 800b998:	b913      	cbnz	r3, 800b9a0 <_puts_r+0x1c>
 800b99a:	4628      	mov	r0, r5
 800b99c:	f001 f9a0 	bl	800cce0 <__sinit>
 800b9a0:	4b2c      	ldr	r3, [pc, #176]	; (800ba54 <_puts_r+0xd0>)
 800b9a2:	429c      	cmp	r4, r3
 800b9a4:	d120      	bne.n	800b9e8 <_puts_r+0x64>
 800b9a6:	686c      	ldr	r4, [r5, #4]
 800b9a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9aa:	07db      	lsls	r3, r3, #31
 800b9ac:	d405      	bmi.n	800b9ba <_puts_r+0x36>
 800b9ae:	89a3      	ldrh	r3, [r4, #12]
 800b9b0:	0598      	lsls	r0, r3, #22
 800b9b2:	d402      	bmi.n	800b9ba <_puts_r+0x36>
 800b9b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9b6:	f001 fd98 	bl	800d4ea <__retarget_lock_acquire_recursive>
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	0719      	lsls	r1, r3, #28
 800b9be:	d51d      	bpl.n	800b9fc <_puts_r+0x78>
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	b1db      	cbz	r3, 800b9fc <_puts_r+0x78>
 800b9c4:	3e01      	subs	r6, #1
 800b9c6:	68a3      	ldr	r3, [r4, #8]
 800b9c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	60a3      	str	r3, [r4, #8]
 800b9d0:	bb39      	cbnz	r1, 800ba22 <_puts_r+0x9e>
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	da38      	bge.n	800ba48 <_puts_r+0xc4>
 800b9d6:	4622      	mov	r2, r4
 800b9d8:	210a      	movs	r1, #10
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f000 ffa6 	bl	800c92c <__swbuf_r>
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	d011      	beq.n	800ba08 <_puts_r+0x84>
 800b9e4:	250a      	movs	r5, #10
 800b9e6:	e011      	b.n	800ba0c <_puts_r+0x88>
 800b9e8:	4b1b      	ldr	r3, [pc, #108]	; (800ba58 <_puts_r+0xd4>)
 800b9ea:	429c      	cmp	r4, r3
 800b9ec:	d101      	bne.n	800b9f2 <_puts_r+0x6e>
 800b9ee:	68ac      	ldr	r4, [r5, #8]
 800b9f0:	e7da      	b.n	800b9a8 <_puts_r+0x24>
 800b9f2:	4b1a      	ldr	r3, [pc, #104]	; (800ba5c <_puts_r+0xd8>)
 800b9f4:	429c      	cmp	r4, r3
 800b9f6:	bf08      	it	eq
 800b9f8:	68ec      	ldreq	r4, [r5, #12]
 800b9fa:	e7d5      	b.n	800b9a8 <_puts_r+0x24>
 800b9fc:	4621      	mov	r1, r4
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f000 ffe6 	bl	800c9d0 <__swsetup_r>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d0dd      	beq.n	800b9c4 <_puts_r+0x40>
 800ba08:	f04f 35ff 	mov.w	r5, #4294967295
 800ba0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba0e:	07da      	lsls	r2, r3, #31
 800ba10:	d405      	bmi.n	800ba1e <_puts_r+0x9a>
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	059b      	lsls	r3, r3, #22
 800ba16:	d402      	bmi.n	800ba1e <_puts_r+0x9a>
 800ba18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba1a:	f001 fd67 	bl	800d4ec <__retarget_lock_release_recursive>
 800ba1e:	4628      	mov	r0, r5
 800ba20:	bd70      	pop	{r4, r5, r6, pc}
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	da04      	bge.n	800ba30 <_puts_r+0xac>
 800ba26:	69a2      	ldr	r2, [r4, #24]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	dc06      	bgt.n	800ba3a <_puts_r+0xb6>
 800ba2c:	290a      	cmp	r1, #10
 800ba2e:	d004      	beq.n	800ba3a <_puts_r+0xb6>
 800ba30:	6823      	ldr	r3, [r4, #0]
 800ba32:	1c5a      	adds	r2, r3, #1
 800ba34:	6022      	str	r2, [r4, #0]
 800ba36:	7019      	strb	r1, [r3, #0]
 800ba38:	e7c5      	b.n	800b9c6 <_puts_r+0x42>
 800ba3a:	4622      	mov	r2, r4
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	f000 ff75 	bl	800c92c <__swbuf_r>
 800ba42:	3001      	adds	r0, #1
 800ba44:	d1bf      	bne.n	800b9c6 <_puts_r+0x42>
 800ba46:	e7df      	b.n	800ba08 <_puts_r+0x84>
 800ba48:	250a      	movs	r5, #10
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	1c5a      	adds	r2, r3, #1
 800ba4e:	6022      	str	r2, [r4, #0]
 800ba50:	701d      	strb	r5, [r3, #0]
 800ba52:	e7db      	b.n	800ba0c <_puts_r+0x88>
 800ba54:	0800f0cc 	.word	0x0800f0cc
 800ba58:	0800f0ec 	.word	0x0800f0ec
 800ba5c:	0800f0ac 	.word	0x0800f0ac

0800ba60 <puts>:
 800ba60:	4b02      	ldr	r3, [pc, #8]	; (800ba6c <puts+0xc>)
 800ba62:	4601      	mov	r1, r0
 800ba64:	6818      	ldr	r0, [r3, #0]
 800ba66:	f7ff bf8d 	b.w	800b984 <_puts_r>
 800ba6a:	bf00      	nop
 800ba6c:	20000194 	.word	0x20000194

0800ba70 <strcpy>:
 800ba70:	4603      	mov	r3, r0
 800ba72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba76:	f803 2b01 	strb.w	r2, [r3], #1
 800ba7a:	2a00      	cmp	r2, #0
 800ba7c:	d1f9      	bne.n	800ba72 <strcpy+0x2>
 800ba7e:	4770      	bx	lr

0800ba80 <sulp>:
 800ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba84:	460f      	mov	r7, r1
 800ba86:	4690      	mov	r8, r2
 800ba88:	f002 f918 	bl	800dcbc <__ulp>
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	460d      	mov	r5, r1
 800ba90:	f1b8 0f00 	cmp.w	r8, #0
 800ba94:	d011      	beq.n	800baba <sulp+0x3a>
 800ba96:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ba9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	dd0b      	ble.n	800baba <sulp+0x3a>
 800baa2:	2400      	movs	r4, #0
 800baa4:	051b      	lsls	r3, r3, #20
 800baa6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800baaa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800baae:	4622      	mov	r2, r4
 800bab0:	462b      	mov	r3, r5
 800bab2:	f7f9 fd1b 	bl	80054ec <__aeabi_dmul>
 800bab6:	4604      	mov	r4, r0
 800bab8:	460d      	mov	r5, r1
 800baba:	4620      	mov	r0, r4
 800babc:	4629      	mov	r1, r5
 800babe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bac2:	0000      	movs	r0, r0
 800bac4:	0000      	movs	r0, r0
	...

0800bac8 <_strtod_l>:
 800bac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bacc:	469b      	mov	fp, r3
 800bace:	2300      	movs	r3, #0
 800bad0:	b0a1      	sub	sp, #132	; 0x84
 800bad2:	931c      	str	r3, [sp, #112]	; 0x70
 800bad4:	4ba1      	ldr	r3, [pc, #644]	; (800bd5c <_strtod_l+0x294>)
 800bad6:	4682      	mov	sl, r0
 800bad8:	681f      	ldr	r7, [r3, #0]
 800bada:	460e      	mov	r6, r1
 800badc:	4638      	mov	r0, r7
 800bade:	9217      	str	r2, [sp, #92]	; 0x5c
 800bae0:	f7f9 fb40 	bl	8005164 <strlen>
 800bae4:	f04f 0800 	mov.w	r8, #0
 800bae8:	4604      	mov	r4, r0
 800baea:	f04f 0900 	mov.w	r9, #0
 800baee:	961b      	str	r6, [sp, #108]	; 0x6c
 800baf0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800baf2:	781a      	ldrb	r2, [r3, #0]
 800baf4:	2a2b      	cmp	r2, #43	; 0x2b
 800baf6:	d04c      	beq.n	800bb92 <_strtod_l+0xca>
 800baf8:	d83a      	bhi.n	800bb70 <_strtod_l+0xa8>
 800bafa:	2a0d      	cmp	r2, #13
 800bafc:	d833      	bhi.n	800bb66 <_strtod_l+0x9e>
 800bafe:	2a08      	cmp	r2, #8
 800bb00:	d833      	bhi.n	800bb6a <_strtod_l+0xa2>
 800bb02:	2a00      	cmp	r2, #0
 800bb04:	d03d      	beq.n	800bb82 <_strtod_l+0xba>
 800bb06:	2300      	movs	r3, #0
 800bb08:	930c      	str	r3, [sp, #48]	; 0x30
 800bb0a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bb0c:	782b      	ldrb	r3, [r5, #0]
 800bb0e:	2b30      	cmp	r3, #48	; 0x30
 800bb10:	f040 80af 	bne.w	800bc72 <_strtod_l+0x1aa>
 800bb14:	786b      	ldrb	r3, [r5, #1]
 800bb16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb1a:	2b58      	cmp	r3, #88	; 0x58
 800bb1c:	d16c      	bne.n	800bbf8 <_strtod_l+0x130>
 800bb1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb20:	4650      	mov	r0, sl
 800bb22:	9301      	str	r3, [sp, #4]
 800bb24:	ab1c      	add	r3, sp, #112	; 0x70
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	4a8d      	ldr	r2, [pc, #564]	; (800bd60 <_strtod_l+0x298>)
 800bb2a:	f8cd b008 	str.w	fp, [sp, #8]
 800bb2e:	ab1d      	add	r3, sp, #116	; 0x74
 800bb30:	a91b      	add	r1, sp, #108	; 0x6c
 800bb32:	f001 f9db 	bl	800ceec <__gethex>
 800bb36:	f010 0607 	ands.w	r6, r0, #7
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	d005      	beq.n	800bb4a <_strtod_l+0x82>
 800bb3e:	2e06      	cmp	r6, #6
 800bb40:	d129      	bne.n	800bb96 <_strtod_l+0xce>
 800bb42:	2300      	movs	r3, #0
 800bb44:	3501      	adds	r5, #1
 800bb46:	951b      	str	r5, [sp, #108]	; 0x6c
 800bb48:	930c      	str	r3, [sp, #48]	; 0x30
 800bb4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f040 8596 	bne.w	800c67e <_strtod_l+0xbb6>
 800bb52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb54:	b1d3      	cbz	r3, 800bb8c <_strtod_l+0xc4>
 800bb56:	4642      	mov	r2, r8
 800bb58:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	4619      	mov	r1, r3
 800bb60:	b021      	add	sp, #132	; 0x84
 800bb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb66:	2a20      	cmp	r2, #32
 800bb68:	d1cd      	bne.n	800bb06 <_strtod_l+0x3e>
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb6e:	e7bf      	b.n	800baf0 <_strtod_l+0x28>
 800bb70:	2a2d      	cmp	r2, #45	; 0x2d
 800bb72:	d1c8      	bne.n	800bb06 <_strtod_l+0x3e>
 800bb74:	2201      	movs	r2, #1
 800bb76:	920c      	str	r2, [sp, #48]	; 0x30
 800bb78:	1c5a      	adds	r2, r3, #1
 800bb7a:	921b      	str	r2, [sp, #108]	; 0x6c
 800bb7c:	785b      	ldrb	r3, [r3, #1]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1c3      	bne.n	800bb0a <_strtod_l+0x42>
 800bb82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb84:	961b      	str	r6, [sp, #108]	; 0x6c
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f040 8577 	bne.w	800c67a <_strtod_l+0xbb2>
 800bb8c:	4642      	mov	r2, r8
 800bb8e:	464b      	mov	r3, r9
 800bb90:	e7e4      	b.n	800bb5c <_strtod_l+0x94>
 800bb92:	2200      	movs	r2, #0
 800bb94:	e7ef      	b.n	800bb76 <_strtod_l+0xae>
 800bb96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bb98:	b13a      	cbz	r2, 800bbaa <_strtod_l+0xe2>
 800bb9a:	2135      	movs	r1, #53	; 0x35
 800bb9c:	a81e      	add	r0, sp, #120	; 0x78
 800bb9e:	f002 f991 	bl	800dec4 <__copybits>
 800bba2:	4650      	mov	r0, sl
 800bba4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bba6:	f001 fd59 	bl	800d65c <_Bfree>
 800bbaa:	3e01      	subs	r6, #1
 800bbac:	2e05      	cmp	r6, #5
 800bbae:	d807      	bhi.n	800bbc0 <_strtod_l+0xf8>
 800bbb0:	e8df f006 	tbb	[pc, r6]
 800bbb4:	1d180b0e 	.word	0x1d180b0e
 800bbb8:	030e      	.short	0x030e
 800bbba:	f04f 0900 	mov.w	r9, #0
 800bbbe:	46c8      	mov	r8, r9
 800bbc0:	0721      	lsls	r1, r4, #28
 800bbc2:	d5c2      	bpl.n	800bb4a <_strtod_l+0x82>
 800bbc4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800bbc8:	e7bf      	b.n	800bb4a <_strtod_l+0x82>
 800bbca:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800bbce:	e7f7      	b.n	800bbc0 <_strtod_l+0xf8>
 800bbd0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bbd2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800bbd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bbda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bbde:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bbe2:	e7ed      	b.n	800bbc0 <_strtod_l+0xf8>
 800bbe4:	f04f 0800 	mov.w	r8, #0
 800bbe8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bd64 <_strtod_l+0x29c>
 800bbec:	e7e8      	b.n	800bbc0 <_strtod_l+0xf8>
 800bbee:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bbf2:	f04f 38ff 	mov.w	r8, #4294967295
 800bbf6:	e7e3      	b.n	800bbc0 <_strtod_l+0xf8>
 800bbf8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bbfa:	1c5a      	adds	r2, r3, #1
 800bbfc:	921b      	str	r2, [sp, #108]	; 0x6c
 800bbfe:	785b      	ldrb	r3, [r3, #1]
 800bc00:	2b30      	cmp	r3, #48	; 0x30
 800bc02:	d0f9      	beq.n	800bbf8 <_strtod_l+0x130>
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d0a0      	beq.n	800bb4a <_strtod_l+0x82>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	9307      	str	r3, [sp, #28]
 800bc0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc0e:	220a      	movs	r2, #10
 800bc10:	9308      	str	r3, [sp, #32]
 800bc12:	2300      	movs	r3, #0
 800bc14:	469b      	mov	fp, r3
 800bc16:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800bc1a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bc1c:	7805      	ldrb	r5, [r0, #0]
 800bc1e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800bc22:	b2d9      	uxtb	r1, r3
 800bc24:	2909      	cmp	r1, #9
 800bc26:	d926      	bls.n	800bc76 <_strtod_l+0x1ae>
 800bc28:	4622      	mov	r2, r4
 800bc2a:	4639      	mov	r1, r7
 800bc2c:	f002 fd91 	bl	800e752 <strncmp>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d032      	beq.n	800bc9a <_strtod_l+0x1d2>
 800bc34:	2000      	movs	r0, #0
 800bc36:	462b      	mov	r3, r5
 800bc38:	465c      	mov	r4, fp
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	9004      	str	r0, [sp, #16]
 800bc3e:	2b65      	cmp	r3, #101	; 0x65
 800bc40:	d001      	beq.n	800bc46 <_strtod_l+0x17e>
 800bc42:	2b45      	cmp	r3, #69	; 0x45
 800bc44:	d113      	bne.n	800bc6e <_strtod_l+0x1a6>
 800bc46:	b91c      	cbnz	r4, 800bc50 <_strtod_l+0x188>
 800bc48:	9b07      	ldr	r3, [sp, #28]
 800bc4a:	4303      	orrs	r3, r0
 800bc4c:	d099      	beq.n	800bb82 <_strtod_l+0xba>
 800bc4e:	2400      	movs	r4, #0
 800bc50:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bc52:	1c73      	adds	r3, r6, #1
 800bc54:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc56:	7873      	ldrb	r3, [r6, #1]
 800bc58:	2b2b      	cmp	r3, #43	; 0x2b
 800bc5a:	d078      	beq.n	800bd4e <_strtod_l+0x286>
 800bc5c:	2b2d      	cmp	r3, #45	; 0x2d
 800bc5e:	d07b      	beq.n	800bd58 <_strtod_l+0x290>
 800bc60:	2700      	movs	r7, #0
 800bc62:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bc66:	2909      	cmp	r1, #9
 800bc68:	f240 8082 	bls.w	800bd70 <_strtod_l+0x2a8>
 800bc6c:	961b      	str	r6, [sp, #108]	; 0x6c
 800bc6e:	2500      	movs	r5, #0
 800bc70:	e09e      	b.n	800bdb0 <_strtod_l+0x2e8>
 800bc72:	2300      	movs	r3, #0
 800bc74:	e7c9      	b.n	800bc0a <_strtod_l+0x142>
 800bc76:	f1bb 0f08 	cmp.w	fp, #8
 800bc7a:	bfd5      	itete	le
 800bc7c:	9906      	ldrle	r1, [sp, #24]
 800bc7e:	9905      	ldrgt	r1, [sp, #20]
 800bc80:	fb02 3301 	mlale	r3, r2, r1, r3
 800bc84:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bc88:	f100 0001 	add.w	r0, r0, #1
 800bc8c:	bfd4      	ite	le
 800bc8e:	9306      	strle	r3, [sp, #24]
 800bc90:	9305      	strgt	r3, [sp, #20]
 800bc92:	f10b 0b01 	add.w	fp, fp, #1
 800bc96:	901b      	str	r0, [sp, #108]	; 0x6c
 800bc98:	e7bf      	b.n	800bc1a <_strtod_l+0x152>
 800bc9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc9c:	191a      	adds	r2, r3, r4
 800bc9e:	921b      	str	r2, [sp, #108]	; 0x6c
 800bca0:	5d1b      	ldrb	r3, [r3, r4]
 800bca2:	f1bb 0f00 	cmp.w	fp, #0
 800bca6:	d036      	beq.n	800bd16 <_strtod_l+0x24e>
 800bca8:	465c      	mov	r4, fp
 800bcaa:	9004      	str	r0, [sp, #16]
 800bcac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bcb0:	2a09      	cmp	r2, #9
 800bcb2:	d912      	bls.n	800bcda <_strtod_l+0x212>
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	e7c2      	b.n	800bc3e <_strtod_l+0x176>
 800bcb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcba:	3001      	adds	r0, #1
 800bcbc:	1c5a      	adds	r2, r3, #1
 800bcbe:	921b      	str	r2, [sp, #108]	; 0x6c
 800bcc0:	785b      	ldrb	r3, [r3, #1]
 800bcc2:	2b30      	cmp	r3, #48	; 0x30
 800bcc4:	d0f8      	beq.n	800bcb8 <_strtod_l+0x1f0>
 800bcc6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bcca:	2a08      	cmp	r2, #8
 800bccc:	f200 84dc 	bhi.w	800c688 <_strtod_l+0xbc0>
 800bcd0:	9004      	str	r0, [sp, #16]
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bcd8:	9208      	str	r2, [sp, #32]
 800bcda:	3b30      	subs	r3, #48	; 0x30
 800bcdc:	f100 0201 	add.w	r2, r0, #1
 800bce0:	d013      	beq.n	800bd0a <_strtod_l+0x242>
 800bce2:	9904      	ldr	r1, [sp, #16]
 800bce4:	1905      	adds	r5, r0, r4
 800bce6:	4411      	add	r1, r2
 800bce8:	9104      	str	r1, [sp, #16]
 800bcea:	4622      	mov	r2, r4
 800bcec:	210a      	movs	r1, #10
 800bcee:	42aa      	cmp	r2, r5
 800bcf0:	d113      	bne.n	800bd1a <_strtod_l+0x252>
 800bcf2:	1822      	adds	r2, r4, r0
 800bcf4:	2a08      	cmp	r2, #8
 800bcf6:	f104 0401 	add.w	r4, r4, #1
 800bcfa:	4404      	add	r4, r0
 800bcfc:	dc1b      	bgt.n	800bd36 <_strtod_l+0x26e>
 800bcfe:	220a      	movs	r2, #10
 800bd00:	9906      	ldr	r1, [sp, #24]
 800bd02:	fb02 3301 	mla	r3, r2, r1, r3
 800bd06:	9306      	str	r3, [sp, #24]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	1c59      	adds	r1, r3, #1
 800bd10:	911b      	str	r1, [sp, #108]	; 0x6c
 800bd12:	785b      	ldrb	r3, [r3, #1]
 800bd14:	e7ca      	b.n	800bcac <_strtod_l+0x1e4>
 800bd16:	4658      	mov	r0, fp
 800bd18:	e7d3      	b.n	800bcc2 <_strtod_l+0x1fa>
 800bd1a:	2a08      	cmp	r2, #8
 800bd1c:	dc04      	bgt.n	800bd28 <_strtod_l+0x260>
 800bd1e:	9f06      	ldr	r7, [sp, #24]
 800bd20:	434f      	muls	r7, r1
 800bd22:	9706      	str	r7, [sp, #24]
 800bd24:	3201      	adds	r2, #1
 800bd26:	e7e2      	b.n	800bcee <_strtod_l+0x226>
 800bd28:	1c57      	adds	r7, r2, #1
 800bd2a:	2f10      	cmp	r7, #16
 800bd2c:	bfde      	ittt	le
 800bd2e:	9f05      	ldrle	r7, [sp, #20]
 800bd30:	434f      	mulle	r7, r1
 800bd32:	9705      	strle	r7, [sp, #20]
 800bd34:	e7f6      	b.n	800bd24 <_strtod_l+0x25c>
 800bd36:	2c10      	cmp	r4, #16
 800bd38:	bfdf      	itttt	le
 800bd3a:	220a      	movle	r2, #10
 800bd3c:	9905      	ldrle	r1, [sp, #20]
 800bd3e:	fb02 3301 	mlale	r3, r2, r1, r3
 800bd42:	9305      	strle	r3, [sp, #20]
 800bd44:	e7e0      	b.n	800bd08 <_strtod_l+0x240>
 800bd46:	2300      	movs	r3, #0
 800bd48:	2201      	movs	r2, #1
 800bd4a:	9304      	str	r3, [sp, #16]
 800bd4c:	e77c      	b.n	800bc48 <_strtod_l+0x180>
 800bd4e:	2700      	movs	r7, #0
 800bd50:	1cb3      	adds	r3, r6, #2
 800bd52:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd54:	78b3      	ldrb	r3, [r6, #2]
 800bd56:	e784      	b.n	800bc62 <_strtod_l+0x19a>
 800bd58:	2701      	movs	r7, #1
 800bd5a:	e7f9      	b.n	800bd50 <_strtod_l+0x288>
 800bd5c:	0800f184 	.word	0x0800f184
 800bd60:	0800ef54 	.word	0x0800ef54
 800bd64:	7ff00000 	.word	0x7ff00000
 800bd68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd6a:	1c59      	adds	r1, r3, #1
 800bd6c:	911b      	str	r1, [sp, #108]	; 0x6c
 800bd6e:	785b      	ldrb	r3, [r3, #1]
 800bd70:	2b30      	cmp	r3, #48	; 0x30
 800bd72:	d0f9      	beq.n	800bd68 <_strtod_l+0x2a0>
 800bd74:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800bd78:	2908      	cmp	r1, #8
 800bd7a:	f63f af78 	bhi.w	800bc6e <_strtod_l+0x1a6>
 800bd7e:	f04f 0e0a 	mov.w	lr, #10
 800bd82:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800bd86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd88:	9309      	str	r3, [sp, #36]	; 0x24
 800bd8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd8c:	1c59      	adds	r1, r3, #1
 800bd8e:	911b      	str	r1, [sp, #108]	; 0x6c
 800bd90:	785b      	ldrb	r3, [r3, #1]
 800bd92:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800bd96:	2d09      	cmp	r5, #9
 800bd98:	d935      	bls.n	800be06 <_strtod_l+0x33e>
 800bd9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bd9c:	1b49      	subs	r1, r1, r5
 800bd9e:	2908      	cmp	r1, #8
 800bda0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800bda4:	dc02      	bgt.n	800bdac <_strtod_l+0x2e4>
 800bda6:	4565      	cmp	r5, ip
 800bda8:	bfa8      	it	ge
 800bdaa:	4665      	movge	r5, ip
 800bdac:	b107      	cbz	r7, 800bdb0 <_strtod_l+0x2e8>
 800bdae:	426d      	negs	r5, r5
 800bdb0:	2c00      	cmp	r4, #0
 800bdb2:	d14c      	bne.n	800be4e <_strtod_l+0x386>
 800bdb4:	9907      	ldr	r1, [sp, #28]
 800bdb6:	4301      	orrs	r1, r0
 800bdb8:	f47f aec7 	bne.w	800bb4a <_strtod_l+0x82>
 800bdbc:	2a00      	cmp	r2, #0
 800bdbe:	f47f aee0 	bne.w	800bb82 <_strtod_l+0xba>
 800bdc2:	2b69      	cmp	r3, #105	; 0x69
 800bdc4:	d026      	beq.n	800be14 <_strtod_l+0x34c>
 800bdc6:	dc23      	bgt.n	800be10 <_strtod_l+0x348>
 800bdc8:	2b49      	cmp	r3, #73	; 0x49
 800bdca:	d023      	beq.n	800be14 <_strtod_l+0x34c>
 800bdcc:	2b4e      	cmp	r3, #78	; 0x4e
 800bdce:	f47f aed8 	bne.w	800bb82 <_strtod_l+0xba>
 800bdd2:	499c      	ldr	r1, [pc, #624]	; (800c044 <_strtod_l+0x57c>)
 800bdd4:	a81b      	add	r0, sp, #108	; 0x6c
 800bdd6:	f001 fad7 	bl	800d388 <__match>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	f43f aed1 	beq.w	800bb82 <_strtod_l+0xba>
 800bde0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	2b28      	cmp	r3, #40	; 0x28
 800bde6:	d12c      	bne.n	800be42 <_strtod_l+0x37a>
 800bde8:	4997      	ldr	r1, [pc, #604]	; (800c048 <_strtod_l+0x580>)
 800bdea:	aa1e      	add	r2, sp, #120	; 0x78
 800bdec:	a81b      	add	r0, sp, #108	; 0x6c
 800bdee:	f001 fadf 	bl	800d3b0 <__hexnan>
 800bdf2:	2805      	cmp	r0, #5
 800bdf4:	d125      	bne.n	800be42 <_strtod_l+0x37a>
 800bdf6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bdf8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800bdfc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800be00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800be04:	e6a1      	b.n	800bb4a <_strtod_l+0x82>
 800be06:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800be0a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800be0e:	e7bc      	b.n	800bd8a <_strtod_l+0x2c2>
 800be10:	2b6e      	cmp	r3, #110	; 0x6e
 800be12:	e7dc      	b.n	800bdce <_strtod_l+0x306>
 800be14:	498d      	ldr	r1, [pc, #564]	; (800c04c <_strtod_l+0x584>)
 800be16:	a81b      	add	r0, sp, #108	; 0x6c
 800be18:	f001 fab6 	bl	800d388 <__match>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	f43f aeb0 	beq.w	800bb82 <_strtod_l+0xba>
 800be22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be24:	498a      	ldr	r1, [pc, #552]	; (800c050 <_strtod_l+0x588>)
 800be26:	3b01      	subs	r3, #1
 800be28:	a81b      	add	r0, sp, #108	; 0x6c
 800be2a:	931b      	str	r3, [sp, #108]	; 0x6c
 800be2c:	f001 faac 	bl	800d388 <__match>
 800be30:	b910      	cbnz	r0, 800be38 <_strtod_l+0x370>
 800be32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be34:	3301      	adds	r3, #1
 800be36:	931b      	str	r3, [sp, #108]	; 0x6c
 800be38:	f04f 0800 	mov.w	r8, #0
 800be3c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800c060 <_strtod_l+0x598>
 800be40:	e683      	b.n	800bb4a <_strtod_l+0x82>
 800be42:	4884      	ldr	r0, [pc, #528]	; (800c054 <_strtod_l+0x58c>)
 800be44:	f002 fc28 	bl	800e698 <nan>
 800be48:	4680      	mov	r8, r0
 800be4a:	4689      	mov	r9, r1
 800be4c:	e67d      	b.n	800bb4a <_strtod_l+0x82>
 800be4e:	9b04      	ldr	r3, [sp, #16]
 800be50:	f1bb 0f00 	cmp.w	fp, #0
 800be54:	bf08      	it	eq
 800be56:	46a3      	moveq	fp, r4
 800be58:	1aeb      	subs	r3, r5, r3
 800be5a:	2c10      	cmp	r4, #16
 800be5c:	9806      	ldr	r0, [sp, #24]
 800be5e:	4626      	mov	r6, r4
 800be60:	9307      	str	r3, [sp, #28]
 800be62:	bfa8      	it	ge
 800be64:	2610      	movge	r6, #16
 800be66:	f7f9 fac7 	bl	80053f8 <__aeabi_ui2d>
 800be6a:	2c09      	cmp	r4, #9
 800be6c:	4680      	mov	r8, r0
 800be6e:	4689      	mov	r9, r1
 800be70:	dd13      	ble.n	800be9a <_strtod_l+0x3d2>
 800be72:	4b79      	ldr	r3, [pc, #484]	; (800c058 <_strtod_l+0x590>)
 800be74:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be78:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800be7c:	f7f9 fb36 	bl	80054ec <__aeabi_dmul>
 800be80:	4680      	mov	r8, r0
 800be82:	9805      	ldr	r0, [sp, #20]
 800be84:	4689      	mov	r9, r1
 800be86:	f7f9 fab7 	bl	80053f8 <__aeabi_ui2d>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	4640      	mov	r0, r8
 800be90:	4649      	mov	r1, r9
 800be92:	f7f9 f975 	bl	8005180 <__adddf3>
 800be96:	4680      	mov	r8, r0
 800be98:	4689      	mov	r9, r1
 800be9a:	2c0f      	cmp	r4, #15
 800be9c:	dc36      	bgt.n	800bf0c <_strtod_l+0x444>
 800be9e:	9b07      	ldr	r3, [sp, #28]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f43f ae52 	beq.w	800bb4a <_strtod_l+0x82>
 800bea6:	dd22      	ble.n	800beee <_strtod_l+0x426>
 800bea8:	2b16      	cmp	r3, #22
 800beaa:	dc09      	bgt.n	800bec0 <_strtod_l+0x3f8>
 800beac:	4c6a      	ldr	r4, [pc, #424]	; (800c058 <_strtod_l+0x590>)
 800beae:	4642      	mov	r2, r8
 800beb0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800beb4:	464b      	mov	r3, r9
 800beb6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800beba:	f7f9 fb17 	bl	80054ec <__aeabi_dmul>
 800bebe:	e7c3      	b.n	800be48 <_strtod_l+0x380>
 800bec0:	9a07      	ldr	r2, [sp, #28]
 800bec2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800bec6:	4293      	cmp	r3, r2
 800bec8:	db20      	blt.n	800bf0c <_strtod_l+0x444>
 800beca:	4d63      	ldr	r5, [pc, #396]	; (800c058 <_strtod_l+0x590>)
 800becc:	f1c4 040f 	rsb	r4, r4, #15
 800bed0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bed4:	4642      	mov	r2, r8
 800bed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beda:	464b      	mov	r3, r9
 800bedc:	f7f9 fb06 	bl	80054ec <__aeabi_dmul>
 800bee0:	9b07      	ldr	r3, [sp, #28]
 800bee2:	1b1c      	subs	r4, r3, r4
 800bee4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bee8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800beec:	e7e5      	b.n	800beba <_strtod_l+0x3f2>
 800beee:	9b07      	ldr	r3, [sp, #28]
 800bef0:	3316      	adds	r3, #22
 800bef2:	db0b      	blt.n	800bf0c <_strtod_l+0x444>
 800bef4:	9b04      	ldr	r3, [sp, #16]
 800bef6:	4a58      	ldr	r2, [pc, #352]	; (800c058 <_strtod_l+0x590>)
 800bef8:	1b5d      	subs	r5, r3, r5
 800befa:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800befe:	4640      	mov	r0, r8
 800bf00:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf04:	4649      	mov	r1, r9
 800bf06:	f7f9 fc1b 	bl	8005740 <__aeabi_ddiv>
 800bf0a:	e79d      	b.n	800be48 <_strtod_l+0x380>
 800bf0c:	9b07      	ldr	r3, [sp, #28]
 800bf0e:	1ba6      	subs	r6, r4, r6
 800bf10:	441e      	add	r6, r3
 800bf12:	2e00      	cmp	r6, #0
 800bf14:	dd71      	ble.n	800bffa <_strtod_l+0x532>
 800bf16:	f016 030f 	ands.w	r3, r6, #15
 800bf1a:	d00a      	beq.n	800bf32 <_strtod_l+0x46a>
 800bf1c:	494e      	ldr	r1, [pc, #312]	; (800c058 <_strtod_l+0x590>)
 800bf1e:	4642      	mov	r2, r8
 800bf20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bf24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf28:	464b      	mov	r3, r9
 800bf2a:	f7f9 fadf 	bl	80054ec <__aeabi_dmul>
 800bf2e:	4680      	mov	r8, r0
 800bf30:	4689      	mov	r9, r1
 800bf32:	f036 060f 	bics.w	r6, r6, #15
 800bf36:	d050      	beq.n	800bfda <_strtod_l+0x512>
 800bf38:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800bf3c:	dd27      	ble.n	800bf8e <_strtod_l+0x4c6>
 800bf3e:	f04f 0b00 	mov.w	fp, #0
 800bf42:	f8cd b010 	str.w	fp, [sp, #16]
 800bf46:	f8cd b020 	str.w	fp, [sp, #32]
 800bf4a:	f8cd b018 	str.w	fp, [sp, #24]
 800bf4e:	2322      	movs	r3, #34	; 0x22
 800bf50:	f04f 0800 	mov.w	r8, #0
 800bf54:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c060 <_strtod_l+0x598>
 800bf58:	f8ca 3000 	str.w	r3, [sl]
 800bf5c:	9b08      	ldr	r3, [sp, #32]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f43f adf3 	beq.w	800bb4a <_strtod_l+0x82>
 800bf64:	4650      	mov	r0, sl
 800bf66:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf68:	f001 fb78 	bl	800d65c <_Bfree>
 800bf6c:	4650      	mov	r0, sl
 800bf6e:	9906      	ldr	r1, [sp, #24]
 800bf70:	f001 fb74 	bl	800d65c <_Bfree>
 800bf74:	4650      	mov	r0, sl
 800bf76:	9904      	ldr	r1, [sp, #16]
 800bf78:	f001 fb70 	bl	800d65c <_Bfree>
 800bf7c:	4650      	mov	r0, sl
 800bf7e:	9908      	ldr	r1, [sp, #32]
 800bf80:	f001 fb6c 	bl	800d65c <_Bfree>
 800bf84:	4659      	mov	r1, fp
 800bf86:	4650      	mov	r0, sl
 800bf88:	f001 fb68 	bl	800d65c <_Bfree>
 800bf8c:	e5dd      	b.n	800bb4a <_strtod_l+0x82>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	4640      	mov	r0, r8
 800bf92:	4649      	mov	r1, r9
 800bf94:	461f      	mov	r7, r3
 800bf96:	1136      	asrs	r6, r6, #4
 800bf98:	2e01      	cmp	r6, #1
 800bf9a:	dc21      	bgt.n	800bfe0 <_strtod_l+0x518>
 800bf9c:	b10b      	cbz	r3, 800bfa2 <_strtod_l+0x4da>
 800bf9e:	4680      	mov	r8, r0
 800bfa0:	4689      	mov	r9, r1
 800bfa2:	4b2e      	ldr	r3, [pc, #184]	; (800c05c <_strtod_l+0x594>)
 800bfa4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bfa8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bfac:	4642      	mov	r2, r8
 800bfae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bfb2:	464b      	mov	r3, r9
 800bfb4:	f7f9 fa9a 	bl	80054ec <__aeabi_dmul>
 800bfb8:	4b29      	ldr	r3, [pc, #164]	; (800c060 <_strtod_l+0x598>)
 800bfba:	460a      	mov	r2, r1
 800bfbc:	400b      	ands	r3, r1
 800bfbe:	4929      	ldr	r1, [pc, #164]	; (800c064 <_strtod_l+0x59c>)
 800bfc0:	4680      	mov	r8, r0
 800bfc2:	428b      	cmp	r3, r1
 800bfc4:	d8bb      	bhi.n	800bf3e <_strtod_l+0x476>
 800bfc6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bfca:	428b      	cmp	r3, r1
 800bfcc:	bf86      	itte	hi
 800bfce:	f04f 38ff 	movhi.w	r8, #4294967295
 800bfd2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800c068 <_strtod_l+0x5a0>
 800bfd6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bfda:	2300      	movs	r3, #0
 800bfdc:	9305      	str	r3, [sp, #20]
 800bfde:	e07e      	b.n	800c0de <_strtod_l+0x616>
 800bfe0:	07f2      	lsls	r2, r6, #31
 800bfe2:	d507      	bpl.n	800bff4 <_strtod_l+0x52c>
 800bfe4:	4b1d      	ldr	r3, [pc, #116]	; (800c05c <_strtod_l+0x594>)
 800bfe6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	f7f9 fa7d 	bl	80054ec <__aeabi_dmul>
 800bff2:	2301      	movs	r3, #1
 800bff4:	3701      	adds	r7, #1
 800bff6:	1076      	asrs	r6, r6, #1
 800bff8:	e7ce      	b.n	800bf98 <_strtod_l+0x4d0>
 800bffa:	d0ee      	beq.n	800bfda <_strtod_l+0x512>
 800bffc:	4276      	negs	r6, r6
 800bffe:	f016 020f 	ands.w	r2, r6, #15
 800c002:	d00a      	beq.n	800c01a <_strtod_l+0x552>
 800c004:	4b14      	ldr	r3, [pc, #80]	; (800c058 <_strtod_l+0x590>)
 800c006:	4640      	mov	r0, r8
 800c008:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c00c:	4649      	mov	r1, r9
 800c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c012:	f7f9 fb95 	bl	8005740 <__aeabi_ddiv>
 800c016:	4680      	mov	r8, r0
 800c018:	4689      	mov	r9, r1
 800c01a:	1136      	asrs	r6, r6, #4
 800c01c:	d0dd      	beq.n	800bfda <_strtod_l+0x512>
 800c01e:	2e1f      	cmp	r6, #31
 800c020:	dd24      	ble.n	800c06c <_strtod_l+0x5a4>
 800c022:	f04f 0b00 	mov.w	fp, #0
 800c026:	f8cd b010 	str.w	fp, [sp, #16]
 800c02a:	f8cd b020 	str.w	fp, [sp, #32]
 800c02e:	f8cd b018 	str.w	fp, [sp, #24]
 800c032:	2322      	movs	r3, #34	; 0x22
 800c034:	f04f 0800 	mov.w	r8, #0
 800c038:	f04f 0900 	mov.w	r9, #0
 800c03c:	f8ca 3000 	str.w	r3, [sl]
 800c040:	e78c      	b.n	800bf5c <_strtod_l+0x494>
 800c042:	bf00      	nop
 800c044:	0800ef51 	.word	0x0800ef51
 800c048:	0800ef68 	.word	0x0800ef68
 800c04c:	0800ef48 	.word	0x0800ef48
 800c050:	0800ef4b 	.word	0x0800ef4b
 800c054:	0800ee04 	.word	0x0800ee04
 800c058:	0800f238 	.word	0x0800f238
 800c05c:	0800f210 	.word	0x0800f210
 800c060:	7ff00000 	.word	0x7ff00000
 800c064:	7ca00000 	.word	0x7ca00000
 800c068:	7fefffff 	.word	0x7fefffff
 800c06c:	f016 0310 	ands.w	r3, r6, #16
 800c070:	bf18      	it	ne
 800c072:	236a      	movne	r3, #106	; 0x6a
 800c074:	4640      	mov	r0, r8
 800c076:	9305      	str	r3, [sp, #20]
 800c078:	4649      	mov	r1, r9
 800c07a:	2300      	movs	r3, #0
 800c07c:	4fb2      	ldr	r7, [pc, #712]	; (800c348 <_strtod_l+0x880>)
 800c07e:	07f2      	lsls	r2, r6, #31
 800c080:	d504      	bpl.n	800c08c <_strtod_l+0x5c4>
 800c082:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c086:	f7f9 fa31 	bl	80054ec <__aeabi_dmul>
 800c08a:	2301      	movs	r3, #1
 800c08c:	1076      	asrs	r6, r6, #1
 800c08e:	f107 0708 	add.w	r7, r7, #8
 800c092:	d1f4      	bne.n	800c07e <_strtod_l+0x5b6>
 800c094:	b10b      	cbz	r3, 800c09a <_strtod_l+0x5d2>
 800c096:	4680      	mov	r8, r0
 800c098:	4689      	mov	r9, r1
 800c09a:	9b05      	ldr	r3, [sp, #20]
 800c09c:	b1bb      	cbz	r3, 800c0ce <_strtod_l+0x606>
 800c09e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800c0a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	4649      	mov	r1, r9
 800c0aa:	dd10      	ble.n	800c0ce <_strtod_l+0x606>
 800c0ac:	2b1f      	cmp	r3, #31
 800c0ae:	f340 812b 	ble.w	800c308 <_strtod_l+0x840>
 800c0b2:	2b34      	cmp	r3, #52	; 0x34
 800c0b4:	bfd8      	it	le
 800c0b6:	f04f 32ff 	movle.w	r2, #4294967295
 800c0ba:	f04f 0800 	mov.w	r8, #0
 800c0be:	bfcf      	iteee	gt
 800c0c0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c0c4:	3b20      	suble	r3, #32
 800c0c6:	fa02 f303 	lslle.w	r3, r2, r3
 800c0ca:	ea03 0901 	andle.w	r9, r3, r1
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4640      	mov	r0, r8
 800c0d4:	4649      	mov	r1, r9
 800c0d6:	f7f9 fc71 	bl	80059bc <__aeabi_dcmpeq>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d1a1      	bne.n	800c022 <_strtod_l+0x55a>
 800c0de:	9b06      	ldr	r3, [sp, #24]
 800c0e0:	465a      	mov	r2, fp
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	4650      	mov	r0, sl
 800c0e6:	4623      	mov	r3, r4
 800c0e8:	9908      	ldr	r1, [sp, #32]
 800c0ea:	f001 fb23 	bl	800d734 <__s2b>
 800c0ee:	9008      	str	r0, [sp, #32]
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	f43f af24 	beq.w	800bf3e <_strtod_l+0x476>
 800c0f6:	9b04      	ldr	r3, [sp, #16]
 800c0f8:	f04f 0b00 	mov.w	fp, #0
 800c0fc:	1b5d      	subs	r5, r3, r5
 800c0fe:	9b07      	ldr	r3, [sp, #28]
 800c100:	f8cd b010 	str.w	fp, [sp, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	bfb4      	ite	lt
 800c108:	462b      	movlt	r3, r5
 800c10a:	2300      	movge	r3, #0
 800c10c:	930e      	str	r3, [sp, #56]	; 0x38
 800c10e:	9b07      	ldr	r3, [sp, #28]
 800c110:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c114:	9316      	str	r3, [sp, #88]	; 0x58
 800c116:	9b08      	ldr	r3, [sp, #32]
 800c118:	4650      	mov	r0, sl
 800c11a:	6859      	ldr	r1, [r3, #4]
 800c11c:	f001 fa5e 	bl	800d5dc <_Balloc>
 800c120:	9006      	str	r0, [sp, #24]
 800c122:	2800      	cmp	r0, #0
 800c124:	f43f af13 	beq.w	800bf4e <_strtod_l+0x486>
 800c128:	9b08      	ldr	r3, [sp, #32]
 800c12a:	300c      	adds	r0, #12
 800c12c:	691a      	ldr	r2, [r3, #16]
 800c12e:	f103 010c 	add.w	r1, r3, #12
 800c132:	3202      	adds	r2, #2
 800c134:	0092      	lsls	r2, r2, #2
 800c136:	f7ff fc0f 	bl	800b958 <memcpy>
 800c13a:	ab1e      	add	r3, sp, #120	; 0x78
 800c13c:	9301      	str	r3, [sp, #4]
 800c13e:	ab1d      	add	r3, sp, #116	; 0x74
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	4642      	mov	r2, r8
 800c144:	464b      	mov	r3, r9
 800c146:	4650      	mov	r0, sl
 800c148:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800c14c:	f001 fe30 	bl	800ddb0 <__d2b>
 800c150:	901c      	str	r0, [sp, #112]	; 0x70
 800c152:	2800      	cmp	r0, #0
 800c154:	f43f aefb 	beq.w	800bf4e <_strtod_l+0x486>
 800c158:	2101      	movs	r1, #1
 800c15a:	4650      	mov	r0, sl
 800c15c:	f001 fb82 	bl	800d864 <__i2b>
 800c160:	4603      	mov	r3, r0
 800c162:	9004      	str	r0, [sp, #16]
 800c164:	2800      	cmp	r0, #0
 800c166:	f43f aef2 	beq.w	800bf4e <_strtod_l+0x486>
 800c16a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c16c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c16e:	2d00      	cmp	r5, #0
 800c170:	bfab      	itete	ge
 800c172:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c174:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c176:	18ee      	addge	r6, r5, r3
 800c178:	1b5c      	sublt	r4, r3, r5
 800c17a:	9b05      	ldr	r3, [sp, #20]
 800c17c:	bfa8      	it	ge
 800c17e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800c180:	eba5 0503 	sub.w	r5, r5, r3
 800c184:	4415      	add	r5, r2
 800c186:	4b71      	ldr	r3, [pc, #452]	; (800c34c <_strtod_l+0x884>)
 800c188:	f105 35ff 	add.w	r5, r5, #4294967295
 800c18c:	bfb8      	it	lt
 800c18e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800c190:	429d      	cmp	r5, r3
 800c192:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c196:	f280 80c9 	bge.w	800c32c <_strtod_l+0x864>
 800c19a:	1b5b      	subs	r3, r3, r5
 800c19c:	2b1f      	cmp	r3, #31
 800c19e:	f04f 0701 	mov.w	r7, #1
 800c1a2:	eba2 0203 	sub.w	r2, r2, r3
 800c1a6:	f300 80b6 	bgt.w	800c316 <_strtod_l+0x84e>
 800c1aa:	2500      	movs	r5, #0
 800c1ac:	fa07 f303 	lsl.w	r3, r7, r3
 800c1b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1b2:	18b7      	adds	r7, r6, r2
 800c1b4:	9b05      	ldr	r3, [sp, #20]
 800c1b6:	42be      	cmp	r6, r7
 800c1b8:	4414      	add	r4, r2
 800c1ba:	441c      	add	r4, r3
 800c1bc:	4633      	mov	r3, r6
 800c1be:	bfa8      	it	ge
 800c1c0:	463b      	movge	r3, r7
 800c1c2:	42a3      	cmp	r3, r4
 800c1c4:	bfa8      	it	ge
 800c1c6:	4623      	movge	r3, r4
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	bfc2      	ittt	gt
 800c1cc:	1aff      	subgt	r7, r7, r3
 800c1ce:	1ae4      	subgt	r4, r4, r3
 800c1d0:	1af6      	subgt	r6, r6, r3
 800c1d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	dd17      	ble.n	800c208 <_strtod_l+0x740>
 800c1d8:	461a      	mov	r2, r3
 800c1da:	4650      	mov	r0, sl
 800c1dc:	9904      	ldr	r1, [sp, #16]
 800c1de:	f001 fbfb 	bl	800d9d8 <__pow5mult>
 800c1e2:	9004      	str	r0, [sp, #16]
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	f43f aeb2 	beq.w	800bf4e <_strtod_l+0x486>
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c1ee:	4650      	mov	r0, sl
 800c1f0:	f001 fb4e 	bl	800d890 <__multiply>
 800c1f4:	9009      	str	r0, [sp, #36]	; 0x24
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f43f aea9 	beq.w	800bf4e <_strtod_l+0x486>
 800c1fc:	4650      	mov	r0, sl
 800c1fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c200:	f001 fa2c 	bl	800d65c <_Bfree>
 800c204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c206:	931c      	str	r3, [sp, #112]	; 0x70
 800c208:	2f00      	cmp	r7, #0
 800c20a:	f300 8093 	bgt.w	800c334 <_strtod_l+0x86c>
 800c20e:	9b07      	ldr	r3, [sp, #28]
 800c210:	2b00      	cmp	r3, #0
 800c212:	dd08      	ble.n	800c226 <_strtod_l+0x75e>
 800c214:	4650      	mov	r0, sl
 800c216:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c218:	9906      	ldr	r1, [sp, #24]
 800c21a:	f001 fbdd 	bl	800d9d8 <__pow5mult>
 800c21e:	9006      	str	r0, [sp, #24]
 800c220:	2800      	cmp	r0, #0
 800c222:	f43f ae94 	beq.w	800bf4e <_strtod_l+0x486>
 800c226:	2c00      	cmp	r4, #0
 800c228:	dd08      	ble.n	800c23c <_strtod_l+0x774>
 800c22a:	4622      	mov	r2, r4
 800c22c:	4650      	mov	r0, sl
 800c22e:	9906      	ldr	r1, [sp, #24]
 800c230:	f001 fc2c 	bl	800da8c <__lshift>
 800c234:	9006      	str	r0, [sp, #24]
 800c236:	2800      	cmp	r0, #0
 800c238:	f43f ae89 	beq.w	800bf4e <_strtod_l+0x486>
 800c23c:	2e00      	cmp	r6, #0
 800c23e:	dd08      	ble.n	800c252 <_strtod_l+0x78a>
 800c240:	4632      	mov	r2, r6
 800c242:	4650      	mov	r0, sl
 800c244:	9904      	ldr	r1, [sp, #16]
 800c246:	f001 fc21 	bl	800da8c <__lshift>
 800c24a:	9004      	str	r0, [sp, #16]
 800c24c:	2800      	cmp	r0, #0
 800c24e:	f43f ae7e 	beq.w	800bf4e <_strtod_l+0x486>
 800c252:	4650      	mov	r0, sl
 800c254:	9a06      	ldr	r2, [sp, #24]
 800c256:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c258:	f001 fca0 	bl	800db9c <__mdiff>
 800c25c:	4683      	mov	fp, r0
 800c25e:	2800      	cmp	r0, #0
 800c260:	f43f ae75 	beq.w	800bf4e <_strtod_l+0x486>
 800c264:	2400      	movs	r4, #0
 800c266:	68c3      	ldr	r3, [r0, #12]
 800c268:	9904      	ldr	r1, [sp, #16]
 800c26a:	60c4      	str	r4, [r0, #12]
 800c26c:	930d      	str	r3, [sp, #52]	; 0x34
 800c26e:	f001 fc79 	bl	800db64 <__mcmp>
 800c272:	42a0      	cmp	r0, r4
 800c274:	da70      	bge.n	800c358 <_strtod_l+0x890>
 800c276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c278:	ea53 0308 	orrs.w	r3, r3, r8
 800c27c:	f040 8096 	bne.w	800c3ac <_strtod_l+0x8e4>
 800c280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c284:	2b00      	cmp	r3, #0
 800c286:	f040 8091 	bne.w	800c3ac <_strtod_l+0x8e4>
 800c28a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c28e:	0d1b      	lsrs	r3, r3, #20
 800c290:	051b      	lsls	r3, r3, #20
 800c292:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c296:	f240 8089 	bls.w	800c3ac <_strtod_l+0x8e4>
 800c29a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800c29e:	b923      	cbnz	r3, 800c2aa <_strtod_l+0x7e2>
 800c2a0:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	f340 8081 	ble.w	800c3ac <_strtod_l+0x8e4>
 800c2aa:	4659      	mov	r1, fp
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	4650      	mov	r0, sl
 800c2b0:	f001 fbec 	bl	800da8c <__lshift>
 800c2b4:	9904      	ldr	r1, [sp, #16]
 800c2b6:	4683      	mov	fp, r0
 800c2b8:	f001 fc54 	bl	800db64 <__mcmp>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	dd75      	ble.n	800c3ac <_strtod_l+0x8e4>
 800c2c0:	9905      	ldr	r1, [sp, #20]
 800c2c2:	464b      	mov	r3, r9
 800c2c4:	4a22      	ldr	r2, [pc, #136]	; (800c350 <_strtod_l+0x888>)
 800c2c6:	2900      	cmp	r1, #0
 800c2c8:	f000 8091 	beq.w	800c3ee <_strtod_l+0x926>
 800c2cc:	ea02 0109 	and.w	r1, r2, r9
 800c2d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c2d4:	f300 808b 	bgt.w	800c3ee <_strtod_l+0x926>
 800c2d8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c2dc:	f77f aea9 	ble.w	800c032 <_strtod_l+0x56a>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	4a1c      	ldr	r2, [pc, #112]	; (800c354 <_strtod_l+0x88c>)
 800c2e4:	4640      	mov	r0, r8
 800c2e6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c2ea:	4649      	mov	r1, r9
 800c2ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c2f0:	f7f9 f8fc 	bl	80054ec <__aeabi_dmul>
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	4303      	orrs	r3, r0
 800c2f8:	bf08      	it	eq
 800c2fa:	2322      	moveq	r3, #34	; 0x22
 800c2fc:	4680      	mov	r8, r0
 800c2fe:	4689      	mov	r9, r1
 800c300:	bf08      	it	eq
 800c302:	f8ca 3000 	streq.w	r3, [sl]
 800c306:	e62d      	b.n	800bf64 <_strtod_l+0x49c>
 800c308:	f04f 32ff 	mov.w	r2, #4294967295
 800c30c:	fa02 f303 	lsl.w	r3, r2, r3
 800c310:	ea03 0808 	and.w	r8, r3, r8
 800c314:	e6db      	b.n	800c0ce <_strtod_l+0x606>
 800c316:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800c31a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800c31e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800c322:	35e2      	adds	r5, #226	; 0xe2
 800c324:	fa07 f505 	lsl.w	r5, r7, r5
 800c328:	970f      	str	r7, [sp, #60]	; 0x3c
 800c32a:	e742      	b.n	800c1b2 <_strtod_l+0x6ea>
 800c32c:	2301      	movs	r3, #1
 800c32e:	2500      	movs	r5, #0
 800c330:	930f      	str	r3, [sp, #60]	; 0x3c
 800c332:	e73e      	b.n	800c1b2 <_strtod_l+0x6ea>
 800c334:	463a      	mov	r2, r7
 800c336:	4650      	mov	r0, sl
 800c338:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c33a:	f001 fba7 	bl	800da8c <__lshift>
 800c33e:	901c      	str	r0, [sp, #112]	; 0x70
 800c340:	2800      	cmp	r0, #0
 800c342:	f47f af64 	bne.w	800c20e <_strtod_l+0x746>
 800c346:	e602      	b.n	800bf4e <_strtod_l+0x486>
 800c348:	0800ef80 	.word	0x0800ef80
 800c34c:	fffffc02 	.word	0xfffffc02
 800c350:	7ff00000 	.word	0x7ff00000
 800c354:	39500000 	.word	0x39500000
 800c358:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c35c:	d166      	bne.n	800c42c <_strtod_l+0x964>
 800c35e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c364:	b35a      	cbz	r2, 800c3be <_strtod_l+0x8f6>
 800c366:	4a9c      	ldr	r2, [pc, #624]	; (800c5d8 <_strtod_l+0xb10>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d12c      	bne.n	800c3c6 <_strtod_l+0x8fe>
 800c36c:	9b05      	ldr	r3, [sp, #20]
 800c36e:	4640      	mov	r0, r8
 800c370:	b303      	cbz	r3, 800c3b4 <_strtod_l+0x8ec>
 800c372:	464b      	mov	r3, r9
 800c374:	4a99      	ldr	r2, [pc, #612]	; (800c5dc <_strtod_l+0xb14>)
 800c376:	f04f 31ff 	mov.w	r1, #4294967295
 800c37a:	401a      	ands	r2, r3
 800c37c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c380:	d81b      	bhi.n	800c3ba <_strtod_l+0x8f2>
 800c382:	0d12      	lsrs	r2, r2, #20
 800c384:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c388:	fa01 f303 	lsl.w	r3, r1, r3
 800c38c:	4298      	cmp	r0, r3
 800c38e:	d11a      	bne.n	800c3c6 <_strtod_l+0x8fe>
 800c390:	4b93      	ldr	r3, [pc, #588]	; (800c5e0 <_strtod_l+0xb18>)
 800c392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c394:	429a      	cmp	r2, r3
 800c396:	d102      	bne.n	800c39e <_strtod_l+0x8d6>
 800c398:	3001      	adds	r0, #1
 800c39a:	f43f add8 	beq.w	800bf4e <_strtod_l+0x486>
 800c39e:	f04f 0800 	mov.w	r8, #0
 800c3a2:	4b8e      	ldr	r3, [pc, #568]	; (800c5dc <_strtod_l+0xb14>)
 800c3a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3a6:	401a      	ands	r2, r3
 800c3a8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800c3ac:	9b05      	ldr	r3, [sp, #20]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d196      	bne.n	800c2e0 <_strtod_l+0x818>
 800c3b2:	e5d7      	b.n	800bf64 <_strtod_l+0x49c>
 800c3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b8:	e7e8      	b.n	800c38c <_strtod_l+0x8c4>
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	e7e6      	b.n	800c38c <_strtod_l+0x8c4>
 800c3be:	ea53 0308 	orrs.w	r3, r3, r8
 800c3c2:	f43f af7d 	beq.w	800c2c0 <_strtod_l+0x7f8>
 800c3c6:	b1e5      	cbz	r5, 800c402 <_strtod_l+0x93a>
 800c3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ca:	421d      	tst	r5, r3
 800c3cc:	d0ee      	beq.n	800c3ac <_strtod_l+0x8e4>
 800c3ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3d0:	4640      	mov	r0, r8
 800c3d2:	4649      	mov	r1, r9
 800c3d4:	9a05      	ldr	r2, [sp, #20]
 800c3d6:	b1c3      	cbz	r3, 800c40a <_strtod_l+0x942>
 800c3d8:	f7ff fb52 	bl	800ba80 <sulp>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c3e4:	f7f8 fecc 	bl	8005180 <__adddf3>
 800c3e8:	4680      	mov	r8, r0
 800c3ea:	4689      	mov	r9, r1
 800c3ec:	e7de      	b.n	800c3ac <_strtod_l+0x8e4>
 800c3ee:	4013      	ands	r3, r2
 800c3f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c3f4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c3f8:	f04f 38ff 	mov.w	r8, #4294967295
 800c3fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c400:	e7d4      	b.n	800c3ac <_strtod_l+0x8e4>
 800c402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c404:	ea13 0f08 	tst.w	r3, r8
 800c408:	e7e0      	b.n	800c3cc <_strtod_l+0x904>
 800c40a:	f7ff fb39 	bl	800ba80 <sulp>
 800c40e:	4602      	mov	r2, r0
 800c410:	460b      	mov	r3, r1
 800c412:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c416:	f7f8 feb1 	bl	800517c <__aeabi_dsub>
 800c41a:	2200      	movs	r2, #0
 800c41c:	2300      	movs	r3, #0
 800c41e:	4680      	mov	r8, r0
 800c420:	4689      	mov	r9, r1
 800c422:	f7f9 facb 	bl	80059bc <__aeabi_dcmpeq>
 800c426:	2800      	cmp	r0, #0
 800c428:	d0c0      	beq.n	800c3ac <_strtod_l+0x8e4>
 800c42a:	e602      	b.n	800c032 <_strtod_l+0x56a>
 800c42c:	4658      	mov	r0, fp
 800c42e:	9904      	ldr	r1, [sp, #16]
 800c430:	f001 fd1a 	bl	800de68 <__ratio>
 800c434:	2200      	movs	r2, #0
 800c436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c43a:	4606      	mov	r6, r0
 800c43c:	460f      	mov	r7, r1
 800c43e:	f7f9 fad1 	bl	80059e4 <__aeabi_dcmple>
 800c442:	2800      	cmp	r0, #0
 800c444:	d075      	beq.n	800c532 <_strtod_l+0xa6a>
 800c446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d047      	beq.n	800c4dc <_strtod_l+0xa14>
 800c44c:	2600      	movs	r6, #0
 800c44e:	4f65      	ldr	r7, [pc, #404]	; (800c5e4 <_strtod_l+0xb1c>)
 800c450:	4d64      	ldr	r5, [pc, #400]	; (800c5e4 <_strtod_l+0xb1c>)
 800c452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c458:	0d1b      	lsrs	r3, r3, #20
 800c45a:	051b      	lsls	r3, r3, #20
 800c45c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c45e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c460:	4b61      	ldr	r3, [pc, #388]	; (800c5e8 <_strtod_l+0xb20>)
 800c462:	429a      	cmp	r2, r3
 800c464:	f040 80c8 	bne.w	800c5f8 <_strtod_l+0xb30>
 800c468:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c46c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c472:	4640      	mov	r0, r8
 800c474:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800c478:	4649      	mov	r1, r9
 800c47a:	f001 fc1f 	bl	800dcbc <__ulp>
 800c47e:	4602      	mov	r2, r0
 800c480:	460b      	mov	r3, r1
 800c482:	4630      	mov	r0, r6
 800c484:	4639      	mov	r1, r7
 800c486:	f7f9 f831 	bl	80054ec <__aeabi_dmul>
 800c48a:	4642      	mov	r2, r8
 800c48c:	464b      	mov	r3, r9
 800c48e:	f7f8 fe77 	bl	8005180 <__adddf3>
 800c492:	460b      	mov	r3, r1
 800c494:	4951      	ldr	r1, [pc, #324]	; (800c5dc <_strtod_l+0xb14>)
 800c496:	4a55      	ldr	r2, [pc, #340]	; (800c5ec <_strtod_l+0xb24>)
 800c498:	4019      	ands	r1, r3
 800c49a:	4291      	cmp	r1, r2
 800c49c:	4680      	mov	r8, r0
 800c49e:	d95e      	bls.n	800c55e <_strtod_l+0xa96>
 800c4a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d103      	bne.n	800c4b2 <_strtod_l+0x9ea>
 800c4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	f43f ad4e 	beq.w	800bf4e <_strtod_l+0x486>
 800c4b2:	f04f 38ff 	mov.w	r8, #4294967295
 800c4b6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800c5e0 <_strtod_l+0xb18>
 800c4ba:	4650      	mov	r0, sl
 800c4bc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c4be:	f001 f8cd 	bl	800d65c <_Bfree>
 800c4c2:	4650      	mov	r0, sl
 800c4c4:	9906      	ldr	r1, [sp, #24]
 800c4c6:	f001 f8c9 	bl	800d65c <_Bfree>
 800c4ca:	4650      	mov	r0, sl
 800c4cc:	9904      	ldr	r1, [sp, #16]
 800c4ce:	f001 f8c5 	bl	800d65c <_Bfree>
 800c4d2:	4659      	mov	r1, fp
 800c4d4:	4650      	mov	r0, sl
 800c4d6:	f001 f8c1 	bl	800d65c <_Bfree>
 800c4da:	e61c      	b.n	800c116 <_strtod_l+0x64e>
 800c4dc:	f1b8 0f00 	cmp.w	r8, #0
 800c4e0:	d119      	bne.n	800c516 <_strtod_l+0xa4e>
 800c4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4e8:	b9e3      	cbnz	r3, 800c524 <_strtod_l+0xa5c>
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	4639      	mov	r1, r7
 800c4f0:	4b3c      	ldr	r3, [pc, #240]	; (800c5e4 <_strtod_l+0xb1c>)
 800c4f2:	f7f9 fa6d 	bl	80059d0 <__aeabi_dcmplt>
 800c4f6:	b9c8      	cbnz	r0, 800c52c <_strtod_l+0xa64>
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	4639      	mov	r1, r7
 800c4fe:	4b3c      	ldr	r3, [pc, #240]	; (800c5f0 <_strtod_l+0xb28>)
 800c500:	f7f8 fff4 	bl	80054ec <__aeabi_dmul>
 800c504:	4604      	mov	r4, r0
 800c506:	460d      	mov	r5, r1
 800c508:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c50c:	9418      	str	r4, [sp, #96]	; 0x60
 800c50e:	9319      	str	r3, [sp, #100]	; 0x64
 800c510:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800c514:	e79d      	b.n	800c452 <_strtod_l+0x98a>
 800c516:	f1b8 0f01 	cmp.w	r8, #1
 800c51a:	d103      	bne.n	800c524 <_strtod_l+0xa5c>
 800c51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f43f ad87 	beq.w	800c032 <_strtod_l+0x56a>
 800c524:	2600      	movs	r6, #0
 800c526:	2400      	movs	r4, #0
 800c528:	4f32      	ldr	r7, [pc, #200]	; (800c5f4 <_strtod_l+0xb2c>)
 800c52a:	e791      	b.n	800c450 <_strtod_l+0x988>
 800c52c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c52e:	4d30      	ldr	r5, [pc, #192]	; (800c5f0 <_strtod_l+0xb28>)
 800c530:	e7ea      	b.n	800c508 <_strtod_l+0xa40>
 800c532:	4b2f      	ldr	r3, [pc, #188]	; (800c5f0 <_strtod_l+0xb28>)
 800c534:	2200      	movs	r2, #0
 800c536:	4630      	mov	r0, r6
 800c538:	4639      	mov	r1, r7
 800c53a:	f7f8 ffd7 	bl	80054ec <__aeabi_dmul>
 800c53e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c540:	4604      	mov	r4, r0
 800c542:	460d      	mov	r5, r1
 800c544:	b933      	cbnz	r3, 800c554 <_strtod_l+0xa8c>
 800c546:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c54a:	9010      	str	r0, [sp, #64]	; 0x40
 800c54c:	9311      	str	r3, [sp, #68]	; 0x44
 800c54e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c552:	e77e      	b.n	800c452 <_strtod_l+0x98a>
 800c554:	4602      	mov	r2, r0
 800c556:	460b      	mov	r3, r1
 800c558:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c55c:	e7f7      	b.n	800c54e <_strtod_l+0xa86>
 800c55e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c562:	9b05      	ldr	r3, [sp, #20]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1a8      	bne.n	800c4ba <_strtod_l+0x9f2>
 800c568:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c56c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c56e:	0d1b      	lsrs	r3, r3, #20
 800c570:	051b      	lsls	r3, r3, #20
 800c572:	429a      	cmp	r2, r3
 800c574:	d1a1      	bne.n	800c4ba <_strtod_l+0x9f2>
 800c576:	4620      	mov	r0, r4
 800c578:	4629      	mov	r1, r5
 800c57a:	f7f9 fb63 	bl	8005c44 <__aeabi_d2lz>
 800c57e:	f7f8 ff87 	bl	8005490 <__aeabi_l2d>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4620      	mov	r0, r4
 800c588:	4629      	mov	r1, r5
 800c58a:	f7f8 fdf7 	bl	800517c <__aeabi_dsub>
 800c58e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c594:	ea43 0308 	orr.w	r3, r3, r8
 800c598:	4313      	orrs	r3, r2
 800c59a:	4604      	mov	r4, r0
 800c59c:	460d      	mov	r5, r1
 800c59e:	d066      	beq.n	800c66e <_strtod_l+0xba6>
 800c5a0:	a309      	add	r3, pc, #36	; (adr r3, 800c5c8 <_strtod_l+0xb00>)
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	f7f9 fa13 	bl	80059d0 <__aeabi_dcmplt>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	f47f acda 	bne.w	800bf64 <_strtod_l+0x49c>
 800c5b0:	a307      	add	r3, pc, #28	; (adr r3, 800c5d0 <_strtod_l+0xb08>)
 800c5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	f7f9 fa27 	bl	8005a0c <__aeabi_dcmpgt>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	f43f af7b 	beq.w	800c4ba <_strtod_l+0x9f2>
 800c5c4:	e4ce      	b.n	800bf64 <_strtod_l+0x49c>
 800c5c6:	bf00      	nop
 800c5c8:	94a03595 	.word	0x94a03595
 800c5cc:	3fdfffff 	.word	0x3fdfffff
 800c5d0:	35afe535 	.word	0x35afe535
 800c5d4:	3fe00000 	.word	0x3fe00000
 800c5d8:	000fffff 	.word	0x000fffff
 800c5dc:	7ff00000 	.word	0x7ff00000
 800c5e0:	7fefffff 	.word	0x7fefffff
 800c5e4:	3ff00000 	.word	0x3ff00000
 800c5e8:	7fe00000 	.word	0x7fe00000
 800c5ec:	7c9fffff 	.word	0x7c9fffff
 800c5f0:	3fe00000 	.word	0x3fe00000
 800c5f4:	bff00000 	.word	0xbff00000
 800c5f8:	9b05      	ldr	r3, [sp, #20]
 800c5fa:	b313      	cbz	r3, 800c642 <_strtod_l+0xb7a>
 800c5fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c602:	d81e      	bhi.n	800c642 <_strtod_l+0xb7a>
 800c604:	a326      	add	r3, pc, #152	; (adr r3, 800c6a0 <_strtod_l+0xbd8>)
 800c606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60a:	4620      	mov	r0, r4
 800c60c:	4629      	mov	r1, r5
 800c60e:	f7f9 f9e9 	bl	80059e4 <__aeabi_dcmple>
 800c612:	b190      	cbz	r0, 800c63a <_strtod_l+0xb72>
 800c614:	4629      	mov	r1, r5
 800c616:	4620      	mov	r0, r4
 800c618:	f7f9 fa18 	bl	8005a4c <__aeabi_d2uiz>
 800c61c:	2801      	cmp	r0, #1
 800c61e:	bf38      	it	cc
 800c620:	2001      	movcc	r0, #1
 800c622:	f7f8 fee9 	bl	80053f8 <__aeabi_ui2d>
 800c626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c628:	4604      	mov	r4, r0
 800c62a:	460d      	mov	r5, r1
 800c62c:	b9d3      	cbnz	r3, 800c664 <_strtod_l+0xb9c>
 800c62e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c632:	9012      	str	r0, [sp, #72]	; 0x48
 800c634:	9313      	str	r3, [sp, #76]	; 0x4c
 800c636:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800c63a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c63c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800c640:	1a9f      	subs	r7, r3, r2
 800c642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c646:	f001 fb39 	bl	800dcbc <__ulp>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4630      	mov	r0, r6
 800c650:	4639      	mov	r1, r7
 800c652:	f7f8 ff4b 	bl	80054ec <__aeabi_dmul>
 800c656:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c65a:	f7f8 fd91 	bl	8005180 <__adddf3>
 800c65e:	4680      	mov	r8, r0
 800c660:	4689      	mov	r9, r1
 800c662:	e77e      	b.n	800c562 <_strtod_l+0xa9a>
 800c664:	4602      	mov	r2, r0
 800c666:	460b      	mov	r3, r1
 800c668:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800c66c:	e7e3      	b.n	800c636 <_strtod_l+0xb6e>
 800c66e:	a30e      	add	r3, pc, #56	; (adr r3, 800c6a8 <_strtod_l+0xbe0>)
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	f7f9 f9ac 	bl	80059d0 <__aeabi_dcmplt>
 800c678:	e7a1      	b.n	800c5be <_strtod_l+0xaf6>
 800c67a:	2300      	movs	r3, #0
 800c67c:	930c      	str	r3, [sp, #48]	; 0x30
 800c67e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c680:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c682:	6013      	str	r3, [r2, #0]
 800c684:	f7ff ba65 	b.w	800bb52 <_strtod_l+0x8a>
 800c688:	2b65      	cmp	r3, #101	; 0x65
 800c68a:	f43f ab5c 	beq.w	800bd46 <_strtod_l+0x27e>
 800c68e:	2b45      	cmp	r3, #69	; 0x45
 800c690:	f43f ab59 	beq.w	800bd46 <_strtod_l+0x27e>
 800c694:	2201      	movs	r2, #1
 800c696:	f7ff bb8d 	b.w	800bdb4 <_strtod_l+0x2ec>
 800c69a:	bf00      	nop
 800c69c:	f3af 8000 	nop.w
 800c6a0:	ffc00000 	.word	0xffc00000
 800c6a4:	41dfffff 	.word	0x41dfffff
 800c6a8:	94a03595 	.word	0x94a03595
 800c6ac:	3fcfffff 	.word	0x3fcfffff

0800c6b0 <strtof>:
 800c6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6b4:	4f22      	ldr	r7, [pc, #136]	; (800c740 <strtof+0x90>)
 800c6b6:	460a      	mov	r2, r1
 800c6b8:	4b22      	ldr	r3, [pc, #136]	; (800c744 <strtof+0x94>)
 800c6ba:	4601      	mov	r1, r0
 800c6bc:	6838      	ldr	r0, [r7, #0]
 800c6be:	f7ff fa03 	bl	800bac8 <_strtod_l>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	f7f9 f9a9 	bl	8005a20 <__aeabi_dcmpun>
 800c6ce:	b168      	cbz	r0, 800c6ec <strtof+0x3c>
 800c6d0:	2c00      	cmp	r4, #0
 800c6d2:	481d      	ldr	r0, [pc, #116]	; (800c748 <strtof+0x98>)
 800c6d4:	da06      	bge.n	800c6e4 <strtof+0x34>
 800c6d6:	f001 fff5 	bl	800e6c4 <nanf>
 800c6da:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800c6de:	4628      	mov	r0, r5
 800c6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e8:	f001 bfec 	b.w	800e6c4 <nanf>
 800c6ec:	4621      	mov	r1, r4
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f7f9 f9cc 	bl	8005a8c <__aeabi_d2f>
 800c6f4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	4914      	ldr	r1, [pc, #80]	; (800c74c <strtof+0x9c>)
 800c6fc:	4640      	mov	r0, r8
 800c6fe:	f7f9 fa8b 	bl	8005c18 <__aeabi_fcmpun>
 800c702:	2800      	cmp	r0, #0
 800c704:	d1eb      	bne.n	800c6de <strtof+0x2e>
 800c706:	4640      	mov	r0, r8
 800c708:	4910      	ldr	r1, [pc, #64]	; (800c74c <strtof+0x9c>)
 800c70a:	f7f9 fa67 	bl	8005bdc <__aeabi_fcmple>
 800c70e:	2800      	cmp	r0, #0
 800c710:	d1e5      	bne.n	800c6de <strtof+0x2e>
 800c712:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c716:	f04f 32ff 	mov.w	r2, #4294967295
 800c71a:	4630      	mov	r0, r6
 800c71c:	4621      	mov	r1, r4
 800c71e:	4b0c      	ldr	r3, [pc, #48]	; (800c750 <strtof+0xa0>)
 800c720:	f7f9 f97e 	bl	8005a20 <__aeabi_dcmpun>
 800c724:	b940      	cbnz	r0, 800c738 <strtof+0x88>
 800c726:	f04f 32ff 	mov.w	r2, #4294967295
 800c72a:	4630      	mov	r0, r6
 800c72c:	4621      	mov	r1, r4
 800c72e:	4b08      	ldr	r3, [pc, #32]	; (800c750 <strtof+0xa0>)
 800c730:	f7f9 f958 	bl	80059e4 <__aeabi_dcmple>
 800c734:	2800      	cmp	r0, #0
 800c736:	d0d2      	beq.n	800c6de <strtof+0x2e>
 800c738:	2222      	movs	r2, #34	; 0x22
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	e7ce      	b.n	800c6de <strtof+0x2e>
 800c740:	20000194 	.word	0x20000194
 800c744:	200001fc 	.word	0x200001fc
 800c748:	0800ee04 	.word	0x0800ee04
 800c74c:	7f7fffff 	.word	0x7f7fffff
 800c750:	7fefffff 	.word	0x7fefffff

0800c754 <__strtok_r>:
 800c754:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c756:	b908      	cbnz	r0, 800c75c <__strtok_r+0x8>
 800c758:	6810      	ldr	r0, [r2, #0]
 800c75a:	b188      	cbz	r0, 800c780 <__strtok_r+0x2c>
 800c75c:	4604      	mov	r4, r0
 800c75e:	460f      	mov	r7, r1
 800c760:	4620      	mov	r0, r4
 800c762:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c766:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c76a:	b91e      	cbnz	r6, 800c774 <__strtok_r+0x20>
 800c76c:	b965      	cbnz	r5, 800c788 <__strtok_r+0x34>
 800c76e:	4628      	mov	r0, r5
 800c770:	6015      	str	r5, [r2, #0]
 800c772:	e005      	b.n	800c780 <__strtok_r+0x2c>
 800c774:	42b5      	cmp	r5, r6
 800c776:	d1f6      	bne.n	800c766 <__strtok_r+0x12>
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d1f0      	bne.n	800c75e <__strtok_r+0xa>
 800c77c:	6014      	str	r4, [r2, #0]
 800c77e:	7003      	strb	r3, [r0, #0]
 800c780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c782:	461c      	mov	r4, r3
 800c784:	e00c      	b.n	800c7a0 <__strtok_r+0x4c>
 800c786:	b915      	cbnz	r5, 800c78e <__strtok_r+0x3a>
 800c788:	460e      	mov	r6, r1
 800c78a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c78e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c792:	42ab      	cmp	r3, r5
 800c794:	d1f7      	bne.n	800c786 <__strtok_r+0x32>
 800c796:	2b00      	cmp	r3, #0
 800c798:	d0f3      	beq.n	800c782 <__strtok_r+0x2e>
 800c79a:	2300      	movs	r3, #0
 800c79c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c7a0:	6014      	str	r4, [r2, #0]
 800c7a2:	e7ed      	b.n	800c780 <__strtok_r+0x2c>

0800c7a4 <strtok_r>:
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	f7ff bfd5 	b.w	800c754 <__strtok_r>
	...

0800c7ac <_strtoul_l.isra.0>:
 800c7ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7b0:	468c      	mov	ip, r1
 800c7b2:	4686      	mov	lr, r0
 800c7b4:	4e3a      	ldr	r6, [pc, #232]	; (800c8a0 <_strtoul_l.isra.0+0xf4>)
 800c7b6:	4660      	mov	r0, ip
 800c7b8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c7bc:	5da5      	ldrb	r5, [r4, r6]
 800c7be:	f015 0508 	ands.w	r5, r5, #8
 800c7c2:	d1f8      	bne.n	800c7b6 <_strtoul_l.isra.0+0xa>
 800c7c4:	2c2d      	cmp	r4, #45	; 0x2d
 800c7c6:	d134      	bne.n	800c832 <_strtoul_l.isra.0+0x86>
 800c7c8:	f04f 0801 	mov.w	r8, #1
 800c7cc:	f89c 4000 	ldrb.w	r4, [ip]
 800c7d0:	f100 0c02 	add.w	ip, r0, #2
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d05e      	beq.n	800c896 <_strtoul_l.isra.0+0xea>
 800c7d8:	2b10      	cmp	r3, #16
 800c7da:	d10c      	bne.n	800c7f6 <_strtoul_l.isra.0+0x4a>
 800c7dc:	2c30      	cmp	r4, #48	; 0x30
 800c7de:	d10a      	bne.n	800c7f6 <_strtoul_l.isra.0+0x4a>
 800c7e0:	f89c 0000 	ldrb.w	r0, [ip]
 800c7e4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c7e8:	2858      	cmp	r0, #88	; 0x58
 800c7ea:	d14f      	bne.n	800c88c <_strtoul_l.isra.0+0xe0>
 800c7ec:	2310      	movs	r3, #16
 800c7ee:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c7f2:	f10c 0c02 	add.w	ip, ip, #2
 800c7f6:	f04f 37ff 	mov.w	r7, #4294967295
 800c7fa:	fbb7 f7f3 	udiv	r7, r7, r3
 800c7fe:	2500      	movs	r5, #0
 800c800:	fb03 f907 	mul.w	r9, r3, r7
 800c804:	4628      	mov	r0, r5
 800c806:	ea6f 0909 	mvn.w	r9, r9
 800c80a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c80e:	2e09      	cmp	r6, #9
 800c810:	d818      	bhi.n	800c844 <_strtoul_l.isra.0+0x98>
 800c812:	4634      	mov	r4, r6
 800c814:	42a3      	cmp	r3, r4
 800c816:	dd24      	ble.n	800c862 <_strtoul_l.isra.0+0xb6>
 800c818:	2d00      	cmp	r5, #0
 800c81a:	db1f      	blt.n	800c85c <_strtoul_l.isra.0+0xb0>
 800c81c:	4287      	cmp	r7, r0
 800c81e:	d31d      	bcc.n	800c85c <_strtoul_l.isra.0+0xb0>
 800c820:	d101      	bne.n	800c826 <_strtoul_l.isra.0+0x7a>
 800c822:	45a1      	cmp	r9, r4
 800c824:	db1a      	blt.n	800c85c <_strtoul_l.isra.0+0xb0>
 800c826:	2501      	movs	r5, #1
 800c828:	fb00 4003 	mla	r0, r0, r3, r4
 800c82c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c830:	e7eb      	b.n	800c80a <_strtoul_l.isra.0+0x5e>
 800c832:	2c2b      	cmp	r4, #43	; 0x2b
 800c834:	bf08      	it	eq
 800c836:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c83a:	46a8      	mov	r8, r5
 800c83c:	bf08      	it	eq
 800c83e:	f100 0c02 	addeq.w	ip, r0, #2
 800c842:	e7c7      	b.n	800c7d4 <_strtoul_l.isra.0+0x28>
 800c844:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c848:	2e19      	cmp	r6, #25
 800c84a:	d801      	bhi.n	800c850 <_strtoul_l.isra.0+0xa4>
 800c84c:	3c37      	subs	r4, #55	; 0x37
 800c84e:	e7e1      	b.n	800c814 <_strtoul_l.isra.0+0x68>
 800c850:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c854:	2e19      	cmp	r6, #25
 800c856:	d804      	bhi.n	800c862 <_strtoul_l.isra.0+0xb6>
 800c858:	3c57      	subs	r4, #87	; 0x57
 800c85a:	e7db      	b.n	800c814 <_strtoul_l.isra.0+0x68>
 800c85c:	f04f 35ff 	mov.w	r5, #4294967295
 800c860:	e7e4      	b.n	800c82c <_strtoul_l.isra.0+0x80>
 800c862:	2d00      	cmp	r5, #0
 800c864:	da07      	bge.n	800c876 <_strtoul_l.isra.0+0xca>
 800c866:	2322      	movs	r3, #34	; 0x22
 800c868:	f04f 30ff 	mov.w	r0, #4294967295
 800c86c:	f8ce 3000 	str.w	r3, [lr]
 800c870:	b942      	cbnz	r2, 800c884 <_strtoul_l.isra.0+0xd8>
 800c872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c876:	f1b8 0f00 	cmp.w	r8, #0
 800c87a:	d000      	beq.n	800c87e <_strtoul_l.isra.0+0xd2>
 800c87c:	4240      	negs	r0, r0
 800c87e:	2a00      	cmp	r2, #0
 800c880:	d0f7      	beq.n	800c872 <_strtoul_l.isra.0+0xc6>
 800c882:	b10d      	cbz	r5, 800c888 <_strtoul_l.isra.0+0xdc>
 800c884:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c888:	6011      	str	r1, [r2, #0]
 800c88a:	e7f2      	b.n	800c872 <_strtoul_l.isra.0+0xc6>
 800c88c:	2430      	movs	r4, #48	; 0x30
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1b1      	bne.n	800c7f6 <_strtoul_l.isra.0+0x4a>
 800c892:	2308      	movs	r3, #8
 800c894:	e7af      	b.n	800c7f6 <_strtoul_l.isra.0+0x4a>
 800c896:	2c30      	cmp	r4, #48	; 0x30
 800c898:	d0a2      	beq.n	800c7e0 <_strtoul_l.isra.0+0x34>
 800c89a:	230a      	movs	r3, #10
 800c89c:	e7ab      	b.n	800c7f6 <_strtoul_l.isra.0+0x4a>
 800c89e:	bf00      	nop
 800c8a0:	0800efa9 	.word	0x0800efa9

0800c8a4 <strtoul>:
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	460a      	mov	r2, r1
 800c8a8:	4601      	mov	r1, r0
 800c8aa:	4802      	ldr	r0, [pc, #8]	; (800c8b4 <strtoul+0x10>)
 800c8ac:	6800      	ldr	r0, [r0, #0]
 800c8ae:	f7ff bf7d 	b.w	800c7ac <_strtoul_l.isra.0>
 800c8b2:	bf00      	nop
 800c8b4:	20000194 	.word	0x20000194

0800c8b8 <_vsniprintf_r>:
 800c8b8:	b530      	push	{r4, r5, lr}
 800c8ba:	1e14      	subs	r4, r2, #0
 800c8bc:	4605      	mov	r5, r0
 800c8be:	b09b      	sub	sp, #108	; 0x6c
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	da05      	bge.n	800c8d0 <_vsniprintf_r+0x18>
 800c8c4:	238b      	movs	r3, #139	; 0x8b
 800c8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ca:	602b      	str	r3, [r5, #0]
 800c8cc:	b01b      	add	sp, #108	; 0x6c
 800c8ce:	bd30      	pop	{r4, r5, pc}
 800c8d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c8d4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c8d8:	bf0c      	ite	eq
 800c8da:	4623      	moveq	r3, r4
 800c8dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c8e0:	9302      	str	r3, [sp, #8]
 800c8e2:	9305      	str	r3, [sp, #20]
 800c8e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	9100      	str	r1, [sp, #0]
 800c8ec:	9104      	str	r1, [sp, #16]
 800c8ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c8f2:	4669      	mov	r1, sp
 800c8f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	f001 fc38 	bl	800e16c <_svfiprintf_r>
 800c8fc:	1c43      	adds	r3, r0, #1
 800c8fe:	bfbc      	itt	lt
 800c900:	238b      	movlt	r3, #139	; 0x8b
 800c902:	602b      	strlt	r3, [r5, #0]
 800c904:	2c00      	cmp	r4, #0
 800c906:	d0e1      	beq.n	800c8cc <_vsniprintf_r+0x14>
 800c908:	2200      	movs	r2, #0
 800c90a:	9b00      	ldr	r3, [sp, #0]
 800c90c:	701a      	strb	r2, [r3, #0]
 800c90e:	e7dd      	b.n	800c8cc <_vsniprintf_r+0x14>

0800c910 <vsniprintf>:
 800c910:	b507      	push	{r0, r1, r2, lr}
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	4613      	mov	r3, r2
 800c916:	460a      	mov	r2, r1
 800c918:	4601      	mov	r1, r0
 800c91a:	4803      	ldr	r0, [pc, #12]	; (800c928 <vsniprintf+0x18>)
 800c91c:	6800      	ldr	r0, [r0, #0]
 800c91e:	f7ff ffcb 	bl	800c8b8 <_vsniprintf_r>
 800c922:	b003      	add	sp, #12
 800c924:	f85d fb04 	ldr.w	pc, [sp], #4
 800c928:	20000194 	.word	0x20000194

0800c92c <__swbuf_r>:
 800c92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92e:	460e      	mov	r6, r1
 800c930:	4614      	mov	r4, r2
 800c932:	4605      	mov	r5, r0
 800c934:	b118      	cbz	r0, 800c93e <__swbuf_r+0x12>
 800c936:	6983      	ldr	r3, [r0, #24]
 800c938:	b90b      	cbnz	r3, 800c93e <__swbuf_r+0x12>
 800c93a:	f000 f9d1 	bl	800cce0 <__sinit>
 800c93e:	4b21      	ldr	r3, [pc, #132]	; (800c9c4 <__swbuf_r+0x98>)
 800c940:	429c      	cmp	r4, r3
 800c942:	d12b      	bne.n	800c99c <__swbuf_r+0x70>
 800c944:	686c      	ldr	r4, [r5, #4]
 800c946:	69a3      	ldr	r3, [r4, #24]
 800c948:	60a3      	str	r3, [r4, #8]
 800c94a:	89a3      	ldrh	r3, [r4, #12]
 800c94c:	071a      	lsls	r2, r3, #28
 800c94e:	d52f      	bpl.n	800c9b0 <__swbuf_r+0x84>
 800c950:	6923      	ldr	r3, [r4, #16]
 800c952:	b36b      	cbz	r3, 800c9b0 <__swbuf_r+0x84>
 800c954:	6923      	ldr	r3, [r4, #16]
 800c956:	6820      	ldr	r0, [r4, #0]
 800c958:	b2f6      	uxtb	r6, r6
 800c95a:	1ac0      	subs	r0, r0, r3
 800c95c:	6963      	ldr	r3, [r4, #20]
 800c95e:	4637      	mov	r7, r6
 800c960:	4283      	cmp	r3, r0
 800c962:	dc04      	bgt.n	800c96e <__swbuf_r+0x42>
 800c964:	4621      	mov	r1, r4
 800c966:	4628      	mov	r0, r5
 800c968:	f000 f926 	bl	800cbb8 <_fflush_r>
 800c96c:	bb30      	cbnz	r0, 800c9bc <__swbuf_r+0x90>
 800c96e:	68a3      	ldr	r3, [r4, #8]
 800c970:	3001      	adds	r0, #1
 800c972:	3b01      	subs	r3, #1
 800c974:	60a3      	str	r3, [r4, #8]
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	6022      	str	r2, [r4, #0]
 800c97c:	701e      	strb	r6, [r3, #0]
 800c97e:	6963      	ldr	r3, [r4, #20]
 800c980:	4283      	cmp	r3, r0
 800c982:	d004      	beq.n	800c98e <__swbuf_r+0x62>
 800c984:	89a3      	ldrh	r3, [r4, #12]
 800c986:	07db      	lsls	r3, r3, #31
 800c988:	d506      	bpl.n	800c998 <__swbuf_r+0x6c>
 800c98a:	2e0a      	cmp	r6, #10
 800c98c:	d104      	bne.n	800c998 <__swbuf_r+0x6c>
 800c98e:	4621      	mov	r1, r4
 800c990:	4628      	mov	r0, r5
 800c992:	f000 f911 	bl	800cbb8 <_fflush_r>
 800c996:	b988      	cbnz	r0, 800c9bc <__swbuf_r+0x90>
 800c998:	4638      	mov	r0, r7
 800c99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c99c:	4b0a      	ldr	r3, [pc, #40]	; (800c9c8 <__swbuf_r+0x9c>)
 800c99e:	429c      	cmp	r4, r3
 800c9a0:	d101      	bne.n	800c9a6 <__swbuf_r+0x7a>
 800c9a2:	68ac      	ldr	r4, [r5, #8]
 800c9a4:	e7cf      	b.n	800c946 <__swbuf_r+0x1a>
 800c9a6:	4b09      	ldr	r3, [pc, #36]	; (800c9cc <__swbuf_r+0xa0>)
 800c9a8:	429c      	cmp	r4, r3
 800c9aa:	bf08      	it	eq
 800c9ac:	68ec      	ldreq	r4, [r5, #12]
 800c9ae:	e7ca      	b.n	800c946 <__swbuf_r+0x1a>
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	f000 f80c 	bl	800c9d0 <__swsetup_r>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d0cb      	beq.n	800c954 <__swbuf_r+0x28>
 800c9bc:	f04f 37ff 	mov.w	r7, #4294967295
 800c9c0:	e7ea      	b.n	800c998 <__swbuf_r+0x6c>
 800c9c2:	bf00      	nop
 800c9c4:	0800f0cc 	.word	0x0800f0cc
 800c9c8:	0800f0ec 	.word	0x0800f0ec
 800c9cc:	0800f0ac 	.word	0x0800f0ac

0800c9d0 <__swsetup_r>:
 800c9d0:	4b32      	ldr	r3, [pc, #200]	; (800ca9c <__swsetup_r+0xcc>)
 800c9d2:	b570      	push	{r4, r5, r6, lr}
 800c9d4:	681d      	ldr	r5, [r3, #0]
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	460c      	mov	r4, r1
 800c9da:	b125      	cbz	r5, 800c9e6 <__swsetup_r+0x16>
 800c9dc:	69ab      	ldr	r3, [r5, #24]
 800c9de:	b913      	cbnz	r3, 800c9e6 <__swsetup_r+0x16>
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	f000 f97d 	bl	800cce0 <__sinit>
 800c9e6:	4b2e      	ldr	r3, [pc, #184]	; (800caa0 <__swsetup_r+0xd0>)
 800c9e8:	429c      	cmp	r4, r3
 800c9ea:	d10f      	bne.n	800ca0c <__swsetup_r+0x3c>
 800c9ec:	686c      	ldr	r4, [r5, #4]
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9f4:	0719      	lsls	r1, r3, #28
 800c9f6:	d42c      	bmi.n	800ca52 <__swsetup_r+0x82>
 800c9f8:	06dd      	lsls	r5, r3, #27
 800c9fa:	d411      	bmi.n	800ca20 <__swsetup_r+0x50>
 800c9fc:	2309      	movs	r3, #9
 800c9fe:	6033      	str	r3, [r6, #0]
 800ca00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca04:	f04f 30ff 	mov.w	r0, #4294967295
 800ca08:	81a3      	strh	r3, [r4, #12]
 800ca0a:	e03e      	b.n	800ca8a <__swsetup_r+0xba>
 800ca0c:	4b25      	ldr	r3, [pc, #148]	; (800caa4 <__swsetup_r+0xd4>)
 800ca0e:	429c      	cmp	r4, r3
 800ca10:	d101      	bne.n	800ca16 <__swsetup_r+0x46>
 800ca12:	68ac      	ldr	r4, [r5, #8]
 800ca14:	e7eb      	b.n	800c9ee <__swsetup_r+0x1e>
 800ca16:	4b24      	ldr	r3, [pc, #144]	; (800caa8 <__swsetup_r+0xd8>)
 800ca18:	429c      	cmp	r4, r3
 800ca1a:	bf08      	it	eq
 800ca1c:	68ec      	ldreq	r4, [r5, #12]
 800ca1e:	e7e6      	b.n	800c9ee <__swsetup_r+0x1e>
 800ca20:	0758      	lsls	r0, r3, #29
 800ca22:	d512      	bpl.n	800ca4a <__swsetup_r+0x7a>
 800ca24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca26:	b141      	cbz	r1, 800ca3a <__swsetup_r+0x6a>
 800ca28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca2c:	4299      	cmp	r1, r3
 800ca2e:	d002      	beq.n	800ca36 <__swsetup_r+0x66>
 800ca30:	4630      	mov	r0, r6
 800ca32:	f001 fa99 	bl	800df68 <_free_r>
 800ca36:	2300      	movs	r3, #0
 800ca38:	6363      	str	r3, [r4, #52]	; 0x34
 800ca3a:	89a3      	ldrh	r3, [r4, #12]
 800ca3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca40:	81a3      	strh	r3, [r4, #12]
 800ca42:	2300      	movs	r3, #0
 800ca44:	6063      	str	r3, [r4, #4]
 800ca46:	6923      	ldr	r3, [r4, #16]
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	f043 0308 	orr.w	r3, r3, #8
 800ca50:	81a3      	strh	r3, [r4, #12]
 800ca52:	6923      	ldr	r3, [r4, #16]
 800ca54:	b94b      	cbnz	r3, 800ca6a <__swsetup_r+0x9a>
 800ca56:	89a3      	ldrh	r3, [r4, #12]
 800ca58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca60:	d003      	beq.n	800ca6a <__swsetup_r+0x9a>
 800ca62:	4621      	mov	r1, r4
 800ca64:	4630      	mov	r0, r6
 800ca66:	f000 fd67 	bl	800d538 <__smakebuf_r>
 800ca6a:	89a0      	ldrh	r0, [r4, #12]
 800ca6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca70:	f010 0301 	ands.w	r3, r0, #1
 800ca74:	d00a      	beq.n	800ca8c <__swsetup_r+0xbc>
 800ca76:	2300      	movs	r3, #0
 800ca78:	60a3      	str	r3, [r4, #8]
 800ca7a:	6963      	ldr	r3, [r4, #20]
 800ca7c:	425b      	negs	r3, r3
 800ca7e:	61a3      	str	r3, [r4, #24]
 800ca80:	6923      	ldr	r3, [r4, #16]
 800ca82:	b943      	cbnz	r3, 800ca96 <__swsetup_r+0xc6>
 800ca84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca88:	d1ba      	bne.n	800ca00 <__swsetup_r+0x30>
 800ca8a:	bd70      	pop	{r4, r5, r6, pc}
 800ca8c:	0781      	lsls	r1, r0, #30
 800ca8e:	bf58      	it	pl
 800ca90:	6963      	ldrpl	r3, [r4, #20]
 800ca92:	60a3      	str	r3, [r4, #8]
 800ca94:	e7f4      	b.n	800ca80 <__swsetup_r+0xb0>
 800ca96:	2000      	movs	r0, #0
 800ca98:	e7f7      	b.n	800ca8a <__swsetup_r+0xba>
 800ca9a:	bf00      	nop
 800ca9c:	20000194 	.word	0x20000194
 800caa0:	0800f0cc 	.word	0x0800f0cc
 800caa4:	0800f0ec 	.word	0x0800f0ec
 800caa8:	0800f0ac 	.word	0x0800f0ac

0800caac <__sflush_r>:
 800caac:	898a      	ldrh	r2, [r1, #12]
 800caae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab2:	4605      	mov	r5, r0
 800cab4:	0710      	lsls	r0, r2, #28
 800cab6:	460c      	mov	r4, r1
 800cab8:	d458      	bmi.n	800cb6c <__sflush_r+0xc0>
 800caba:	684b      	ldr	r3, [r1, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	dc05      	bgt.n	800cacc <__sflush_r+0x20>
 800cac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	dc02      	bgt.n	800cacc <__sflush_r+0x20>
 800cac6:	2000      	movs	r0, #0
 800cac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cacc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cace:	2e00      	cmp	r6, #0
 800cad0:	d0f9      	beq.n	800cac6 <__sflush_r+0x1a>
 800cad2:	2300      	movs	r3, #0
 800cad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cad8:	682f      	ldr	r7, [r5, #0]
 800cada:	602b      	str	r3, [r5, #0]
 800cadc:	d032      	beq.n	800cb44 <__sflush_r+0x98>
 800cade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cae0:	89a3      	ldrh	r3, [r4, #12]
 800cae2:	075a      	lsls	r2, r3, #29
 800cae4:	d505      	bpl.n	800caf2 <__sflush_r+0x46>
 800cae6:	6863      	ldr	r3, [r4, #4]
 800cae8:	1ac0      	subs	r0, r0, r3
 800caea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800caec:	b10b      	cbz	r3, 800caf2 <__sflush_r+0x46>
 800caee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800caf0:	1ac0      	subs	r0, r0, r3
 800caf2:	2300      	movs	r3, #0
 800caf4:	4602      	mov	r2, r0
 800caf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caf8:	4628      	mov	r0, r5
 800cafa:	6a21      	ldr	r1, [r4, #32]
 800cafc:	47b0      	blx	r6
 800cafe:	1c43      	adds	r3, r0, #1
 800cb00:	89a3      	ldrh	r3, [r4, #12]
 800cb02:	d106      	bne.n	800cb12 <__sflush_r+0x66>
 800cb04:	6829      	ldr	r1, [r5, #0]
 800cb06:	291d      	cmp	r1, #29
 800cb08:	d82c      	bhi.n	800cb64 <__sflush_r+0xb8>
 800cb0a:	4a2a      	ldr	r2, [pc, #168]	; (800cbb4 <__sflush_r+0x108>)
 800cb0c:	40ca      	lsrs	r2, r1
 800cb0e:	07d6      	lsls	r6, r2, #31
 800cb10:	d528      	bpl.n	800cb64 <__sflush_r+0xb8>
 800cb12:	2200      	movs	r2, #0
 800cb14:	6062      	str	r2, [r4, #4]
 800cb16:	6922      	ldr	r2, [r4, #16]
 800cb18:	04d9      	lsls	r1, r3, #19
 800cb1a:	6022      	str	r2, [r4, #0]
 800cb1c:	d504      	bpl.n	800cb28 <__sflush_r+0x7c>
 800cb1e:	1c42      	adds	r2, r0, #1
 800cb20:	d101      	bne.n	800cb26 <__sflush_r+0x7a>
 800cb22:	682b      	ldr	r3, [r5, #0]
 800cb24:	b903      	cbnz	r3, 800cb28 <__sflush_r+0x7c>
 800cb26:	6560      	str	r0, [r4, #84]	; 0x54
 800cb28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb2a:	602f      	str	r7, [r5, #0]
 800cb2c:	2900      	cmp	r1, #0
 800cb2e:	d0ca      	beq.n	800cac6 <__sflush_r+0x1a>
 800cb30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb34:	4299      	cmp	r1, r3
 800cb36:	d002      	beq.n	800cb3e <__sflush_r+0x92>
 800cb38:	4628      	mov	r0, r5
 800cb3a:	f001 fa15 	bl	800df68 <_free_r>
 800cb3e:	2000      	movs	r0, #0
 800cb40:	6360      	str	r0, [r4, #52]	; 0x34
 800cb42:	e7c1      	b.n	800cac8 <__sflush_r+0x1c>
 800cb44:	6a21      	ldr	r1, [r4, #32]
 800cb46:	2301      	movs	r3, #1
 800cb48:	4628      	mov	r0, r5
 800cb4a:	47b0      	blx	r6
 800cb4c:	1c41      	adds	r1, r0, #1
 800cb4e:	d1c7      	bne.n	800cae0 <__sflush_r+0x34>
 800cb50:	682b      	ldr	r3, [r5, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d0c4      	beq.n	800cae0 <__sflush_r+0x34>
 800cb56:	2b1d      	cmp	r3, #29
 800cb58:	d001      	beq.n	800cb5e <__sflush_r+0xb2>
 800cb5a:	2b16      	cmp	r3, #22
 800cb5c:	d101      	bne.n	800cb62 <__sflush_r+0xb6>
 800cb5e:	602f      	str	r7, [r5, #0]
 800cb60:	e7b1      	b.n	800cac6 <__sflush_r+0x1a>
 800cb62:	89a3      	ldrh	r3, [r4, #12]
 800cb64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb68:	81a3      	strh	r3, [r4, #12]
 800cb6a:	e7ad      	b.n	800cac8 <__sflush_r+0x1c>
 800cb6c:	690f      	ldr	r7, [r1, #16]
 800cb6e:	2f00      	cmp	r7, #0
 800cb70:	d0a9      	beq.n	800cac6 <__sflush_r+0x1a>
 800cb72:	0793      	lsls	r3, r2, #30
 800cb74:	bf18      	it	ne
 800cb76:	2300      	movne	r3, #0
 800cb78:	680e      	ldr	r6, [r1, #0]
 800cb7a:	bf08      	it	eq
 800cb7c:	694b      	ldreq	r3, [r1, #20]
 800cb7e:	eba6 0807 	sub.w	r8, r6, r7
 800cb82:	600f      	str	r7, [r1, #0]
 800cb84:	608b      	str	r3, [r1, #8]
 800cb86:	f1b8 0f00 	cmp.w	r8, #0
 800cb8a:	dd9c      	ble.n	800cac6 <__sflush_r+0x1a>
 800cb8c:	4643      	mov	r3, r8
 800cb8e:	463a      	mov	r2, r7
 800cb90:	4628      	mov	r0, r5
 800cb92:	6a21      	ldr	r1, [r4, #32]
 800cb94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb96:	47b0      	blx	r6
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	dc06      	bgt.n	800cbaa <__sflush_r+0xfe>
 800cb9c:	89a3      	ldrh	r3, [r4, #12]
 800cb9e:	f04f 30ff 	mov.w	r0, #4294967295
 800cba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cba6:	81a3      	strh	r3, [r4, #12]
 800cba8:	e78e      	b.n	800cac8 <__sflush_r+0x1c>
 800cbaa:	4407      	add	r7, r0
 800cbac:	eba8 0800 	sub.w	r8, r8, r0
 800cbb0:	e7e9      	b.n	800cb86 <__sflush_r+0xda>
 800cbb2:	bf00      	nop
 800cbb4:	20400001 	.word	0x20400001

0800cbb8 <_fflush_r>:
 800cbb8:	b538      	push	{r3, r4, r5, lr}
 800cbba:	690b      	ldr	r3, [r1, #16]
 800cbbc:	4605      	mov	r5, r0
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	b913      	cbnz	r3, 800cbc8 <_fflush_r+0x10>
 800cbc2:	2500      	movs	r5, #0
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
 800cbc8:	b118      	cbz	r0, 800cbd2 <_fflush_r+0x1a>
 800cbca:	6983      	ldr	r3, [r0, #24]
 800cbcc:	b90b      	cbnz	r3, 800cbd2 <_fflush_r+0x1a>
 800cbce:	f000 f887 	bl	800cce0 <__sinit>
 800cbd2:	4b14      	ldr	r3, [pc, #80]	; (800cc24 <_fflush_r+0x6c>)
 800cbd4:	429c      	cmp	r4, r3
 800cbd6:	d11b      	bne.n	800cc10 <_fflush_r+0x58>
 800cbd8:	686c      	ldr	r4, [r5, #4]
 800cbda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d0ef      	beq.n	800cbc2 <_fflush_r+0xa>
 800cbe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbe4:	07d0      	lsls	r0, r2, #31
 800cbe6:	d404      	bmi.n	800cbf2 <_fflush_r+0x3a>
 800cbe8:	0599      	lsls	r1, r3, #22
 800cbea:	d402      	bmi.n	800cbf2 <_fflush_r+0x3a>
 800cbec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbee:	f000 fc7c 	bl	800d4ea <__retarget_lock_acquire_recursive>
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	f7ff ff59 	bl	800caac <__sflush_r>
 800cbfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	07da      	lsls	r2, r3, #31
 800cc00:	d4e0      	bmi.n	800cbc4 <_fflush_r+0xc>
 800cc02:	89a3      	ldrh	r3, [r4, #12]
 800cc04:	059b      	lsls	r3, r3, #22
 800cc06:	d4dd      	bmi.n	800cbc4 <_fflush_r+0xc>
 800cc08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc0a:	f000 fc6f 	bl	800d4ec <__retarget_lock_release_recursive>
 800cc0e:	e7d9      	b.n	800cbc4 <_fflush_r+0xc>
 800cc10:	4b05      	ldr	r3, [pc, #20]	; (800cc28 <_fflush_r+0x70>)
 800cc12:	429c      	cmp	r4, r3
 800cc14:	d101      	bne.n	800cc1a <_fflush_r+0x62>
 800cc16:	68ac      	ldr	r4, [r5, #8]
 800cc18:	e7df      	b.n	800cbda <_fflush_r+0x22>
 800cc1a:	4b04      	ldr	r3, [pc, #16]	; (800cc2c <_fflush_r+0x74>)
 800cc1c:	429c      	cmp	r4, r3
 800cc1e:	bf08      	it	eq
 800cc20:	68ec      	ldreq	r4, [r5, #12]
 800cc22:	e7da      	b.n	800cbda <_fflush_r+0x22>
 800cc24:	0800f0cc 	.word	0x0800f0cc
 800cc28:	0800f0ec 	.word	0x0800f0ec
 800cc2c:	0800f0ac 	.word	0x0800f0ac

0800cc30 <std>:
 800cc30:	2300      	movs	r3, #0
 800cc32:	b510      	push	{r4, lr}
 800cc34:	4604      	mov	r4, r0
 800cc36:	e9c0 3300 	strd	r3, r3, [r0]
 800cc3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc3e:	6083      	str	r3, [r0, #8]
 800cc40:	8181      	strh	r1, [r0, #12]
 800cc42:	6643      	str	r3, [r0, #100]	; 0x64
 800cc44:	81c2      	strh	r2, [r0, #14]
 800cc46:	6183      	str	r3, [r0, #24]
 800cc48:	4619      	mov	r1, r3
 800cc4a:	2208      	movs	r2, #8
 800cc4c:	305c      	adds	r0, #92	; 0x5c
 800cc4e:	f7fe fe91 	bl	800b974 <memset>
 800cc52:	4b05      	ldr	r3, [pc, #20]	; (800cc68 <std+0x38>)
 800cc54:	6224      	str	r4, [r4, #32]
 800cc56:	6263      	str	r3, [r4, #36]	; 0x24
 800cc58:	4b04      	ldr	r3, [pc, #16]	; (800cc6c <std+0x3c>)
 800cc5a:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc5c:	4b04      	ldr	r3, [pc, #16]	; (800cc70 <std+0x40>)
 800cc5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc60:	4b04      	ldr	r3, [pc, #16]	; (800cc74 <std+0x44>)
 800cc62:	6323      	str	r3, [r4, #48]	; 0x30
 800cc64:	bd10      	pop	{r4, pc}
 800cc66:	bf00      	nop
 800cc68:	0800e6cd 	.word	0x0800e6cd
 800cc6c:	0800e6ef 	.word	0x0800e6ef
 800cc70:	0800e727 	.word	0x0800e727
 800cc74:	0800e74b 	.word	0x0800e74b

0800cc78 <_cleanup_r>:
 800cc78:	4901      	ldr	r1, [pc, #4]	; (800cc80 <_cleanup_r+0x8>)
 800cc7a:	f000 b8af 	b.w	800cddc <_fwalk_reent>
 800cc7e:	bf00      	nop
 800cc80:	0800cbb9 	.word	0x0800cbb9

0800cc84 <__sfmoreglue>:
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	2568      	movs	r5, #104	; 0x68
 800cc88:	1e4a      	subs	r2, r1, #1
 800cc8a:	4355      	muls	r5, r2
 800cc8c:	460e      	mov	r6, r1
 800cc8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc92:	f001 f9b5 	bl	800e000 <_malloc_r>
 800cc96:	4604      	mov	r4, r0
 800cc98:	b140      	cbz	r0, 800ccac <__sfmoreglue+0x28>
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	e9c0 1600 	strd	r1, r6, [r0]
 800cca0:	300c      	adds	r0, #12
 800cca2:	60a0      	str	r0, [r4, #8]
 800cca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cca8:	f7fe fe64 	bl	800b974 <memset>
 800ccac:	4620      	mov	r0, r4
 800ccae:	bd70      	pop	{r4, r5, r6, pc}

0800ccb0 <__sfp_lock_acquire>:
 800ccb0:	4801      	ldr	r0, [pc, #4]	; (800ccb8 <__sfp_lock_acquire+0x8>)
 800ccb2:	f000 bc1a 	b.w	800d4ea <__retarget_lock_acquire_recursive>
 800ccb6:	bf00      	nop
 800ccb8:	20003a28 	.word	0x20003a28

0800ccbc <__sfp_lock_release>:
 800ccbc:	4801      	ldr	r0, [pc, #4]	; (800ccc4 <__sfp_lock_release+0x8>)
 800ccbe:	f000 bc15 	b.w	800d4ec <__retarget_lock_release_recursive>
 800ccc2:	bf00      	nop
 800ccc4:	20003a28 	.word	0x20003a28

0800ccc8 <__sinit_lock_acquire>:
 800ccc8:	4801      	ldr	r0, [pc, #4]	; (800ccd0 <__sinit_lock_acquire+0x8>)
 800ccca:	f000 bc0e 	b.w	800d4ea <__retarget_lock_acquire_recursive>
 800ccce:	bf00      	nop
 800ccd0:	20003a23 	.word	0x20003a23

0800ccd4 <__sinit_lock_release>:
 800ccd4:	4801      	ldr	r0, [pc, #4]	; (800ccdc <__sinit_lock_release+0x8>)
 800ccd6:	f000 bc09 	b.w	800d4ec <__retarget_lock_release_recursive>
 800ccda:	bf00      	nop
 800ccdc:	20003a23 	.word	0x20003a23

0800cce0 <__sinit>:
 800cce0:	b510      	push	{r4, lr}
 800cce2:	4604      	mov	r4, r0
 800cce4:	f7ff fff0 	bl	800ccc8 <__sinit_lock_acquire>
 800cce8:	69a3      	ldr	r3, [r4, #24]
 800ccea:	b11b      	cbz	r3, 800ccf4 <__sinit+0x14>
 800ccec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccf0:	f7ff bff0 	b.w	800ccd4 <__sinit_lock_release>
 800ccf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ccf8:	6523      	str	r3, [r4, #80]	; 0x50
 800ccfa:	4b13      	ldr	r3, [pc, #76]	; (800cd48 <__sinit+0x68>)
 800ccfc:	4a13      	ldr	r2, [pc, #76]	; (800cd4c <__sinit+0x6c>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd02:	42a3      	cmp	r3, r4
 800cd04:	bf08      	it	eq
 800cd06:	2301      	moveq	r3, #1
 800cd08:	4620      	mov	r0, r4
 800cd0a:	bf08      	it	eq
 800cd0c:	61a3      	streq	r3, [r4, #24]
 800cd0e:	f000 f81f 	bl	800cd50 <__sfp>
 800cd12:	6060      	str	r0, [r4, #4]
 800cd14:	4620      	mov	r0, r4
 800cd16:	f000 f81b 	bl	800cd50 <__sfp>
 800cd1a:	60a0      	str	r0, [r4, #8]
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f000 f817 	bl	800cd50 <__sfp>
 800cd22:	2200      	movs	r2, #0
 800cd24:	2104      	movs	r1, #4
 800cd26:	60e0      	str	r0, [r4, #12]
 800cd28:	6860      	ldr	r0, [r4, #4]
 800cd2a:	f7ff ff81 	bl	800cc30 <std>
 800cd2e:	2201      	movs	r2, #1
 800cd30:	2109      	movs	r1, #9
 800cd32:	68a0      	ldr	r0, [r4, #8]
 800cd34:	f7ff ff7c 	bl	800cc30 <std>
 800cd38:	2202      	movs	r2, #2
 800cd3a:	2112      	movs	r1, #18
 800cd3c:	68e0      	ldr	r0, [r4, #12]
 800cd3e:	f7ff ff77 	bl	800cc30 <std>
 800cd42:	2301      	movs	r3, #1
 800cd44:	61a3      	str	r3, [r4, #24]
 800cd46:	e7d1      	b.n	800ccec <__sinit+0xc>
 800cd48:	0800ef44 	.word	0x0800ef44
 800cd4c:	0800cc79 	.word	0x0800cc79

0800cd50 <__sfp>:
 800cd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd52:	4607      	mov	r7, r0
 800cd54:	f7ff ffac 	bl	800ccb0 <__sfp_lock_acquire>
 800cd58:	4b1e      	ldr	r3, [pc, #120]	; (800cdd4 <__sfp+0x84>)
 800cd5a:	681e      	ldr	r6, [r3, #0]
 800cd5c:	69b3      	ldr	r3, [r6, #24]
 800cd5e:	b913      	cbnz	r3, 800cd66 <__sfp+0x16>
 800cd60:	4630      	mov	r0, r6
 800cd62:	f7ff ffbd 	bl	800cce0 <__sinit>
 800cd66:	3648      	adds	r6, #72	; 0x48
 800cd68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	d503      	bpl.n	800cd78 <__sfp+0x28>
 800cd70:	6833      	ldr	r3, [r6, #0]
 800cd72:	b30b      	cbz	r3, 800cdb8 <__sfp+0x68>
 800cd74:	6836      	ldr	r6, [r6, #0]
 800cd76:	e7f7      	b.n	800cd68 <__sfp+0x18>
 800cd78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd7c:	b9d5      	cbnz	r5, 800cdb4 <__sfp+0x64>
 800cd7e:	4b16      	ldr	r3, [pc, #88]	; (800cdd8 <__sfp+0x88>)
 800cd80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd84:	60e3      	str	r3, [r4, #12]
 800cd86:	6665      	str	r5, [r4, #100]	; 0x64
 800cd88:	f000 fbae 	bl	800d4e8 <__retarget_lock_init_recursive>
 800cd8c:	f7ff ff96 	bl	800ccbc <__sfp_lock_release>
 800cd90:	2208      	movs	r2, #8
 800cd92:	4629      	mov	r1, r5
 800cd94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd9c:	6025      	str	r5, [r4, #0]
 800cd9e:	61a5      	str	r5, [r4, #24]
 800cda0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cda4:	f7fe fde6 	bl	800b974 <memset>
 800cda8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cdac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdb4:	3468      	adds	r4, #104	; 0x68
 800cdb6:	e7d9      	b.n	800cd6c <__sfp+0x1c>
 800cdb8:	2104      	movs	r1, #4
 800cdba:	4638      	mov	r0, r7
 800cdbc:	f7ff ff62 	bl	800cc84 <__sfmoreglue>
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	6030      	str	r0, [r6, #0]
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	d1d5      	bne.n	800cd74 <__sfp+0x24>
 800cdc8:	f7ff ff78 	bl	800ccbc <__sfp_lock_release>
 800cdcc:	230c      	movs	r3, #12
 800cdce:	603b      	str	r3, [r7, #0]
 800cdd0:	e7ee      	b.n	800cdb0 <__sfp+0x60>
 800cdd2:	bf00      	nop
 800cdd4:	0800ef44 	.word	0x0800ef44
 800cdd8:	ffff0001 	.word	0xffff0001

0800cddc <_fwalk_reent>:
 800cddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cde0:	4606      	mov	r6, r0
 800cde2:	4688      	mov	r8, r1
 800cde4:	2700      	movs	r7, #0
 800cde6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cdea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdee:	f1b9 0901 	subs.w	r9, r9, #1
 800cdf2:	d505      	bpl.n	800ce00 <_fwalk_reent+0x24>
 800cdf4:	6824      	ldr	r4, [r4, #0]
 800cdf6:	2c00      	cmp	r4, #0
 800cdf8:	d1f7      	bne.n	800cdea <_fwalk_reent+0xe>
 800cdfa:	4638      	mov	r0, r7
 800cdfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce00:	89ab      	ldrh	r3, [r5, #12]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d907      	bls.n	800ce16 <_fwalk_reent+0x3a>
 800ce06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	d003      	beq.n	800ce16 <_fwalk_reent+0x3a>
 800ce0e:	4629      	mov	r1, r5
 800ce10:	4630      	mov	r0, r6
 800ce12:	47c0      	blx	r8
 800ce14:	4307      	orrs	r7, r0
 800ce16:	3568      	adds	r5, #104	; 0x68
 800ce18:	e7e9      	b.n	800cdee <_fwalk_reent+0x12>

0800ce1a <rshift>:
 800ce1a:	6903      	ldr	r3, [r0, #16]
 800ce1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce20:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce24:	f100 0414 	add.w	r4, r0, #20
 800ce28:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce2c:	dd46      	ble.n	800cebc <rshift+0xa2>
 800ce2e:	f011 011f 	ands.w	r1, r1, #31
 800ce32:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce36:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce3a:	d10c      	bne.n	800ce56 <rshift+0x3c>
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	f100 0710 	add.w	r7, r0, #16
 800ce42:	42b1      	cmp	r1, r6
 800ce44:	d335      	bcc.n	800ceb2 <rshift+0x98>
 800ce46:	1a9b      	subs	r3, r3, r2
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	1eea      	subs	r2, r5, #3
 800ce4c:	4296      	cmp	r6, r2
 800ce4e:	bf38      	it	cc
 800ce50:	2300      	movcc	r3, #0
 800ce52:	4423      	add	r3, r4
 800ce54:	e015      	b.n	800ce82 <rshift+0x68>
 800ce56:	46a1      	mov	r9, r4
 800ce58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce5c:	f1c1 0820 	rsb	r8, r1, #32
 800ce60:	40cf      	lsrs	r7, r1
 800ce62:	f105 0e04 	add.w	lr, r5, #4
 800ce66:	4576      	cmp	r6, lr
 800ce68:	46f4      	mov	ip, lr
 800ce6a:	d816      	bhi.n	800ce9a <rshift+0x80>
 800ce6c:	1a9b      	subs	r3, r3, r2
 800ce6e:	009a      	lsls	r2, r3, #2
 800ce70:	3a04      	subs	r2, #4
 800ce72:	3501      	adds	r5, #1
 800ce74:	42ae      	cmp	r6, r5
 800ce76:	bf38      	it	cc
 800ce78:	2200      	movcc	r2, #0
 800ce7a:	18a3      	adds	r3, r4, r2
 800ce7c:	50a7      	str	r7, [r4, r2]
 800ce7e:	b107      	cbz	r7, 800ce82 <rshift+0x68>
 800ce80:	3304      	adds	r3, #4
 800ce82:	42a3      	cmp	r3, r4
 800ce84:	eba3 0204 	sub.w	r2, r3, r4
 800ce88:	bf08      	it	eq
 800ce8a:	2300      	moveq	r3, #0
 800ce8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce90:	6102      	str	r2, [r0, #16]
 800ce92:	bf08      	it	eq
 800ce94:	6143      	streq	r3, [r0, #20]
 800ce96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce9a:	f8dc c000 	ldr.w	ip, [ip]
 800ce9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800cea2:	ea4c 0707 	orr.w	r7, ip, r7
 800cea6:	f849 7b04 	str.w	r7, [r9], #4
 800ceaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ceae:	40cf      	lsrs	r7, r1
 800ceb0:	e7d9      	b.n	800ce66 <rshift+0x4c>
 800ceb2:	f851 cb04 	ldr.w	ip, [r1], #4
 800ceb6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ceba:	e7c2      	b.n	800ce42 <rshift+0x28>
 800cebc:	4623      	mov	r3, r4
 800cebe:	e7e0      	b.n	800ce82 <rshift+0x68>

0800cec0 <__hexdig_fun>:
 800cec0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cec4:	2b09      	cmp	r3, #9
 800cec6:	d802      	bhi.n	800cece <__hexdig_fun+0xe>
 800cec8:	3820      	subs	r0, #32
 800ceca:	b2c0      	uxtb	r0, r0
 800cecc:	4770      	bx	lr
 800cece:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ced2:	2b05      	cmp	r3, #5
 800ced4:	d801      	bhi.n	800ceda <__hexdig_fun+0x1a>
 800ced6:	3847      	subs	r0, #71	; 0x47
 800ced8:	e7f7      	b.n	800ceca <__hexdig_fun+0xa>
 800ceda:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cede:	2b05      	cmp	r3, #5
 800cee0:	d801      	bhi.n	800cee6 <__hexdig_fun+0x26>
 800cee2:	3827      	subs	r0, #39	; 0x27
 800cee4:	e7f1      	b.n	800ceca <__hexdig_fun+0xa>
 800cee6:	2000      	movs	r0, #0
 800cee8:	4770      	bx	lr
	...

0800ceec <__gethex>:
 800ceec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef0:	b08b      	sub	sp, #44	; 0x2c
 800cef2:	9306      	str	r3, [sp, #24]
 800cef4:	4bb9      	ldr	r3, [pc, #740]	; (800d1dc <__gethex+0x2f0>)
 800cef6:	9002      	str	r0, [sp, #8]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	468b      	mov	fp, r1
 800cefc:	4618      	mov	r0, r3
 800cefe:	4690      	mov	r8, r2
 800cf00:	9303      	str	r3, [sp, #12]
 800cf02:	f7f8 f92f 	bl	8005164 <strlen>
 800cf06:	4682      	mov	sl, r0
 800cf08:	9b03      	ldr	r3, [sp, #12]
 800cf0a:	f8db 2000 	ldr.w	r2, [fp]
 800cf0e:	4403      	add	r3, r0
 800cf10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cf14:	9307      	str	r3, [sp, #28]
 800cf16:	1c93      	adds	r3, r2, #2
 800cf18:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cf1c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cf20:	32fe      	adds	r2, #254	; 0xfe
 800cf22:	18d1      	adds	r1, r2, r3
 800cf24:	461f      	mov	r7, r3
 800cf26:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cf2a:	9101      	str	r1, [sp, #4]
 800cf2c:	2830      	cmp	r0, #48	; 0x30
 800cf2e:	d0f8      	beq.n	800cf22 <__gethex+0x36>
 800cf30:	f7ff ffc6 	bl	800cec0 <__hexdig_fun>
 800cf34:	4604      	mov	r4, r0
 800cf36:	2800      	cmp	r0, #0
 800cf38:	d13a      	bne.n	800cfb0 <__gethex+0xc4>
 800cf3a:	4652      	mov	r2, sl
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	9903      	ldr	r1, [sp, #12]
 800cf40:	f001 fc07 	bl	800e752 <strncmp>
 800cf44:	4605      	mov	r5, r0
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d166      	bne.n	800d018 <__gethex+0x12c>
 800cf4a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cf4e:	eb07 060a 	add.w	r6, r7, sl
 800cf52:	f7ff ffb5 	bl	800cec0 <__hexdig_fun>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d060      	beq.n	800d01c <__gethex+0x130>
 800cf5a:	4633      	mov	r3, r6
 800cf5c:	7818      	ldrb	r0, [r3, #0]
 800cf5e:	461f      	mov	r7, r3
 800cf60:	2830      	cmp	r0, #48	; 0x30
 800cf62:	f103 0301 	add.w	r3, r3, #1
 800cf66:	d0f9      	beq.n	800cf5c <__gethex+0x70>
 800cf68:	f7ff ffaa 	bl	800cec0 <__hexdig_fun>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	fab0 f480 	clz	r4, r0
 800cf72:	4635      	mov	r5, r6
 800cf74:	0964      	lsrs	r4, r4, #5
 800cf76:	9301      	str	r3, [sp, #4]
 800cf78:	463a      	mov	r2, r7
 800cf7a:	4616      	mov	r6, r2
 800cf7c:	7830      	ldrb	r0, [r6, #0]
 800cf7e:	3201      	adds	r2, #1
 800cf80:	f7ff ff9e 	bl	800cec0 <__hexdig_fun>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d1f8      	bne.n	800cf7a <__gethex+0x8e>
 800cf88:	4652      	mov	r2, sl
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	9903      	ldr	r1, [sp, #12]
 800cf8e:	f001 fbe0 	bl	800e752 <strncmp>
 800cf92:	b980      	cbnz	r0, 800cfb6 <__gethex+0xca>
 800cf94:	b94d      	cbnz	r5, 800cfaa <__gethex+0xbe>
 800cf96:	eb06 050a 	add.w	r5, r6, sl
 800cf9a:	462a      	mov	r2, r5
 800cf9c:	4616      	mov	r6, r2
 800cf9e:	7830      	ldrb	r0, [r6, #0]
 800cfa0:	3201      	adds	r2, #1
 800cfa2:	f7ff ff8d 	bl	800cec0 <__hexdig_fun>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d1f8      	bne.n	800cf9c <__gethex+0xb0>
 800cfaa:	1bad      	subs	r5, r5, r6
 800cfac:	00ad      	lsls	r5, r5, #2
 800cfae:	e004      	b.n	800cfba <__gethex+0xce>
 800cfb0:	2400      	movs	r4, #0
 800cfb2:	4625      	mov	r5, r4
 800cfb4:	e7e0      	b.n	800cf78 <__gethex+0x8c>
 800cfb6:	2d00      	cmp	r5, #0
 800cfb8:	d1f7      	bne.n	800cfaa <__gethex+0xbe>
 800cfba:	7833      	ldrb	r3, [r6, #0]
 800cfbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cfc0:	2b50      	cmp	r3, #80	; 0x50
 800cfc2:	d139      	bne.n	800d038 <__gethex+0x14c>
 800cfc4:	7873      	ldrb	r3, [r6, #1]
 800cfc6:	2b2b      	cmp	r3, #43	; 0x2b
 800cfc8:	d02a      	beq.n	800d020 <__gethex+0x134>
 800cfca:	2b2d      	cmp	r3, #45	; 0x2d
 800cfcc:	d02c      	beq.n	800d028 <__gethex+0x13c>
 800cfce:	f04f 0900 	mov.w	r9, #0
 800cfd2:	1c71      	adds	r1, r6, #1
 800cfd4:	7808      	ldrb	r0, [r1, #0]
 800cfd6:	f7ff ff73 	bl	800cec0 <__hexdig_fun>
 800cfda:	1e43      	subs	r3, r0, #1
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	2b18      	cmp	r3, #24
 800cfe0:	d82a      	bhi.n	800d038 <__gethex+0x14c>
 800cfe2:	f1a0 0210 	sub.w	r2, r0, #16
 800cfe6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cfea:	f7ff ff69 	bl	800cec0 <__hexdig_fun>
 800cfee:	1e43      	subs	r3, r0, #1
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	2b18      	cmp	r3, #24
 800cff4:	d91b      	bls.n	800d02e <__gethex+0x142>
 800cff6:	f1b9 0f00 	cmp.w	r9, #0
 800cffa:	d000      	beq.n	800cffe <__gethex+0x112>
 800cffc:	4252      	negs	r2, r2
 800cffe:	4415      	add	r5, r2
 800d000:	f8cb 1000 	str.w	r1, [fp]
 800d004:	b1d4      	cbz	r4, 800d03c <__gethex+0x150>
 800d006:	9b01      	ldr	r3, [sp, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	bf14      	ite	ne
 800d00c:	2700      	movne	r7, #0
 800d00e:	2706      	moveq	r7, #6
 800d010:	4638      	mov	r0, r7
 800d012:	b00b      	add	sp, #44	; 0x2c
 800d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d018:	463e      	mov	r6, r7
 800d01a:	4625      	mov	r5, r4
 800d01c:	2401      	movs	r4, #1
 800d01e:	e7cc      	b.n	800cfba <__gethex+0xce>
 800d020:	f04f 0900 	mov.w	r9, #0
 800d024:	1cb1      	adds	r1, r6, #2
 800d026:	e7d5      	b.n	800cfd4 <__gethex+0xe8>
 800d028:	f04f 0901 	mov.w	r9, #1
 800d02c:	e7fa      	b.n	800d024 <__gethex+0x138>
 800d02e:	230a      	movs	r3, #10
 800d030:	fb03 0202 	mla	r2, r3, r2, r0
 800d034:	3a10      	subs	r2, #16
 800d036:	e7d6      	b.n	800cfe6 <__gethex+0xfa>
 800d038:	4631      	mov	r1, r6
 800d03a:	e7e1      	b.n	800d000 <__gethex+0x114>
 800d03c:	4621      	mov	r1, r4
 800d03e:	1bf3      	subs	r3, r6, r7
 800d040:	3b01      	subs	r3, #1
 800d042:	2b07      	cmp	r3, #7
 800d044:	dc0a      	bgt.n	800d05c <__gethex+0x170>
 800d046:	9802      	ldr	r0, [sp, #8]
 800d048:	f000 fac8 	bl	800d5dc <_Balloc>
 800d04c:	4604      	mov	r4, r0
 800d04e:	b940      	cbnz	r0, 800d062 <__gethex+0x176>
 800d050:	4602      	mov	r2, r0
 800d052:	21de      	movs	r1, #222	; 0xde
 800d054:	4b62      	ldr	r3, [pc, #392]	; (800d1e0 <__gethex+0x2f4>)
 800d056:	4863      	ldr	r0, [pc, #396]	; (800d1e4 <__gethex+0x2f8>)
 800d058:	f001 fbac 	bl	800e7b4 <__assert_func>
 800d05c:	3101      	adds	r1, #1
 800d05e:	105b      	asrs	r3, r3, #1
 800d060:	e7ef      	b.n	800d042 <__gethex+0x156>
 800d062:	f04f 0b00 	mov.w	fp, #0
 800d066:	f100 0914 	add.w	r9, r0, #20
 800d06a:	f1ca 0301 	rsb	r3, sl, #1
 800d06e:	f8cd 9010 	str.w	r9, [sp, #16]
 800d072:	f8cd b004 	str.w	fp, [sp, #4]
 800d076:	9308      	str	r3, [sp, #32]
 800d078:	42b7      	cmp	r7, r6
 800d07a:	d33f      	bcc.n	800d0fc <__gethex+0x210>
 800d07c:	9f04      	ldr	r7, [sp, #16]
 800d07e:	9b01      	ldr	r3, [sp, #4]
 800d080:	f847 3b04 	str.w	r3, [r7], #4
 800d084:	eba7 0709 	sub.w	r7, r7, r9
 800d088:	10bf      	asrs	r7, r7, #2
 800d08a:	6127      	str	r7, [r4, #16]
 800d08c:	4618      	mov	r0, r3
 800d08e:	f000 fb9b 	bl	800d7c8 <__hi0bits>
 800d092:	017f      	lsls	r7, r7, #5
 800d094:	f8d8 6000 	ldr.w	r6, [r8]
 800d098:	1a3f      	subs	r7, r7, r0
 800d09a:	42b7      	cmp	r7, r6
 800d09c:	dd62      	ble.n	800d164 <__gethex+0x278>
 800d09e:	1bbf      	subs	r7, r7, r6
 800d0a0:	4639      	mov	r1, r7
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f000 ff31 	bl	800df0a <__any_on>
 800d0a8:	4682      	mov	sl, r0
 800d0aa:	b1a8      	cbz	r0, 800d0d8 <__gethex+0x1ec>
 800d0ac:	f04f 0a01 	mov.w	sl, #1
 800d0b0:	1e7b      	subs	r3, r7, #1
 800d0b2:	1159      	asrs	r1, r3, #5
 800d0b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d0b8:	f003 021f 	and.w	r2, r3, #31
 800d0bc:	fa0a f202 	lsl.w	r2, sl, r2
 800d0c0:	420a      	tst	r2, r1
 800d0c2:	d009      	beq.n	800d0d8 <__gethex+0x1ec>
 800d0c4:	4553      	cmp	r3, sl
 800d0c6:	dd05      	ble.n	800d0d4 <__gethex+0x1e8>
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	1eb9      	subs	r1, r7, #2
 800d0cc:	f000 ff1d 	bl	800df0a <__any_on>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d144      	bne.n	800d15e <__gethex+0x272>
 800d0d4:	f04f 0a02 	mov.w	sl, #2
 800d0d8:	4639      	mov	r1, r7
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f7ff fe9d 	bl	800ce1a <rshift>
 800d0e0:	443d      	add	r5, r7
 800d0e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0e6:	42ab      	cmp	r3, r5
 800d0e8:	da4a      	bge.n	800d180 <__gethex+0x294>
 800d0ea:	4621      	mov	r1, r4
 800d0ec:	9802      	ldr	r0, [sp, #8]
 800d0ee:	f000 fab5 	bl	800d65c <_Bfree>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d0f6:	27a3      	movs	r7, #163	; 0xa3
 800d0f8:	6013      	str	r3, [r2, #0]
 800d0fa:	e789      	b.n	800d010 <__gethex+0x124>
 800d0fc:	1e73      	subs	r3, r6, #1
 800d0fe:	9a07      	ldr	r2, [sp, #28]
 800d100:	9305      	str	r3, [sp, #20]
 800d102:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d106:	4293      	cmp	r3, r2
 800d108:	d019      	beq.n	800d13e <__gethex+0x252>
 800d10a:	f1bb 0f20 	cmp.w	fp, #32
 800d10e:	d107      	bne.n	800d120 <__gethex+0x234>
 800d110:	9b04      	ldr	r3, [sp, #16]
 800d112:	9a01      	ldr	r2, [sp, #4]
 800d114:	f843 2b04 	str.w	r2, [r3], #4
 800d118:	9304      	str	r3, [sp, #16]
 800d11a:	2300      	movs	r3, #0
 800d11c:	469b      	mov	fp, r3
 800d11e:	9301      	str	r3, [sp, #4]
 800d120:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d124:	f7ff fecc 	bl	800cec0 <__hexdig_fun>
 800d128:	9b01      	ldr	r3, [sp, #4]
 800d12a:	f000 000f 	and.w	r0, r0, #15
 800d12e:	fa00 f00b 	lsl.w	r0, r0, fp
 800d132:	4303      	orrs	r3, r0
 800d134:	9301      	str	r3, [sp, #4]
 800d136:	f10b 0b04 	add.w	fp, fp, #4
 800d13a:	9b05      	ldr	r3, [sp, #20]
 800d13c:	e00d      	b.n	800d15a <__gethex+0x26e>
 800d13e:	9b05      	ldr	r3, [sp, #20]
 800d140:	9a08      	ldr	r2, [sp, #32]
 800d142:	4413      	add	r3, r2
 800d144:	42bb      	cmp	r3, r7
 800d146:	d3e0      	bcc.n	800d10a <__gethex+0x21e>
 800d148:	4618      	mov	r0, r3
 800d14a:	4652      	mov	r2, sl
 800d14c:	9903      	ldr	r1, [sp, #12]
 800d14e:	9309      	str	r3, [sp, #36]	; 0x24
 800d150:	f001 faff 	bl	800e752 <strncmp>
 800d154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d156:	2800      	cmp	r0, #0
 800d158:	d1d7      	bne.n	800d10a <__gethex+0x21e>
 800d15a:	461e      	mov	r6, r3
 800d15c:	e78c      	b.n	800d078 <__gethex+0x18c>
 800d15e:	f04f 0a03 	mov.w	sl, #3
 800d162:	e7b9      	b.n	800d0d8 <__gethex+0x1ec>
 800d164:	da09      	bge.n	800d17a <__gethex+0x28e>
 800d166:	1bf7      	subs	r7, r6, r7
 800d168:	4621      	mov	r1, r4
 800d16a:	463a      	mov	r2, r7
 800d16c:	9802      	ldr	r0, [sp, #8]
 800d16e:	f000 fc8d 	bl	800da8c <__lshift>
 800d172:	4604      	mov	r4, r0
 800d174:	1bed      	subs	r5, r5, r7
 800d176:	f100 0914 	add.w	r9, r0, #20
 800d17a:	f04f 0a00 	mov.w	sl, #0
 800d17e:	e7b0      	b.n	800d0e2 <__gethex+0x1f6>
 800d180:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d184:	42a8      	cmp	r0, r5
 800d186:	dd71      	ble.n	800d26c <__gethex+0x380>
 800d188:	1b45      	subs	r5, r0, r5
 800d18a:	42ae      	cmp	r6, r5
 800d18c:	dc34      	bgt.n	800d1f8 <__gethex+0x30c>
 800d18e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d192:	2b02      	cmp	r3, #2
 800d194:	d028      	beq.n	800d1e8 <__gethex+0x2fc>
 800d196:	2b03      	cmp	r3, #3
 800d198:	d02a      	beq.n	800d1f0 <__gethex+0x304>
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d115      	bne.n	800d1ca <__gethex+0x2de>
 800d19e:	42ae      	cmp	r6, r5
 800d1a0:	d113      	bne.n	800d1ca <__gethex+0x2de>
 800d1a2:	2e01      	cmp	r6, #1
 800d1a4:	d10b      	bne.n	800d1be <__gethex+0x2d2>
 800d1a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d1aa:	9a06      	ldr	r2, [sp, #24]
 800d1ac:	2762      	movs	r7, #98	; 0x62
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	6123      	str	r3, [r4, #16]
 800d1b4:	f8c9 3000 	str.w	r3, [r9]
 800d1b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1ba:	601c      	str	r4, [r3, #0]
 800d1bc:	e728      	b.n	800d010 <__gethex+0x124>
 800d1be:	4620      	mov	r0, r4
 800d1c0:	1e71      	subs	r1, r6, #1
 800d1c2:	f000 fea2 	bl	800df0a <__any_on>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d1ed      	bne.n	800d1a6 <__gethex+0x2ba>
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	9802      	ldr	r0, [sp, #8]
 800d1ce:	f000 fa45 	bl	800d65c <_Bfree>
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d1d6:	2750      	movs	r7, #80	; 0x50
 800d1d8:	6013      	str	r3, [r2, #0]
 800d1da:	e719      	b.n	800d010 <__gethex+0x124>
 800d1dc:	0800f184 	.word	0x0800f184
 800d1e0:	0800f10c 	.word	0x0800f10c
 800d1e4:	0800f11d 	.word	0x0800f11d
 800d1e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1ed      	bne.n	800d1ca <__gethex+0x2de>
 800d1ee:	e7da      	b.n	800d1a6 <__gethex+0x2ba>
 800d1f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1d7      	bne.n	800d1a6 <__gethex+0x2ba>
 800d1f6:	e7e8      	b.n	800d1ca <__gethex+0x2de>
 800d1f8:	1e6f      	subs	r7, r5, #1
 800d1fa:	f1ba 0f00 	cmp.w	sl, #0
 800d1fe:	d132      	bne.n	800d266 <__gethex+0x37a>
 800d200:	b127      	cbz	r7, 800d20c <__gethex+0x320>
 800d202:	4639      	mov	r1, r7
 800d204:	4620      	mov	r0, r4
 800d206:	f000 fe80 	bl	800df0a <__any_on>
 800d20a:	4682      	mov	sl, r0
 800d20c:	2101      	movs	r1, #1
 800d20e:	117b      	asrs	r3, r7, #5
 800d210:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d214:	f007 071f 	and.w	r7, r7, #31
 800d218:	fa01 f707 	lsl.w	r7, r1, r7
 800d21c:	421f      	tst	r7, r3
 800d21e:	f04f 0702 	mov.w	r7, #2
 800d222:	4629      	mov	r1, r5
 800d224:	4620      	mov	r0, r4
 800d226:	bf18      	it	ne
 800d228:	f04a 0a02 	orrne.w	sl, sl, #2
 800d22c:	1b76      	subs	r6, r6, r5
 800d22e:	f7ff fdf4 	bl	800ce1a <rshift>
 800d232:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d236:	f1ba 0f00 	cmp.w	sl, #0
 800d23a:	d048      	beq.n	800d2ce <__gethex+0x3e2>
 800d23c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d240:	2b02      	cmp	r3, #2
 800d242:	d015      	beq.n	800d270 <__gethex+0x384>
 800d244:	2b03      	cmp	r3, #3
 800d246:	d017      	beq.n	800d278 <__gethex+0x38c>
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d109      	bne.n	800d260 <__gethex+0x374>
 800d24c:	f01a 0f02 	tst.w	sl, #2
 800d250:	d006      	beq.n	800d260 <__gethex+0x374>
 800d252:	f8d9 0000 	ldr.w	r0, [r9]
 800d256:	ea4a 0a00 	orr.w	sl, sl, r0
 800d25a:	f01a 0f01 	tst.w	sl, #1
 800d25e:	d10e      	bne.n	800d27e <__gethex+0x392>
 800d260:	f047 0710 	orr.w	r7, r7, #16
 800d264:	e033      	b.n	800d2ce <__gethex+0x3e2>
 800d266:	f04f 0a01 	mov.w	sl, #1
 800d26a:	e7cf      	b.n	800d20c <__gethex+0x320>
 800d26c:	2701      	movs	r7, #1
 800d26e:	e7e2      	b.n	800d236 <__gethex+0x34a>
 800d270:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d272:	f1c3 0301 	rsb	r3, r3, #1
 800d276:	9315      	str	r3, [sp, #84]	; 0x54
 800d278:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d0f0      	beq.n	800d260 <__gethex+0x374>
 800d27e:	f04f 0c00 	mov.w	ip, #0
 800d282:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d286:	f104 0314 	add.w	r3, r4, #20
 800d28a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d28e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d292:	4618      	mov	r0, r3
 800d294:	f853 2b04 	ldr.w	r2, [r3], #4
 800d298:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d29c:	d01c      	beq.n	800d2d8 <__gethex+0x3ec>
 800d29e:	3201      	adds	r2, #1
 800d2a0:	6002      	str	r2, [r0, #0]
 800d2a2:	2f02      	cmp	r7, #2
 800d2a4:	f104 0314 	add.w	r3, r4, #20
 800d2a8:	d13d      	bne.n	800d326 <__gethex+0x43a>
 800d2aa:	f8d8 2000 	ldr.w	r2, [r8]
 800d2ae:	3a01      	subs	r2, #1
 800d2b0:	42b2      	cmp	r2, r6
 800d2b2:	d10a      	bne.n	800d2ca <__gethex+0x3de>
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	1171      	asrs	r1, r6, #5
 800d2b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d2bc:	f006 061f 	and.w	r6, r6, #31
 800d2c0:	fa02 f606 	lsl.w	r6, r2, r6
 800d2c4:	421e      	tst	r6, r3
 800d2c6:	bf18      	it	ne
 800d2c8:	4617      	movne	r7, r2
 800d2ca:	f047 0720 	orr.w	r7, r7, #32
 800d2ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2d0:	601c      	str	r4, [r3, #0]
 800d2d2:	9b06      	ldr	r3, [sp, #24]
 800d2d4:	601d      	str	r5, [r3, #0]
 800d2d6:	e69b      	b.n	800d010 <__gethex+0x124>
 800d2d8:	4299      	cmp	r1, r3
 800d2da:	f843 cc04 	str.w	ip, [r3, #-4]
 800d2de:	d8d8      	bhi.n	800d292 <__gethex+0x3a6>
 800d2e0:	68a3      	ldr	r3, [r4, #8]
 800d2e2:	459b      	cmp	fp, r3
 800d2e4:	db17      	blt.n	800d316 <__gethex+0x42a>
 800d2e6:	6861      	ldr	r1, [r4, #4]
 800d2e8:	9802      	ldr	r0, [sp, #8]
 800d2ea:	3101      	adds	r1, #1
 800d2ec:	f000 f976 	bl	800d5dc <_Balloc>
 800d2f0:	4681      	mov	r9, r0
 800d2f2:	b918      	cbnz	r0, 800d2fc <__gethex+0x410>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	2184      	movs	r1, #132	; 0x84
 800d2f8:	4b19      	ldr	r3, [pc, #100]	; (800d360 <__gethex+0x474>)
 800d2fa:	e6ac      	b.n	800d056 <__gethex+0x16a>
 800d2fc:	6922      	ldr	r2, [r4, #16]
 800d2fe:	f104 010c 	add.w	r1, r4, #12
 800d302:	3202      	adds	r2, #2
 800d304:	0092      	lsls	r2, r2, #2
 800d306:	300c      	adds	r0, #12
 800d308:	f7fe fb26 	bl	800b958 <memcpy>
 800d30c:	4621      	mov	r1, r4
 800d30e:	9802      	ldr	r0, [sp, #8]
 800d310:	f000 f9a4 	bl	800d65c <_Bfree>
 800d314:	464c      	mov	r4, r9
 800d316:	6923      	ldr	r3, [r4, #16]
 800d318:	1c5a      	adds	r2, r3, #1
 800d31a:	6122      	str	r2, [r4, #16]
 800d31c:	2201      	movs	r2, #1
 800d31e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d322:	615a      	str	r2, [r3, #20]
 800d324:	e7bd      	b.n	800d2a2 <__gethex+0x3b6>
 800d326:	6922      	ldr	r2, [r4, #16]
 800d328:	455a      	cmp	r2, fp
 800d32a:	dd0b      	ble.n	800d344 <__gethex+0x458>
 800d32c:	2101      	movs	r1, #1
 800d32e:	4620      	mov	r0, r4
 800d330:	f7ff fd73 	bl	800ce1a <rshift>
 800d334:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d338:	3501      	adds	r5, #1
 800d33a:	42ab      	cmp	r3, r5
 800d33c:	f6ff aed5 	blt.w	800d0ea <__gethex+0x1fe>
 800d340:	2701      	movs	r7, #1
 800d342:	e7c2      	b.n	800d2ca <__gethex+0x3de>
 800d344:	f016 061f 	ands.w	r6, r6, #31
 800d348:	d0fa      	beq.n	800d340 <__gethex+0x454>
 800d34a:	449a      	add	sl, r3
 800d34c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d350:	f000 fa3a 	bl	800d7c8 <__hi0bits>
 800d354:	f1c6 0620 	rsb	r6, r6, #32
 800d358:	42b0      	cmp	r0, r6
 800d35a:	dbe7      	blt.n	800d32c <__gethex+0x440>
 800d35c:	e7f0      	b.n	800d340 <__gethex+0x454>
 800d35e:	bf00      	nop
 800d360:	0800f10c 	.word	0x0800f10c

0800d364 <L_shift>:
 800d364:	f1c2 0208 	rsb	r2, r2, #8
 800d368:	0092      	lsls	r2, r2, #2
 800d36a:	b570      	push	{r4, r5, r6, lr}
 800d36c:	f1c2 0620 	rsb	r6, r2, #32
 800d370:	6843      	ldr	r3, [r0, #4]
 800d372:	6804      	ldr	r4, [r0, #0]
 800d374:	fa03 f506 	lsl.w	r5, r3, r6
 800d378:	432c      	orrs	r4, r5
 800d37a:	40d3      	lsrs	r3, r2
 800d37c:	6004      	str	r4, [r0, #0]
 800d37e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d382:	4288      	cmp	r0, r1
 800d384:	d3f4      	bcc.n	800d370 <L_shift+0xc>
 800d386:	bd70      	pop	{r4, r5, r6, pc}

0800d388 <__match>:
 800d388:	b530      	push	{r4, r5, lr}
 800d38a:	6803      	ldr	r3, [r0, #0]
 800d38c:	3301      	adds	r3, #1
 800d38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d392:	b914      	cbnz	r4, 800d39a <__match+0x12>
 800d394:	6003      	str	r3, [r0, #0]
 800d396:	2001      	movs	r0, #1
 800d398:	bd30      	pop	{r4, r5, pc}
 800d39a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d39e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d3a2:	2d19      	cmp	r5, #25
 800d3a4:	bf98      	it	ls
 800d3a6:	3220      	addls	r2, #32
 800d3a8:	42a2      	cmp	r2, r4
 800d3aa:	d0f0      	beq.n	800d38e <__match+0x6>
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	e7f3      	b.n	800d398 <__match+0x10>

0800d3b0 <__hexnan>:
 800d3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b4:	2500      	movs	r5, #0
 800d3b6:	680b      	ldr	r3, [r1, #0]
 800d3b8:	4682      	mov	sl, r0
 800d3ba:	115e      	asrs	r6, r3, #5
 800d3bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d3c0:	f013 031f 	ands.w	r3, r3, #31
 800d3c4:	bf18      	it	ne
 800d3c6:	3604      	addne	r6, #4
 800d3c8:	1f37      	subs	r7, r6, #4
 800d3ca:	4690      	mov	r8, r2
 800d3cc:	46b9      	mov	r9, r7
 800d3ce:	463c      	mov	r4, r7
 800d3d0:	46ab      	mov	fp, r5
 800d3d2:	b087      	sub	sp, #28
 800d3d4:	6801      	ldr	r1, [r0, #0]
 800d3d6:	9301      	str	r3, [sp, #4]
 800d3d8:	f846 5c04 	str.w	r5, [r6, #-4]
 800d3dc:	9502      	str	r5, [sp, #8]
 800d3de:	784a      	ldrb	r2, [r1, #1]
 800d3e0:	1c4b      	adds	r3, r1, #1
 800d3e2:	9303      	str	r3, [sp, #12]
 800d3e4:	b342      	cbz	r2, 800d438 <__hexnan+0x88>
 800d3e6:	4610      	mov	r0, r2
 800d3e8:	9105      	str	r1, [sp, #20]
 800d3ea:	9204      	str	r2, [sp, #16]
 800d3ec:	f7ff fd68 	bl	800cec0 <__hexdig_fun>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d14f      	bne.n	800d494 <__hexnan+0xe4>
 800d3f4:	9a04      	ldr	r2, [sp, #16]
 800d3f6:	9905      	ldr	r1, [sp, #20]
 800d3f8:	2a20      	cmp	r2, #32
 800d3fa:	d818      	bhi.n	800d42e <__hexnan+0x7e>
 800d3fc:	9b02      	ldr	r3, [sp, #8]
 800d3fe:	459b      	cmp	fp, r3
 800d400:	dd13      	ble.n	800d42a <__hexnan+0x7a>
 800d402:	454c      	cmp	r4, r9
 800d404:	d206      	bcs.n	800d414 <__hexnan+0x64>
 800d406:	2d07      	cmp	r5, #7
 800d408:	dc04      	bgt.n	800d414 <__hexnan+0x64>
 800d40a:	462a      	mov	r2, r5
 800d40c:	4649      	mov	r1, r9
 800d40e:	4620      	mov	r0, r4
 800d410:	f7ff ffa8 	bl	800d364 <L_shift>
 800d414:	4544      	cmp	r4, r8
 800d416:	d950      	bls.n	800d4ba <__hexnan+0x10a>
 800d418:	2300      	movs	r3, #0
 800d41a:	f1a4 0904 	sub.w	r9, r4, #4
 800d41e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d422:	461d      	mov	r5, r3
 800d424:	464c      	mov	r4, r9
 800d426:	f8cd b008 	str.w	fp, [sp, #8]
 800d42a:	9903      	ldr	r1, [sp, #12]
 800d42c:	e7d7      	b.n	800d3de <__hexnan+0x2e>
 800d42e:	2a29      	cmp	r2, #41	; 0x29
 800d430:	d156      	bne.n	800d4e0 <__hexnan+0x130>
 800d432:	3102      	adds	r1, #2
 800d434:	f8ca 1000 	str.w	r1, [sl]
 800d438:	f1bb 0f00 	cmp.w	fp, #0
 800d43c:	d050      	beq.n	800d4e0 <__hexnan+0x130>
 800d43e:	454c      	cmp	r4, r9
 800d440:	d206      	bcs.n	800d450 <__hexnan+0xa0>
 800d442:	2d07      	cmp	r5, #7
 800d444:	dc04      	bgt.n	800d450 <__hexnan+0xa0>
 800d446:	462a      	mov	r2, r5
 800d448:	4649      	mov	r1, r9
 800d44a:	4620      	mov	r0, r4
 800d44c:	f7ff ff8a 	bl	800d364 <L_shift>
 800d450:	4544      	cmp	r4, r8
 800d452:	d934      	bls.n	800d4be <__hexnan+0x10e>
 800d454:	4623      	mov	r3, r4
 800d456:	f1a8 0204 	sub.w	r2, r8, #4
 800d45a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d45e:	429f      	cmp	r7, r3
 800d460:	f842 1f04 	str.w	r1, [r2, #4]!
 800d464:	d2f9      	bcs.n	800d45a <__hexnan+0xaa>
 800d466:	1b3b      	subs	r3, r7, r4
 800d468:	f023 0303 	bic.w	r3, r3, #3
 800d46c:	3304      	adds	r3, #4
 800d46e:	3401      	adds	r4, #1
 800d470:	3e03      	subs	r6, #3
 800d472:	42b4      	cmp	r4, r6
 800d474:	bf88      	it	hi
 800d476:	2304      	movhi	r3, #4
 800d478:	2200      	movs	r2, #0
 800d47a:	4443      	add	r3, r8
 800d47c:	f843 2b04 	str.w	r2, [r3], #4
 800d480:	429f      	cmp	r7, r3
 800d482:	d2fb      	bcs.n	800d47c <__hexnan+0xcc>
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	b91b      	cbnz	r3, 800d490 <__hexnan+0xe0>
 800d488:	4547      	cmp	r7, r8
 800d48a:	d127      	bne.n	800d4dc <__hexnan+0x12c>
 800d48c:	2301      	movs	r3, #1
 800d48e:	603b      	str	r3, [r7, #0]
 800d490:	2005      	movs	r0, #5
 800d492:	e026      	b.n	800d4e2 <__hexnan+0x132>
 800d494:	3501      	adds	r5, #1
 800d496:	2d08      	cmp	r5, #8
 800d498:	f10b 0b01 	add.w	fp, fp, #1
 800d49c:	dd06      	ble.n	800d4ac <__hexnan+0xfc>
 800d49e:	4544      	cmp	r4, r8
 800d4a0:	d9c3      	bls.n	800d42a <__hexnan+0x7a>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	2501      	movs	r5, #1
 800d4a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4aa:	3c04      	subs	r4, #4
 800d4ac:	6822      	ldr	r2, [r4, #0]
 800d4ae:	f000 000f 	and.w	r0, r0, #15
 800d4b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d4b6:	6022      	str	r2, [r4, #0]
 800d4b8:	e7b7      	b.n	800d42a <__hexnan+0x7a>
 800d4ba:	2508      	movs	r5, #8
 800d4bc:	e7b5      	b.n	800d42a <__hexnan+0x7a>
 800d4be:	9b01      	ldr	r3, [sp, #4]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d0df      	beq.n	800d484 <__hexnan+0xd4>
 800d4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4c8:	f1c3 0320 	rsb	r3, r3, #32
 800d4cc:	fa22 f303 	lsr.w	r3, r2, r3
 800d4d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d4d4:	401a      	ands	r2, r3
 800d4d6:	f846 2c04 	str.w	r2, [r6, #-4]
 800d4da:	e7d3      	b.n	800d484 <__hexnan+0xd4>
 800d4dc:	3f04      	subs	r7, #4
 800d4de:	e7d1      	b.n	800d484 <__hexnan+0xd4>
 800d4e0:	2004      	movs	r0, #4
 800d4e2:	b007      	add	sp, #28
 800d4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d4e8 <__retarget_lock_init_recursive>:
 800d4e8:	4770      	bx	lr

0800d4ea <__retarget_lock_acquire_recursive>:
 800d4ea:	4770      	bx	lr

0800d4ec <__retarget_lock_release_recursive>:
 800d4ec:	4770      	bx	lr

0800d4ee <__swhatbuf_r>:
 800d4ee:	b570      	push	{r4, r5, r6, lr}
 800d4f0:	460e      	mov	r6, r1
 800d4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f6:	4614      	mov	r4, r2
 800d4f8:	2900      	cmp	r1, #0
 800d4fa:	461d      	mov	r5, r3
 800d4fc:	b096      	sub	sp, #88	; 0x58
 800d4fe:	da07      	bge.n	800d510 <__swhatbuf_r+0x22>
 800d500:	2300      	movs	r3, #0
 800d502:	602b      	str	r3, [r5, #0]
 800d504:	89b3      	ldrh	r3, [r6, #12]
 800d506:	061a      	lsls	r2, r3, #24
 800d508:	d410      	bmi.n	800d52c <__swhatbuf_r+0x3e>
 800d50a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d50e:	e00e      	b.n	800d52e <__swhatbuf_r+0x40>
 800d510:	466a      	mov	r2, sp
 800d512:	f001 f98f 	bl	800e834 <_fstat_r>
 800d516:	2800      	cmp	r0, #0
 800d518:	dbf2      	blt.n	800d500 <__swhatbuf_r+0x12>
 800d51a:	9a01      	ldr	r2, [sp, #4]
 800d51c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d520:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d524:	425a      	negs	r2, r3
 800d526:	415a      	adcs	r2, r3
 800d528:	602a      	str	r2, [r5, #0]
 800d52a:	e7ee      	b.n	800d50a <__swhatbuf_r+0x1c>
 800d52c:	2340      	movs	r3, #64	; 0x40
 800d52e:	2000      	movs	r0, #0
 800d530:	6023      	str	r3, [r4, #0]
 800d532:	b016      	add	sp, #88	; 0x58
 800d534:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d538 <__smakebuf_r>:
 800d538:	898b      	ldrh	r3, [r1, #12]
 800d53a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d53c:	079d      	lsls	r5, r3, #30
 800d53e:	4606      	mov	r6, r0
 800d540:	460c      	mov	r4, r1
 800d542:	d507      	bpl.n	800d554 <__smakebuf_r+0x1c>
 800d544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	6123      	str	r3, [r4, #16]
 800d54c:	2301      	movs	r3, #1
 800d54e:	6163      	str	r3, [r4, #20]
 800d550:	b002      	add	sp, #8
 800d552:	bd70      	pop	{r4, r5, r6, pc}
 800d554:	466a      	mov	r2, sp
 800d556:	ab01      	add	r3, sp, #4
 800d558:	f7ff ffc9 	bl	800d4ee <__swhatbuf_r>
 800d55c:	9900      	ldr	r1, [sp, #0]
 800d55e:	4605      	mov	r5, r0
 800d560:	4630      	mov	r0, r6
 800d562:	f000 fd4d 	bl	800e000 <_malloc_r>
 800d566:	b948      	cbnz	r0, 800d57c <__smakebuf_r+0x44>
 800d568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d56c:	059a      	lsls	r2, r3, #22
 800d56e:	d4ef      	bmi.n	800d550 <__smakebuf_r+0x18>
 800d570:	f023 0303 	bic.w	r3, r3, #3
 800d574:	f043 0302 	orr.w	r3, r3, #2
 800d578:	81a3      	strh	r3, [r4, #12]
 800d57a:	e7e3      	b.n	800d544 <__smakebuf_r+0xc>
 800d57c:	4b0d      	ldr	r3, [pc, #52]	; (800d5b4 <__smakebuf_r+0x7c>)
 800d57e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d580:	89a3      	ldrh	r3, [r4, #12]
 800d582:	6020      	str	r0, [r4, #0]
 800d584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d588:	81a3      	strh	r3, [r4, #12]
 800d58a:	9b00      	ldr	r3, [sp, #0]
 800d58c:	6120      	str	r0, [r4, #16]
 800d58e:	6163      	str	r3, [r4, #20]
 800d590:	9b01      	ldr	r3, [sp, #4]
 800d592:	b15b      	cbz	r3, 800d5ac <__smakebuf_r+0x74>
 800d594:	4630      	mov	r0, r6
 800d596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d59a:	f001 f95d 	bl	800e858 <_isatty_r>
 800d59e:	b128      	cbz	r0, 800d5ac <__smakebuf_r+0x74>
 800d5a0:	89a3      	ldrh	r3, [r4, #12]
 800d5a2:	f023 0303 	bic.w	r3, r3, #3
 800d5a6:	f043 0301 	orr.w	r3, r3, #1
 800d5aa:	81a3      	strh	r3, [r4, #12]
 800d5ac:	89a0      	ldrh	r0, [r4, #12]
 800d5ae:	4305      	orrs	r5, r0
 800d5b0:	81a5      	strh	r5, [r4, #12]
 800d5b2:	e7cd      	b.n	800d550 <__smakebuf_r+0x18>
 800d5b4:	0800cc79 	.word	0x0800cc79

0800d5b8 <__ascii_mbtowc>:
 800d5b8:	b082      	sub	sp, #8
 800d5ba:	b901      	cbnz	r1, 800d5be <__ascii_mbtowc+0x6>
 800d5bc:	a901      	add	r1, sp, #4
 800d5be:	b142      	cbz	r2, 800d5d2 <__ascii_mbtowc+0x1a>
 800d5c0:	b14b      	cbz	r3, 800d5d6 <__ascii_mbtowc+0x1e>
 800d5c2:	7813      	ldrb	r3, [r2, #0]
 800d5c4:	600b      	str	r3, [r1, #0]
 800d5c6:	7812      	ldrb	r2, [r2, #0]
 800d5c8:	1e10      	subs	r0, r2, #0
 800d5ca:	bf18      	it	ne
 800d5cc:	2001      	movne	r0, #1
 800d5ce:	b002      	add	sp, #8
 800d5d0:	4770      	bx	lr
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	e7fb      	b.n	800d5ce <__ascii_mbtowc+0x16>
 800d5d6:	f06f 0001 	mvn.w	r0, #1
 800d5da:	e7f8      	b.n	800d5ce <__ascii_mbtowc+0x16>

0800d5dc <_Balloc>:
 800d5dc:	b570      	push	{r4, r5, r6, lr}
 800d5de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d5e0:	4604      	mov	r4, r0
 800d5e2:	460d      	mov	r5, r1
 800d5e4:	b976      	cbnz	r6, 800d604 <_Balloc+0x28>
 800d5e6:	2010      	movs	r0, #16
 800d5e8:	f001 f958 	bl	800e89c <malloc>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	6260      	str	r0, [r4, #36]	; 0x24
 800d5f0:	b920      	cbnz	r0, 800d5fc <_Balloc+0x20>
 800d5f2:	2166      	movs	r1, #102	; 0x66
 800d5f4:	4b17      	ldr	r3, [pc, #92]	; (800d654 <_Balloc+0x78>)
 800d5f6:	4818      	ldr	r0, [pc, #96]	; (800d658 <_Balloc+0x7c>)
 800d5f8:	f001 f8dc 	bl	800e7b4 <__assert_func>
 800d5fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d600:	6006      	str	r6, [r0, #0]
 800d602:	60c6      	str	r6, [r0, #12]
 800d604:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d606:	68f3      	ldr	r3, [r6, #12]
 800d608:	b183      	cbz	r3, 800d62c <_Balloc+0x50>
 800d60a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d612:	b9b8      	cbnz	r0, 800d644 <_Balloc+0x68>
 800d614:	2101      	movs	r1, #1
 800d616:	fa01 f605 	lsl.w	r6, r1, r5
 800d61a:	1d72      	adds	r2, r6, #5
 800d61c:	4620      	mov	r0, r4
 800d61e:	0092      	lsls	r2, r2, #2
 800d620:	f000 fc94 	bl	800df4c <_calloc_r>
 800d624:	b160      	cbz	r0, 800d640 <_Balloc+0x64>
 800d626:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d62a:	e00e      	b.n	800d64a <_Balloc+0x6e>
 800d62c:	2221      	movs	r2, #33	; 0x21
 800d62e:	2104      	movs	r1, #4
 800d630:	4620      	mov	r0, r4
 800d632:	f000 fc8b 	bl	800df4c <_calloc_r>
 800d636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d638:	60f0      	str	r0, [r6, #12]
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1e4      	bne.n	800d60a <_Balloc+0x2e>
 800d640:	2000      	movs	r0, #0
 800d642:	bd70      	pop	{r4, r5, r6, pc}
 800d644:	6802      	ldr	r2, [r0, #0]
 800d646:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d64a:	2300      	movs	r3, #0
 800d64c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d650:	e7f7      	b.n	800d642 <_Balloc+0x66>
 800d652:	bf00      	nop
 800d654:	0800f196 	.word	0x0800f196
 800d658:	0800f1ad 	.word	0x0800f1ad

0800d65c <_Bfree>:
 800d65c:	b570      	push	{r4, r5, r6, lr}
 800d65e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d660:	4605      	mov	r5, r0
 800d662:	460c      	mov	r4, r1
 800d664:	b976      	cbnz	r6, 800d684 <_Bfree+0x28>
 800d666:	2010      	movs	r0, #16
 800d668:	f001 f918 	bl	800e89c <malloc>
 800d66c:	4602      	mov	r2, r0
 800d66e:	6268      	str	r0, [r5, #36]	; 0x24
 800d670:	b920      	cbnz	r0, 800d67c <_Bfree+0x20>
 800d672:	218a      	movs	r1, #138	; 0x8a
 800d674:	4b08      	ldr	r3, [pc, #32]	; (800d698 <_Bfree+0x3c>)
 800d676:	4809      	ldr	r0, [pc, #36]	; (800d69c <_Bfree+0x40>)
 800d678:	f001 f89c 	bl	800e7b4 <__assert_func>
 800d67c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d680:	6006      	str	r6, [r0, #0]
 800d682:	60c6      	str	r6, [r0, #12]
 800d684:	b13c      	cbz	r4, 800d696 <_Bfree+0x3a>
 800d686:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d688:	6862      	ldr	r2, [r4, #4]
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d690:	6021      	str	r1, [r4, #0]
 800d692:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d696:	bd70      	pop	{r4, r5, r6, pc}
 800d698:	0800f196 	.word	0x0800f196
 800d69c:	0800f1ad 	.word	0x0800f1ad

0800d6a0 <__multadd>:
 800d6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a4:	4698      	mov	r8, r3
 800d6a6:	460c      	mov	r4, r1
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	690e      	ldr	r6, [r1, #16]
 800d6ac:	4607      	mov	r7, r0
 800d6ae:	f101 0014 	add.w	r0, r1, #20
 800d6b2:	6805      	ldr	r5, [r0, #0]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	b2a9      	uxth	r1, r5
 800d6b8:	fb02 8101 	mla	r1, r2, r1, r8
 800d6bc:	0c2d      	lsrs	r5, r5, #16
 800d6be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d6c2:	fb02 c505 	mla	r5, r2, r5, ip
 800d6c6:	b289      	uxth	r1, r1
 800d6c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d6cc:	429e      	cmp	r6, r3
 800d6ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d6d2:	f840 1b04 	str.w	r1, [r0], #4
 800d6d6:	dcec      	bgt.n	800d6b2 <__multadd+0x12>
 800d6d8:	f1b8 0f00 	cmp.w	r8, #0
 800d6dc:	d022      	beq.n	800d724 <__multadd+0x84>
 800d6de:	68a3      	ldr	r3, [r4, #8]
 800d6e0:	42b3      	cmp	r3, r6
 800d6e2:	dc19      	bgt.n	800d718 <__multadd+0x78>
 800d6e4:	6861      	ldr	r1, [r4, #4]
 800d6e6:	4638      	mov	r0, r7
 800d6e8:	3101      	adds	r1, #1
 800d6ea:	f7ff ff77 	bl	800d5dc <_Balloc>
 800d6ee:	4605      	mov	r5, r0
 800d6f0:	b928      	cbnz	r0, 800d6fe <__multadd+0x5e>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	21b5      	movs	r1, #181	; 0xb5
 800d6f6:	4b0d      	ldr	r3, [pc, #52]	; (800d72c <__multadd+0x8c>)
 800d6f8:	480d      	ldr	r0, [pc, #52]	; (800d730 <__multadd+0x90>)
 800d6fa:	f001 f85b 	bl	800e7b4 <__assert_func>
 800d6fe:	6922      	ldr	r2, [r4, #16]
 800d700:	f104 010c 	add.w	r1, r4, #12
 800d704:	3202      	adds	r2, #2
 800d706:	0092      	lsls	r2, r2, #2
 800d708:	300c      	adds	r0, #12
 800d70a:	f7fe f925 	bl	800b958 <memcpy>
 800d70e:	4621      	mov	r1, r4
 800d710:	4638      	mov	r0, r7
 800d712:	f7ff ffa3 	bl	800d65c <_Bfree>
 800d716:	462c      	mov	r4, r5
 800d718:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d71c:	3601      	adds	r6, #1
 800d71e:	f8c3 8014 	str.w	r8, [r3, #20]
 800d722:	6126      	str	r6, [r4, #16]
 800d724:	4620      	mov	r0, r4
 800d726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d72a:	bf00      	nop
 800d72c:	0800f10c 	.word	0x0800f10c
 800d730:	0800f1ad 	.word	0x0800f1ad

0800d734 <__s2b>:
 800d734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d738:	4615      	mov	r5, r2
 800d73a:	2209      	movs	r2, #9
 800d73c:	461f      	mov	r7, r3
 800d73e:	3308      	adds	r3, #8
 800d740:	460c      	mov	r4, r1
 800d742:	fb93 f3f2 	sdiv	r3, r3, r2
 800d746:	4606      	mov	r6, r0
 800d748:	2201      	movs	r2, #1
 800d74a:	2100      	movs	r1, #0
 800d74c:	429a      	cmp	r2, r3
 800d74e:	db09      	blt.n	800d764 <__s2b+0x30>
 800d750:	4630      	mov	r0, r6
 800d752:	f7ff ff43 	bl	800d5dc <_Balloc>
 800d756:	b940      	cbnz	r0, 800d76a <__s2b+0x36>
 800d758:	4602      	mov	r2, r0
 800d75a:	21ce      	movs	r1, #206	; 0xce
 800d75c:	4b18      	ldr	r3, [pc, #96]	; (800d7c0 <__s2b+0x8c>)
 800d75e:	4819      	ldr	r0, [pc, #100]	; (800d7c4 <__s2b+0x90>)
 800d760:	f001 f828 	bl	800e7b4 <__assert_func>
 800d764:	0052      	lsls	r2, r2, #1
 800d766:	3101      	adds	r1, #1
 800d768:	e7f0      	b.n	800d74c <__s2b+0x18>
 800d76a:	9b08      	ldr	r3, [sp, #32]
 800d76c:	2d09      	cmp	r5, #9
 800d76e:	6143      	str	r3, [r0, #20]
 800d770:	f04f 0301 	mov.w	r3, #1
 800d774:	6103      	str	r3, [r0, #16]
 800d776:	dd16      	ble.n	800d7a6 <__s2b+0x72>
 800d778:	f104 0909 	add.w	r9, r4, #9
 800d77c:	46c8      	mov	r8, r9
 800d77e:	442c      	add	r4, r5
 800d780:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d784:	4601      	mov	r1, r0
 800d786:	220a      	movs	r2, #10
 800d788:	4630      	mov	r0, r6
 800d78a:	3b30      	subs	r3, #48	; 0x30
 800d78c:	f7ff ff88 	bl	800d6a0 <__multadd>
 800d790:	45a0      	cmp	r8, r4
 800d792:	d1f5      	bne.n	800d780 <__s2b+0x4c>
 800d794:	f1a5 0408 	sub.w	r4, r5, #8
 800d798:	444c      	add	r4, r9
 800d79a:	1b2d      	subs	r5, r5, r4
 800d79c:	1963      	adds	r3, r4, r5
 800d79e:	42bb      	cmp	r3, r7
 800d7a0:	db04      	blt.n	800d7ac <__s2b+0x78>
 800d7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a6:	2509      	movs	r5, #9
 800d7a8:	340a      	adds	r4, #10
 800d7aa:	e7f6      	b.n	800d79a <__s2b+0x66>
 800d7ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d7b0:	4601      	mov	r1, r0
 800d7b2:	220a      	movs	r2, #10
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	3b30      	subs	r3, #48	; 0x30
 800d7b8:	f7ff ff72 	bl	800d6a0 <__multadd>
 800d7bc:	e7ee      	b.n	800d79c <__s2b+0x68>
 800d7be:	bf00      	nop
 800d7c0:	0800f10c 	.word	0x0800f10c
 800d7c4:	0800f1ad 	.word	0x0800f1ad

0800d7c8 <__hi0bits>:
 800d7c8:	0c02      	lsrs	r2, r0, #16
 800d7ca:	0412      	lsls	r2, r2, #16
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	b9ca      	cbnz	r2, 800d804 <__hi0bits+0x3c>
 800d7d0:	0403      	lsls	r3, r0, #16
 800d7d2:	2010      	movs	r0, #16
 800d7d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d7d8:	bf04      	itt	eq
 800d7da:	021b      	lsleq	r3, r3, #8
 800d7dc:	3008      	addeq	r0, #8
 800d7de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d7e2:	bf04      	itt	eq
 800d7e4:	011b      	lsleq	r3, r3, #4
 800d7e6:	3004      	addeq	r0, #4
 800d7e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d7ec:	bf04      	itt	eq
 800d7ee:	009b      	lsleq	r3, r3, #2
 800d7f0:	3002      	addeq	r0, #2
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	db05      	blt.n	800d802 <__hi0bits+0x3a>
 800d7f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d7fa:	f100 0001 	add.w	r0, r0, #1
 800d7fe:	bf08      	it	eq
 800d800:	2020      	moveq	r0, #32
 800d802:	4770      	bx	lr
 800d804:	2000      	movs	r0, #0
 800d806:	e7e5      	b.n	800d7d4 <__hi0bits+0xc>

0800d808 <__lo0bits>:
 800d808:	6803      	ldr	r3, [r0, #0]
 800d80a:	4602      	mov	r2, r0
 800d80c:	f013 0007 	ands.w	r0, r3, #7
 800d810:	d00b      	beq.n	800d82a <__lo0bits+0x22>
 800d812:	07d9      	lsls	r1, r3, #31
 800d814:	d422      	bmi.n	800d85c <__lo0bits+0x54>
 800d816:	0798      	lsls	r0, r3, #30
 800d818:	bf49      	itett	mi
 800d81a:	085b      	lsrmi	r3, r3, #1
 800d81c:	089b      	lsrpl	r3, r3, #2
 800d81e:	2001      	movmi	r0, #1
 800d820:	6013      	strmi	r3, [r2, #0]
 800d822:	bf5c      	itt	pl
 800d824:	2002      	movpl	r0, #2
 800d826:	6013      	strpl	r3, [r2, #0]
 800d828:	4770      	bx	lr
 800d82a:	b299      	uxth	r1, r3
 800d82c:	b909      	cbnz	r1, 800d832 <__lo0bits+0x2a>
 800d82e:	2010      	movs	r0, #16
 800d830:	0c1b      	lsrs	r3, r3, #16
 800d832:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d836:	bf04      	itt	eq
 800d838:	0a1b      	lsreq	r3, r3, #8
 800d83a:	3008      	addeq	r0, #8
 800d83c:	0719      	lsls	r1, r3, #28
 800d83e:	bf04      	itt	eq
 800d840:	091b      	lsreq	r3, r3, #4
 800d842:	3004      	addeq	r0, #4
 800d844:	0799      	lsls	r1, r3, #30
 800d846:	bf04      	itt	eq
 800d848:	089b      	lsreq	r3, r3, #2
 800d84a:	3002      	addeq	r0, #2
 800d84c:	07d9      	lsls	r1, r3, #31
 800d84e:	d403      	bmi.n	800d858 <__lo0bits+0x50>
 800d850:	085b      	lsrs	r3, r3, #1
 800d852:	f100 0001 	add.w	r0, r0, #1
 800d856:	d003      	beq.n	800d860 <__lo0bits+0x58>
 800d858:	6013      	str	r3, [r2, #0]
 800d85a:	4770      	bx	lr
 800d85c:	2000      	movs	r0, #0
 800d85e:	4770      	bx	lr
 800d860:	2020      	movs	r0, #32
 800d862:	4770      	bx	lr

0800d864 <__i2b>:
 800d864:	b510      	push	{r4, lr}
 800d866:	460c      	mov	r4, r1
 800d868:	2101      	movs	r1, #1
 800d86a:	f7ff feb7 	bl	800d5dc <_Balloc>
 800d86e:	4602      	mov	r2, r0
 800d870:	b928      	cbnz	r0, 800d87e <__i2b+0x1a>
 800d872:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d876:	4b04      	ldr	r3, [pc, #16]	; (800d888 <__i2b+0x24>)
 800d878:	4804      	ldr	r0, [pc, #16]	; (800d88c <__i2b+0x28>)
 800d87a:	f000 ff9b 	bl	800e7b4 <__assert_func>
 800d87e:	2301      	movs	r3, #1
 800d880:	6144      	str	r4, [r0, #20]
 800d882:	6103      	str	r3, [r0, #16]
 800d884:	bd10      	pop	{r4, pc}
 800d886:	bf00      	nop
 800d888:	0800f10c 	.word	0x0800f10c
 800d88c:	0800f1ad 	.word	0x0800f1ad

0800d890 <__multiply>:
 800d890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d894:	4614      	mov	r4, r2
 800d896:	690a      	ldr	r2, [r1, #16]
 800d898:	6923      	ldr	r3, [r4, #16]
 800d89a:	460d      	mov	r5, r1
 800d89c:	429a      	cmp	r2, r3
 800d89e:	bfbe      	ittt	lt
 800d8a0:	460b      	movlt	r3, r1
 800d8a2:	4625      	movlt	r5, r4
 800d8a4:	461c      	movlt	r4, r3
 800d8a6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d8aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d8ae:	68ab      	ldr	r3, [r5, #8]
 800d8b0:	6869      	ldr	r1, [r5, #4]
 800d8b2:	eb0a 0709 	add.w	r7, sl, r9
 800d8b6:	42bb      	cmp	r3, r7
 800d8b8:	b085      	sub	sp, #20
 800d8ba:	bfb8      	it	lt
 800d8bc:	3101      	addlt	r1, #1
 800d8be:	f7ff fe8d 	bl	800d5dc <_Balloc>
 800d8c2:	b930      	cbnz	r0, 800d8d2 <__multiply+0x42>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	f240 115d 	movw	r1, #349	; 0x15d
 800d8ca:	4b41      	ldr	r3, [pc, #260]	; (800d9d0 <__multiply+0x140>)
 800d8cc:	4841      	ldr	r0, [pc, #260]	; (800d9d4 <__multiply+0x144>)
 800d8ce:	f000 ff71 	bl	800e7b4 <__assert_func>
 800d8d2:	f100 0614 	add.w	r6, r0, #20
 800d8d6:	4633      	mov	r3, r6
 800d8d8:	2200      	movs	r2, #0
 800d8da:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d8de:	4543      	cmp	r3, r8
 800d8e0:	d31e      	bcc.n	800d920 <__multiply+0x90>
 800d8e2:	f105 0c14 	add.w	ip, r5, #20
 800d8e6:	f104 0314 	add.w	r3, r4, #20
 800d8ea:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d8ee:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d8f2:	9202      	str	r2, [sp, #8]
 800d8f4:	ebac 0205 	sub.w	r2, ip, r5
 800d8f8:	3a15      	subs	r2, #21
 800d8fa:	f022 0203 	bic.w	r2, r2, #3
 800d8fe:	3204      	adds	r2, #4
 800d900:	f105 0115 	add.w	r1, r5, #21
 800d904:	458c      	cmp	ip, r1
 800d906:	bf38      	it	cc
 800d908:	2204      	movcc	r2, #4
 800d90a:	9201      	str	r2, [sp, #4]
 800d90c:	9a02      	ldr	r2, [sp, #8]
 800d90e:	9303      	str	r3, [sp, #12]
 800d910:	429a      	cmp	r2, r3
 800d912:	d808      	bhi.n	800d926 <__multiply+0x96>
 800d914:	2f00      	cmp	r7, #0
 800d916:	dc55      	bgt.n	800d9c4 <__multiply+0x134>
 800d918:	6107      	str	r7, [r0, #16]
 800d91a:	b005      	add	sp, #20
 800d91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d920:	f843 2b04 	str.w	r2, [r3], #4
 800d924:	e7db      	b.n	800d8de <__multiply+0x4e>
 800d926:	f8b3 a000 	ldrh.w	sl, [r3]
 800d92a:	f1ba 0f00 	cmp.w	sl, #0
 800d92e:	d020      	beq.n	800d972 <__multiply+0xe2>
 800d930:	46b1      	mov	r9, r6
 800d932:	2200      	movs	r2, #0
 800d934:	f105 0e14 	add.w	lr, r5, #20
 800d938:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d93c:	f8d9 b000 	ldr.w	fp, [r9]
 800d940:	b2a1      	uxth	r1, r4
 800d942:	fa1f fb8b 	uxth.w	fp, fp
 800d946:	fb0a b101 	mla	r1, sl, r1, fp
 800d94a:	4411      	add	r1, r2
 800d94c:	f8d9 2000 	ldr.w	r2, [r9]
 800d950:	0c24      	lsrs	r4, r4, #16
 800d952:	0c12      	lsrs	r2, r2, #16
 800d954:	fb0a 2404 	mla	r4, sl, r4, r2
 800d958:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d95c:	b289      	uxth	r1, r1
 800d95e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d962:	45f4      	cmp	ip, lr
 800d964:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d968:	f849 1b04 	str.w	r1, [r9], #4
 800d96c:	d8e4      	bhi.n	800d938 <__multiply+0xa8>
 800d96e:	9901      	ldr	r1, [sp, #4]
 800d970:	5072      	str	r2, [r6, r1]
 800d972:	9a03      	ldr	r2, [sp, #12]
 800d974:	3304      	adds	r3, #4
 800d976:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d97a:	f1b9 0f00 	cmp.w	r9, #0
 800d97e:	d01f      	beq.n	800d9c0 <__multiply+0x130>
 800d980:	46b6      	mov	lr, r6
 800d982:	f04f 0a00 	mov.w	sl, #0
 800d986:	6834      	ldr	r4, [r6, #0]
 800d988:	f105 0114 	add.w	r1, r5, #20
 800d98c:	880a      	ldrh	r2, [r1, #0]
 800d98e:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d992:	b2a4      	uxth	r4, r4
 800d994:	fb09 b202 	mla	r2, r9, r2, fp
 800d998:	4492      	add	sl, r2
 800d99a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d99e:	f84e 4b04 	str.w	r4, [lr], #4
 800d9a2:	f851 4b04 	ldr.w	r4, [r1], #4
 800d9a6:	f8be 2000 	ldrh.w	r2, [lr]
 800d9aa:	0c24      	lsrs	r4, r4, #16
 800d9ac:	fb09 2404 	mla	r4, r9, r4, r2
 800d9b0:	458c      	cmp	ip, r1
 800d9b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d9b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d9ba:	d8e7      	bhi.n	800d98c <__multiply+0xfc>
 800d9bc:	9a01      	ldr	r2, [sp, #4]
 800d9be:	50b4      	str	r4, [r6, r2]
 800d9c0:	3604      	adds	r6, #4
 800d9c2:	e7a3      	b.n	800d90c <__multiply+0x7c>
 800d9c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1a5      	bne.n	800d918 <__multiply+0x88>
 800d9cc:	3f01      	subs	r7, #1
 800d9ce:	e7a1      	b.n	800d914 <__multiply+0x84>
 800d9d0:	0800f10c 	.word	0x0800f10c
 800d9d4:	0800f1ad 	.word	0x0800f1ad

0800d9d8 <__pow5mult>:
 800d9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9dc:	4615      	mov	r5, r2
 800d9de:	f012 0203 	ands.w	r2, r2, #3
 800d9e2:	4606      	mov	r6, r0
 800d9e4:	460f      	mov	r7, r1
 800d9e6:	d007      	beq.n	800d9f8 <__pow5mult+0x20>
 800d9e8:	4c25      	ldr	r4, [pc, #148]	; (800da80 <__pow5mult+0xa8>)
 800d9ea:	3a01      	subs	r2, #1
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9f2:	f7ff fe55 	bl	800d6a0 <__multadd>
 800d9f6:	4607      	mov	r7, r0
 800d9f8:	10ad      	asrs	r5, r5, #2
 800d9fa:	d03d      	beq.n	800da78 <__pow5mult+0xa0>
 800d9fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d9fe:	b97c      	cbnz	r4, 800da20 <__pow5mult+0x48>
 800da00:	2010      	movs	r0, #16
 800da02:	f000 ff4b 	bl	800e89c <malloc>
 800da06:	4602      	mov	r2, r0
 800da08:	6270      	str	r0, [r6, #36]	; 0x24
 800da0a:	b928      	cbnz	r0, 800da18 <__pow5mult+0x40>
 800da0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da10:	4b1c      	ldr	r3, [pc, #112]	; (800da84 <__pow5mult+0xac>)
 800da12:	481d      	ldr	r0, [pc, #116]	; (800da88 <__pow5mult+0xb0>)
 800da14:	f000 fece 	bl	800e7b4 <__assert_func>
 800da18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da1c:	6004      	str	r4, [r0, #0]
 800da1e:	60c4      	str	r4, [r0, #12]
 800da20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da28:	b94c      	cbnz	r4, 800da3e <__pow5mult+0x66>
 800da2a:	f240 2171 	movw	r1, #625	; 0x271
 800da2e:	4630      	mov	r0, r6
 800da30:	f7ff ff18 	bl	800d864 <__i2b>
 800da34:	2300      	movs	r3, #0
 800da36:	4604      	mov	r4, r0
 800da38:	f8c8 0008 	str.w	r0, [r8, #8]
 800da3c:	6003      	str	r3, [r0, #0]
 800da3e:	f04f 0900 	mov.w	r9, #0
 800da42:	07eb      	lsls	r3, r5, #31
 800da44:	d50a      	bpl.n	800da5c <__pow5mult+0x84>
 800da46:	4639      	mov	r1, r7
 800da48:	4622      	mov	r2, r4
 800da4a:	4630      	mov	r0, r6
 800da4c:	f7ff ff20 	bl	800d890 <__multiply>
 800da50:	4680      	mov	r8, r0
 800da52:	4639      	mov	r1, r7
 800da54:	4630      	mov	r0, r6
 800da56:	f7ff fe01 	bl	800d65c <_Bfree>
 800da5a:	4647      	mov	r7, r8
 800da5c:	106d      	asrs	r5, r5, #1
 800da5e:	d00b      	beq.n	800da78 <__pow5mult+0xa0>
 800da60:	6820      	ldr	r0, [r4, #0]
 800da62:	b938      	cbnz	r0, 800da74 <__pow5mult+0x9c>
 800da64:	4622      	mov	r2, r4
 800da66:	4621      	mov	r1, r4
 800da68:	4630      	mov	r0, r6
 800da6a:	f7ff ff11 	bl	800d890 <__multiply>
 800da6e:	6020      	str	r0, [r4, #0]
 800da70:	f8c0 9000 	str.w	r9, [r0]
 800da74:	4604      	mov	r4, r0
 800da76:	e7e4      	b.n	800da42 <__pow5mult+0x6a>
 800da78:	4638      	mov	r0, r7
 800da7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da7e:	bf00      	nop
 800da80:	0800f300 	.word	0x0800f300
 800da84:	0800f196 	.word	0x0800f196
 800da88:	0800f1ad 	.word	0x0800f1ad

0800da8c <__lshift>:
 800da8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da90:	460c      	mov	r4, r1
 800da92:	4607      	mov	r7, r0
 800da94:	4691      	mov	r9, r2
 800da96:	6923      	ldr	r3, [r4, #16]
 800da98:	6849      	ldr	r1, [r1, #4]
 800da9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da9e:	68a3      	ldr	r3, [r4, #8]
 800daa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800daa4:	f108 0601 	add.w	r6, r8, #1
 800daa8:	42b3      	cmp	r3, r6
 800daaa:	db0b      	blt.n	800dac4 <__lshift+0x38>
 800daac:	4638      	mov	r0, r7
 800daae:	f7ff fd95 	bl	800d5dc <_Balloc>
 800dab2:	4605      	mov	r5, r0
 800dab4:	b948      	cbnz	r0, 800daca <__lshift+0x3e>
 800dab6:	4602      	mov	r2, r0
 800dab8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dabc:	4b27      	ldr	r3, [pc, #156]	; (800db5c <__lshift+0xd0>)
 800dabe:	4828      	ldr	r0, [pc, #160]	; (800db60 <__lshift+0xd4>)
 800dac0:	f000 fe78 	bl	800e7b4 <__assert_func>
 800dac4:	3101      	adds	r1, #1
 800dac6:	005b      	lsls	r3, r3, #1
 800dac8:	e7ee      	b.n	800daa8 <__lshift+0x1c>
 800daca:	2300      	movs	r3, #0
 800dacc:	f100 0114 	add.w	r1, r0, #20
 800dad0:	f100 0210 	add.w	r2, r0, #16
 800dad4:	4618      	mov	r0, r3
 800dad6:	4553      	cmp	r3, sl
 800dad8:	db33      	blt.n	800db42 <__lshift+0xb6>
 800dada:	6920      	ldr	r0, [r4, #16]
 800dadc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dae0:	f104 0314 	add.w	r3, r4, #20
 800dae4:	f019 091f 	ands.w	r9, r9, #31
 800dae8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800daec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800daf0:	d02b      	beq.n	800db4a <__lshift+0xbe>
 800daf2:	468a      	mov	sl, r1
 800daf4:	2200      	movs	r2, #0
 800daf6:	f1c9 0e20 	rsb	lr, r9, #32
 800dafa:	6818      	ldr	r0, [r3, #0]
 800dafc:	fa00 f009 	lsl.w	r0, r0, r9
 800db00:	4302      	orrs	r2, r0
 800db02:	f84a 2b04 	str.w	r2, [sl], #4
 800db06:	f853 2b04 	ldr.w	r2, [r3], #4
 800db0a:	459c      	cmp	ip, r3
 800db0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800db10:	d8f3      	bhi.n	800dafa <__lshift+0x6e>
 800db12:	ebac 0304 	sub.w	r3, ip, r4
 800db16:	3b15      	subs	r3, #21
 800db18:	f023 0303 	bic.w	r3, r3, #3
 800db1c:	3304      	adds	r3, #4
 800db1e:	f104 0015 	add.w	r0, r4, #21
 800db22:	4584      	cmp	ip, r0
 800db24:	bf38      	it	cc
 800db26:	2304      	movcc	r3, #4
 800db28:	50ca      	str	r2, [r1, r3]
 800db2a:	b10a      	cbz	r2, 800db30 <__lshift+0xa4>
 800db2c:	f108 0602 	add.w	r6, r8, #2
 800db30:	3e01      	subs	r6, #1
 800db32:	4638      	mov	r0, r7
 800db34:	4621      	mov	r1, r4
 800db36:	612e      	str	r6, [r5, #16]
 800db38:	f7ff fd90 	bl	800d65c <_Bfree>
 800db3c:	4628      	mov	r0, r5
 800db3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db42:	f842 0f04 	str.w	r0, [r2, #4]!
 800db46:	3301      	adds	r3, #1
 800db48:	e7c5      	b.n	800dad6 <__lshift+0x4a>
 800db4a:	3904      	subs	r1, #4
 800db4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db50:	459c      	cmp	ip, r3
 800db52:	f841 2f04 	str.w	r2, [r1, #4]!
 800db56:	d8f9      	bhi.n	800db4c <__lshift+0xc0>
 800db58:	e7ea      	b.n	800db30 <__lshift+0xa4>
 800db5a:	bf00      	nop
 800db5c:	0800f10c 	.word	0x0800f10c
 800db60:	0800f1ad 	.word	0x0800f1ad

0800db64 <__mcmp>:
 800db64:	4603      	mov	r3, r0
 800db66:	690a      	ldr	r2, [r1, #16]
 800db68:	6900      	ldr	r0, [r0, #16]
 800db6a:	b530      	push	{r4, r5, lr}
 800db6c:	1a80      	subs	r0, r0, r2
 800db6e:	d10d      	bne.n	800db8c <__mcmp+0x28>
 800db70:	3314      	adds	r3, #20
 800db72:	3114      	adds	r1, #20
 800db74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800db78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800db7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db84:	4295      	cmp	r5, r2
 800db86:	d002      	beq.n	800db8e <__mcmp+0x2a>
 800db88:	d304      	bcc.n	800db94 <__mcmp+0x30>
 800db8a:	2001      	movs	r0, #1
 800db8c:	bd30      	pop	{r4, r5, pc}
 800db8e:	42a3      	cmp	r3, r4
 800db90:	d3f4      	bcc.n	800db7c <__mcmp+0x18>
 800db92:	e7fb      	b.n	800db8c <__mcmp+0x28>
 800db94:	f04f 30ff 	mov.w	r0, #4294967295
 800db98:	e7f8      	b.n	800db8c <__mcmp+0x28>
	...

0800db9c <__mdiff>:
 800db9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba0:	460c      	mov	r4, r1
 800dba2:	4606      	mov	r6, r0
 800dba4:	4611      	mov	r1, r2
 800dba6:	4620      	mov	r0, r4
 800dba8:	4692      	mov	sl, r2
 800dbaa:	f7ff ffdb 	bl	800db64 <__mcmp>
 800dbae:	1e05      	subs	r5, r0, #0
 800dbb0:	d111      	bne.n	800dbd6 <__mdiff+0x3a>
 800dbb2:	4629      	mov	r1, r5
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f7ff fd11 	bl	800d5dc <_Balloc>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	b928      	cbnz	r0, 800dbca <__mdiff+0x2e>
 800dbbe:	f240 2132 	movw	r1, #562	; 0x232
 800dbc2:	4b3c      	ldr	r3, [pc, #240]	; (800dcb4 <__mdiff+0x118>)
 800dbc4:	483c      	ldr	r0, [pc, #240]	; (800dcb8 <__mdiff+0x11c>)
 800dbc6:	f000 fdf5 	bl	800e7b4 <__assert_func>
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd6:	bfa4      	itt	ge
 800dbd8:	4653      	movge	r3, sl
 800dbda:	46a2      	movge	sl, r4
 800dbdc:	4630      	mov	r0, r6
 800dbde:	f8da 1004 	ldr.w	r1, [sl, #4]
 800dbe2:	bfa6      	itte	ge
 800dbe4:	461c      	movge	r4, r3
 800dbe6:	2500      	movge	r5, #0
 800dbe8:	2501      	movlt	r5, #1
 800dbea:	f7ff fcf7 	bl	800d5dc <_Balloc>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	b918      	cbnz	r0, 800dbfa <__mdiff+0x5e>
 800dbf2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dbf6:	4b2f      	ldr	r3, [pc, #188]	; (800dcb4 <__mdiff+0x118>)
 800dbf8:	e7e4      	b.n	800dbc4 <__mdiff+0x28>
 800dbfa:	f100 0814 	add.w	r8, r0, #20
 800dbfe:	f8da 7010 	ldr.w	r7, [sl, #16]
 800dc02:	60c5      	str	r5, [r0, #12]
 800dc04:	f04f 0c00 	mov.w	ip, #0
 800dc08:	f10a 0514 	add.w	r5, sl, #20
 800dc0c:	f10a 0010 	add.w	r0, sl, #16
 800dc10:	46c2      	mov	sl, r8
 800dc12:	6926      	ldr	r6, [r4, #16]
 800dc14:	f104 0914 	add.w	r9, r4, #20
 800dc18:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800dc1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dc20:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800dc24:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc28:	fa1f f18b 	uxth.w	r1, fp
 800dc2c:	4461      	add	r1, ip
 800dc2e:	fa1f fc83 	uxth.w	ip, r3
 800dc32:	0c1b      	lsrs	r3, r3, #16
 800dc34:	eba1 010c 	sub.w	r1, r1, ip
 800dc38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc3c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800dc40:	b289      	uxth	r1, r1
 800dc42:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800dc46:	454e      	cmp	r6, r9
 800dc48:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dc4c:	f84a 3b04 	str.w	r3, [sl], #4
 800dc50:	d8e6      	bhi.n	800dc20 <__mdiff+0x84>
 800dc52:	1b33      	subs	r3, r6, r4
 800dc54:	3b15      	subs	r3, #21
 800dc56:	f023 0303 	bic.w	r3, r3, #3
 800dc5a:	3415      	adds	r4, #21
 800dc5c:	3304      	adds	r3, #4
 800dc5e:	42a6      	cmp	r6, r4
 800dc60:	bf38      	it	cc
 800dc62:	2304      	movcc	r3, #4
 800dc64:	441d      	add	r5, r3
 800dc66:	4443      	add	r3, r8
 800dc68:	461e      	mov	r6, r3
 800dc6a:	462c      	mov	r4, r5
 800dc6c:	4574      	cmp	r4, lr
 800dc6e:	d30e      	bcc.n	800dc8e <__mdiff+0xf2>
 800dc70:	f10e 0103 	add.w	r1, lr, #3
 800dc74:	1b49      	subs	r1, r1, r5
 800dc76:	f021 0103 	bic.w	r1, r1, #3
 800dc7a:	3d03      	subs	r5, #3
 800dc7c:	45ae      	cmp	lr, r5
 800dc7e:	bf38      	it	cc
 800dc80:	2100      	movcc	r1, #0
 800dc82:	4419      	add	r1, r3
 800dc84:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800dc88:	b18b      	cbz	r3, 800dcae <__mdiff+0x112>
 800dc8a:	6117      	str	r7, [r2, #16]
 800dc8c:	e7a0      	b.n	800dbd0 <__mdiff+0x34>
 800dc8e:	f854 8b04 	ldr.w	r8, [r4], #4
 800dc92:	fa1f f188 	uxth.w	r1, r8
 800dc96:	4461      	add	r1, ip
 800dc98:	1408      	asrs	r0, r1, #16
 800dc9a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800dc9e:	b289      	uxth	r1, r1
 800dca0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dca4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dca8:	f846 1b04 	str.w	r1, [r6], #4
 800dcac:	e7de      	b.n	800dc6c <__mdiff+0xd0>
 800dcae:	3f01      	subs	r7, #1
 800dcb0:	e7e8      	b.n	800dc84 <__mdiff+0xe8>
 800dcb2:	bf00      	nop
 800dcb4:	0800f10c 	.word	0x0800f10c
 800dcb8:	0800f1ad 	.word	0x0800f1ad

0800dcbc <__ulp>:
 800dcbc:	4b11      	ldr	r3, [pc, #68]	; (800dd04 <__ulp+0x48>)
 800dcbe:	400b      	ands	r3, r1
 800dcc0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	dd02      	ble.n	800dcce <__ulp+0x12>
 800dcc8:	2000      	movs	r0, #0
 800dcca:	4619      	mov	r1, r3
 800dccc:	4770      	bx	lr
 800dcce:	425b      	negs	r3, r3
 800dcd0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800dcd4:	f04f 0000 	mov.w	r0, #0
 800dcd8:	f04f 0100 	mov.w	r1, #0
 800dcdc:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dce0:	da04      	bge.n	800dcec <__ulp+0x30>
 800dce2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dce6:	fa43 f102 	asr.w	r1, r3, r2
 800dcea:	4770      	bx	lr
 800dcec:	f1a2 0314 	sub.w	r3, r2, #20
 800dcf0:	2b1e      	cmp	r3, #30
 800dcf2:	bfd6      	itet	le
 800dcf4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800dcf8:	2301      	movgt	r3, #1
 800dcfa:	fa22 f303 	lsrle.w	r3, r2, r3
 800dcfe:	4618      	mov	r0, r3
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	7ff00000 	.word	0x7ff00000

0800dd08 <__b2d>:
 800dd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd0c:	6907      	ldr	r7, [r0, #16]
 800dd0e:	f100 0914 	add.w	r9, r0, #20
 800dd12:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800dd16:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800dd1a:	f1a7 0804 	sub.w	r8, r7, #4
 800dd1e:	4630      	mov	r0, r6
 800dd20:	f7ff fd52 	bl	800d7c8 <__hi0bits>
 800dd24:	f1c0 0320 	rsb	r3, r0, #32
 800dd28:	280a      	cmp	r0, #10
 800dd2a:	600b      	str	r3, [r1, #0]
 800dd2c:	491f      	ldr	r1, [pc, #124]	; (800ddac <__b2d+0xa4>)
 800dd2e:	dc17      	bgt.n	800dd60 <__b2d+0x58>
 800dd30:	45c1      	cmp	r9, r8
 800dd32:	bf28      	it	cs
 800dd34:	2200      	movcs	r2, #0
 800dd36:	f1c0 0c0b 	rsb	ip, r0, #11
 800dd3a:	fa26 f30c 	lsr.w	r3, r6, ip
 800dd3e:	bf38      	it	cc
 800dd40:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800dd44:	ea43 0501 	orr.w	r5, r3, r1
 800dd48:	f100 0315 	add.w	r3, r0, #21
 800dd4c:	fa06 f303 	lsl.w	r3, r6, r3
 800dd50:	fa22 f20c 	lsr.w	r2, r2, ip
 800dd54:	ea43 0402 	orr.w	r4, r3, r2
 800dd58:	4620      	mov	r0, r4
 800dd5a:	4629      	mov	r1, r5
 800dd5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd60:	45c1      	cmp	r9, r8
 800dd62:	bf2e      	itee	cs
 800dd64:	2200      	movcs	r2, #0
 800dd66:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800dd6a:	f1a7 0808 	subcc.w	r8, r7, #8
 800dd6e:	f1b0 030b 	subs.w	r3, r0, #11
 800dd72:	d016      	beq.n	800dda2 <__b2d+0x9a>
 800dd74:	f1c3 0720 	rsb	r7, r3, #32
 800dd78:	fa22 f107 	lsr.w	r1, r2, r7
 800dd7c:	45c8      	cmp	r8, r9
 800dd7e:	fa06 f603 	lsl.w	r6, r6, r3
 800dd82:	ea46 0601 	orr.w	r6, r6, r1
 800dd86:	bf94      	ite	ls
 800dd88:	2100      	movls	r1, #0
 800dd8a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800dd8e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800dd92:	fa02 f003 	lsl.w	r0, r2, r3
 800dd96:	40f9      	lsrs	r1, r7
 800dd98:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dd9c:	ea40 0401 	orr.w	r4, r0, r1
 800dda0:	e7da      	b.n	800dd58 <__b2d+0x50>
 800dda2:	4614      	mov	r4, r2
 800dda4:	ea46 0501 	orr.w	r5, r6, r1
 800dda8:	e7d6      	b.n	800dd58 <__b2d+0x50>
 800ddaa:	bf00      	nop
 800ddac:	3ff00000 	.word	0x3ff00000

0800ddb0 <__d2b>:
 800ddb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ddb4:	2101      	movs	r1, #1
 800ddb6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ddba:	4690      	mov	r8, r2
 800ddbc:	461d      	mov	r5, r3
 800ddbe:	f7ff fc0d 	bl	800d5dc <_Balloc>
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	b930      	cbnz	r0, 800ddd4 <__d2b+0x24>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	f240 310a 	movw	r1, #778	; 0x30a
 800ddcc:	4b24      	ldr	r3, [pc, #144]	; (800de60 <__d2b+0xb0>)
 800ddce:	4825      	ldr	r0, [pc, #148]	; (800de64 <__d2b+0xb4>)
 800ddd0:	f000 fcf0 	bl	800e7b4 <__assert_func>
 800ddd4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ddd8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800dddc:	bb2d      	cbnz	r5, 800de2a <__d2b+0x7a>
 800ddde:	9301      	str	r3, [sp, #4]
 800dde0:	f1b8 0300 	subs.w	r3, r8, #0
 800dde4:	d026      	beq.n	800de34 <__d2b+0x84>
 800dde6:	4668      	mov	r0, sp
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	f7ff fd0d 	bl	800d808 <__lo0bits>
 800ddee:	9900      	ldr	r1, [sp, #0]
 800ddf0:	b1f0      	cbz	r0, 800de30 <__d2b+0x80>
 800ddf2:	9a01      	ldr	r2, [sp, #4]
 800ddf4:	f1c0 0320 	rsb	r3, r0, #32
 800ddf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ddfc:	430b      	orrs	r3, r1
 800ddfe:	40c2      	lsrs	r2, r0
 800de00:	6163      	str	r3, [r4, #20]
 800de02:	9201      	str	r2, [sp, #4]
 800de04:	9b01      	ldr	r3, [sp, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	bf14      	ite	ne
 800de0a:	2102      	movne	r1, #2
 800de0c:	2101      	moveq	r1, #1
 800de0e:	61a3      	str	r3, [r4, #24]
 800de10:	6121      	str	r1, [r4, #16]
 800de12:	b1c5      	cbz	r5, 800de46 <__d2b+0x96>
 800de14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800de18:	4405      	add	r5, r0
 800de1a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de1e:	603d      	str	r5, [r7, #0]
 800de20:	6030      	str	r0, [r6, #0]
 800de22:	4620      	mov	r0, r4
 800de24:	b002      	add	sp, #8
 800de26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de2e:	e7d6      	b.n	800ddde <__d2b+0x2e>
 800de30:	6161      	str	r1, [r4, #20]
 800de32:	e7e7      	b.n	800de04 <__d2b+0x54>
 800de34:	a801      	add	r0, sp, #4
 800de36:	f7ff fce7 	bl	800d808 <__lo0bits>
 800de3a:	2101      	movs	r1, #1
 800de3c:	9b01      	ldr	r3, [sp, #4]
 800de3e:	6121      	str	r1, [r4, #16]
 800de40:	6163      	str	r3, [r4, #20]
 800de42:	3020      	adds	r0, #32
 800de44:	e7e5      	b.n	800de12 <__d2b+0x62>
 800de46:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800de4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de4e:	6038      	str	r0, [r7, #0]
 800de50:	6918      	ldr	r0, [r3, #16]
 800de52:	f7ff fcb9 	bl	800d7c8 <__hi0bits>
 800de56:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800de5a:	6031      	str	r1, [r6, #0]
 800de5c:	e7e1      	b.n	800de22 <__d2b+0x72>
 800de5e:	bf00      	nop
 800de60:	0800f10c 	.word	0x0800f10c
 800de64:	0800f1ad 	.word	0x0800f1ad

0800de68 <__ratio>:
 800de68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6c:	4688      	mov	r8, r1
 800de6e:	4669      	mov	r1, sp
 800de70:	4681      	mov	r9, r0
 800de72:	f7ff ff49 	bl	800dd08 <__b2d>
 800de76:	460f      	mov	r7, r1
 800de78:	4604      	mov	r4, r0
 800de7a:	460d      	mov	r5, r1
 800de7c:	4640      	mov	r0, r8
 800de7e:	a901      	add	r1, sp, #4
 800de80:	f7ff ff42 	bl	800dd08 <__b2d>
 800de84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de88:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800de8c:	468b      	mov	fp, r1
 800de8e:	eba3 0c02 	sub.w	ip, r3, r2
 800de92:	e9dd 3200 	ldrd	r3, r2, [sp]
 800de96:	1a9b      	subs	r3, r3, r2
 800de98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	bfd5      	itete	le
 800dea0:	460a      	movle	r2, r1
 800dea2:	462a      	movgt	r2, r5
 800dea4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dea8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800deac:	bfd8      	it	le
 800deae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800deb2:	465b      	mov	r3, fp
 800deb4:	4602      	mov	r2, r0
 800deb6:	4639      	mov	r1, r7
 800deb8:	4620      	mov	r0, r4
 800deba:	f7f7 fc41 	bl	8005740 <__aeabi_ddiv>
 800debe:	b003      	add	sp, #12
 800dec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dec4 <__copybits>:
 800dec4:	3901      	subs	r1, #1
 800dec6:	b570      	push	{r4, r5, r6, lr}
 800dec8:	1149      	asrs	r1, r1, #5
 800deca:	6914      	ldr	r4, [r2, #16]
 800decc:	3101      	adds	r1, #1
 800dece:	f102 0314 	add.w	r3, r2, #20
 800ded2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ded6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800deda:	1f05      	subs	r5, r0, #4
 800dedc:	42a3      	cmp	r3, r4
 800dede:	d30c      	bcc.n	800defa <__copybits+0x36>
 800dee0:	1aa3      	subs	r3, r4, r2
 800dee2:	3b11      	subs	r3, #17
 800dee4:	f023 0303 	bic.w	r3, r3, #3
 800dee8:	3211      	adds	r2, #17
 800deea:	42a2      	cmp	r2, r4
 800deec:	bf88      	it	hi
 800deee:	2300      	movhi	r3, #0
 800def0:	4418      	add	r0, r3
 800def2:	2300      	movs	r3, #0
 800def4:	4288      	cmp	r0, r1
 800def6:	d305      	bcc.n	800df04 <__copybits+0x40>
 800def8:	bd70      	pop	{r4, r5, r6, pc}
 800defa:	f853 6b04 	ldr.w	r6, [r3], #4
 800defe:	f845 6f04 	str.w	r6, [r5, #4]!
 800df02:	e7eb      	b.n	800dedc <__copybits+0x18>
 800df04:	f840 3b04 	str.w	r3, [r0], #4
 800df08:	e7f4      	b.n	800def4 <__copybits+0x30>

0800df0a <__any_on>:
 800df0a:	f100 0214 	add.w	r2, r0, #20
 800df0e:	6900      	ldr	r0, [r0, #16]
 800df10:	114b      	asrs	r3, r1, #5
 800df12:	4298      	cmp	r0, r3
 800df14:	b510      	push	{r4, lr}
 800df16:	db11      	blt.n	800df3c <__any_on+0x32>
 800df18:	dd0a      	ble.n	800df30 <__any_on+0x26>
 800df1a:	f011 011f 	ands.w	r1, r1, #31
 800df1e:	d007      	beq.n	800df30 <__any_on+0x26>
 800df20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800df24:	fa24 f001 	lsr.w	r0, r4, r1
 800df28:	fa00 f101 	lsl.w	r1, r0, r1
 800df2c:	428c      	cmp	r4, r1
 800df2e:	d10b      	bne.n	800df48 <__any_on+0x3e>
 800df30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df34:	4293      	cmp	r3, r2
 800df36:	d803      	bhi.n	800df40 <__any_on+0x36>
 800df38:	2000      	movs	r0, #0
 800df3a:	bd10      	pop	{r4, pc}
 800df3c:	4603      	mov	r3, r0
 800df3e:	e7f7      	b.n	800df30 <__any_on+0x26>
 800df40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df44:	2900      	cmp	r1, #0
 800df46:	d0f5      	beq.n	800df34 <__any_on+0x2a>
 800df48:	2001      	movs	r0, #1
 800df4a:	e7f6      	b.n	800df3a <__any_on+0x30>

0800df4c <_calloc_r>:
 800df4c:	b538      	push	{r3, r4, r5, lr}
 800df4e:	fb02 f501 	mul.w	r5, r2, r1
 800df52:	4629      	mov	r1, r5
 800df54:	f000 f854 	bl	800e000 <_malloc_r>
 800df58:	4604      	mov	r4, r0
 800df5a:	b118      	cbz	r0, 800df64 <_calloc_r+0x18>
 800df5c:	462a      	mov	r2, r5
 800df5e:	2100      	movs	r1, #0
 800df60:	f7fd fd08 	bl	800b974 <memset>
 800df64:	4620      	mov	r0, r4
 800df66:	bd38      	pop	{r3, r4, r5, pc}

0800df68 <_free_r>:
 800df68:	b538      	push	{r3, r4, r5, lr}
 800df6a:	4605      	mov	r5, r0
 800df6c:	2900      	cmp	r1, #0
 800df6e:	d043      	beq.n	800dff8 <_free_r+0x90>
 800df70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df74:	1f0c      	subs	r4, r1, #4
 800df76:	2b00      	cmp	r3, #0
 800df78:	bfb8      	it	lt
 800df7a:	18e4      	addlt	r4, r4, r3
 800df7c:	f000 fcbe 	bl	800e8fc <__malloc_lock>
 800df80:	4a1e      	ldr	r2, [pc, #120]	; (800dffc <_free_r+0x94>)
 800df82:	6813      	ldr	r3, [r2, #0]
 800df84:	4610      	mov	r0, r2
 800df86:	b933      	cbnz	r3, 800df96 <_free_r+0x2e>
 800df88:	6063      	str	r3, [r4, #4]
 800df8a:	6014      	str	r4, [r2, #0]
 800df8c:	4628      	mov	r0, r5
 800df8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df92:	f000 bcb9 	b.w	800e908 <__malloc_unlock>
 800df96:	42a3      	cmp	r3, r4
 800df98:	d90a      	bls.n	800dfb0 <_free_r+0x48>
 800df9a:	6821      	ldr	r1, [r4, #0]
 800df9c:	1862      	adds	r2, r4, r1
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	bf01      	itttt	eq
 800dfa2:	681a      	ldreq	r2, [r3, #0]
 800dfa4:	685b      	ldreq	r3, [r3, #4]
 800dfa6:	1852      	addeq	r2, r2, r1
 800dfa8:	6022      	streq	r2, [r4, #0]
 800dfaa:	6063      	str	r3, [r4, #4]
 800dfac:	6004      	str	r4, [r0, #0]
 800dfae:	e7ed      	b.n	800df8c <_free_r+0x24>
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	b10b      	cbz	r3, 800dfba <_free_r+0x52>
 800dfb6:	42a3      	cmp	r3, r4
 800dfb8:	d9fa      	bls.n	800dfb0 <_free_r+0x48>
 800dfba:	6811      	ldr	r1, [r2, #0]
 800dfbc:	1850      	adds	r0, r2, r1
 800dfbe:	42a0      	cmp	r0, r4
 800dfc0:	d10b      	bne.n	800dfda <_free_r+0x72>
 800dfc2:	6820      	ldr	r0, [r4, #0]
 800dfc4:	4401      	add	r1, r0
 800dfc6:	1850      	adds	r0, r2, r1
 800dfc8:	4283      	cmp	r3, r0
 800dfca:	6011      	str	r1, [r2, #0]
 800dfcc:	d1de      	bne.n	800df8c <_free_r+0x24>
 800dfce:	6818      	ldr	r0, [r3, #0]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	4401      	add	r1, r0
 800dfd4:	6011      	str	r1, [r2, #0]
 800dfd6:	6053      	str	r3, [r2, #4]
 800dfd8:	e7d8      	b.n	800df8c <_free_r+0x24>
 800dfda:	d902      	bls.n	800dfe2 <_free_r+0x7a>
 800dfdc:	230c      	movs	r3, #12
 800dfde:	602b      	str	r3, [r5, #0]
 800dfe0:	e7d4      	b.n	800df8c <_free_r+0x24>
 800dfe2:	6820      	ldr	r0, [r4, #0]
 800dfe4:	1821      	adds	r1, r4, r0
 800dfe6:	428b      	cmp	r3, r1
 800dfe8:	bf01      	itttt	eq
 800dfea:	6819      	ldreq	r1, [r3, #0]
 800dfec:	685b      	ldreq	r3, [r3, #4]
 800dfee:	1809      	addeq	r1, r1, r0
 800dff0:	6021      	streq	r1, [r4, #0]
 800dff2:	6063      	str	r3, [r4, #4]
 800dff4:	6054      	str	r4, [r2, #4]
 800dff6:	e7c9      	b.n	800df8c <_free_r+0x24>
 800dff8:	bd38      	pop	{r3, r4, r5, pc}
 800dffa:	bf00      	nop
 800dffc:	20002238 	.word	0x20002238

0800e000 <_malloc_r>:
 800e000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e002:	1ccd      	adds	r5, r1, #3
 800e004:	f025 0503 	bic.w	r5, r5, #3
 800e008:	3508      	adds	r5, #8
 800e00a:	2d0c      	cmp	r5, #12
 800e00c:	bf38      	it	cc
 800e00e:	250c      	movcc	r5, #12
 800e010:	2d00      	cmp	r5, #0
 800e012:	4606      	mov	r6, r0
 800e014:	db01      	blt.n	800e01a <_malloc_r+0x1a>
 800e016:	42a9      	cmp	r1, r5
 800e018:	d903      	bls.n	800e022 <_malloc_r+0x22>
 800e01a:	230c      	movs	r3, #12
 800e01c:	6033      	str	r3, [r6, #0]
 800e01e:	2000      	movs	r0, #0
 800e020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e022:	f000 fc6b 	bl	800e8fc <__malloc_lock>
 800e026:	4921      	ldr	r1, [pc, #132]	; (800e0ac <_malloc_r+0xac>)
 800e028:	680a      	ldr	r2, [r1, #0]
 800e02a:	4614      	mov	r4, r2
 800e02c:	b99c      	cbnz	r4, 800e056 <_malloc_r+0x56>
 800e02e:	4f20      	ldr	r7, [pc, #128]	; (800e0b0 <_malloc_r+0xb0>)
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	b923      	cbnz	r3, 800e03e <_malloc_r+0x3e>
 800e034:	4621      	mov	r1, r4
 800e036:	4630      	mov	r0, r6
 800e038:	f000 fb34 	bl	800e6a4 <_sbrk_r>
 800e03c:	6038      	str	r0, [r7, #0]
 800e03e:	4629      	mov	r1, r5
 800e040:	4630      	mov	r0, r6
 800e042:	f000 fb2f 	bl	800e6a4 <_sbrk_r>
 800e046:	1c43      	adds	r3, r0, #1
 800e048:	d123      	bne.n	800e092 <_malloc_r+0x92>
 800e04a:	230c      	movs	r3, #12
 800e04c:	4630      	mov	r0, r6
 800e04e:	6033      	str	r3, [r6, #0]
 800e050:	f000 fc5a 	bl	800e908 <__malloc_unlock>
 800e054:	e7e3      	b.n	800e01e <_malloc_r+0x1e>
 800e056:	6823      	ldr	r3, [r4, #0]
 800e058:	1b5b      	subs	r3, r3, r5
 800e05a:	d417      	bmi.n	800e08c <_malloc_r+0x8c>
 800e05c:	2b0b      	cmp	r3, #11
 800e05e:	d903      	bls.n	800e068 <_malloc_r+0x68>
 800e060:	6023      	str	r3, [r4, #0]
 800e062:	441c      	add	r4, r3
 800e064:	6025      	str	r5, [r4, #0]
 800e066:	e004      	b.n	800e072 <_malloc_r+0x72>
 800e068:	6863      	ldr	r3, [r4, #4]
 800e06a:	42a2      	cmp	r2, r4
 800e06c:	bf0c      	ite	eq
 800e06e:	600b      	streq	r3, [r1, #0]
 800e070:	6053      	strne	r3, [r2, #4]
 800e072:	4630      	mov	r0, r6
 800e074:	f000 fc48 	bl	800e908 <__malloc_unlock>
 800e078:	f104 000b 	add.w	r0, r4, #11
 800e07c:	1d23      	adds	r3, r4, #4
 800e07e:	f020 0007 	bic.w	r0, r0, #7
 800e082:	1ac2      	subs	r2, r0, r3
 800e084:	d0cc      	beq.n	800e020 <_malloc_r+0x20>
 800e086:	1a1b      	subs	r3, r3, r0
 800e088:	50a3      	str	r3, [r4, r2]
 800e08a:	e7c9      	b.n	800e020 <_malloc_r+0x20>
 800e08c:	4622      	mov	r2, r4
 800e08e:	6864      	ldr	r4, [r4, #4]
 800e090:	e7cc      	b.n	800e02c <_malloc_r+0x2c>
 800e092:	1cc4      	adds	r4, r0, #3
 800e094:	f024 0403 	bic.w	r4, r4, #3
 800e098:	42a0      	cmp	r0, r4
 800e09a:	d0e3      	beq.n	800e064 <_malloc_r+0x64>
 800e09c:	1a21      	subs	r1, r4, r0
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f000 fb00 	bl	800e6a4 <_sbrk_r>
 800e0a4:	3001      	adds	r0, #1
 800e0a6:	d1dd      	bne.n	800e064 <_malloc_r+0x64>
 800e0a8:	e7cf      	b.n	800e04a <_malloc_r+0x4a>
 800e0aa:	bf00      	nop
 800e0ac:	20002238 	.word	0x20002238
 800e0b0:	2000223c 	.word	0x2000223c

0800e0b4 <__ssputs_r>:
 800e0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b8:	688e      	ldr	r6, [r1, #8]
 800e0ba:	4682      	mov	sl, r0
 800e0bc:	429e      	cmp	r6, r3
 800e0be:	460c      	mov	r4, r1
 800e0c0:	4690      	mov	r8, r2
 800e0c2:	461f      	mov	r7, r3
 800e0c4:	d838      	bhi.n	800e138 <__ssputs_r+0x84>
 800e0c6:	898a      	ldrh	r2, [r1, #12]
 800e0c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e0cc:	d032      	beq.n	800e134 <__ssputs_r+0x80>
 800e0ce:	6825      	ldr	r5, [r4, #0]
 800e0d0:	6909      	ldr	r1, [r1, #16]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	eba5 0901 	sub.w	r9, r5, r1
 800e0d8:	6965      	ldr	r5, [r4, #20]
 800e0da:	444b      	add	r3, r9
 800e0dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0e4:	106d      	asrs	r5, r5, #1
 800e0e6:	429d      	cmp	r5, r3
 800e0e8:	bf38      	it	cc
 800e0ea:	461d      	movcc	r5, r3
 800e0ec:	0553      	lsls	r3, r2, #21
 800e0ee:	d531      	bpl.n	800e154 <__ssputs_r+0xa0>
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	f7ff ff85 	bl	800e000 <_malloc_r>
 800e0f6:	4606      	mov	r6, r0
 800e0f8:	b950      	cbnz	r0, 800e110 <__ssputs_r+0x5c>
 800e0fa:	230c      	movs	r3, #12
 800e0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e100:	f8ca 3000 	str.w	r3, [sl]
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e10a:	81a3      	strh	r3, [r4, #12]
 800e10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e110:	464a      	mov	r2, r9
 800e112:	6921      	ldr	r1, [r4, #16]
 800e114:	f7fd fc20 	bl	800b958 <memcpy>
 800e118:	89a3      	ldrh	r3, [r4, #12]
 800e11a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e11e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e122:	81a3      	strh	r3, [r4, #12]
 800e124:	6126      	str	r6, [r4, #16]
 800e126:	444e      	add	r6, r9
 800e128:	6026      	str	r6, [r4, #0]
 800e12a:	463e      	mov	r6, r7
 800e12c:	6165      	str	r5, [r4, #20]
 800e12e:	eba5 0509 	sub.w	r5, r5, r9
 800e132:	60a5      	str	r5, [r4, #8]
 800e134:	42be      	cmp	r6, r7
 800e136:	d900      	bls.n	800e13a <__ssputs_r+0x86>
 800e138:	463e      	mov	r6, r7
 800e13a:	4632      	mov	r2, r6
 800e13c:	4641      	mov	r1, r8
 800e13e:	6820      	ldr	r0, [r4, #0]
 800e140:	f000 fbc2 	bl	800e8c8 <memmove>
 800e144:	68a3      	ldr	r3, [r4, #8]
 800e146:	6822      	ldr	r2, [r4, #0]
 800e148:	1b9b      	subs	r3, r3, r6
 800e14a:	4432      	add	r2, r6
 800e14c:	2000      	movs	r0, #0
 800e14e:	60a3      	str	r3, [r4, #8]
 800e150:	6022      	str	r2, [r4, #0]
 800e152:	e7db      	b.n	800e10c <__ssputs_r+0x58>
 800e154:	462a      	mov	r2, r5
 800e156:	f000 fbdd 	bl	800e914 <_realloc_r>
 800e15a:	4606      	mov	r6, r0
 800e15c:	2800      	cmp	r0, #0
 800e15e:	d1e1      	bne.n	800e124 <__ssputs_r+0x70>
 800e160:	4650      	mov	r0, sl
 800e162:	6921      	ldr	r1, [r4, #16]
 800e164:	f7ff ff00 	bl	800df68 <_free_r>
 800e168:	e7c7      	b.n	800e0fa <__ssputs_r+0x46>
	...

0800e16c <_svfiprintf_r>:
 800e16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e170:	4698      	mov	r8, r3
 800e172:	898b      	ldrh	r3, [r1, #12]
 800e174:	4607      	mov	r7, r0
 800e176:	061b      	lsls	r3, r3, #24
 800e178:	460d      	mov	r5, r1
 800e17a:	4614      	mov	r4, r2
 800e17c:	b09d      	sub	sp, #116	; 0x74
 800e17e:	d50e      	bpl.n	800e19e <_svfiprintf_r+0x32>
 800e180:	690b      	ldr	r3, [r1, #16]
 800e182:	b963      	cbnz	r3, 800e19e <_svfiprintf_r+0x32>
 800e184:	2140      	movs	r1, #64	; 0x40
 800e186:	f7ff ff3b 	bl	800e000 <_malloc_r>
 800e18a:	6028      	str	r0, [r5, #0]
 800e18c:	6128      	str	r0, [r5, #16]
 800e18e:	b920      	cbnz	r0, 800e19a <_svfiprintf_r+0x2e>
 800e190:	230c      	movs	r3, #12
 800e192:	603b      	str	r3, [r7, #0]
 800e194:	f04f 30ff 	mov.w	r0, #4294967295
 800e198:	e0d1      	b.n	800e33e <_svfiprintf_r+0x1d2>
 800e19a:	2340      	movs	r3, #64	; 0x40
 800e19c:	616b      	str	r3, [r5, #20]
 800e19e:	2300      	movs	r3, #0
 800e1a0:	9309      	str	r3, [sp, #36]	; 0x24
 800e1a2:	2320      	movs	r3, #32
 800e1a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1a8:	2330      	movs	r3, #48	; 0x30
 800e1aa:	f04f 0901 	mov.w	r9, #1
 800e1ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e358 <_svfiprintf_r+0x1ec>
 800e1b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1ba:	4623      	mov	r3, r4
 800e1bc:	469a      	mov	sl, r3
 800e1be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1c2:	b10a      	cbz	r2, 800e1c8 <_svfiprintf_r+0x5c>
 800e1c4:	2a25      	cmp	r2, #37	; 0x25
 800e1c6:	d1f9      	bne.n	800e1bc <_svfiprintf_r+0x50>
 800e1c8:	ebba 0b04 	subs.w	fp, sl, r4
 800e1cc:	d00b      	beq.n	800e1e6 <_svfiprintf_r+0x7a>
 800e1ce:	465b      	mov	r3, fp
 800e1d0:	4622      	mov	r2, r4
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	4638      	mov	r0, r7
 800e1d6:	f7ff ff6d 	bl	800e0b4 <__ssputs_r>
 800e1da:	3001      	adds	r0, #1
 800e1dc:	f000 80aa 	beq.w	800e334 <_svfiprintf_r+0x1c8>
 800e1e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1e2:	445a      	add	r2, fp
 800e1e4:	9209      	str	r2, [sp, #36]	; 0x24
 800e1e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	f000 80a2 	beq.w	800e334 <_svfiprintf_r+0x1c8>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1fa:	f10a 0a01 	add.w	sl, sl, #1
 800e1fe:	9304      	str	r3, [sp, #16]
 800e200:	9307      	str	r3, [sp, #28]
 800e202:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e206:	931a      	str	r3, [sp, #104]	; 0x68
 800e208:	4654      	mov	r4, sl
 800e20a:	2205      	movs	r2, #5
 800e20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e210:	4851      	ldr	r0, [pc, #324]	; (800e358 <_svfiprintf_r+0x1ec>)
 800e212:	f000 fb4b 	bl	800e8ac <memchr>
 800e216:	9a04      	ldr	r2, [sp, #16]
 800e218:	b9d8      	cbnz	r0, 800e252 <_svfiprintf_r+0xe6>
 800e21a:	06d0      	lsls	r0, r2, #27
 800e21c:	bf44      	itt	mi
 800e21e:	2320      	movmi	r3, #32
 800e220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e224:	0711      	lsls	r1, r2, #28
 800e226:	bf44      	itt	mi
 800e228:	232b      	movmi	r3, #43	; 0x2b
 800e22a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e22e:	f89a 3000 	ldrb.w	r3, [sl]
 800e232:	2b2a      	cmp	r3, #42	; 0x2a
 800e234:	d015      	beq.n	800e262 <_svfiprintf_r+0xf6>
 800e236:	4654      	mov	r4, sl
 800e238:	2000      	movs	r0, #0
 800e23a:	f04f 0c0a 	mov.w	ip, #10
 800e23e:	9a07      	ldr	r2, [sp, #28]
 800e240:	4621      	mov	r1, r4
 800e242:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e246:	3b30      	subs	r3, #48	; 0x30
 800e248:	2b09      	cmp	r3, #9
 800e24a:	d94e      	bls.n	800e2ea <_svfiprintf_r+0x17e>
 800e24c:	b1b0      	cbz	r0, 800e27c <_svfiprintf_r+0x110>
 800e24e:	9207      	str	r2, [sp, #28]
 800e250:	e014      	b.n	800e27c <_svfiprintf_r+0x110>
 800e252:	eba0 0308 	sub.w	r3, r0, r8
 800e256:	fa09 f303 	lsl.w	r3, r9, r3
 800e25a:	4313      	orrs	r3, r2
 800e25c:	46a2      	mov	sl, r4
 800e25e:	9304      	str	r3, [sp, #16]
 800e260:	e7d2      	b.n	800e208 <_svfiprintf_r+0x9c>
 800e262:	9b03      	ldr	r3, [sp, #12]
 800e264:	1d19      	adds	r1, r3, #4
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	9103      	str	r1, [sp, #12]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	bfbb      	ittet	lt
 800e26e:	425b      	neglt	r3, r3
 800e270:	f042 0202 	orrlt.w	r2, r2, #2
 800e274:	9307      	strge	r3, [sp, #28]
 800e276:	9307      	strlt	r3, [sp, #28]
 800e278:	bfb8      	it	lt
 800e27a:	9204      	strlt	r2, [sp, #16]
 800e27c:	7823      	ldrb	r3, [r4, #0]
 800e27e:	2b2e      	cmp	r3, #46	; 0x2e
 800e280:	d10c      	bne.n	800e29c <_svfiprintf_r+0x130>
 800e282:	7863      	ldrb	r3, [r4, #1]
 800e284:	2b2a      	cmp	r3, #42	; 0x2a
 800e286:	d135      	bne.n	800e2f4 <_svfiprintf_r+0x188>
 800e288:	9b03      	ldr	r3, [sp, #12]
 800e28a:	3402      	adds	r4, #2
 800e28c:	1d1a      	adds	r2, r3, #4
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	9203      	str	r2, [sp, #12]
 800e292:	2b00      	cmp	r3, #0
 800e294:	bfb8      	it	lt
 800e296:	f04f 33ff 	movlt.w	r3, #4294967295
 800e29a:	9305      	str	r3, [sp, #20]
 800e29c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e368 <_svfiprintf_r+0x1fc>
 800e2a0:	2203      	movs	r2, #3
 800e2a2:	4650      	mov	r0, sl
 800e2a4:	7821      	ldrb	r1, [r4, #0]
 800e2a6:	f000 fb01 	bl	800e8ac <memchr>
 800e2aa:	b140      	cbz	r0, 800e2be <_svfiprintf_r+0x152>
 800e2ac:	2340      	movs	r3, #64	; 0x40
 800e2ae:	eba0 000a 	sub.w	r0, r0, sl
 800e2b2:	fa03 f000 	lsl.w	r0, r3, r0
 800e2b6:	9b04      	ldr	r3, [sp, #16]
 800e2b8:	3401      	adds	r4, #1
 800e2ba:	4303      	orrs	r3, r0
 800e2bc:	9304      	str	r3, [sp, #16]
 800e2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2c2:	2206      	movs	r2, #6
 800e2c4:	4825      	ldr	r0, [pc, #148]	; (800e35c <_svfiprintf_r+0x1f0>)
 800e2c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2ca:	f000 faef 	bl	800e8ac <memchr>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d038      	beq.n	800e344 <_svfiprintf_r+0x1d8>
 800e2d2:	4b23      	ldr	r3, [pc, #140]	; (800e360 <_svfiprintf_r+0x1f4>)
 800e2d4:	bb1b      	cbnz	r3, 800e31e <_svfiprintf_r+0x1b2>
 800e2d6:	9b03      	ldr	r3, [sp, #12]
 800e2d8:	3307      	adds	r3, #7
 800e2da:	f023 0307 	bic.w	r3, r3, #7
 800e2de:	3308      	adds	r3, #8
 800e2e0:	9303      	str	r3, [sp, #12]
 800e2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2e4:	4433      	add	r3, r6
 800e2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e2e8:	e767      	b.n	800e1ba <_svfiprintf_r+0x4e>
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	2001      	movs	r0, #1
 800e2ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2f2:	e7a5      	b.n	800e240 <_svfiprintf_r+0xd4>
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	f04f 0c0a 	mov.w	ip, #10
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	3401      	adds	r4, #1
 800e2fe:	9305      	str	r3, [sp, #20]
 800e300:	4620      	mov	r0, r4
 800e302:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e306:	3a30      	subs	r2, #48	; 0x30
 800e308:	2a09      	cmp	r2, #9
 800e30a:	d903      	bls.n	800e314 <_svfiprintf_r+0x1a8>
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d0c5      	beq.n	800e29c <_svfiprintf_r+0x130>
 800e310:	9105      	str	r1, [sp, #20]
 800e312:	e7c3      	b.n	800e29c <_svfiprintf_r+0x130>
 800e314:	4604      	mov	r4, r0
 800e316:	2301      	movs	r3, #1
 800e318:	fb0c 2101 	mla	r1, ip, r1, r2
 800e31c:	e7f0      	b.n	800e300 <_svfiprintf_r+0x194>
 800e31e:	ab03      	add	r3, sp, #12
 800e320:	9300      	str	r3, [sp, #0]
 800e322:	462a      	mov	r2, r5
 800e324:	4638      	mov	r0, r7
 800e326:	4b0f      	ldr	r3, [pc, #60]	; (800e364 <_svfiprintf_r+0x1f8>)
 800e328:	a904      	add	r1, sp, #16
 800e32a:	f3af 8000 	nop.w
 800e32e:	1c42      	adds	r2, r0, #1
 800e330:	4606      	mov	r6, r0
 800e332:	d1d6      	bne.n	800e2e2 <_svfiprintf_r+0x176>
 800e334:	89ab      	ldrh	r3, [r5, #12]
 800e336:	065b      	lsls	r3, r3, #25
 800e338:	f53f af2c 	bmi.w	800e194 <_svfiprintf_r+0x28>
 800e33c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e33e:	b01d      	add	sp, #116	; 0x74
 800e340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e344:	ab03      	add	r3, sp, #12
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	462a      	mov	r2, r5
 800e34a:	4638      	mov	r0, r7
 800e34c:	4b05      	ldr	r3, [pc, #20]	; (800e364 <_svfiprintf_r+0x1f8>)
 800e34e:	a904      	add	r1, sp, #16
 800e350:	f000 f87c 	bl	800e44c <_printf_i>
 800e354:	e7eb      	b.n	800e32e <_svfiprintf_r+0x1c2>
 800e356:	bf00      	nop
 800e358:	0800f30c 	.word	0x0800f30c
 800e35c:	0800f316 	.word	0x0800f316
 800e360:	00000000 	.word	0x00000000
 800e364:	0800e0b5 	.word	0x0800e0b5
 800e368:	0800f312 	.word	0x0800f312

0800e36c <_printf_common>:
 800e36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e370:	4616      	mov	r6, r2
 800e372:	4699      	mov	r9, r3
 800e374:	688a      	ldr	r2, [r1, #8]
 800e376:	690b      	ldr	r3, [r1, #16]
 800e378:	4607      	mov	r7, r0
 800e37a:	4293      	cmp	r3, r2
 800e37c:	bfb8      	it	lt
 800e37e:	4613      	movlt	r3, r2
 800e380:	6033      	str	r3, [r6, #0]
 800e382:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e386:	460c      	mov	r4, r1
 800e388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e38c:	b10a      	cbz	r2, 800e392 <_printf_common+0x26>
 800e38e:	3301      	adds	r3, #1
 800e390:	6033      	str	r3, [r6, #0]
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	0699      	lsls	r1, r3, #26
 800e396:	bf42      	ittt	mi
 800e398:	6833      	ldrmi	r3, [r6, #0]
 800e39a:	3302      	addmi	r3, #2
 800e39c:	6033      	strmi	r3, [r6, #0]
 800e39e:	6825      	ldr	r5, [r4, #0]
 800e3a0:	f015 0506 	ands.w	r5, r5, #6
 800e3a4:	d106      	bne.n	800e3b4 <_printf_common+0x48>
 800e3a6:	f104 0a19 	add.w	sl, r4, #25
 800e3aa:	68e3      	ldr	r3, [r4, #12]
 800e3ac:	6832      	ldr	r2, [r6, #0]
 800e3ae:	1a9b      	subs	r3, r3, r2
 800e3b0:	42ab      	cmp	r3, r5
 800e3b2:	dc28      	bgt.n	800e406 <_printf_common+0x9a>
 800e3b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3b8:	1e13      	subs	r3, r2, #0
 800e3ba:	6822      	ldr	r2, [r4, #0]
 800e3bc:	bf18      	it	ne
 800e3be:	2301      	movne	r3, #1
 800e3c0:	0692      	lsls	r2, r2, #26
 800e3c2:	d42d      	bmi.n	800e420 <_printf_common+0xb4>
 800e3c4:	4649      	mov	r1, r9
 800e3c6:	4638      	mov	r0, r7
 800e3c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3cc:	47c0      	blx	r8
 800e3ce:	3001      	adds	r0, #1
 800e3d0:	d020      	beq.n	800e414 <_printf_common+0xa8>
 800e3d2:	6823      	ldr	r3, [r4, #0]
 800e3d4:	68e5      	ldr	r5, [r4, #12]
 800e3d6:	f003 0306 	and.w	r3, r3, #6
 800e3da:	2b04      	cmp	r3, #4
 800e3dc:	bf18      	it	ne
 800e3de:	2500      	movne	r5, #0
 800e3e0:	6832      	ldr	r2, [r6, #0]
 800e3e2:	f04f 0600 	mov.w	r6, #0
 800e3e6:	68a3      	ldr	r3, [r4, #8]
 800e3e8:	bf08      	it	eq
 800e3ea:	1aad      	subeq	r5, r5, r2
 800e3ec:	6922      	ldr	r2, [r4, #16]
 800e3ee:	bf08      	it	eq
 800e3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	bfc4      	itt	gt
 800e3f8:	1a9b      	subgt	r3, r3, r2
 800e3fa:	18ed      	addgt	r5, r5, r3
 800e3fc:	341a      	adds	r4, #26
 800e3fe:	42b5      	cmp	r5, r6
 800e400:	d11a      	bne.n	800e438 <_printf_common+0xcc>
 800e402:	2000      	movs	r0, #0
 800e404:	e008      	b.n	800e418 <_printf_common+0xac>
 800e406:	2301      	movs	r3, #1
 800e408:	4652      	mov	r2, sl
 800e40a:	4649      	mov	r1, r9
 800e40c:	4638      	mov	r0, r7
 800e40e:	47c0      	blx	r8
 800e410:	3001      	adds	r0, #1
 800e412:	d103      	bne.n	800e41c <_printf_common+0xb0>
 800e414:	f04f 30ff 	mov.w	r0, #4294967295
 800e418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e41c:	3501      	adds	r5, #1
 800e41e:	e7c4      	b.n	800e3aa <_printf_common+0x3e>
 800e420:	2030      	movs	r0, #48	; 0x30
 800e422:	18e1      	adds	r1, r4, r3
 800e424:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e428:	1c5a      	adds	r2, r3, #1
 800e42a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e42e:	4422      	add	r2, r4
 800e430:	3302      	adds	r3, #2
 800e432:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e436:	e7c5      	b.n	800e3c4 <_printf_common+0x58>
 800e438:	2301      	movs	r3, #1
 800e43a:	4622      	mov	r2, r4
 800e43c:	4649      	mov	r1, r9
 800e43e:	4638      	mov	r0, r7
 800e440:	47c0      	blx	r8
 800e442:	3001      	adds	r0, #1
 800e444:	d0e6      	beq.n	800e414 <_printf_common+0xa8>
 800e446:	3601      	adds	r6, #1
 800e448:	e7d9      	b.n	800e3fe <_printf_common+0x92>
	...

0800e44c <_printf_i>:
 800e44c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e450:	460c      	mov	r4, r1
 800e452:	7e27      	ldrb	r7, [r4, #24]
 800e454:	4691      	mov	r9, r2
 800e456:	2f78      	cmp	r7, #120	; 0x78
 800e458:	4680      	mov	r8, r0
 800e45a:	469a      	mov	sl, r3
 800e45c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e45e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e462:	d807      	bhi.n	800e474 <_printf_i+0x28>
 800e464:	2f62      	cmp	r7, #98	; 0x62
 800e466:	d80a      	bhi.n	800e47e <_printf_i+0x32>
 800e468:	2f00      	cmp	r7, #0
 800e46a:	f000 80d9 	beq.w	800e620 <_printf_i+0x1d4>
 800e46e:	2f58      	cmp	r7, #88	; 0x58
 800e470:	f000 80a4 	beq.w	800e5bc <_printf_i+0x170>
 800e474:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e47c:	e03a      	b.n	800e4f4 <_printf_i+0xa8>
 800e47e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e482:	2b15      	cmp	r3, #21
 800e484:	d8f6      	bhi.n	800e474 <_printf_i+0x28>
 800e486:	a001      	add	r0, pc, #4	; (adr r0, 800e48c <_printf_i+0x40>)
 800e488:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e48c:	0800e4e5 	.word	0x0800e4e5
 800e490:	0800e4f9 	.word	0x0800e4f9
 800e494:	0800e475 	.word	0x0800e475
 800e498:	0800e475 	.word	0x0800e475
 800e49c:	0800e475 	.word	0x0800e475
 800e4a0:	0800e475 	.word	0x0800e475
 800e4a4:	0800e4f9 	.word	0x0800e4f9
 800e4a8:	0800e475 	.word	0x0800e475
 800e4ac:	0800e475 	.word	0x0800e475
 800e4b0:	0800e475 	.word	0x0800e475
 800e4b4:	0800e475 	.word	0x0800e475
 800e4b8:	0800e607 	.word	0x0800e607
 800e4bc:	0800e529 	.word	0x0800e529
 800e4c0:	0800e5e9 	.word	0x0800e5e9
 800e4c4:	0800e475 	.word	0x0800e475
 800e4c8:	0800e475 	.word	0x0800e475
 800e4cc:	0800e629 	.word	0x0800e629
 800e4d0:	0800e475 	.word	0x0800e475
 800e4d4:	0800e529 	.word	0x0800e529
 800e4d8:	0800e475 	.word	0x0800e475
 800e4dc:	0800e475 	.word	0x0800e475
 800e4e0:	0800e5f1 	.word	0x0800e5f1
 800e4e4:	680b      	ldr	r3, [r1, #0]
 800e4e6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e4ea:	1d1a      	adds	r2, r3, #4
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	600a      	str	r2, [r1, #0]
 800e4f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e0a4      	b.n	800e642 <_printf_i+0x1f6>
 800e4f8:	6825      	ldr	r5, [r4, #0]
 800e4fa:	6808      	ldr	r0, [r1, #0]
 800e4fc:	062e      	lsls	r6, r5, #24
 800e4fe:	f100 0304 	add.w	r3, r0, #4
 800e502:	d50a      	bpl.n	800e51a <_printf_i+0xce>
 800e504:	6805      	ldr	r5, [r0, #0]
 800e506:	600b      	str	r3, [r1, #0]
 800e508:	2d00      	cmp	r5, #0
 800e50a:	da03      	bge.n	800e514 <_printf_i+0xc8>
 800e50c:	232d      	movs	r3, #45	; 0x2d
 800e50e:	426d      	negs	r5, r5
 800e510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e514:	230a      	movs	r3, #10
 800e516:	485e      	ldr	r0, [pc, #376]	; (800e690 <_printf_i+0x244>)
 800e518:	e019      	b.n	800e54e <_printf_i+0x102>
 800e51a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e51e:	6805      	ldr	r5, [r0, #0]
 800e520:	600b      	str	r3, [r1, #0]
 800e522:	bf18      	it	ne
 800e524:	b22d      	sxthne	r5, r5
 800e526:	e7ef      	b.n	800e508 <_printf_i+0xbc>
 800e528:	680b      	ldr	r3, [r1, #0]
 800e52a:	6825      	ldr	r5, [r4, #0]
 800e52c:	1d18      	adds	r0, r3, #4
 800e52e:	6008      	str	r0, [r1, #0]
 800e530:	0628      	lsls	r0, r5, #24
 800e532:	d501      	bpl.n	800e538 <_printf_i+0xec>
 800e534:	681d      	ldr	r5, [r3, #0]
 800e536:	e002      	b.n	800e53e <_printf_i+0xf2>
 800e538:	0669      	lsls	r1, r5, #25
 800e53a:	d5fb      	bpl.n	800e534 <_printf_i+0xe8>
 800e53c:	881d      	ldrh	r5, [r3, #0]
 800e53e:	2f6f      	cmp	r7, #111	; 0x6f
 800e540:	bf0c      	ite	eq
 800e542:	2308      	moveq	r3, #8
 800e544:	230a      	movne	r3, #10
 800e546:	4852      	ldr	r0, [pc, #328]	; (800e690 <_printf_i+0x244>)
 800e548:	2100      	movs	r1, #0
 800e54a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e54e:	6866      	ldr	r6, [r4, #4]
 800e550:	2e00      	cmp	r6, #0
 800e552:	bfa8      	it	ge
 800e554:	6821      	ldrge	r1, [r4, #0]
 800e556:	60a6      	str	r6, [r4, #8]
 800e558:	bfa4      	itt	ge
 800e55a:	f021 0104 	bicge.w	r1, r1, #4
 800e55e:	6021      	strge	r1, [r4, #0]
 800e560:	b90d      	cbnz	r5, 800e566 <_printf_i+0x11a>
 800e562:	2e00      	cmp	r6, #0
 800e564:	d04d      	beq.n	800e602 <_printf_i+0x1b6>
 800e566:	4616      	mov	r6, r2
 800e568:	fbb5 f1f3 	udiv	r1, r5, r3
 800e56c:	fb03 5711 	mls	r7, r3, r1, r5
 800e570:	5dc7      	ldrb	r7, [r0, r7]
 800e572:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e576:	462f      	mov	r7, r5
 800e578:	42bb      	cmp	r3, r7
 800e57a:	460d      	mov	r5, r1
 800e57c:	d9f4      	bls.n	800e568 <_printf_i+0x11c>
 800e57e:	2b08      	cmp	r3, #8
 800e580:	d10b      	bne.n	800e59a <_printf_i+0x14e>
 800e582:	6823      	ldr	r3, [r4, #0]
 800e584:	07df      	lsls	r7, r3, #31
 800e586:	d508      	bpl.n	800e59a <_printf_i+0x14e>
 800e588:	6923      	ldr	r3, [r4, #16]
 800e58a:	6861      	ldr	r1, [r4, #4]
 800e58c:	4299      	cmp	r1, r3
 800e58e:	bfde      	ittt	le
 800e590:	2330      	movle	r3, #48	; 0x30
 800e592:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e596:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e59a:	1b92      	subs	r2, r2, r6
 800e59c:	6122      	str	r2, [r4, #16]
 800e59e:	464b      	mov	r3, r9
 800e5a0:	4621      	mov	r1, r4
 800e5a2:	4640      	mov	r0, r8
 800e5a4:	f8cd a000 	str.w	sl, [sp]
 800e5a8:	aa03      	add	r2, sp, #12
 800e5aa:	f7ff fedf 	bl	800e36c <_printf_common>
 800e5ae:	3001      	adds	r0, #1
 800e5b0:	d14c      	bne.n	800e64c <_printf_i+0x200>
 800e5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b6:	b004      	add	sp, #16
 800e5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5bc:	4834      	ldr	r0, [pc, #208]	; (800e690 <_printf_i+0x244>)
 800e5be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e5c2:	680e      	ldr	r6, [r1, #0]
 800e5c4:	6823      	ldr	r3, [r4, #0]
 800e5c6:	f856 5b04 	ldr.w	r5, [r6], #4
 800e5ca:	061f      	lsls	r7, r3, #24
 800e5cc:	600e      	str	r6, [r1, #0]
 800e5ce:	d514      	bpl.n	800e5fa <_printf_i+0x1ae>
 800e5d0:	07d9      	lsls	r1, r3, #31
 800e5d2:	bf44      	itt	mi
 800e5d4:	f043 0320 	orrmi.w	r3, r3, #32
 800e5d8:	6023      	strmi	r3, [r4, #0]
 800e5da:	b91d      	cbnz	r5, 800e5e4 <_printf_i+0x198>
 800e5dc:	6823      	ldr	r3, [r4, #0]
 800e5de:	f023 0320 	bic.w	r3, r3, #32
 800e5e2:	6023      	str	r3, [r4, #0]
 800e5e4:	2310      	movs	r3, #16
 800e5e6:	e7af      	b.n	800e548 <_printf_i+0xfc>
 800e5e8:	6823      	ldr	r3, [r4, #0]
 800e5ea:	f043 0320 	orr.w	r3, r3, #32
 800e5ee:	6023      	str	r3, [r4, #0]
 800e5f0:	2378      	movs	r3, #120	; 0x78
 800e5f2:	4828      	ldr	r0, [pc, #160]	; (800e694 <_printf_i+0x248>)
 800e5f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e5f8:	e7e3      	b.n	800e5c2 <_printf_i+0x176>
 800e5fa:	065e      	lsls	r6, r3, #25
 800e5fc:	bf48      	it	mi
 800e5fe:	b2ad      	uxthmi	r5, r5
 800e600:	e7e6      	b.n	800e5d0 <_printf_i+0x184>
 800e602:	4616      	mov	r6, r2
 800e604:	e7bb      	b.n	800e57e <_printf_i+0x132>
 800e606:	680b      	ldr	r3, [r1, #0]
 800e608:	6826      	ldr	r6, [r4, #0]
 800e60a:	1d1d      	adds	r5, r3, #4
 800e60c:	6960      	ldr	r0, [r4, #20]
 800e60e:	600d      	str	r5, [r1, #0]
 800e610:	0635      	lsls	r5, r6, #24
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	d501      	bpl.n	800e61a <_printf_i+0x1ce>
 800e616:	6018      	str	r0, [r3, #0]
 800e618:	e002      	b.n	800e620 <_printf_i+0x1d4>
 800e61a:	0671      	lsls	r1, r6, #25
 800e61c:	d5fb      	bpl.n	800e616 <_printf_i+0x1ca>
 800e61e:	8018      	strh	r0, [r3, #0]
 800e620:	2300      	movs	r3, #0
 800e622:	4616      	mov	r6, r2
 800e624:	6123      	str	r3, [r4, #16]
 800e626:	e7ba      	b.n	800e59e <_printf_i+0x152>
 800e628:	680b      	ldr	r3, [r1, #0]
 800e62a:	1d1a      	adds	r2, r3, #4
 800e62c:	600a      	str	r2, [r1, #0]
 800e62e:	681e      	ldr	r6, [r3, #0]
 800e630:	2100      	movs	r1, #0
 800e632:	4630      	mov	r0, r6
 800e634:	6862      	ldr	r2, [r4, #4]
 800e636:	f000 f939 	bl	800e8ac <memchr>
 800e63a:	b108      	cbz	r0, 800e640 <_printf_i+0x1f4>
 800e63c:	1b80      	subs	r0, r0, r6
 800e63e:	6060      	str	r0, [r4, #4]
 800e640:	6863      	ldr	r3, [r4, #4]
 800e642:	6123      	str	r3, [r4, #16]
 800e644:	2300      	movs	r3, #0
 800e646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e64a:	e7a8      	b.n	800e59e <_printf_i+0x152>
 800e64c:	4632      	mov	r2, r6
 800e64e:	4649      	mov	r1, r9
 800e650:	4640      	mov	r0, r8
 800e652:	6923      	ldr	r3, [r4, #16]
 800e654:	47d0      	blx	sl
 800e656:	3001      	adds	r0, #1
 800e658:	d0ab      	beq.n	800e5b2 <_printf_i+0x166>
 800e65a:	6823      	ldr	r3, [r4, #0]
 800e65c:	079b      	lsls	r3, r3, #30
 800e65e:	d413      	bmi.n	800e688 <_printf_i+0x23c>
 800e660:	68e0      	ldr	r0, [r4, #12]
 800e662:	9b03      	ldr	r3, [sp, #12]
 800e664:	4298      	cmp	r0, r3
 800e666:	bfb8      	it	lt
 800e668:	4618      	movlt	r0, r3
 800e66a:	e7a4      	b.n	800e5b6 <_printf_i+0x16a>
 800e66c:	2301      	movs	r3, #1
 800e66e:	4632      	mov	r2, r6
 800e670:	4649      	mov	r1, r9
 800e672:	4640      	mov	r0, r8
 800e674:	47d0      	blx	sl
 800e676:	3001      	adds	r0, #1
 800e678:	d09b      	beq.n	800e5b2 <_printf_i+0x166>
 800e67a:	3501      	adds	r5, #1
 800e67c:	68e3      	ldr	r3, [r4, #12]
 800e67e:	9903      	ldr	r1, [sp, #12]
 800e680:	1a5b      	subs	r3, r3, r1
 800e682:	42ab      	cmp	r3, r5
 800e684:	dcf2      	bgt.n	800e66c <_printf_i+0x220>
 800e686:	e7eb      	b.n	800e660 <_printf_i+0x214>
 800e688:	2500      	movs	r5, #0
 800e68a:	f104 0619 	add.w	r6, r4, #25
 800e68e:	e7f5      	b.n	800e67c <_printf_i+0x230>
 800e690:	0800f31d 	.word	0x0800f31d
 800e694:	0800f32e 	.word	0x0800f32e

0800e698 <nan>:
 800e698:	2000      	movs	r0, #0
 800e69a:	4901      	ldr	r1, [pc, #4]	; (800e6a0 <nan+0x8>)
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop
 800e6a0:	7ff80000 	.word	0x7ff80000

0800e6a4 <_sbrk_r>:
 800e6a4:	b538      	push	{r3, r4, r5, lr}
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	4d05      	ldr	r5, [pc, #20]	; (800e6c0 <_sbrk_r+0x1c>)
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	4608      	mov	r0, r1
 800e6ae:	602b      	str	r3, [r5, #0]
 800e6b0:	f7f7 fc5a 	bl	8005f68 <_sbrk>
 800e6b4:	1c43      	adds	r3, r0, #1
 800e6b6:	d102      	bne.n	800e6be <_sbrk_r+0x1a>
 800e6b8:	682b      	ldr	r3, [r5, #0]
 800e6ba:	b103      	cbz	r3, 800e6be <_sbrk_r+0x1a>
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	bd38      	pop	{r3, r4, r5, pc}
 800e6c0:	20003a2c 	.word	0x20003a2c

0800e6c4 <nanf>:
 800e6c4:	4800      	ldr	r0, [pc, #0]	; (800e6c8 <nanf+0x4>)
 800e6c6:	4770      	bx	lr
 800e6c8:	7fc00000 	.word	0x7fc00000

0800e6cc <__sread>:
 800e6cc:	b510      	push	{r4, lr}
 800e6ce:	460c      	mov	r4, r1
 800e6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6d4:	f000 fa9c 	bl	800ec10 <_read_r>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	bfab      	itete	ge
 800e6dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e6de:	89a3      	ldrhlt	r3, [r4, #12]
 800e6e0:	181b      	addge	r3, r3, r0
 800e6e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e6e6:	bfac      	ite	ge
 800e6e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e6ea:	81a3      	strhlt	r3, [r4, #12]
 800e6ec:	bd10      	pop	{r4, pc}

0800e6ee <__swrite>:
 800e6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f2:	461f      	mov	r7, r3
 800e6f4:	898b      	ldrh	r3, [r1, #12]
 800e6f6:	4605      	mov	r5, r0
 800e6f8:	05db      	lsls	r3, r3, #23
 800e6fa:	460c      	mov	r4, r1
 800e6fc:	4616      	mov	r6, r2
 800e6fe:	d505      	bpl.n	800e70c <__swrite+0x1e>
 800e700:	2302      	movs	r3, #2
 800e702:	2200      	movs	r2, #0
 800e704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e708:	f000 f8b6 	bl	800e878 <_lseek_r>
 800e70c:	89a3      	ldrh	r3, [r4, #12]
 800e70e:	4632      	mov	r2, r6
 800e710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e714:	81a3      	strh	r3, [r4, #12]
 800e716:	4628      	mov	r0, r5
 800e718:	463b      	mov	r3, r7
 800e71a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e722:	f000 b835 	b.w	800e790 <_write_r>

0800e726 <__sseek>:
 800e726:	b510      	push	{r4, lr}
 800e728:	460c      	mov	r4, r1
 800e72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e72e:	f000 f8a3 	bl	800e878 <_lseek_r>
 800e732:	1c43      	adds	r3, r0, #1
 800e734:	89a3      	ldrh	r3, [r4, #12]
 800e736:	bf15      	itete	ne
 800e738:	6560      	strne	r0, [r4, #84]	; 0x54
 800e73a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e73e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e742:	81a3      	strheq	r3, [r4, #12]
 800e744:	bf18      	it	ne
 800e746:	81a3      	strhne	r3, [r4, #12]
 800e748:	bd10      	pop	{r4, pc}

0800e74a <__sclose>:
 800e74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e74e:	f000 b84f 	b.w	800e7f0 <_close_r>

0800e752 <strncmp>:
 800e752:	b510      	push	{r4, lr}
 800e754:	b16a      	cbz	r2, 800e772 <strncmp+0x20>
 800e756:	3901      	subs	r1, #1
 800e758:	1884      	adds	r4, r0, r2
 800e75a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e75e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e762:	4293      	cmp	r3, r2
 800e764:	d103      	bne.n	800e76e <strncmp+0x1c>
 800e766:	42a0      	cmp	r0, r4
 800e768:	d001      	beq.n	800e76e <strncmp+0x1c>
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1f5      	bne.n	800e75a <strncmp+0x8>
 800e76e:	1a98      	subs	r0, r3, r2
 800e770:	bd10      	pop	{r4, pc}
 800e772:	4610      	mov	r0, r2
 800e774:	e7fc      	b.n	800e770 <strncmp+0x1e>

0800e776 <__ascii_wctomb>:
 800e776:	4603      	mov	r3, r0
 800e778:	4608      	mov	r0, r1
 800e77a:	b141      	cbz	r1, 800e78e <__ascii_wctomb+0x18>
 800e77c:	2aff      	cmp	r2, #255	; 0xff
 800e77e:	d904      	bls.n	800e78a <__ascii_wctomb+0x14>
 800e780:	228a      	movs	r2, #138	; 0x8a
 800e782:	f04f 30ff 	mov.w	r0, #4294967295
 800e786:	601a      	str	r2, [r3, #0]
 800e788:	4770      	bx	lr
 800e78a:	2001      	movs	r0, #1
 800e78c:	700a      	strb	r2, [r1, #0]
 800e78e:	4770      	bx	lr

0800e790 <_write_r>:
 800e790:	b538      	push	{r3, r4, r5, lr}
 800e792:	4604      	mov	r4, r0
 800e794:	4608      	mov	r0, r1
 800e796:	4611      	mov	r1, r2
 800e798:	2200      	movs	r2, #0
 800e79a:	4d05      	ldr	r5, [pc, #20]	; (800e7b0 <_write_r+0x20>)
 800e79c:	602a      	str	r2, [r5, #0]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	f7f7 fbc9 	bl	8005f36 <_write>
 800e7a4:	1c43      	adds	r3, r0, #1
 800e7a6:	d102      	bne.n	800e7ae <_write_r+0x1e>
 800e7a8:	682b      	ldr	r3, [r5, #0]
 800e7aa:	b103      	cbz	r3, 800e7ae <_write_r+0x1e>
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	bd38      	pop	{r3, r4, r5, pc}
 800e7b0:	20003a2c 	.word	0x20003a2c

0800e7b4 <__assert_func>:
 800e7b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7b6:	4614      	mov	r4, r2
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	4b09      	ldr	r3, [pc, #36]	; (800e7e0 <__assert_func+0x2c>)
 800e7bc:	4605      	mov	r5, r0
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	68d8      	ldr	r0, [r3, #12]
 800e7c2:	b14c      	cbz	r4, 800e7d8 <__assert_func+0x24>
 800e7c4:	4b07      	ldr	r3, [pc, #28]	; (800e7e4 <__assert_func+0x30>)
 800e7c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7ca:	9100      	str	r1, [sp, #0]
 800e7cc:	462b      	mov	r3, r5
 800e7ce:	4906      	ldr	r1, [pc, #24]	; (800e7e8 <__assert_func+0x34>)
 800e7d0:	f000 f81e 	bl	800e810 <fiprintf>
 800e7d4:	f000 fa2e 	bl	800ec34 <abort>
 800e7d8:	4b04      	ldr	r3, [pc, #16]	; (800e7ec <__assert_func+0x38>)
 800e7da:	461c      	mov	r4, r3
 800e7dc:	e7f3      	b.n	800e7c6 <__assert_func+0x12>
 800e7de:	bf00      	nop
 800e7e0:	20000194 	.word	0x20000194
 800e7e4:	0800f33f 	.word	0x0800f33f
 800e7e8:	0800f34c 	.word	0x0800f34c
 800e7ec:	0800ee04 	.word	0x0800ee04

0800e7f0 <_close_r>:
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	4d05      	ldr	r5, [pc, #20]	; (800e80c <_close_r+0x1c>)
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	4608      	mov	r0, r1
 800e7fa:	602b      	str	r3, [r5, #0]
 800e7fc:	f7f7 fba8 	bl	8005f50 <_close>
 800e800:	1c43      	adds	r3, r0, #1
 800e802:	d102      	bne.n	800e80a <_close_r+0x1a>
 800e804:	682b      	ldr	r3, [r5, #0]
 800e806:	b103      	cbz	r3, 800e80a <_close_r+0x1a>
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	bd38      	pop	{r3, r4, r5, pc}
 800e80c:	20003a2c 	.word	0x20003a2c

0800e810 <fiprintf>:
 800e810:	b40e      	push	{r1, r2, r3}
 800e812:	b503      	push	{r0, r1, lr}
 800e814:	4601      	mov	r1, r0
 800e816:	ab03      	add	r3, sp, #12
 800e818:	4805      	ldr	r0, [pc, #20]	; (800e830 <fiprintf+0x20>)
 800e81a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e81e:	6800      	ldr	r0, [r0, #0]
 800e820:	9301      	str	r3, [sp, #4]
 800e822:	f000 f8c5 	bl	800e9b0 <_vfiprintf_r>
 800e826:	b002      	add	sp, #8
 800e828:	f85d eb04 	ldr.w	lr, [sp], #4
 800e82c:	b003      	add	sp, #12
 800e82e:	4770      	bx	lr
 800e830:	20000194 	.word	0x20000194

0800e834 <_fstat_r>:
 800e834:	b538      	push	{r3, r4, r5, lr}
 800e836:	2300      	movs	r3, #0
 800e838:	4d06      	ldr	r5, [pc, #24]	; (800e854 <_fstat_r+0x20>)
 800e83a:	4604      	mov	r4, r0
 800e83c:	4608      	mov	r0, r1
 800e83e:	4611      	mov	r1, r2
 800e840:	602b      	str	r3, [r5, #0]
 800e842:	f7f7 fb88 	bl	8005f56 <_fstat>
 800e846:	1c43      	adds	r3, r0, #1
 800e848:	d102      	bne.n	800e850 <_fstat_r+0x1c>
 800e84a:	682b      	ldr	r3, [r5, #0]
 800e84c:	b103      	cbz	r3, 800e850 <_fstat_r+0x1c>
 800e84e:	6023      	str	r3, [r4, #0]
 800e850:	bd38      	pop	{r3, r4, r5, pc}
 800e852:	bf00      	nop
 800e854:	20003a2c 	.word	0x20003a2c

0800e858 <_isatty_r>:
 800e858:	b538      	push	{r3, r4, r5, lr}
 800e85a:	2300      	movs	r3, #0
 800e85c:	4d05      	ldr	r5, [pc, #20]	; (800e874 <_isatty_r+0x1c>)
 800e85e:	4604      	mov	r4, r0
 800e860:	4608      	mov	r0, r1
 800e862:	602b      	str	r3, [r5, #0]
 800e864:	f7f7 fb7c 	bl	8005f60 <_isatty>
 800e868:	1c43      	adds	r3, r0, #1
 800e86a:	d102      	bne.n	800e872 <_isatty_r+0x1a>
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	b103      	cbz	r3, 800e872 <_isatty_r+0x1a>
 800e870:	6023      	str	r3, [r4, #0]
 800e872:	bd38      	pop	{r3, r4, r5, pc}
 800e874:	20003a2c 	.word	0x20003a2c

0800e878 <_lseek_r>:
 800e878:	b538      	push	{r3, r4, r5, lr}
 800e87a:	4604      	mov	r4, r0
 800e87c:	4608      	mov	r0, r1
 800e87e:	4611      	mov	r1, r2
 800e880:	2200      	movs	r2, #0
 800e882:	4d05      	ldr	r5, [pc, #20]	; (800e898 <_lseek_r+0x20>)
 800e884:	602a      	str	r2, [r5, #0]
 800e886:	461a      	mov	r2, r3
 800e888:	f7f7 fb6c 	bl	8005f64 <_lseek>
 800e88c:	1c43      	adds	r3, r0, #1
 800e88e:	d102      	bne.n	800e896 <_lseek_r+0x1e>
 800e890:	682b      	ldr	r3, [r5, #0]
 800e892:	b103      	cbz	r3, 800e896 <_lseek_r+0x1e>
 800e894:	6023      	str	r3, [r4, #0]
 800e896:	bd38      	pop	{r3, r4, r5, pc}
 800e898:	20003a2c 	.word	0x20003a2c

0800e89c <malloc>:
 800e89c:	4b02      	ldr	r3, [pc, #8]	; (800e8a8 <malloc+0xc>)
 800e89e:	4601      	mov	r1, r0
 800e8a0:	6818      	ldr	r0, [r3, #0]
 800e8a2:	f7ff bbad 	b.w	800e000 <_malloc_r>
 800e8a6:	bf00      	nop
 800e8a8:	20000194 	.word	0x20000194

0800e8ac <memchr>:
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	b510      	push	{r4, lr}
 800e8b0:	b2c9      	uxtb	r1, r1
 800e8b2:	4402      	add	r2, r0
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	d101      	bne.n	800e8be <memchr+0x12>
 800e8ba:	2000      	movs	r0, #0
 800e8bc:	e003      	b.n	800e8c6 <memchr+0x1a>
 800e8be:	7804      	ldrb	r4, [r0, #0]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	428c      	cmp	r4, r1
 800e8c4:	d1f6      	bne.n	800e8b4 <memchr+0x8>
 800e8c6:	bd10      	pop	{r4, pc}

0800e8c8 <memmove>:
 800e8c8:	4288      	cmp	r0, r1
 800e8ca:	b510      	push	{r4, lr}
 800e8cc:	eb01 0402 	add.w	r4, r1, r2
 800e8d0:	d902      	bls.n	800e8d8 <memmove+0x10>
 800e8d2:	4284      	cmp	r4, r0
 800e8d4:	4623      	mov	r3, r4
 800e8d6:	d807      	bhi.n	800e8e8 <memmove+0x20>
 800e8d8:	1e43      	subs	r3, r0, #1
 800e8da:	42a1      	cmp	r1, r4
 800e8dc:	d008      	beq.n	800e8f0 <memmove+0x28>
 800e8de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8e6:	e7f8      	b.n	800e8da <memmove+0x12>
 800e8e8:	4601      	mov	r1, r0
 800e8ea:	4402      	add	r2, r0
 800e8ec:	428a      	cmp	r2, r1
 800e8ee:	d100      	bne.n	800e8f2 <memmove+0x2a>
 800e8f0:	bd10      	pop	{r4, pc}
 800e8f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8fa:	e7f7      	b.n	800e8ec <memmove+0x24>

0800e8fc <__malloc_lock>:
 800e8fc:	4801      	ldr	r0, [pc, #4]	; (800e904 <__malloc_lock+0x8>)
 800e8fe:	f7fe bdf4 	b.w	800d4ea <__retarget_lock_acquire_recursive>
 800e902:	bf00      	nop
 800e904:	20003a24 	.word	0x20003a24

0800e908 <__malloc_unlock>:
 800e908:	4801      	ldr	r0, [pc, #4]	; (800e910 <__malloc_unlock+0x8>)
 800e90a:	f7fe bdef 	b.w	800d4ec <__retarget_lock_release_recursive>
 800e90e:	bf00      	nop
 800e910:	20003a24 	.word	0x20003a24

0800e914 <_realloc_r>:
 800e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e916:	4607      	mov	r7, r0
 800e918:	4614      	mov	r4, r2
 800e91a:	460e      	mov	r6, r1
 800e91c:	b921      	cbnz	r1, 800e928 <_realloc_r+0x14>
 800e91e:	4611      	mov	r1, r2
 800e920:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e924:	f7ff bb6c 	b.w	800e000 <_malloc_r>
 800e928:	b922      	cbnz	r2, 800e934 <_realloc_r+0x20>
 800e92a:	f7ff fb1d 	bl	800df68 <_free_r>
 800e92e:	4625      	mov	r5, r4
 800e930:	4628      	mov	r0, r5
 800e932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e934:	f000 f985 	bl	800ec42 <_malloc_usable_size_r>
 800e938:	42a0      	cmp	r0, r4
 800e93a:	d20f      	bcs.n	800e95c <_realloc_r+0x48>
 800e93c:	4621      	mov	r1, r4
 800e93e:	4638      	mov	r0, r7
 800e940:	f7ff fb5e 	bl	800e000 <_malloc_r>
 800e944:	4605      	mov	r5, r0
 800e946:	2800      	cmp	r0, #0
 800e948:	d0f2      	beq.n	800e930 <_realloc_r+0x1c>
 800e94a:	4631      	mov	r1, r6
 800e94c:	4622      	mov	r2, r4
 800e94e:	f7fd f803 	bl	800b958 <memcpy>
 800e952:	4631      	mov	r1, r6
 800e954:	4638      	mov	r0, r7
 800e956:	f7ff fb07 	bl	800df68 <_free_r>
 800e95a:	e7e9      	b.n	800e930 <_realloc_r+0x1c>
 800e95c:	4635      	mov	r5, r6
 800e95e:	e7e7      	b.n	800e930 <_realloc_r+0x1c>

0800e960 <__sfputc_r>:
 800e960:	6893      	ldr	r3, [r2, #8]
 800e962:	b410      	push	{r4}
 800e964:	3b01      	subs	r3, #1
 800e966:	2b00      	cmp	r3, #0
 800e968:	6093      	str	r3, [r2, #8]
 800e96a:	da07      	bge.n	800e97c <__sfputc_r+0x1c>
 800e96c:	6994      	ldr	r4, [r2, #24]
 800e96e:	42a3      	cmp	r3, r4
 800e970:	db01      	blt.n	800e976 <__sfputc_r+0x16>
 800e972:	290a      	cmp	r1, #10
 800e974:	d102      	bne.n	800e97c <__sfputc_r+0x1c>
 800e976:	bc10      	pop	{r4}
 800e978:	f7fd bfd8 	b.w	800c92c <__swbuf_r>
 800e97c:	6813      	ldr	r3, [r2, #0]
 800e97e:	1c58      	adds	r0, r3, #1
 800e980:	6010      	str	r0, [r2, #0]
 800e982:	7019      	strb	r1, [r3, #0]
 800e984:	4608      	mov	r0, r1
 800e986:	bc10      	pop	{r4}
 800e988:	4770      	bx	lr

0800e98a <__sfputs_r>:
 800e98a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98c:	4606      	mov	r6, r0
 800e98e:	460f      	mov	r7, r1
 800e990:	4614      	mov	r4, r2
 800e992:	18d5      	adds	r5, r2, r3
 800e994:	42ac      	cmp	r4, r5
 800e996:	d101      	bne.n	800e99c <__sfputs_r+0x12>
 800e998:	2000      	movs	r0, #0
 800e99a:	e007      	b.n	800e9ac <__sfputs_r+0x22>
 800e99c:	463a      	mov	r2, r7
 800e99e:	4630      	mov	r0, r6
 800e9a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a4:	f7ff ffdc 	bl	800e960 <__sfputc_r>
 800e9a8:	1c43      	adds	r3, r0, #1
 800e9aa:	d1f3      	bne.n	800e994 <__sfputs_r+0xa>
 800e9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9b0 <_vfiprintf_r>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	460d      	mov	r5, r1
 800e9b6:	4614      	mov	r4, r2
 800e9b8:	4698      	mov	r8, r3
 800e9ba:	4606      	mov	r6, r0
 800e9bc:	b09d      	sub	sp, #116	; 0x74
 800e9be:	b118      	cbz	r0, 800e9c8 <_vfiprintf_r+0x18>
 800e9c0:	6983      	ldr	r3, [r0, #24]
 800e9c2:	b90b      	cbnz	r3, 800e9c8 <_vfiprintf_r+0x18>
 800e9c4:	f7fe f98c 	bl	800cce0 <__sinit>
 800e9c8:	4b89      	ldr	r3, [pc, #548]	; (800ebf0 <_vfiprintf_r+0x240>)
 800e9ca:	429d      	cmp	r5, r3
 800e9cc:	d11b      	bne.n	800ea06 <_vfiprintf_r+0x56>
 800e9ce:	6875      	ldr	r5, [r6, #4]
 800e9d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9d2:	07d9      	lsls	r1, r3, #31
 800e9d4:	d405      	bmi.n	800e9e2 <_vfiprintf_r+0x32>
 800e9d6:	89ab      	ldrh	r3, [r5, #12]
 800e9d8:	059a      	lsls	r2, r3, #22
 800e9da:	d402      	bmi.n	800e9e2 <_vfiprintf_r+0x32>
 800e9dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9de:	f7fe fd84 	bl	800d4ea <__retarget_lock_acquire_recursive>
 800e9e2:	89ab      	ldrh	r3, [r5, #12]
 800e9e4:	071b      	lsls	r3, r3, #28
 800e9e6:	d501      	bpl.n	800e9ec <_vfiprintf_r+0x3c>
 800e9e8:	692b      	ldr	r3, [r5, #16]
 800e9ea:	b9eb      	cbnz	r3, 800ea28 <_vfiprintf_r+0x78>
 800e9ec:	4629      	mov	r1, r5
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	f7fd ffee 	bl	800c9d0 <__swsetup_r>
 800e9f4:	b1c0      	cbz	r0, 800ea28 <_vfiprintf_r+0x78>
 800e9f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9f8:	07dc      	lsls	r4, r3, #31
 800e9fa:	d50e      	bpl.n	800ea1a <_vfiprintf_r+0x6a>
 800e9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ea00:	b01d      	add	sp, #116	; 0x74
 800ea02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea06:	4b7b      	ldr	r3, [pc, #492]	; (800ebf4 <_vfiprintf_r+0x244>)
 800ea08:	429d      	cmp	r5, r3
 800ea0a:	d101      	bne.n	800ea10 <_vfiprintf_r+0x60>
 800ea0c:	68b5      	ldr	r5, [r6, #8]
 800ea0e:	e7df      	b.n	800e9d0 <_vfiprintf_r+0x20>
 800ea10:	4b79      	ldr	r3, [pc, #484]	; (800ebf8 <_vfiprintf_r+0x248>)
 800ea12:	429d      	cmp	r5, r3
 800ea14:	bf08      	it	eq
 800ea16:	68f5      	ldreq	r5, [r6, #12]
 800ea18:	e7da      	b.n	800e9d0 <_vfiprintf_r+0x20>
 800ea1a:	89ab      	ldrh	r3, [r5, #12]
 800ea1c:	0598      	lsls	r0, r3, #22
 800ea1e:	d4ed      	bmi.n	800e9fc <_vfiprintf_r+0x4c>
 800ea20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea22:	f7fe fd63 	bl	800d4ec <__retarget_lock_release_recursive>
 800ea26:	e7e9      	b.n	800e9fc <_vfiprintf_r+0x4c>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea2c:	2320      	movs	r3, #32
 800ea2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea32:	2330      	movs	r3, #48	; 0x30
 800ea34:	f04f 0901 	mov.w	r9, #1
 800ea38:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea3c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ebfc <_vfiprintf_r+0x24c>
 800ea40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea44:	4623      	mov	r3, r4
 800ea46:	469a      	mov	sl, r3
 800ea48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea4c:	b10a      	cbz	r2, 800ea52 <_vfiprintf_r+0xa2>
 800ea4e:	2a25      	cmp	r2, #37	; 0x25
 800ea50:	d1f9      	bne.n	800ea46 <_vfiprintf_r+0x96>
 800ea52:	ebba 0b04 	subs.w	fp, sl, r4
 800ea56:	d00b      	beq.n	800ea70 <_vfiprintf_r+0xc0>
 800ea58:	465b      	mov	r3, fp
 800ea5a:	4622      	mov	r2, r4
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f7ff ff93 	bl	800e98a <__sfputs_r>
 800ea64:	3001      	adds	r0, #1
 800ea66:	f000 80aa 	beq.w	800ebbe <_vfiprintf_r+0x20e>
 800ea6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea6c:	445a      	add	r2, fp
 800ea6e:	9209      	str	r2, [sp, #36]	; 0x24
 800ea70:	f89a 3000 	ldrb.w	r3, [sl]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 80a2 	beq.w	800ebbe <_vfiprintf_r+0x20e>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea84:	f10a 0a01 	add.w	sl, sl, #1
 800ea88:	9304      	str	r3, [sp, #16]
 800ea8a:	9307      	str	r3, [sp, #28]
 800ea8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea90:	931a      	str	r3, [sp, #104]	; 0x68
 800ea92:	4654      	mov	r4, sl
 800ea94:	2205      	movs	r2, #5
 800ea96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea9a:	4858      	ldr	r0, [pc, #352]	; (800ebfc <_vfiprintf_r+0x24c>)
 800ea9c:	f7ff ff06 	bl	800e8ac <memchr>
 800eaa0:	9a04      	ldr	r2, [sp, #16]
 800eaa2:	b9d8      	cbnz	r0, 800eadc <_vfiprintf_r+0x12c>
 800eaa4:	06d1      	lsls	r1, r2, #27
 800eaa6:	bf44      	itt	mi
 800eaa8:	2320      	movmi	r3, #32
 800eaaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaae:	0713      	lsls	r3, r2, #28
 800eab0:	bf44      	itt	mi
 800eab2:	232b      	movmi	r3, #43	; 0x2b
 800eab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eab8:	f89a 3000 	ldrb.w	r3, [sl]
 800eabc:	2b2a      	cmp	r3, #42	; 0x2a
 800eabe:	d015      	beq.n	800eaec <_vfiprintf_r+0x13c>
 800eac0:	4654      	mov	r4, sl
 800eac2:	2000      	movs	r0, #0
 800eac4:	f04f 0c0a 	mov.w	ip, #10
 800eac8:	9a07      	ldr	r2, [sp, #28]
 800eaca:	4621      	mov	r1, r4
 800eacc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ead0:	3b30      	subs	r3, #48	; 0x30
 800ead2:	2b09      	cmp	r3, #9
 800ead4:	d94e      	bls.n	800eb74 <_vfiprintf_r+0x1c4>
 800ead6:	b1b0      	cbz	r0, 800eb06 <_vfiprintf_r+0x156>
 800ead8:	9207      	str	r2, [sp, #28]
 800eada:	e014      	b.n	800eb06 <_vfiprintf_r+0x156>
 800eadc:	eba0 0308 	sub.w	r3, r0, r8
 800eae0:	fa09 f303 	lsl.w	r3, r9, r3
 800eae4:	4313      	orrs	r3, r2
 800eae6:	46a2      	mov	sl, r4
 800eae8:	9304      	str	r3, [sp, #16]
 800eaea:	e7d2      	b.n	800ea92 <_vfiprintf_r+0xe2>
 800eaec:	9b03      	ldr	r3, [sp, #12]
 800eaee:	1d19      	adds	r1, r3, #4
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	9103      	str	r1, [sp, #12]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	bfbb      	ittet	lt
 800eaf8:	425b      	neglt	r3, r3
 800eafa:	f042 0202 	orrlt.w	r2, r2, #2
 800eafe:	9307      	strge	r3, [sp, #28]
 800eb00:	9307      	strlt	r3, [sp, #28]
 800eb02:	bfb8      	it	lt
 800eb04:	9204      	strlt	r2, [sp, #16]
 800eb06:	7823      	ldrb	r3, [r4, #0]
 800eb08:	2b2e      	cmp	r3, #46	; 0x2e
 800eb0a:	d10c      	bne.n	800eb26 <_vfiprintf_r+0x176>
 800eb0c:	7863      	ldrb	r3, [r4, #1]
 800eb0e:	2b2a      	cmp	r3, #42	; 0x2a
 800eb10:	d135      	bne.n	800eb7e <_vfiprintf_r+0x1ce>
 800eb12:	9b03      	ldr	r3, [sp, #12]
 800eb14:	3402      	adds	r4, #2
 800eb16:	1d1a      	adds	r2, r3, #4
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	9203      	str	r2, [sp, #12]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	bfb8      	it	lt
 800eb20:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb24:	9305      	str	r3, [sp, #20]
 800eb26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ec0c <_vfiprintf_r+0x25c>
 800eb2a:	2203      	movs	r2, #3
 800eb2c:	4650      	mov	r0, sl
 800eb2e:	7821      	ldrb	r1, [r4, #0]
 800eb30:	f7ff febc 	bl	800e8ac <memchr>
 800eb34:	b140      	cbz	r0, 800eb48 <_vfiprintf_r+0x198>
 800eb36:	2340      	movs	r3, #64	; 0x40
 800eb38:	eba0 000a 	sub.w	r0, r0, sl
 800eb3c:	fa03 f000 	lsl.w	r0, r3, r0
 800eb40:	9b04      	ldr	r3, [sp, #16]
 800eb42:	3401      	adds	r4, #1
 800eb44:	4303      	orrs	r3, r0
 800eb46:	9304      	str	r3, [sp, #16]
 800eb48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb4c:	2206      	movs	r2, #6
 800eb4e:	482c      	ldr	r0, [pc, #176]	; (800ec00 <_vfiprintf_r+0x250>)
 800eb50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb54:	f7ff feaa 	bl	800e8ac <memchr>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d03f      	beq.n	800ebdc <_vfiprintf_r+0x22c>
 800eb5c:	4b29      	ldr	r3, [pc, #164]	; (800ec04 <_vfiprintf_r+0x254>)
 800eb5e:	bb1b      	cbnz	r3, 800eba8 <_vfiprintf_r+0x1f8>
 800eb60:	9b03      	ldr	r3, [sp, #12]
 800eb62:	3307      	adds	r3, #7
 800eb64:	f023 0307 	bic.w	r3, r3, #7
 800eb68:	3308      	adds	r3, #8
 800eb6a:	9303      	str	r3, [sp, #12]
 800eb6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb6e:	443b      	add	r3, r7
 800eb70:	9309      	str	r3, [sp, #36]	; 0x24
 800eb72:	e767      	b.n	800ea44 <_vfiprintf_r+0x94>
 800eb74:	460c      	mov	r4, r1
 800eb76:	2001      	movs	r0, #1
 800eb78:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb7c:	e7a5      	b.n	800eaca <_vfiprintf_r+0x11a>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	f04f 0c0a 	mov.w	ip, #10
 800eb84:	4619      	mov	r1, r3
 800eb86:	3401      	adds	r4, #1
 800eb88:	9305      	str	r3, [sp, #20]
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb90:	3a30      	subs	r2, #48	; 0x30
 800eb92:	2a09      	cmp	r2, #9
 800eb94:	d903      	bls.n	800eb9e <_vfiprintf_r+0x1ee>
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0c5      	beq.n	800eb26 <_vfiprintf_r+0x176>
 800eb9a:	9105      	str	r1, [sp, #20]
 800eb9c:	e7c3      	b.n	800eb26 <_vfiprintf_r+0x176>
 800eb9e:	4604      	mov	r4, r0
 800eba0:	2301      	movs	r3, #1
 800eba2:	fb0c 2101 	mla	r1, ip, r1, r2
 800eba6:	e7f0      	b.n	800eb8a <_vfiprintf_r+0x1da>
 800eba8:	ab03      	add	r3, sp, #12
 800ebaa:	9300      	str	r3, [sp, #0]
 800ebac:	462a      	mov	r2, r5
 800ebae:	4630      	mov	r0, r6
 800ebb0:	4b15      	ldr	r3, [pc, #84]	; (800ec08 <_vfiprintf_r+0x258>)
 800ebb2:	a904      	add	r1, sp, #16
 800ebb4:	f3af 8000 	nop.w
 800ebb8:	4607      	mov	r7, r0
 800ebba:	1c78      	adds	r0, r7, #1
 800ebbc:	d1d6      	bne.n	800eb6c <_vfiprintf_r+0x1bc>
 800ebbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebc0:	07d9      	lsls	r1, r3, #31
 800ebc2:	d405      	bmi.n	800ebd0 <_vfiprintf_r+0x220>
 800ebc4:	89ab      	ldrh	r3, [r5, #12]
 800ebc6:	059a      	lsls	r2, r3, #22
 800ebc8:	d402      	bmi.n	800ebd0 <_vfiprintf_r+0x220>
 800ebca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebcc:	f7fe fc8e 	bl	800d4ec <__retarget_lock_release_recursive>
 800ebd0:	89ab      	ldrh	r3, [r5, #12]
 800ebd2:	065b      	lsls	r3, r3, #25
 800ebd4:	f53f af12 	bmi.w	800e9fc <_vfiprintf_r+0x4c>
 800ebd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebda:	e711      	b.n	800ea00 <_vfiprintf_r+0x50>
 800ebdc:	ab03      	add	r3, sp, #12
 800ebde:	9300      	str	r3, [sp, #0]
 800ebe0:	462a      	mov	r2, r5
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	4b08      	ldr	r3, [pc, #32]	; (800ec08 <_vfiprintf_r+0x258>)
 800ebe6:	a904      	add	r1, sp, #16
 800ebe8:	f7ff fc30 	bl	800e44c <_printf_i>
 800ebec:	e7e4      	b.n	800ebb8 <_vfiprintf_r+0x208>
 800ebee:	bf00      	nop
 800ebf0:	0800f0cc 	.word	0x0800f0cc
 800ebf4:	0800f0ec 	.word	0x0800f0ec
 800ebf8:	0800f0ac 	.word	0x0800f0ac
 800ebfc:	0800f30c 	.word	0x0800f30c
 800ec00:	0800f316 	.word	0x0800f316
 800ec04:	00000000 	.word	0x00000000
 800ec08:	0800e98b 	.word	0x0800e98b
 800ec0c:	0800f312 	.word	0x0800f312

0800ec10 <_read_r>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	4604      	mov	r4, r0
 800ec14:	4608      	mov	r0, r1
 800ec16:	4611      	mov	r1, r2
 800ec18:	2200      	movs	r2, #0
 800ec1a:	4d05      	ldr	r5, [pc, #20]	; (800ec30 <_read_r+0x20>)
 800ec1c:	602a      	str	r2, [r5, #0]
 800ec1e:	461a      	mov	r2, r3
 800ec20:	f7f7 f97c 	bl	8005f1c <_read>
 800ec24:	1c43      	adds	r3, r0, #1
 800ec26:	d102      	bne.n	800ec2e <_read_r+0x1e>
 800ec28:	682b      	ldr	r3, [r5, #0]
 800ec2a:	b103      	cbz	r3, 800ec2e <_read_r+0x1e>
 800ec2c:	6023      	str	r3, [r4, #0]
 800ec2e:	bd38      	pop	{r3, r4, r5, pc}
 800ec30:	20003a2c 	.word	0x20003a2c

0800ec34 <abort>:
 800ec34:	2006      	movs	r0, #6
 800ec36:	b508      	push	{r3, lr}
 800ec38:	f000 f834 	bl	800eca4 <raise>
 800ec3c:	2001      	movs	r0, #1
 800ec3e:	f7f7 f967 	bl	8005f10 <_exit>

0800ec42 <_malloc_usable_size_r>:
 800ec42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec46:	1f18      	subs	r0, r3, #4
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	bfbc      	itt	lt
 800ec4c:	580b      	ldrlt	r3, [r1, r0]
 800ec4e:	18c0      	addlt	r0, r0, r3
 800ec50:	4770      	bx	lr

0800ec52 <_raise_r>:
 800ec52:	291f      	cmp	r1, #31
 800ec54:	b538      	push	{r3, r4, r5, lr}
 800ec56:	4604      	mov	r4, r0
 800ec58:	460d      	mov	r5, r1
 800ec5a:	d904      	bls.n	800ec66 <_raise_r+0x14>
 800ec5c:	2316      	movs	r3, #22
 800ec5e:	6003      	str	r3, [r0, #0]
 800ec60:	f04f 30ff 	mov.w	r0, #4294967295
 800ec64:	bd38      	pop	{r3, r4, r5, pc}
 800ec66:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ec68:	b112      	cbz	r2, 800ec70 <_raise_r+0x1e>
 800ec6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec6e:	b94b      	cbnz	r3, 800ec84 <_raise_r+0x32>
 800ec70:	4620      	mov	r0, r4
 800ec72:	f000 f831 	bl	800ecd8 <_getpid_r>
 800ec76:	462a      	mov	r2, r5
 800ec78:	4601      	mov	r1, r0
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec80:	f000 b818 	b.w	800ecb4 <_kill_r>
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d00a      	beq.n	800ec9e <_raise_r+0x4c>
 800ec88:	1c59      	adds	r1, r3, #1
 800ec8a:	d103      	bne.n	800ec94 <_raise_r+0x42>
 800ec8c:	2316      	movs	r3, #22
 800ec8e:	6003      	str	r3, [r0, #0]
 800ec90:	2001      	movs	r0, #1
 800ec92:	e7e7      	b.n	800ec64 <_raise_r+0x12>
 800ec94:	2400      	movs	r4, #0
 800ec96:	4628      	mov	r0, r5
 800ec98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ec9c:	4798      	blx	r3
 800ec9e:	2000      	movs	r0, #0
 800eca0:	e7e0      	b.n	800ec64 <_raise_r+0x12>
	...

0800eca4 <raise>:
 800eca4:	4b02      	ldr	r3, [pc, #8]	; (800ecb0 <raise+0xc>)
 800eca6:	4601      	mov	r1, r0
 800eca8:	6818      	ldr	r0, [r3, #0]
 800ecaa:	f7ff bfd2 	b.w	800ec52 <_raise_r>
 800ecae:	bf00      	nop
 800ecb0:	20000194 	.word	0x20000194

0800ecb4 <_kill_r>:
 800ecb4:	b538      	push	{r3, r4, r5, lr}
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	4d06      	ldr	r5, [pc, #24]	; (800ecd4 <_kill_r+0x20>)
 800ecba:	4604      	mov	r4, r0
 800ecbc:	4608      	mov	r0, r1
 800ecbe:	4611      	mov	r1, r2
 800ecc0:	602b      	str	r3, [r5, #0]
 800ecc2:	f7f7 f91d 	bl	8005f00 <_kill>
 800ecc6:	1c43      	adds	r3, r0, #1
 800ecc8:	d102      	bne.n	800ecd0 <_kill_r+0x1c>
 800ecca:	682b      	ldr	r3, [r5, #0]
 800eccc:	b103      	cbz	r3, 800ecd0 <_kill_r+0x1c>
 800ecce:	6023      	str	r3, [r4, #0]
 800ecd0:	bd38      	pop	{r3, r4, r5, pc}
 800ecd2:	bf00      	nop
 800ecd4:	20003a2c 	.word	0x20003a2c

0800ecd8 <_getpid_r>:
 800ecd8:	f7f7 b910 	b.w	8005efc <_getpid>

0800ecdc <_init>:
 800ecdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecde:	bf00      	nop
 800ece0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ece2:	bc08      	pop	{r3}
 800ece4:	469e      	mov	lr, r3
 800ece6:	4770      	bx	lr

0800ece8 <_fini>:
 800ece8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecea:	bf00      	nop
 800ecec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecee:	bc08      	pop	{r3}
 800ecf0:	469e      	mov	lr, r3
 800ecf2:	4770      	bx	lr
