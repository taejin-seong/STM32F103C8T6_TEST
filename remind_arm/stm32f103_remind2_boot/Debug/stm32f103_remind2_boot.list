
stm32f103_remind2_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003e38  08003e38  00013e38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee0  08003ee0  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  08003ee0  08003ee0  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ee0  08003ee0  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08003ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f28  200000e8  08003fcc  000200e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001010  08003fcc  00021010  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f16e  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a26  00000000  00000000  0003f27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a25c  00000000  00000000  00044ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  0004ef00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001810  00000000  00000000  0004fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c9e9  00000000  00000000  00051400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0fa  00000000  00000000  0006dde9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088289  00000000  00000000  0008cee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011516c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ea8  00000000  00000000  001151c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e8 	.word	0x200000e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e20 	.word	0x08003e20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ec 	.word	0x200000ec
 8000148:	08003e20 	.word	0x08003e20

0800014c <apInit>:


void apInit(void)
{

}
 800014c:	4770      	bx	lr

0800014e <apMain>:


void apMain(void)
{
 800014e:	b510      	push	{r4, lr}
  uint32_t pre_time;

  pre_time = millis();
 8000150:	f000 f80f 	bl	8000172 <millis>
 8000154:	4604      	mov	r4, r0

  while(1)
  {
    if (millis() - pre_time >= 100)
 8000156:	f000 f80c 	bl	8000172 <millis>
 800015a:	1b00      	subs	r0, r0, r4
 800015c:	2863      	cmp	r0, #99	; 0x63
 800015e:	d9fa      	bls.n	8000156 <apMain+0x8>
    {
      pre_time = millis();
 8000160:	f000 f807 	bl	8000172 <millis>
 8000164:	4604      	mov	r4, r0
      ledToggle(_DEF_LED1);
 8000166:	2000      	movs	r0, #0
 8000168:	f000 f98a 	bl	8000480 <ledToggle>
 800016c:	e7f3      	b.n	8000156 <apMain+0x8>

0800016e <delay>:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}

void delay(uint32_t ms)
{
  HAL_Delay(ms);
 800016e:	f000 baa9 	b.w	80006c4 <HAL_Delay>

08000172 <millis>:
}

uint32_t millis(void)
{
  return HAL_GetTick();
 8000172:	f000 baa1 	b.w	80006b8 <HAL_GetTick>

08000176 <SystemClock_Config>:
}


void SystemClock_Config(void)
{
 8000176:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000178:	2214      	movs	r2, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017a:	2400      	movs	r4, #0
{
 800017c:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017e:	4621      	mov	r1, r4
 8000180:	eb0d 0002 	add.w	r0, sp, r2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000188:	f003 fe42 	bl	8003e10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800018c:	4621      	mov	r1, r4
 800018e:	2210      	movs	r2, #16
 8000190:	a801      	add	r0, sp, #4
 8000192:	f003 fe3d 	bl	8003e10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019a:	2105      	movs	r1, #5
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019e:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80001a0:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a2:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a6:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ae:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b0:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	f001 fbf7 	bl	80019a8 <HAL_RCC_OscConfig>
 80001ba:	b108      	cbz	r0, 80001c0 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001bc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001be:	e7fe      	b.n	80001be <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c2:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ca:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001cc:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d0:	4621      	mov	r1, r4
 80001d2:	a805      	add	r0, sp, #20
 80001d4:	f001 fdbe 	bl	8001d54 <HAL_RCC_ClockConfig>
 80001d8:	b108      	cbz	r0, 80001de <SystemClock_Config+0x68>
 80001da:	b672      	cpsid	i
  while (1)
 80001dc:	e7fe      	b.n	80001dc <SystemClock_Config+0x66>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80001de:	2211      	movs	r2, #17
 80001e0:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001e4:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001e6:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80001e8:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001ec:	f001 fe5e 	bl	8001eac <HAL_RCCEx_PeriphCLKConfig>
 80001f0:	b108      	cbz	r0, 80001f6 <SystemClock_Config+0x80>
 80001f2:	b672      	cpsid	i
  while (1)
 80001f4:	e7fe      	b.n	80001f4 <SystemClock_Config+0x7e>
}
 80001f6:	b014      	add	sp, #80	; 0x50
 80001f8:	bd10      	pop	{r4, pc}
	...

080001fc <bspInit>:
{
 80001fc:	b570      	push	{r4, r5, r6, lr}
 80001fe:	b088      	sub	sp, #32
  HAL_Init();
 8000200:	f000 fa3c 	bl	800067c <HAL_Init>
  SystemClock_Config();
 8000204:	f7ff ffb7 	bl	8000176 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <bspInit+0x80>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800020a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800020e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000210:	2600      	movs	r6, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000212:	f042 0220 	orr.w	r2, r2, #32
 8000216:	619a      	str	r2, [r3, #24]
 8000218:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	4c19      	ldr	r4, [pc, #100]	; (8000280 <bspInit+0x84>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800021c:	f002 0220 	and.w	r2, r2, #32
 8000220:	9200      	str	r2, [sp, #0]
 8000222:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000224:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000226:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000228:	f042 0210 	orr.w	r2, r2, #16
 800022c:	619a      	str	r2, [r3, #24]
 800022e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000232:	f002 0210 	and.w	r2, r2, #16
 8000236:	9201      	str	r2, [sp, #4]
 8000238:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023a:	699a      	ldr	r2, [r3, #24]
 800023c:	f042 0204 	orr.w	r2, r2, #4
 8000240:	619a      	str	r2, [r3, #24]
 8000242:	699a      	ldr	r2, [r3, #24]
 8000244:	f002 0204 	and.w	r2, r2, #4
 8000248:	9202      	str	r2, [sp, #8]
 800024a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800024c:	699a      	ldr	r2, [r3, #24]
 800024e:	f042 0208 	orr.w	r2, r2, #8
 8000252:	619a      	str	r2, [r3, #24]
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	f003 0308 	and.w	r3, r3, #8
 800025a:	9303      	str	r3, [sp, #12]
 800025c:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800025e:	2311      	movs	r3, #17
 8000260:	e9cd 5304 	strd	r5, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000264:	2302      	movs	r3, #2
 8000266:	e9cd 6306 	strd	r6, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800026a:	f000 fbcb 	bl	8000a04 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800026e:	4632      	mov	r2, r6
 8000270:	4629      	mov	r1, r5
 8000272:	4620      	mov	r0, r4
 8000274:	f000 fca2 	bl	8000bbc <HAL_GPIO_WritePin>
}
 8000278:	b008      	add	sp, #32
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	40021000 	.word	0x40021000
 8000280:	40010800 	.word	0x40010800

08000284 <Error_Handler>:
 8000284:	b672      	cpsid	i
  while (1)
 8000286:	e7fe      	b.n	8000286 <Error_Handler+0x2>

08000288 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000288:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <HAL_MspInit+0x3c>)
{
 800028a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800028c:	699a      	ldr	r2, [r3, #24]
 800028e:	f042 0201 	orr.w	r2, r2, #1
 8000292:	619a      	str	r2, [r3, #24]
 8000294:	699a      	ldr	r2, [r3, #24]
 8000296:	f002 0201 	and.w	r2, r2, #1
 800029a:	9200      	str	r2, [sp, #0]
 800029c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800029e:	69da      	ldr	r2, [r3, #28]
 80002a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002a4:	61da      	str	r2, [r3, #28]
 80002a6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002a8:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80002aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002b2:	6853      	ldr	r3, [r2, #4]
 80002b4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002be:	b002      	add	sp, #8
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010000 	.word	0x40010000

080002cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <NMI_Handler>

080002ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <HardFault_Handler>

080002d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <MemManage_Handler>

080002d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <BusFault_Handler>

080002d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <UsageFault_Handler>

080002d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002d6:	4770      	bx	lr

080002d8 <DebugMon_Handler>:
 80002d8:	4770      	bx	lr

080002da <PendSV_Handler>:
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002dc:	f000 b9e0 	b.w	80006a0 <HAL_IncTick>

080002e0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80002e0:	4801      	ldr	r0, [pc, #4]	; (80002e8 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80002e2:	f000 bd39 	b.w	8000d58 <HAL_PCD_IRQHandler>
 80002e6:	bf00      	nop
 80002e8:	20000d24 	.word	0x20000d24

080002ec <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002ec:	4770      	bx	lr
	...

080002f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	; (8000324 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	; (8000328 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	; (8000334 <LoopFillZerobss+0x22>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000316:	f7ff ffe9 	bl	80002ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800031a:	f003 fd55 	bl	8003dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031e:	f003 fd49 	bl	8003db4 <main>
  bx lr
 8000322:	4770      	bx	lr
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 800032c:	08003ee8 	.word	0x08003ee8
  ldr r2, =_sbss
 8000330:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000334:	20001010 	.word	0x20001010

08000338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC1_2_IRQHandler>
	...

0800033c <flashInit>:
//내부에서 쓰는 함수이므로 static 선언을 통해 외부로 사용되지 않게 막음
static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);


bool flashInit(void)
{
 800033c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  for (int i = 0; i < FLASH_SECTOR_MAX; i++)
  {
    flash_tbl[i].addr   = 0x8000000 + i * 1024;
    flash_tbl[i].length = 1024;
 8000340:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000344:	4a05      	ldr	r2, [pc, #20]	; (800035c <flashInit+0x20>)
  for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8000346:	4906      	ldr	r1, [pc, #24]	; (8000360 <flashInit+0x24>)
    flash_tbl[i].addr   = 0x8000000 + i * 1024;
 8000348:	6013      	str	r3, [r2, #0]
    flash_tbl[i].length = 1024;
 800034a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 800034e:	428b      	cmp	r3, r1
    flash_tbl[i].length = 1024;
 8000350:	8090      	strh	r0, [r2, #4]
  for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8000352:	f102 0208 	add.w	r2, r2, #8
 8000356:	d1f7      	bne.n	8000348 <flashInit+0xc>
  }

  return true;

}
 8000358:	2001      	movs	r0, #1
 800035a:	4770      	bx	lr
 800035c:	20000104 	.word	0x20000104
 8000360:	08010000 	.word	0x08010000

08000364 <flashErase>:

  int16_t start_sector_num  = -1;
  uint32_t sector_count     = 0;


  for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8000364:	2300      	movs	r3, #0
{
 8000366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000368:	4a24      	ldr	r2, [pc, #144]	; (80003fc <flashErase+0x98>)
  int16_t start_sector_num  = -1;
 800036a:	f04f 36ff 	mov.w	r6, #4294967295
  uint32_t sector_count     = 0;
 800036e:	461c      	mov	r4, r3
 8000370:	4617      	mov	r7, r2
  uint32_t flash_end;

  sector_start = flash_tbl[sector_num].addr;
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
  flash_start  = addr;
  flash_end    = addr + length - 1;
 8000372:	4431      	add	r1, r6
{
 8000374:	b087      	sub	sp, #28
  flash_end    = addr + length - 1;
 8000376:	4401      	add	r1, r0
  sector_start = flash_tbl[sector_num].addr;
 8000378:	f8d2 c000 	ldr.w	ip, [r2]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 800037c:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 8000380:	f10c 35ff 	add.w	r5, ip, #4294967295

  if (sector_start >= flash_start && sector_start <= flash_end)
 8000384:	4560      	cmp	r0, ip
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8000386:	4475      	add	r5, lr
  if (sector_start >= flash_start && sector_start <= flash_end)
 8000388:	d834      	bhi.n	80003f4 <flashErase+0x90>
 800038a:	458c      	cmp	ip, r1
 800038c:	bf8c      	ite	hi
 800038e:	f04f 0e00 	movhi.w	lr, #0
 8000392:	f04f 0e01 	movls.w	lr, #1
  {
    ret = true;
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8000396:	42a8      	cmp	r0, r5
 8000398:	d805      	bhi.n	80003a6 <flashErase+0x42>
  {
    ret = true;
 800039a:	428d      	cmp	r5, r1
 800039c:	bf98      	it	ls
 800039e:	f04f 0e01 	movls.w	lr, #1
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80003a2:	4560      	cmp	r0, ip
 80003a4:	d206      	bcs.n	80003b4 <flashErase+0x50>
  {
    ret = true;
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 80003a6:	458c      	cmp	ip, r1
 80003a8:	d801      	bhi.n	80003ae <flashErase+0x4a>
 80003aa:	428d      	cmp	r5, r1
 80003ac:	d202      	bcs.n	80003b4 <flashErase+0x50>
    if (flashInSector(i, addr, length) == true)
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d003      	beq.n	80003bc <flashErase+0x58>
      if (start_sector_num < 0)
 80003b4:	1c75      	adds	r5, r6, #1
        start_sector_num = i;
 80003b6:	bf08      	it	eq
 80003b8:	b21e      	sxtheq	r6, r3
      sector_count ++;
 80003ba:	3401      	adds	r4, #1
  for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 80003bc:	3301      	adds	r3, #1
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	f102 0208 	add.w	r2, r2, #8
 80003c4:	d1d8      	bne.n	8000378 <flashErase+0x14>
  if(sector_count > 0)
 80003c6:	b194      	cbz	r4, 80003ee <flashErase+0x8a>
    HAL_FLASH_Unlock();
 80003c8:	f000 fa1e 	bl	8000808 <HAL_FLASH_Unlock>
    init.Banks        = FLASH_BANK_1;
 80003cc:	2200      	movs	r2, #0
 80003ce:	2301      	movs	r3, #1
 80003d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    init.PageAddress  = flash_tbl[start_sector_num].addr;
 80003d4:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
    status =  HAL_FLASHEx_Erase(&init, &page_error);
 80003d8:	a901      	add	r1, sp, #4
 80003da:	a802      	add	r0, sp, #8
    init.NbPages      = sector_count;
 80003dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
    status =  HAL_FLASHEx_Erase(&init, &page_error);
 80003e0:	f000 fac4 	bl	800096c <HAL_FLASHEx_Erase>
    if (status == HAL_OK)
 80003e4:	fab0 f480 	clz	r4, r0
 80003e8:	0964      	lsrs	r4, r4, #5
    HAL_FLASH_Unlock();
 80003ea:	f000 fa0d 	bl	8000808 <HAL_FLASH_Unlock>
}
 80003ee:	4620      	mov	r0, r4
 80003f0:	b007      	add	sp, #28
 80003f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  bool ret = false;
 80003f4:	f04f 0e00 	mov.w	lr, #0
 80003f8:	e7cd      	b.n	8000396 <flashErase+0x32>
 80003fa:	bf00      	nop
 80003fc:	20000104 	.word	0x20000104

08000400 <flashWrite>:
{
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (addr%2 != 0)
 8000402:	f010 0501 	ands.w	r5, r0, #1
{
 8000406:	4606      	mov	r6, r0
 8000408:	460c      	mov	r4, r1
 800040a:	4617      	mov	r7, r2
  if (addr%2 != 0)
 800040c:	d118      	bne.n	8000440 <flashWrite+0x40>
  HAL_FLASH_Unlock();
 800040e:	f000 f9fb 	bl	8000808 <HAL_FLASH_Unlock>
  for (int i = 0; i < length; i+=2)
 8000412:	3401      	adds	r4, #1
 8000414:	42af      	cmp	r7, r5
 8000416:	d804      	bhi.n	8000422 <flashWrite+0x22>
  bool ret = true;
 8000418:	2401      	movs	r4, #1
  HAL_FLASH_Unlock();
 800041a:	f000 f9f5 	bl	8000808 <HAL_FLASH_Unlock>
}
 800041e:	4620      	mov	r0, r4
 8000420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr+i, (uint64_t)data);
 8000422:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8000426:	f814 2b02 	ldrb.w	r2, [r4], #2
 800042a:	2001      	movs	r0, #1
 800042c:	431a      	orrs	r2, r3
 800042e:	1971      	adds	r1, r6, r5
 8000430:	2300      	movs	r3, #0
 8000432:	f000 fa25 	bl	8000880 <HAL_FLASH_Program>
    if (status != HAL_OK)
 8000436:	b908      	cbnz	r0, 800043c <flashWrite+0x3c>
  for (int i = 0; i < length; i+=2)
 8000438:	3502      	adds	r5, #2
 800043a:	e7eb      	b.n	8000414 <flashWrite+0x14>
      ret = false;
 800043c:	2400      	movs	r4, #0
 800043e:	e7ec      	b.n	800041a <flashWrite+0x1a>
    return false;
 8000440:	2400      	movs	r4, #0
 8000442:	e7ec      	b.n	800041e <flashWrite+0x1e>

08000444 <ledOff.part.0>:

void ledOff(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000444:	4b02      	ldr	r3, [pc, #8]	; (8000450 <ledOff.part.0+0xc>)
 8000446:	79da      	ldrb	r2, [r3, #7]
 8000448:	8899      	ldrh	r1, [r3, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	f000 bbb6 	b.w	8000bbc <HAL_GPIO_WritePin>
 8000450:	20000004 	.word	0x20000004

08000454 <ledInit>:
{
 8000454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2401      	movs	r4, #1
 8000458:	2300      	movs	r3, #0
 800045a:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2302      	movs	r3, #2
 8000460:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <ledInit+0x28>)
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000464:	4669      	mov	r1, sp
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000466:	889a      	ldrh	r2, [r3, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000468:	6818      	ldr	r0, [r3, #0]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800046a:	9200      	str	r2, [sp, #0]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800046c:	f000 faca 	bl	8000a04 <HAL_GPIO_Init>
  if (ch >= LED_MAX_CH) return;
 8000470:	f7ff ffe8 	bl	8000444 <ledOff.part.0>
}
 8000474:	4620      	mov	r0, r4
 8000476:	b004      	add	sp, #16
 8000478:	bd10      	pop	{r4, pc}
 800047a:	bf00      	nop
 800047c:	20000004 	.word	0x20000004

08000480 <ledToggle>:
}


void ledToggle(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;
 8000480:	b920      	cbnz	r0, 800048c <ledToggle+0xc>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000482:	4b03      	ldr	r3, [pc, #12]	; (8000490 <ledToggle+0x10>)
 8000484:	8899      	ldrh	r1, [r3, #4]
 8000486:	6818      	ldr	r0, [r3, #0]
 8000488:	f000 bb9d 	b.w	8000bc6 <HAL_GPIO_TogglePin>
}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000004 	.word	0x20000004

08000494 <resetInit>:
bool resetInit(void)
{
  bool ret = true;

  //만약 Reset Pin이 눌렸다면
  if (RCC->CSR == (1<<26))
 8000494:	4b1d      	ldr	r3, [pc, #116]	; (800050c <resetInit+0x78>)
{
 8000496:	b510      	push	{r4, lr}
  if (RCC->CSR == (1<<26))
 8000498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049a:	4c1d      	ldr	r4, [pc, #116]	; (8000510 <resetInit+0x7c>)
 800049c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80004a0:	d10e      	bne.n	80004c0 <resetInit+0x2c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 f852 	bl	800054c <rtcBackupRegRead>
 80004a8:	1c41      	adds	r1, r0, #1
 80004aa:	2001      	movs	r0, #1
 80004ac:	f000 f854 	bl	8000558 <rtcBackupRegWrite>
    delay(1000);
 80004b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b4:	f7ff fe5b 	bl	800016e <delay>
    reset_count = rtcBackupRegRead(1);
 80004b8:	2001      	movs	r0, #1
 80004ba:	f000 f847 	bl	800054c <rtcBackupRegRead>
 80004be:	6020      	str	r0, [r4, #0]
  }

  rtcBackupRegWrite(1, 0);
 80004c0:	2100      	movs	r1, #0
 80004c2:	2001      	movs	r0, #1
 80004c4:	f000 f848 	bl	8000558 <rtcBackupRegWrite>



  if (reset_count != 2)
 80004c8:	6823      	ldr	r3, [r4, #0]
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d01b      	beq.n	8000506 <resetInit+0x72>
  {
   void (**jump_func)() = (void(**)())(0x8005000 + 4);

   if ((uint32_t)(*jump_func) != 0xFFFFFFFF)
 80004ce:	4c11      	ldr	r4, [pc, #68]	; (8000514 <resetInit+0x80>)
 80004d0:	6822      	ldr	r2, [r4, #0]
 80004d2:	3201      	adds	r2, #1
 80004d4:	d017      	beq.n	8000506 <resetInit+0x72>
   {
     HAL_RCC_DeInit();
 80004d6:	f001 f9fb 	bl	80018d0 <HAL_RCC_DeInit>
     HAL_DeInit();
 80004da:	f000 f89b 	bl	8000614 <HAL_DeInit>

     for (int i = 0; i < 8; i++)
 80004de:	2300      	movs	r3, #0
     {
       NVIC->ICER[i] = 0xFFFFFFFF;
 80004e0:	f04f 30ff 	mov.w	r0, #4294967295
 80004e4:	4a0c      	ldr	r2, [pc, #48]	; (8000518 <resetInit+0x84>)
 80004e6:	f103 0120 	add.w	r1, r3, #32
 80004ea:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004f2:	f3bf 8f6f 	isb	sy
     for (int i = 0; i < 8; i++)
 80004f6:	3301      	adds	r3, #1
 80004f8:	2b08      	cmp	r3, #8
 80004fa:	d1f4      	bne.n	80004e6 <resetInit+0x52>
       __DSB();
       __ISB();
     }
     SysTick->CTRL = 0;
 80004fc:	2200      	movs	r2, #0
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <resetInit+0x88>)
 8000500:	601a      	str	r2, [r3, #0]

     (*jump_func)();
 8000502:	6823      	ldr	r3, [r4, #0]
 8000504:	4798      	blx	r3
   }

  }

  return ret;
}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000
 8000510:	20000304 	.word	0x20000304
 8000514:	08005004 	.word	0x08005004
 8000518:	e000e100 	.word	0xe000e100
 800051c:	e000e010 	.word	0xe000e010

08000520 <rtcInit>:

static RTC_HandleTypeDef hrtc;


bool rtcInit(void)
{
 8000520:	b508      	push	{r3, lr}
  bool ret = true;

  hrtc.Instance          = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance          = RTC;
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <rtcInit+0x24>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <rtcInit+0x28>)
 800052a:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.OutPut       = RTC_OUTPUTSOURCE_ALARM;
 800052e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000532:	6083      	str	r3, [r0, #8]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000534:	f001 fdf0 	bl	8002118 <HAL_RTC_Init>
 8000538:	b108      	cbz	r0, 800053e <rtcInit+0x1e>
  {
    Error_Handler();
 800053a:	f7ff fea3 	bl	8000284 <Error_Handler>
  }
  return ret;
}
 800053e:	2001      	movs	r0, #1
 8000540:	bd08      	pop	{r3, pc}
 8000542:	bf00      	nop
 8000544:	20000308 	.word	0x20000308
 8000548:	40002800 	.word	0x40002800

0800054c <rtcBackupRegRead>:


uint32_t rtcBackupRegRead(uint32_t index)
{
 800054c:	4601      	mov	r1, r0
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 800054e:	4801      	ldr	r0, [pc, #4]	; (8000554 <rtcBackupRegRead+0x8>)
 8000550:	f001 be38 	b.w	80021c4 <HAL_RTCEx_BKUPRead>
 8000554:	20000308 	.word	0x20000308

08000558 <rtcBackupRegWrite>:
}


void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000558:	460a      	mov	r2, r1
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800055a:	4601      	mov	r1, r0
 800055c:	4801      	ldr	r0, [pc, #4]	; (8000564 <rtcBackupRegWrite+0xc>)
 800055e:	f001 be29 	b.w	80021b4 <HAL_RTCEx_BKUPWrite>
 8000562:	bf00      	nop
 8000564:	20000308 	.word	0x20000308

08000568 <HAL_RTC_MspInit>:
}


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000568:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <HAL_RTC_MspInit+0x30>)
 800056c:	6802      	ldr	r2, [r0, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	d10e      	bne.n	8000590 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000572:	f001 f9a7 	bl	80018c4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <HAL_RTC_MspInit+0x34>)
 8000578:	69da      	ldr	r2, [r3, #28]
 800057a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800057e:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000580:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <HAL_RTC_MspInit+0x38>)
 800058e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000590:	b003      	add	sp, #12
 8000592:	f85d fb04 	ldr.w	pc, [sp], #4
 8000596:	bf00      	nop
 8000598:	40002800 	.word	0x40002800
 800059c:	40021000 	.word	0x40021000
 80005a0:	4242043c 	.word	0x4242043c

080005a4 <usbInit>:




bool usbInit(void)
{
 80005a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool ret =true;

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005a6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80005aa:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005ae:	e9cd 6300 	strd	r6, r3, [sp]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	4c0e      	ldr	r4, [pc, #56]	; (80005f0 <usbInit+0x4c>)
 80005b6:	4669      	mov	r1, sp
 80005b8:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	e9cd 5302 	strd	r5, r3, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f000 fa21 	bl	8000a04 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80005c2:	462a      	mov	r2, r5
 80005c4:	4631      	mov	r1, r6
 80005c6:	4620      	mov	r0, r4
 80005c8:	f000 faf8 	bl	8000bbc <HAL_GPIO_WritePin>
  delay(200);
 80005cc:	20c8      	movs	r0, #200	; 0xc8
 80005ce:	f7ff fdce 	bl	800016e <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	4631      	mov	r1, r6
 80005d6:	4620      	mov	r0, r4
 80005d8:	f000 faf0 	bl	8000bbc <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	4620      	mov	r0, r4
 80005de:	4669      	mov	r1, sp
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f000 fa0f 	bl	8000a04 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 80005e6:	f003 fa05 	bl	80039f4 <MX_USB_DEVICE_Init>

  return ret;
}
 80005ea:	2001      	movs	r0, #1
 80005ec:	b004      	add	sp, #16
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	40010800 	.word	0x40010800

080005f4 <hwInit>:




void hwInit(void)
{
 80005f4:	b508      	push	{r3, lr}
  bspInit();
 80005f6:	f7ff fe01 	bl	80001fc <bspInit>
  rtcInit();
 80005fa:	f7ff ff91 	bl	8000520 <rtcInit>

  resetInit();
 80005fe:	f7ff ff49 	bl	8000494 <resetInit>
  ledInit();
 8000602:	f7ff ff27 	bl	8000454 <ledInit>
  usbInit();
 8000606:	f7ff ffcd 	bl	80005a4 <usbInit>
  flashInit();
}
 800060a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flashInit();
 800060e:	f7ff be95 	b.w	800033c <flashInit>

08000612 <HAL_MspDeInit>:
 8000612:	4770      	bx	lr

08000614 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000614:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000616:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 800061a:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_DeInit+0x1c>)
 800061e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000620:	611c      	str	r4, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000622:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000624:	60dc      	str	r4, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000626:	f7ff fff4 	bl	8000612 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
}
 800062a:	4620      	mov	r0, r4
 800062c:	bd10      	pop	{r4, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <HAL_InitTick+0x3c>)
{
 8000638:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800063a:	7818      	ldrb	r0, [r3, #0]
 800063c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000640:	fbb3 f3f0 	udiv	r3, r3, r0
 8000644:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <HAL_InitTick+0x40>)
 8000646:	6810      	ldr	r0, [r2, #0]
 8000648:	fbb0 f0f3 	udiv	r0, r0, r3
 800064c:	f000 f89e 	bl	800078c <HAL_SYSTICK_Config>
 8000650:	4604      	mov	r4, r0
 8000652:	b958      	cbnz	r0, 800066c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000654:	2d0f      	cmp	r5, #15
 8000656:	d809      	bhi.n	800066c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000658:	4602      	mov	r2, r0
 800065a:	4629      	mov	r1, r5
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	f000 f854 	bl	800070c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000664:	4620      	mov	r0, r4
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <HAL_InitTick+0x44>)
 8000668:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800066a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800066c:	2001      	movs	r0, #1
 800066e:	e7fc      	b.n	800066a <HAL_InitTick+0x36>
 8000670:	2000000c 	.word	0x2000000c
 8000674:	20000000 	.word	0x20000000
 8000678:	20000010 	.word	0x20000010

0800067c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <HAL_Init+0x20>)
{
 800067e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000680:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000682:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000684:	f043 0310 	orr.w	r3, r3, #16
 8000688:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068a:	f000 f82d 	bl	80006e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800068e:	2000      	movs	r0, #0
 8000690:	f7ff ffd0 	bl	8000634 <HAL_InitTick>
  HAL_MspInit();
 8000694:	f7ff fdf8 	bl	8000288 <HAL_MspInit>
}
 8000698:	2000      	movs	r0, #0
 800069a:	bd08      	pop	{r3, pc}
 800069c:	40022000 	.word	0x40022000

080006a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006a0:	4a03      	ldr	r2, [pc, #12]	; (80006b0 <HAL_IncTick+0x10>)
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <HAL_IncTick+0x14>)
 80006a4:	6811      	ldr	r1, [r2, #0]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	440b      	add	r3, r1
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	2000083c 	.word	0x2000083c
 80006b4:	2000000c 	.word	0x2000000c

080006b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006b8:	4b01      	ldr	r3, [pc, #4]	; (80006c0 <HAL_GetTick+0x8>)
 80006ba:	6818      	ldr	r0, [r3, #0]
}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	2000083c 	.word	0x2000083c

080006c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c4:	b538      	push	{r3, r4, r5, lr}
 80006c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006c8:	f7ff fff6 	bl	80006b8 <HAL_GetTick>
 80006cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ce:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80006d0:	bf1e      	ittt	ne
 80006d2:	4b04      	ldrne	r3, [pc, #16]	; (80006e4 <HAL_Delay+0x20>)
 80006d4:	781b      	ldrbne	r3, [r3, #0]
 80006d6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006d8:	f7ff ffee 	bl	80006b8 <HAL_GetTick>
 80006dc:	1b43      	subs	r3, r0, r5
 80006de:	42a3      	cmp	r3, r4
 80006e0:	d3fa      	bcc.n	80006d8 <HAL_Delay+0x14>
  {
  }
}
 80006e2:	bd38      	pop	{r3, r4, r5, pc}
 80006e4:	2000000c 	.word	0x2000000c

080006e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4907      	ldr	r1, [pc, #28]	; (8000708 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006ea:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ec:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006f6:	0412      	lsls	r2, r2, #16
 80006f8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000704:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800070e:	b530      	push	{r4, r5, lr}
 8000710:	68dc      	ldr	r4, [r3, #12]
 8000712:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000716:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800071c:	2b04      	cmp	r3, #4
 800071e:	bf28      	it	cs
 8000720:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000728:	bf98      	it	ls
 800072a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000730:	bf88      	it	hi
 8000732:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	ea21 0303 	bic.w	r3, r1, r3
 8000738:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073a:	fa05 f404 	lsl.w	r4, r5, r4
 800073e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000742:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	bfac      	ite	ge
 800074a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	4a07      	ldrlt	r2, [pc, #28]	; (800076c <HAL_NVIC_SetPriority+0x60>)
 8000750:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000754:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	bfab      	itete	ge
 8000758:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000766:	bd30      	pop	{r4, r5, pc}
 8000768:	e000ed00 	.word	0xe000ed00
 800076c:	e000ed14 	.word	0xe000ed14

08000770 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000770:	2800      	cmp	r0, #0
 8000772:	db08      	blt.n	8000786 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000774:	2301      	movs	r3, #1
 8000776:	0942      	lsrs	r2, r0, #5
 8000778:	f000 001f 	and.w	r0, r0, #31
 800077c:	fa03 f000 	lsl.w	r0, r3, r0
 8000780:	4b01      	ldr	r3, [pc, #4]	; (8000788 <HAL_NVIC_EnableIRQ+0x18>)
 8000782:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100

0800078c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800078c:	3801      	subs	r0, #1
 800078e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000792:	d20a      	bcs.n	80007aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80007b8:	4a11      	ldr	r2, [pc, #68]	; (8000800 <FLASH_SetErrorCode+0x48>)
 80007ba:	68d3      	ldr	r3, [r2, #12]
 80007bc:	f013 0310 	ands.w	r3, r3, #16
 80007c0:	d005      	beq.n	80007ce <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80007c2:	4910      	ldr	r1, [pc, #64]	; (8000804 <FLASH_SetErrorCode+0x4c>)
 80007c4:	69cb      	ldr	r3, [r1, #28]
 80007c6:	f043 0302 	orr.w	r3, r3, #2
 80007ca:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80007cc:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80007ce:	68d2      	ldr	r2, [r2, #12]
 80007d0:	0750      	lsls	r0, r2, #29
 80007d2:	d506      	bpl.n	80007e2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80007d4:	490b      	ldr	r1, [pc, #44]	; (8000804 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80007d6:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80007da:	69ca      	ldr	r2, [r1, #28]
 80007dc:	f042 0201 	orr.w	r2, r2, #1
 80007e0:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80007e2:	4a07      	ldr	r2, [pc, #28]	; (8000800 <FLASH_SetErrorCode+0x48>)
 80007e4:	69d1      	ldr	r1, [r2, #28]
 80007e6:	07c9      	lsls	r1, r1, #31
 80007e8:	d508      	bpl.n	80007fc <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <FLASH_SetErrorCode+0x4c>)
 80007ec:	69c1      	ldr	r1, [r0, #28]
 80007ee:	f041 0104 	orr.w	r1, r1, #4
 80007f2:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80007f4:	69d1      	ldr	r1, [r2, #28]
 80007f6:	f021 0101 	bic.w	r1, r1, #1
 80007fa:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80007fc:	60d3      	str	r3, [r2, #12]
}  
 80007fe:	4770      	bx	lr
 8000800:	40022000 	.word	0x40022000
 8000804:	20000840 	.word	0x20000840

08000808 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_FLASH_Unlock+0x1c>)
 800080a:	6918      	ldr	r0, [r3, #16]
 800080c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000810:	d007      	beq.n	8000822 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <HAL_FLASH_Unlock+0x20>)
 8000814:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000816:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800081a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800081c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800081e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000822:	4770      	bx	lr
 8000824:	40022000 	.word	0x40022000
 8000828:	45670123 	.word	0x45670123

0800082c <FLASH_WaitForLastOperation>:
{
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000830:	f7ff ff42 	bl	80006b8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000834:	4d11      	ldr	r5, [pc, #68]	; (800087c <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8000836:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000838:	462e      	mov	r6, r5
 800083a:	68eb      	ldr	r3, [r5, #12]
 800083c:	07d8      	lsls	r0, r3, #31
 800083e:	d412      	bmi.n	8000866 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000840:	68eb      	ldr	r3, [r5, #12]
 8000842:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000844:	bf44      	itt	mi
 8000846:	2320      	movmi	r3, #32
 8000848:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800084a:	68f3      	ldr	r3, [r6, #12]
 800084c:	06da      	lsls	r2, r3, #27
 800084e:	d406      	bmi.n	800085e <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000850:	69f3      	ldr	r3, [r6, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000852:	07db      	lsls	r3, r3, #31
 8000854:	d403      	bmi.n	800085e <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000856:	68f0      	ldr	r0, [r6, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000858:	f010 0004 	ands.w	r0, r0, #4
 800085c:	d007      	beq.n	800086e <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 800085e:	f7ff ffab 	bl	80007b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000862:	2001      	movs	r0, #1
 8000864:	e003      	b.n	800086e <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8000866:	1c63      	adds	r3, r4, #1
 8000868:	d0e7      	beq.n	800083a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800086a:	b90c      	cbnz	r4, 8000870 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 800086c:	2003      	movs	r0, #3
}
 800086e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000870:	f7ff ff22 	bl	80006b8 <HAL_GetTick>
 8000874:	1bc0      	subs	r0, r0, r7
 8000876:	42a0      	cmp	r0, r4
 8000878:	d9df      	bls.n	800083a <FLASH_WaitForLastOperation+0xe>
 800087a:	e7f7      	b.n	800086c <FLASH_WaitForLastOperation+0x40>
 800087c:	40022000 	.word	0x40022000

08000880 <HAL_FLASH_Program>:
{
 8000880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000884:	4e25      	ldr	r6, [pc, #148]	; (800091c <HAL_FLASH_Program+0x9c>)
{
 8000886:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8000888:	7e33      	ldrb	r3, [r6, #24]
{
 800088a:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 800088c:	2b01      	cmp	r3, #1
{
 800088e:	4688      	mov	r8, r1
 8000890:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8000892:	d040      	beq.n	8000916 <HAL_FLASH_Program+0x96>
 8000894:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000896:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800089a:	7633      	strb	r3, [r6, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800089c:	f7ff ffc6 	bl	800082c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80008a0:	bba8      	cbnz	r0, 800090e <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80008a2:	2d01      	cmp	r5, #1
 80008a4:	d003      	beq.n	80008ae <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 80008a6:	2d02      	cmp	r5, #2
 80008a8:	bf0c      	ite	eq
 80008aa:	2502      	moveq	r5, #2
 80008ac:	2504      	movne	r5, #4
 80008ae:	f04f 0a00 	mov.w	sl, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008b2:	4653      	mov	r3, sl
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008b4:	f8df b068 	ldr.w	fp, [pc, #104]	; 8000920 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008b8:	ea4f 140a 	mov.w	r4, sl, lsl #4
 80008bc:	f1c4 0120 	rsb	r1, r4, #32
 80008c0:	f1a4 0220 	sub.w	r2, r4, #32
 80008c4:	fa07 f101 	lsl.w	r1, r7, r1
 80008c8:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008cc:	61f3      	str	r3, [r6, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008ce:	430c      	orrs	r4, r1
 80008d0:	fa27 f202 	lsr.w	r2, r7, r2
 80008d4:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008d6:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008da:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008dc:	f042 0201 	orr.w	r2, r2, #1
 80008e0:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80008e4:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 80008e8:	f828 401a 	strh.w	r4, [r8, sl, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80008ec:	f7ff ff9e 	bl	800082c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80008f0:	f8db 2010 	ldr.w	r2, [fp, #16]
 80008f4:	f022 0201 	bic.w	r2, r2, #1
 80008f8:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 80008fc:	b938      	cbnz	r0, 800090e <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 80008fe:	f10a 0a01 	add.w	sl, sl, #1
 8000902:	fa5f f28a 	uxtb.w	r2, sl
 8000906:	4295      	cmp	r5, r2
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	d8d4      	bhi.n	80008b8 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 800090e:	2300      	movs	r3, #0
 8000910:	7633      	strb	r3, [r6, #24]
}
 8000912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000916:	2002      	movs	r0, #2
 8000918:	e7fb      	b.n	8000912 <HAL_FLASH_Program+0x92>
 800091a:	bf00      	nop
 800091c:	20000840 	.word	0x20000840
 8000920:	40022000 	.word	0x40022000

08000924 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000924:	2200      	movs	r2, #0
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <FLASH_MassErase.isra.0+0x1c>)
 8000928:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <FLASH_MassErase.isra.0+0x20>)
 800092c:	691a      	ldr	r2, [r3, #16]
 800092e:	f042 0204 	orr.w	r2, r2, #4
 8000932:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000934:	691a      	ldr	r2, [r3, #16]
 8000936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800093a:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000840 	.word	0x20000840
 8000944:	40022000 	.word	0x40022000

08000948 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000948:	2200      	movs	r2, #0
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <FLASH_PageErase+0x1c>)
 800094c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <FLASH_PageErase+0x20>)
 8000950:	691a      	ldr	r2, [r3, #16]
 8000952:	f042 0202 	orr.w	r2, r2, #2
 8000956:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000958:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800095a:	691a      	ldr	r2, [r3, #16]
 800095c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000960:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000962:	4770      	bx	lr
 8000964:	20000840 	.word	0x20000840
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_FLASHEx_Erase>:
{
 800096c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000970:	4e22      	ldr	r6, [pc, #136]	; (80009fc <HAL_FLASHEx_Erase+0x90>)
{
 8000972:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000974:	7e33      	ldrb	r3, [r6, #24]
{
 8000976:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000978:	2b01      	cmp	r3, #1
 800097a:	d03d      	beq.n	80009f8 <HAL_FLASHEx_Erase+0x8c>
 800097c:	2401      	movs	r4, #1
 800097e:	7634      	strb	r4, [r6, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000980:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000982:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000986:	2b02      	cmp	r3, #2
 8000988:	d113      	bne.n	80009b2 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800098a:	f7ff ff4f 	bl	800082c <FLASH_WaitForLastOperation>
 800098e:	b120      	cbz	r0, 800099a <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000990:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000992:	2300      	movs	r3, #0
 8000994:	7633      	strb	r3, [r6, #24]
}
 8000996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 800099a:	f7ff ffc3 	bl	8000924 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800099e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009a2:	f7ff ff43 	bl	800082c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80009a6:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <HAL_FLASHEx_Erase+0x94>)
 80009a8:	6913      	ldr	r3, [r2, #16]
 80009aa:	f023 0304 	bic.w	r3, r3, #4
 80009ae:	6113      	str	r3, [r2, #16]
 80009b0:	e7ef      	b.n	8000992 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80009b2:	f7ff ff3b 	bl	800082c <FLASH_WaitForLastOperation>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d1ea      	bne.n	8000990 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80009c2:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80009c4:	68af      	ldr	r7, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80009c6:	4c0e      	ldr	r4, [pc, #56]	; (8000a00 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80009c8:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80009cc:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 80009d0:	42bb      	cmp	r3, r7
 80009d2:	d9de      	bls.n	8000992 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80009d4:	4638      	mov	r0, r7
 80009d6:	f7ff ffb7 	bl	8000948 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009de:	f7ff ff25 	bl	800082c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80009e2:	6923      	ldr	r3, [r4, #16]
 80009e4:	f023 0302 	bic.w	r3, r3, #2
 80009e8:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80009ea:	b110      	cbz	r0, 80009f2 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 80009ec:	f8c8 7000 	str.w	r7, [r8]
            break;
 80009f0:	e7cf      	b.n	8000992 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 80009f2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009f6:	e7e7      	b.n	80009c8 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 80009f8:	2002      	movs	r0, #2
 80009fa:	e7cc      	b.n	8000996 <HAL_FLASHEx_Erase+0x2a>
 80009fc:	20000840 	.word	0x20000840
 8000a00:	40022000 	.word	0x40022000

08000a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a08:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000a0a:	4616      	mov	r6, r2
 8000a0c:	4b64      	ldr	r3, [pc, #400]	; (8000ba0 <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a0e:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8000bb0 <HAL_GPIO_Init+0x1ac>
 8000a12:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8000bb4 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a16:	680d      	ldr	r5, [r1, #0]
 8000a18:	fa35 f406 	lsrs.w	r4, r5, r6
 8000a1c:	d102      	bne.n	8000a24 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000a1e:	b003      	add	sp, #12
 8000a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000a24:	f04f 0801 	mov.w	r8, #1
 8000a28:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a2c:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000a30:	ea38 0505 	bics.w	r5, r8, r5
 8000a34:	d17c      	bne.n	8000b30 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8000a36:	684d      	ldr	r5, [r1, #4]
 8000a38:	2d03      	cmp	r5, #3
 8000a3a:	d807      	bhi.n	8000a4c <HAL_GPIO_Init+0x48>
 8000a3c:	3d01      	subs	r5, #1
 8000a3e:	2d02      	cmp	r5, #2
 8000a40:	f200 8088 	bhi.w	8000b54 <HAL_GPIO_Init+0x150>
 8000a44:	e8df f005 	tbb	[pc, r5]
 8000a48:	9b96      	.short	0x9b96
 8000a4a:	a1          	.byte	0xa1
 8000a4b:	00          	.byte	0x00
 8000a4c:	2d12      	cmp	r5, #18
 8000a4e:	f000 8099 	beq.w	8000b84 <HAL_GPIO_Init+0x180>
 8000a52:	d86f      	bhi.n	8000b34 <HAL_GPIO_Init+0x130>
 8000a54:	2d11      	cmp	r5, #17
 8000a56:	f000 808f 	beq.w	8000b78 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a5a:	2cff      	cmp	r4, #255	; 0xff
 8000a5c:	bf98      	it	ls
 8000a5e:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a60:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a64:	bf88      	it	hi
 8000a66:	f100 0a04 	addhi.w	sl, r0, #4
 8000a6a:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a6e:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a72:	bf88      	it	hi
 8000a74:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a76:	fa09 fb05 	lsl.w	fp, r9, r5
 8000a7a:	ea28 080b 	bic.w	r8, r8, fp
 8000a7e:	fa02 f505 	lsl.w	r5, r2, r5
 8000a82:	ea48 0505 	orr.w	r5, r8, r5
 8000a86:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a8a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000a8e:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000a92:	d04d      	beq.n	8000b30 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a94:	4f43      	ldr	r7, [pc, #268]	; (8000ba4 <HAL_GPIO_Init+0x1a0>)
 8000a96:	f026 0803 	bic.w	r8, r6, #3
 8000a9a:	69bd      	ldr	r5, [r7, #24]
 8000a9c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000aa0:	f045 0501 	orr.w	r5, r5, #1
 8000aa4:	61bd      	str	r5, [r7, #24]
 8000aa6:	69bd      	ldr	r5, [r7, #24]
 8000aa8:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000aac:	f005 0501 	and.w	r5, r5, #1
 8000ab0:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ab2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ab8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000abc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ac0:	fa09 f90b 	lsl.w	r9, r9, fp
 8000ac4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ac8:	4d37      	ldr	r5, [pc, #220]	; (8000ba8 <HAL_GPIO_Init+0x1a4>)
 8000aca:	42a8      	cmp	r0, r5
 8000acc:	d061      	beq.n	8000b92 <HAL_GPIO_Init+0x18e>
 8000ace:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ad2:	42a8      	cmp	r0, r5
 8000ad4:	d05f      	beq.n	8000b96 <HAL_GPIO_Init+0x192>
 8000ad6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ada:	42a8      	cmp	r0, r5
 8000adc:	d05d      	beq.n	8000b9a <HAL_GPIO_Init+0x196>
 8000ade:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ae2:	42a8      	cmp	r0, r5
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2503      	moveq	r5, #3
 8000ae8:	2504      	movne	r5, #4
 8000aea:	fa05 f50b 	lsl.w	r5, r5, fp
 8000aee:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000af2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000af6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000afc:	bf14      	ite	ne
 8000afe:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b00:	43a5      	biceq	r5, r4
 8000b02:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000b04:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b06:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000b0a:	bf14      	ite	ne
 8000b0c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b0e:	43a5      	biceq	r5, r4
 8000b10:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b12:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b14:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b18:	bf14      	ite	ne
 8000b1a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b1c:	43a5      	biceq	r5, r4
 8000b1e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b20:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b22:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b26:	bf14      	ite	ne
 8000b28:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b2a:	ea25 0404 	biceq.w	r4, r5, r4
 8000b2e:	60dc      	str	r4, [r3, #12]
	position++;
 8000b30:	3601      	adds	r6, #1
 8000b32:	e770      	b.n	8000a16 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000b34:	4f1d      	ldr	r7, [pc, #116]	; (8000bac <HAL_GPIO_Init+0x1a8>)
 8000b36:	42bd      	cmp	r5, r7
 8000b38:	d00c      	beq.n	8000b54 <HAL_GPIO_Init+0x150>
 8000b3a:	d817      	bhi.n	8000b6c <HAL_GPIO_Init+0x168>
 8000b3c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000bb8 <HAL_GPIO_Init+0x1b4>
 8000b40:	454d      	cmp	r5, r9
 8000b42:	d007      	beq.n	8000b54 <HAL_GPIO_Init+0x150>
 8000b44:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000b48:	454d      	cmp	r5, r9
 8000b4a:	d003      	beq.n	8000b54 <HAL_GPIO_Init+0x150>
 8000b4c:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000b50:	454d      	cmp	r5, r9
 8000b52:	d182      	bne.n	8000a5a <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b54:	688a      	ldr	r2, [r1, #8]
 8000b56:	b1d2      	cbz	r2, 8000b8e <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b58:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000b5a:	bf08      	it	eq
 8000b5c:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b60:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000b64:	bf18      	it	ne
 8000b66:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000b6a:	e776      	b.n	8000a5a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000b6c:	4565      	cmp	r5, ip
 8000b6e:	d0f1      	beq.n	8000b54 <HAL_GPIO_Init+0x150>
 8000b70:	4575      	cmp	r5, lr
 8000b72:	e7ee      	b.n	8000b52 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b74:	68ca      	ldr	r2, [r1, #12]
          break;
 8000b76:	e770      	b.n	8000a5a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b78:	68ca      	ldr	r2, [r1, #12]
 8000b7a:	3204      	adds	r2, #4
          break;
 8000b7c:	e76d      	b.n	8000a5a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b7e:	68ca      	ldr	r2, [r1, #12]
 8000b80:	3208      	adds	r2, #8
          break;
 8000b82:	e76a      	b.n	8000a5a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b84:	68ca      	ldr	r2, [r1, #12]
 8000b86:	320c      	adds	r2, #12
          break;
 8000b88:	e767      	b.n	8000a5a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	e765      	b.n	8000a5a <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b8e:	2204      	movs	r2, #4
 8000b90:	e763      	b.n	8000a5a <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b92:	2500      	movs	r5, #0
 8000b94:	e7a9      	b.n	8000aea <HAL_GPIO_Init+0xe6>
 8000b96:	2501      	movs	r5, #1
 8000b98:	e7a7      	b.n	8000aea <HAL_GPIO_Init+0xe6>
 8000b9a:	2502      	movs	r5, #2
 8000b9c:	e7a5      	b.n	8000aea <HAL_GPIO_Init+0xe6>
 8000b9e:	bf00      	nop
 8000ba0:	40010400 	.word	0x40010400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	10220000 	.word	0x10220000
 8000bb0:	10310000 	.word	0x10310000
 8000bb4:	10320000 	.word	0x10320000
 8000bb8:	10120000 	.word	0x10120000

08000bbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bbc:	b10a      	cbz	r2, 8000bc2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bbe:	6101      	str	r1, [r0, #16]
  }
}
 8000bc0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc2:	0409      	lsls	r1, r1, #16
 8000bc4:	e7fb      	b.n	8000bbe <HAL_GPIO_WritePin+0x2>

08000bc6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bc6:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bc8:	ea01 0203 	and.w	r2, r1, r3
 8000bcc:	ea21 0103 	bic.w	r1, r1, r3
 8000bd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000bd4:	6101      	str	r1, [r0, #16]
}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bda:	4604      	mov	r4, r0
{
 8000bdc:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000bde:	b310      	cbz	r0, 8000c26 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000be0:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000be4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000be8:	b91b      	cbnz	r3, 8000bf2 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bea:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bee:	f002 ffcb 	bl	8003b88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bf2:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bf4:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bf6:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bf8:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8000bfc:	f855 0b10 	ldr.w	r0, [r5], #16
 8000c00:	f001 faf8 	bl	80021f4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	1d27      	adds	r7, r4, #4
 8000c0c:	6033      	str	r3, [r6, #0]
 8000c0e:	4626      	mov	r6, r4
 8000c10:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000c14:	f856 0b10 	ldr.w	r0, [r6], #16
 8000c18:	f001 fadc 	bl	80021d4 <USB_CoreInit>
 8000c1c:	4605      	mov	r5, r0
 8000c1e:	b120      	cbz	r0, 8000c2a <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c20:	2302      	movs	r3, #2
 8000c22:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000c26:	2501      	movs	r5, #1
 8000c28:	e04c      	b.n	8000cc4 <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	6820      	ldr	r0, [r4, #0]
 8000c2e:	f001 faeb 	bl	8002208 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c32:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c34:	f04f 0e01 	mov.w	lr, #1
 8000c38:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c3a:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c3c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8000c40:	b2ca      	uxtb	r2, r1
 8000c42:	4594      	cmp	ip, r2
 8000c44:	f101 0101 	add.w	r1, r1, #1
 8000c48:	d81b      	bhi.n	8000c82 <HAL_PCD_Init+0xaa>
 8000c4a:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c4c:	2528      	movs	r5, #40	; 0x28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c52:	4584      	cmp	ip, r0
 8000c54:	f103 0301 	add.w	r3, r3, #1
 8000c58:	d820      	bhi.n	8000c9c <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c5a:	46ec      	mov	ip, sp
 8000c5c:	4635      	mov	r5, r6
 8000c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	f8cc 3000 	str.w	r3, [ip]
 8000c6a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000c6e:	6820      	ldr	r0, [r4, #0]
 8000c70:	f001 facc 	bl	800220c <USB_DevInit>
 8000c74:	2301      	movs	r3, #1
 8000c76:	4605      	mov	r5, r0
 8000c78:	b1e8      	cbz	r0, 8000cb6 <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000c80:	e7d1      	b.n	8000c26 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8000c82:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c86:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8000c8a:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c92:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c94:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c98:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c9a:	e7d1      	b.n	8000c40 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8000c9c:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ca0:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8000ca4:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000ca8:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cac:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cb0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cb4:	e7cc      	b.n	8000c50 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 8000cb6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 8000cba:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000cbc:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000cc0:	f001 fc83 	bl	80025ca <USB_DevDisconnect>

  return HAL_OK;
}
 8000cc4:	4628      	mov	r0, r5
 8000cc6:	b007      	add	sp, #28
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000cca:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8000ccc:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8000cd0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d010      	beq.n	8000cf8 <HAL_PCD_Start+0x2e>
 8000cd6:	2501      	movs	r5, #1
 8000cd8:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000cdc:	6800      	ldr	r0, [r0, #0]
 8000cde:	f001 fa80 	bl	80021e2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f003 f864 	bl	8003db2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000cea:	6820      	ldr	r0, [r4, #0]
 8000cec:	f001 fc6b 	bl	80025c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000cf6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	e7fc      	b.n	8000cf6 <HAL_PCD_Start+0x2c>

08000cfc <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8000cfc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000cfe:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8000d02:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d010      	beq.n	8000d2a <HAL_PCD_Stop+0x2e>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8000d0e:	6800      	ldr	r0, [r0, #0]
 8000d10:	f001 fa70 	bl	80021f4 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8000d14:	2100      	movs	r1, #0
 8000d16:	4620      	mov	r0, r4
 8000d18:	f003 f84b 	bl	8003db2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 8000d1c:	6820      	ldr	r0, [r4, #0]
 8000d1e:	f001 fc54 	bl	80025ca <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000d28:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	e7fc      	b.n	8000d28 <HAL_PCD_Stop+0x2c>

08000d2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000d2e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000d30:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8000d34:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d36:	2a01      	cmp	r2, #1
 8000d38:	d00b      	beq.n	8000d52 <HAL_PCD_SetAddress+0x24>
 8000d3a:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8000d3c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8000d40:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000d44:	6800      	ldr	r0, [r0, #0]
 8000d46:	f001 fc38 	bl	80025ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000d50:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d52:	2002      	movs	r0, #2
 8000d54:	e7fc      	b.n	8000d50 <HAL_PCD_SetAddress+0x22>
	...

08000d58 <HAL_PCD_IRQHandler>:
{
 8000d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d60:	6800      	ldr	r0, [r0, #0]
 8000d62:	f001 fc34 	bl	80025ce <USB_ReadInterrupts>
 8000d66:	0400      	lsls	r0, r0, #16
 8000d68:	d509      	bpl.n	8000d7e <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000d6a:	f8df 998c 	ldr.w	r9, [pc, #2444]	; 80016f8 <HAL_PCD_IRQHandler+0x9a0>
 8000d6e:	f8df 898c 	ldr.w	r8, [pc, #2444]	; 80016fc <HAL_PCD_IRQHandler+0x9a4>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000d72:	6820      	ldr	r0, [r4, #0]
 8000d74:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000d78:	041d      	lsls	r5, r3, #16
 8000d7a:	f100 80c1 	bmi.w	8000f00 <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d7e:	6820      	ldr	r0, [r4, #0]
 8000d80:	f001 fc25 	bl	80025ce <USB_ReadInterrupts>
 8000d84:	0541      	lsls	r1, r0, #21
 8000d86:	d50f      	bpl.n	8000da8 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d88:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000d8a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d8c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d94:	041b      	lsls	r3, r3, #16
 8000d96:	0c1b      	lsrs	r3, r3, #16
 8000d98:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000d9c:	f002 ff2f 	bl	8003bfe <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000da0:	2100      	movs	r1, #0
 8000da2:	4620      	mov	r0, r4
 8000da4:	f7ff ffc3 	bl	8000d2e <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000da8:	6820      	ldr	r0, [r4, #0]
 8000daa:	f001 fc10 	bl	80025ce <USB_ReadInterrupts>
 8000dae:	0441      	lsls	r1, r0, #17
 8000db0:	d508      	bpl.n	8000dc4 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000db2:	6822      	ldr	r2, [r4, #0]
 8000db4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dbc:	041b      	lsls	r3, r3, #16
 8000dbe:	0c1b      	lsrs	r3, r3, #16
 8000dc0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000dc4:	6820      	ldr	r0, [r4, #0]
 8000dc6:	f001 fc02 	bl	80025ce <USB_ReadInterrupts>
 8000dca:	0482      	lsls	r2, r0, #18
 8000dcc:	d508      	bpl.n	8000de0 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000dce:	6822      	ldr	r2, [r4, #0]
 8000dd0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000dd8:	041b      	lsls	r3, r3, #16
 8000dda:	0c1b      	lsrs	r3, r3, #16
 8000ddc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000de0:	6820      	ldr	r0, [r4, #0]
 8000de2:	f001 fbf4 	bl	80025ce <USB_ReadInterrupts>
 8000de6:	04c3      	lsls	r3, r0, #19
 8000de8:	d51c      	bpl.n	8000e24 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000dea:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000dec:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000dee:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000df2:	f023 0304 	bic.w	r3, r3, #4
 8000df6:	041b      	lsls	r3, r3, #16
 8000df8:	0c1b      	lsrs	r3, r3, #16
 8000dfa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000dfe:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000e02:	f023 0308 	bic.w	r3, r3, #8
 8000e06:	041b      	lsls	r3, r3, #16
 8000e08:	0c1b      	lsrs	r3, r3, #16
 8000e0a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000e0e:	f002 ff19 	bl	8003c44 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e12:	6822      	ldr	r2, [r4, #0]
 8000e14:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e1c:	041b      	lsls	r3, r3, #16
 8000e1e:	0c1b      	lsrs	r3, r3, #16
 8000e20:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e24:	6820      	ldr	r0, [r4, #0]
 8000e26:	f001 fbd2 	bl	80025ce <USB_ReadInterrupts>
 8000e2a:	0507      	lsls	r7, r0, #20
 8000e2c:	d546      	bpl.n	8000ebc <HAL_PCD_IRQHandler+0x164>
 8000e2e:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	4606      	mov	r6, r0
 8000e34:	4619      	mov	r1, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	f103 0520 	add.w	r5, r3, #32
 8000e3c:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8000e40:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000e42:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8000e46:	d1f9      	bne.n	8000e3c <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000e48:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e4c:	b292      	uxth	r2, r2
 8000e4e:	f042 0201 	orr.w	r2, r2, #1
 8000e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000e56:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e5a:	f022 0201 	bic.w	r2, r2, #1
 8000e5e:	0412      	lsls	r2, r2, #16
 8000e60:	0c12      	lsrs	r2, r2, #16
 8000e62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000e66:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e6a:	0556      	lsls	r6, r2, #21
 8000e6c:	d5fb      	bpl.n	8000e66 <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e6e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e76:	0412      	lsls	r2, r2, #16
 8000e78:	0c12      	lsrs	r2, r2, #16
 8000e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000e7e:	f830 2b02 	ldrh.w	r2, [r0], #2
 8000e82:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8000e86:	428d      	cmp	r5, r1
 8000e88:	d1f9      	bne.n	8000e7e <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e8a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8000e8e:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e90:	b292      	uxth	r2, r2
 8000e92:	f042 0208 	orr.w	r2, r2, #8
 8000e96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e9a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ea2:	0412      	lsls	r2, r2, #16
 8000ea4:	0c12      	lsrs	r2, r2, #16
 8000ea6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000eaa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	f042 0204 	orr.w	r2, r2, #4
 8000eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8000eb8:	f002 feb4 	bl	8003c24 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000ebc:	6820      	ldr	r0, [r4, #0]
 8000ebe:	f001 fb86 	bl	80025ce <USB_ReadInterrupts>
 8000ec2:	0582      	lsls	r2, r0, #22
 8000ec4:	d50b      	bpl.n	8000ede <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ec6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000ec8:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000eca:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ece:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ed2:	041b      	lsls	r3, r3, #16
 8000ed4:	0c1b      	lsrs	r3, r3, #16
 8000ed6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000eda:	f002 fe8c 	bl	8003bf6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000ede:	6820      	ldr	r0, [r4, #0]
 8000ee0:	f001 fb75 	bl	80025ce <USB_ReadInterrupts>
 8000ee4:	05c3      	lsls	r3, r0, #23
 8000ee6:	d508      	bpl.n	8000efa <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ee8:	6822      	ldr	r2, [r4, #0]
 8000eea:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	0c1b      	lsrs	r3, r3, #16
 8000ef6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000efa:	b005      	add	sp, #20
 8000efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000f00:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8000f04:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 8000f06:	f016 060f 	ands.w	r6, r6, #15
 8000f0a:	f040 80bd 	bne.w	8001088 <HAL_PCD_IRQHandler+0x330>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f0e:	f011 0110 	ands.w	r1, r1, #16
 8000f12:	d12d      	bne.n	8000f70 <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f14:	8803      	ldrh	r3, [r0, #0]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	ea03 0309 	and.w	r3, r3, r9
 8000f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f20:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f26:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f30:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000f34:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000f38:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f3e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000f40:	4413      	add	r3, r2
 8000f42:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f44:	4620      	mov	r0, r4
 8000f46:	f002 fe4e 	bl	8003be6 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f4a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f43f af0f 	beq.w	8000d72 <HAL_PCD_IRQHandler+0x1a>
 8000f54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	f47f af0b 	bne.w	8000d72 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f5c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f60:	6821      	ldr	r1, [r4, #0]
 8000f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f66:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000f6a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000f6e:	e700      	b.n	8000d72 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000f70:	8805      	ldrh	r5, [r0, #0]
 8000f72:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000f74:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8000f78:	d021      	beq.n	8000fbe <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f7a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f7e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f88:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f8c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f90:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f98:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f9c:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8000fa0:	f001 feba 	bl	8002d18 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fa4:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000fa6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fa8:	8813      	ldrh	r3, [r2, #0]
 8000faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fae:	051b      	lsls	r3, r3, #20
 8000fb0:	0d1b      	lsrs	r3, r3, #20
 8000fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb6:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000fb8:	f002 fe06 	bl	8003bc8 <HAL_PCD_SetupStageCallback>
 8000fbc:	e6d9      	b.n	8000d72 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000fbe:	041a      	lsls	r2, r3, #16
 8000fc0:	f57f aed7 	bpl.w	8000d72 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fc4:	8803      	ldrh	r3, [r0, #0]
 8000fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fca:	051b      	lsls	r3, r3, #20
 8000fcc:	0d1b      	lsrs	r3, r3, #20
 8000fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fd4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000fd8:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000fe2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000fe6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fee:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000ff2:	b18b      	cbz	r3, 8001018 <HAL_PCD_IRQHandler+0x2c0>
 8000ff4:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8000ff8:	b171      	cbz	r1, 8001018 <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000ffa:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000ffe:	f001 fe8b 	bl	8002d18 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001002:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001006:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800100a:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800100c:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800100e:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8001010:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001014:	f002 fdde 	bl	8003bd4 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001018:	6821      	ldr	r1, [r4, #0]
 800101a:	880b      	ldrh	r3, [r1, #0]
 800101c:	051b      	lsls	r3, r3, #20
 800101e:	f53f aea8 	bmi.w	8000d72 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001022:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001026:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 800102a:	b29b      	uxth	r3, r3
 800102c:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8001030:	b9cd      	cbnz	r5, 8001066 <HAL_PCD_IRQHandler+0x30e>
 8001032:	5ac2      	ldrh	r2, [r0, r3]
 8001034:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001038:	0412      	lsls	r2, r2, #16
 800103a:	0c12      	lsrs	r2, r2, #16
 800103c:	52c2      	strh	r2, [r0, r3]
 800103e:	5ac2      	ldrh	r2, [r0, r3]
 8001040:	b292      	uxth	r2, r2
 8001042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001046:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001048:	880b      	ldrh	r3, [r1, #0]
 800104a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800104e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001052:	041b      	lsls	r3, r3, #16
 8001054:	0c1b      	lsrs	r3, r3, #16
 8001056:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800105a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800105e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001062:	800b      	strh	r3, [r1, #0]
 8001064:	e685      	b.n	8000d72 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001066:	2d3e      	cmp	r5, #62	; 0x3e
 8001068:	d806      	bhi.n	8001078 <HAL_PCD_IRQHandler+0x320>
 800106a:	086a      	lsrs	r2, r5, #1
 800106c:	07ef      	lsls	r7, r5, #31
 800106e:	bf48      	it	mi
 8001070:	3201      	addmi	r2, #1
 8001072:	0292      	lsls	r2, r2, #10
 8001074:	b292      	uxth	r2, r2
 8001076:	e7e6      	b.n	8001046 <HAL_PCD_IRQHandler+0x2ee>
 8001078:	096a      	lsrs	r2, r5, #5
 800107a:	06ee      	lsls	r6, r5, #27
 800107c:	bf08      	it	eq
 800107e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001082:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8001086:	e7f5      	b.n	8001074 <HAL_PCD_IRQHandler+0x31c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001088:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800108c:	041d      	lsls	r5, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800108e:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001090:	f140 80f8 	bpl.w	8001284 <HAL_PCD_IRQHandler+0x52c>
        if (ep->doublebuffer == 0U)
 8001094:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001096:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800109a:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800109e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010a2:	051b      	lsls	r3, r3, #20
 80010a4:	0d1b      	lsrs	r3, r3, #20
 80010a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010aa:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80010ae:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 80010b2:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 80010b6:	b9b3      	cbnz	r3, 80010e6 <HAL_PCD_IRQHandler+0x38e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010bc:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	3306      	adds	r3, #6
 80010c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80010c8:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 80010cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80010d0:	2d00      	cmp	r5, #0
 80010d2:	f000 80bb 	beq.w	800124c <HAL_PCD_IRQHandler+0x4f4>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80010d6:	462b      	mov	r3, r5
 80010d8:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80010dc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80010e0:	f001 fe1a 	bl	8002d18 <USB_ReadPMA>
 80010e4:	e0b2      	b.n	800124c <HAL_PCD_IRQHandler+0x4f4>
          if (ep->type == EP_TYPE_BULK)
 80010e6:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 80010ea:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	f040 808b 	bne.w	800120a <HAL_PCD_IRQHandler+0x4b2>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80010f4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80010f8:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 80010fc:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
 8001100:	ea4f 0bcc 	mov.w	fp, ip, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001104:	b29b      	uxth	r3, r3
 8001106:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800110a:	d040      	beq.n	800118e <HAL_PCD_IRQHandler+0x436>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800110c:	449b      	add	fp, r3
 800110e:	f10b 0b02 	add.w	fp, fp, #2
 8001112:	f835 501b 	ldrh.w	r5, [r5, fp, lsl #1]
 8001116:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 800111a:	4295      	cmp	r5, r2
 800111c:	d913      	bls.n	8001146 <HAL_PCD_IRQHandler+0x3ee>
 800111e:	2300      	movs	r3, #0
 8001120:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001124:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8001128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800112c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001130:	041b      	lsls	r3, r3, #16
 8001132:	0c1b      	lsrs	r3, r3, #16
 8001134:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 8001144:	e004      	b.n	8001150 <HAL_PCD_IRQHandler+0x3f8>
      ep->xfer_len -= count;
 8001146:	1b52      	subs	r2, r2, r5
 8001148:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800114c:	2a00      	cmp	r2, #0
 800114e:	d0e9      	beq.n	8001124 <HAL_PCD_IRQHandler+0x3cc>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001150:	f1be 0f00 	cmp.w	lr, #0
 8001154:	d012      	beq.n	800117c <HAL_PCD_IRQHandler+0x424>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001156:	2328      	movs	r3, #40	; 0x28
 8001158:	fb03 4306 	mla	r3, r3, r6, r4
 800115c:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8001160:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800116c:	041b      	lsls	r3, r3, #16
 800116e:	0c1b      	lsrs	r3, r3, #16
 8001170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001174:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001178:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 800117c:	2d00      	cmp	r5, #0
 800117e:	d065      	beq.n	800124c <HAL_PCD_IRQHandler+0x4f4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001180:	2128      	movs	r1, #40	; 0x28
 8001182:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001186:	462b      	mov	r3, r5
 8001188:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800118c:	e7a6      	b.n	80010dc <HAL_PCD_IRQHandler+0x384>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800118e:	445b      	add	r3, fp
 8001190:	3306      	adds	r3, #6
 8001192:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8001196:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 800119a:	4295      	cmp	r5, r2
 800119c:	d912      	bls.n	80011c4 <HAL_PCD_IRQHandler+0x46c>
 800119e:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80011a2:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80011a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011ae:	041b      	lsls	r3, r3, #16
 80011b0:	0c1b      	lsrs	r3, r3, #16
 80011b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80011b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011be:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 80011c2:	e004      	b.n	80011ce <HAL_PCD_IRQHandler+0x476>
      ep->xfer_len -= count;
 80011c4:	1b52      	subs	r2, r2, r5
 80011c6:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80011ca:	2a00      	cmp	r2, #0
 80011cc:	d0e9      	beq.n	80011a2 <HAL_PCD_IRQHandler+0x44a>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80011ce:	f1be 0f00 	cmp.w	lr, #0
 80011d2:	d112      	bne.n	80011fa <HAL_PCD_IRQHandler+0x4a2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80011d4:	2328      	movs	r3, #40	; 0x28
 80011d6:	fb03 4306 	mla	r3, r3, r6, r4
 80011da:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 80011de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80011e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80011e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011ea:	041b      	lsls	r3, r3, #16
 80011ec:	0c1b      	lsrs	r3, r3, #16
 80011ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80011fa:	b33d      	cbz	r5, 800124c <HAL_PCD_IRQHandler+0x4f4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011fc:	2128      	movs	r1, #40	; 0x28
 80011fe:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001202:	462b      	mov	r3, r5
 8001204:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001208:	e768      	b.n	80010dc <HAL_PCD_IRQHandler+0x384>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800120a:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 800120e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001216:	041b      	lsls	r3, r3, #16
 8001218:	0c1b      	lsrs	r3, r3, #16
 800121a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800121e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001222:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001226:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 800122a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001234:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001238:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800123a:	d059      	beq.n	80012f0 <HAL_PCD_IRQHandler+0x598>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800123c:	3202      	adds	r2, #2
 800123e:	4413      	add	r3, r2
 8001240:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8001244:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8001248:	2d00      	cmp	r5, #0
 800124a:	d19c      	bne.n	8001186 <HAL_PCD_IRQHandler+0x42e>
        ep->xfer_count += count;
 800124c:	2128      	movs	r1, #40	; 0x28
 800124e:	4371      	muls	r1, r6
 8001250:	1863      	adds	r3, r4, r1
 8001252:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001256:	442a      	add	r2, r5
 8001258:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800125c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001260:	442a      	add	r2, r5
 8001262:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001266:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800126a:	b11a      	cbz	r2, 8001274 <HAL_PCD_IRQHandler+0x51c>
 800126c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8001270:	429d      	cmp	r5, r3
 8001272:	d246      	bcs.n	8001302 <HAL_PCD_IRQHandler+0x5aa>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001274:	2328      	movs	r3, #40	; 0x28
 8001276:	fb03 4306 	mla	r3, r3, r6, r4
 800127a:	4620      	mov	r0, r4
 800127c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001280:	f002 fca8 	bl	8003bd4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001284:	0638      	lsls	r0, r7, #24
 8001286:	f57f ad74 	bpl.w	8000d72 <HAL_PCD_IRQHandler+0x1a>
 800128a:	2528      	movs	r5, #40	; 0x28
 800128c:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800128e:	fb05 4506 	mla	r5, r5, r6, r4
 8001292:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8001296:	b29b      	uxth	r3, r3
 8001298:	ea03 0309 	and.w	r3, r3, r9
 800129c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a0:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80012a4:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 80012a8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80012ac:	2a03      	cmp	r2, #3
 80012ae:	d004      	beq.n	80012ba <HAL_PCD_IRQHandler+0x562>
 80012b0:	b11a      	cbz	r2, 80012ba <HAL_PCD_IRQHandler+0x562>
 80012b2:	2a02      	cmp	r2, #2
 80012b4:	d13d      	bne.n	8001332 <HAL_PCD_IRQHandler+0x5da>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80012b6:	05f9      	lsls	r1, r7, #23
 80012b8:	d43b      	bmi.n	8001332 <HAL_PCD_IRQHandler+0x5da>
          if (ep->xfer_len > TxByteNbre)
 80012ba:	2128      	movs	r1, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012bc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 80012c0:	fb01 4706 	mla	r7, r1, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012c4:	b292      	uxth	r2, r2
 80012c6:	3202      	adds	r2, #2
 80012c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80012cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80012d0:	f8b3 e400 	ldrh.w	lr, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 80012d4:	f8d7 c040 	ldr.w	ip, [r7, #64]	; 0x40
 80012d8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80012dc:	45f4      	cmp	ip, lr
 80012de:	d817      	bhi.n	8001310 <HAL_PCD_IRQHandler+0x5b8>
 80012e0:	2300      	movs	r3, #0
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80012e4:	4620      	mov	r0, r4
 80012e6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80012ea:	f002 fc7c 	bl	8003be6 <HAL_PCD_DataInStageCallback>
 80012ee:	e540      	b.n	8000d72 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80012f0:	3206      	adds	r2, #6
 80012f2:	4413      	add	r3, r2
 80012f4:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 80012f8:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80012fc:	2d00      	cmp	r5, #0
 80012fe:	d0a5      	beq.n	800124c <HAL_PCD_IRQHandler+0x4f4>
 8001300:	e77f      	b.n	8001202 <HAL_PCD_IRQHandler+0x4aa>
        ep = &hpcd->OUT_ep[epindex];
 8001302:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001306:	6820      	ldr	r0, [r4, #0]
 8001308:	4421      	add	r1, r4
 800130a:	f001 f977 	bl	80025fc <USB_EPStartXfer>
 800130e:	e7b9      	b.n	8001284 <HAL_PCD_IRQHandler+0x52c>
            ep->xfer_len -= TxByteNbre;
 8001310:	ebac 030e 	sub.w	r3, ip, lr
 8001314:	643b      	str	r3, [r7, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0e4      	beq.n	80012e4 <HAL_PCD_IRQHandler+0x58c>
        ep = &hpcd->IN_ep[epindex];
 800131a:	fb06 1101 	mla	r1, r6, r1, r1
            ep->xfer_buff += TxByteNbre;
 800131e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8001320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8001322:	4472      	add	r2, lr
            ep->xfer_count += TxByteNbre;
 8001324:	4473      	add	r3, lr
            ep->xfer_buff += TxByteNbre;
 8001326:	63fa      	str	r2, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8001328:	647b      	str	r3, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800132a:	4421      	add	r1, r4
 800132c:	f001 f966 	bl	80025fc <USB_EPStartXfer>
 8001330:	e51f      	b.n	8000d72 <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001332:	2228      	movs	r2, #40	; 0x28
 8001334:	fb02 4206 	mla	r2, r2, r6, r4
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001338:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800133c:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8001340:	b289      	uxth	r1, r1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001342:	f017 0e40 	ands.w	lr, r7, #64	; 0x40
 8001346:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001348:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800134c:	4451      	add	r1, sl
 800134e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001352:	f000 80e9 	beq.w	8001528 <HAL_PCD_IRQHandler+0x7d0>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001356:	3102      	adds	r1, #2
 8001358:	f83c c011 	ldrh.w	ip, [ip, r1, lsl #1]
 800135c:	2128      	movs	r1, #40	; 0x28

    if (ep->xfer_len > TxByteNbre)
 800135e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001362:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 8001364:	bf28      	it	cs
 8001366:	2200      	movcs	r2, #0
 8001368:	fb01 4106 	mla	r1, r1, r6, r4
      ep->xfer_len -= TxByteNbre;
 800136c:	bf38      	it	cc
 800136e:	eba2 020c 	subcc.w	r2, r2, ip
 8001372:	640a      	str	r2, [r1, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001374:	b2bf      	uxth	r7, r7
 8001376:	2a00      	cmp	r2, #0
 8001378:	d15c      	bne.n	8001434 <HAL_PCD_IRQHandler+0x6dc>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800137a:	f895 1029 	ldrb.w	r1, [r5, #41]	; 0x29
 800137e:	2900      	cmp	r1, #0
 8001380:	d142      	bne.n	8001408 <HAL_PCD_IRQHandler+0x6b0>
 8001382:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	b28a      	uxth	r2, r1
 800138a:	f200 4104 	addw	r1, r0, #1028	; 0x404
 800138e:	4411      	add	r1, r2
 8001390:	5aca      	ldrh	r2, [r1, r3]
 8001392:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001396:	0412      	lsls	r2, r2, #16
 8001398:	0c12      	lsrs	r2, r2, #16
 800139a:	52ca      	strh	r2, [r1, r3]
 800139c:	5aca      	ldrh	r2, [r1, r3]
 800139e:	b292      	uxth	r2, r2
 80013a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013a4:	52ca      	strh	r2, [r1, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013a6:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80013aa:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80013ae:	bbaa      	cbnz	r2, 800141c <HAL_PCD_IRQHandler+0x6c4>
 80013b0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80013b4:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80013b8:	b292      	uxth	r2, r2
 80013ba:	4410      	add	r0, r2
 80013bc:	011a      	lsls	r2, r3, #4
 80013be:	5a83      	ldrh	r3, [r0, r2]
 80013c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80013c4:	041b      	lsls	r3, r3, #16
 80013c6:	0c1b      	lsrs	r3, r3, #16
 80013c8:	5283      	strh	r3, [r0, r2]
 80013ca:	5a83      	ldrh	r3, [r0, r2]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d2:	5283      	strh	r3, [r0, r2]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80013d4:	4620      	mov	r0, r4
 80013d6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80013da:	f002 fc04 	bl	8003be6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80013de:	2f00      	cmp	r7, #0
 80013e0:	f000 80ea 	beq.w	80015b8 <HAL_PCD_IRQHandler+0x860>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80013e4:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80013e8:	6822      	ldr	r2, [r4, #0]
 80013ea:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80013ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013f6:	041b      	lsls	r3, r3, #16
 80013f8:	0c1b      	lsrs	r3, r3, #16
 80013fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001402:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001406:	e0d7      	b.n	80015b8 <HAL_PCD_IRQHandler+0x860>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001408:	2901      	cmp	r1, #1
 800140a:	d1cc      	bne.n	80013a6 <HAL_PCD_IRQHandler+0x64e>
 800140c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	b28e      	uxth	r6, r1
 8001414:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8001418:	4431      	add	r1, r6
 800141a:	e7c3      	b.n	80013a4 <HAL_PCD_IRQHandler+0x64c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800141c:	2a01      	cmp	r2, #1
 800141e:	d1d9      	bne.n	80013d4 <HAL_PCD_IRQHandler+0x67c>
 8001420:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001424:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8001428:	b292      	uxth	r2, r2
 800142a:	4410      	add	r0, r2
 800142c:	2200      	movs	r2, #0
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	52c2      	strh	r2, [r0, r3]
 8001432:	e7cf      	b.n	80013d4 <HAL_PCD_IRQHandler+0x67c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001434:	b16f      	cbz	r7, 8001452 <HAL_PCD_IRQHandler+0x6fa>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001436:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800143a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800143e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001442:	0412      	lsls	r2, r2, #16
 8001444:	0c12      	lsrs	r2, r2, #16
 8001446:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800144a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800144e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001452:	2328      	movs	r3, #40	; 0x28
 8001454:	fb03 4306 	mla	r3, r3, r6, r4
 8001458:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800145c:	2a01      	cmp	r2, #1
 800145e:	f040 80ab 	bne.w	80015b8 <HAL_PCD_IRQHandler+0x860>
        ep->xfer_count += TxByteNbre;
 8001462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8001464:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001466:	4462      	add	r2, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001468:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 800146a:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800146c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800146e:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001470:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8001472:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001474:	d327      	bcc.n	80014c6 <HAL_PCD_IRQHandler+0x76e>
          ep->xfer_len_db -= len;
 8001476:	1abf      	subs	r7, r7, r2
 8001478:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800147a:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 800147e:	b293      	uxth	r3, r2
 8001480:	2f00      	cmp	r7, #0
 8001482:	d143      	bne.n	800150c <HAL_PCD_IRQHandler+0x7b4>
 8001484:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8001488:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
 800148c:	b2bf      	uxth	r7, r7
 800148e:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 8001492:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8001496:	4477      	add	r7, lr
 8001498:	bb02      	cbnz	r2, 80014dc <HAL_PCD_IRQHandler+0x784>
 800149a:	f83c 2007 	ldrh.w	r2, [ip, r7]
 800149e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80014a2:	0412      	lsls	r2, r2, #16
 80014a4:	0c12      	lsrs	r2, r2, #16
 80014a6:	f82c 2007 	strh.w	r2, [ip, r7]
 80014aa:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80014ae:	b292      	uxth	r2, r2
 80014b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014b4:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80014b8:	2228      	movs	r2, #40	; 0x28
 80014ba:	fb02 4606 	mla	r6, r2, r6, r4
 80014be:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80014c0:	f001 f88b 	bl	80025da <USB_WritePMA>
 80014c4:	e078      	b.n	80015b8 <HAL_PCD_IRQHandler+0x860>
        else if (ep->xfer_len_db == 0U)
 80014c6:	b91f      	cbnz	r7, 80014d0 <HAL_PCD_IRQHandler+0x778>
    if (ep->xfer_len > TxByteNbre)
 80014c8:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80014ca:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
 80014ce:	e7d4      	b.n	800147a <HAL_PCD_IRQHandler+0x722>
          ep->xfer_fill_db = 0U;
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80014d6:	649a      	str	r2, [r3, #72]	; 0x48
 80014d8:	463a      	mov	r2, r7
 80014da:	e7ce      	b.n	800147a <HAL_PCD_IRQHandler+0x722>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80014dc:	2a3e      	cmp	r2, #62	; 0x3e
 80014de:	d80c      	bhi.n	80014fa <HAL_PCD_IRQHandler+0x7a2>
 80014e0:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80014e4:	07d2      	lsls	r2, r2, #31
 80014e6:	bf48      	it	mi
 80014e8:	f10e 0e01 	addmi.w	lr, lr, #1
 80014ec:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80014f0:	fa1f fe8e 	uxth.w	lr, lr
 80014f4:	f82c e007 	strh.w	lr, [ip, r7]
 80014f8:	e7de      	b.n	80014b8 <HAL_PCD_IRQHandler+0x760>
 80014fa:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 80014fe:	06d2      	lsls	r2, r2, #27
 8001500:	bf08      	it	eq
 8001502:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8001506:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800150a:	e7f1      	b.n	80014f0 <HAL_PCD_IRQHandler+0x798>
 800150c:	2f01      	cmp	r7, #1
 800150e:	d1d3      	bne.n	80014b8 <HAL_PCD_IRQHandler+0x760>
 8001510:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001514:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 8001518:	fa1f fc82 	uxth.w	ip, r2
 800151c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8001520:	013f      	lsls	r7, r7, #4
 8001522:	4462      	add	r2, ip
 8001524:	52bb      	strh	r3, [r7, r2]
 8001526:	e7c7      	b.n	80014b8 <HAL_PCD_IRQHandler+0x760>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001528:	3106      	adds	r1, #6
 800152a:	f83c c011 	ldrh.w	ip, [ip, r1, lsl #1]
 800152e:	2128      	movs	r1, #40	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 8001530:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001534:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8001536:	bf88      	it	hi
 8001538:	4672      	movhi	r2, lr
 800153a:	fb01 4106 	mla	r1, r1, r6, r4
      ep->xfer_len -= TxByteNbre;
 800153e:	bf98      	it	ls
 8001540:	eba2 020c 	subls.w	r2, r2, ip
 8001544:	640a      	str	r2, [r1, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001546:	b2bf      	uxth	r7, r7
 8001548:	2a00      	cmp	r2, #0
 800154a:	d15f      	bne.n	800160c <HAL_PCD_IRQHandler+0x8b4>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800154c:	f895 1029 	ldrb.w	r1, [r5, #41]	; 0x29
 8001550:	2900      	cmp	r1, #0
 8001552:	d145      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x888>
 8001554:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	b28a      	uxth	r2, r1
 800155c:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8001560:	4411      	add	r1, r2
 8001562:	5aca      	ldrh	r2, [r1, r3]
 8001564:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001568:	0412      	lsls	r2, r2, #16
 800156a:	0c12      	lsrs	r2, r2, #16
 800156c:	52ca      	strh	r2, [r1, r3]
 800156e:	5aca      	ldrh	r2, [r1, r3]
 8001570:	b292      	uxth	r2, r2
 8001572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001576:	52ca      	strh	r2, [r1, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001578:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800157c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8001580:	2a00      	cmp	r2, #0
 8001582:	d137      	bne.n	80015f4 <HAL_PCD_IRQHandler+0x89c>
 8001584:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001588:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800158c:	b292      	uxth	r2, r2
 800158e:	4410      	add	r0, r2
 8001590:	011a      	lsls	r2, r3, #4
 8001592:	5a83      	ldrh	r3, [r0, r2]
 8001594:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001598:	041b      	lsls	r3, r3, #16
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	5283      	strh	r3, [r0, r2]
 800159e:	5a83      	ldrh	r3, [r0, r2]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a6:	5283      	strh	r3, [r0, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015a8:	4620      	mov	r0, r4
 80015aa:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80015ae:	f002 fb1a 	bl	8003be6 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80015b2:	2f00      	cmp	r7, #0
 80015b4:	f43f af16 	beq.w	80013e4 <HAL_PCD_IRQHandler+0x68c>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80015b8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80015bc:	6822      	ldr	r2, [r4, #0]
 80015be:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015cc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80015d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80015dc:	f7ff bbc9 	b.w	8000d72 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80015e0:	2901      	cmp	r1, #1
 80015e2:	d1c9      	bne.n	8001578 <HAL_PCD_IRQHandler+0x820>
 80015e4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	b28e      	uxth	r6, r1
 80015ec:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80015f0:	4431      	add	r1, r6
 80015f2:	e7c0      	b.n	8001576 <HAL_PCD_IRQHandler+0x81e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80015f4:	2a01      	cmp	r2, #1
 80015f6:	d1d7      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x850>
 80015f8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80015fc:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8001600:	b292      	uxth	r2, r2
 8001602:	4410      	add	r0, r2
 8001604:	2200      	movs	r2, #0
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	52c2      	strh	r2, [r0, r3]
 800160a:	e7cd      	b.n	80015a8 <HAL_PCD_IRQHandler+0x850>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800160c:	b96f      	cbnz	r7, 800162a <HAL_PCD_IRQHandler+0x8d2>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800160e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001612:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001616:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800161a:	0412      	lsls	r2, r2, #16
 800161c:	0c12      	lsrs	r2, r2, #16
 800161e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001622:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001626:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800162a:	2328      	movs	r3, #40	; 0x28
 800162c:	fb03 4306 	mla	r3, r3, r6, r4
 8001630:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001634:	2a01      	cmp	r2, #1
 8001636:	d1bf      	bne.n	80015b8 <HAL_PCD_IRQHandler+0x860>
        ep->xfer_count += TxByteNbre;
 8001638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800163a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800163c:	4462      	add	r2, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 800163e:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8001640:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8001644:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001646:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8001648:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800164a:	d325      	bcc.n	8001698 <HAL_PCD_IRQHandler+0x940>
          ep->xfer_len_db -= len;
 800164c:	1abf      	subs	r7, r7, r2
 800164e:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001650:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8001654:	b293      	uxth	r3, r2
 8001656:	2f00      	cmp	r7, #0
 8001658:	d141      	bne.n	80016de <HAL_PCD_IRQHandler+0x986>
 800165a:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 800165e:	fa1f f78c 	uxth.w	r7, ip
 8001662:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 8001666:	44bc      	add	ip, r7
 8001668:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 800166c:	013f      	lsls	r7, r7, #4
 800166e:	b9f2      	cbnz	r2, 80016ae <HAL_PCD_IRQHandler+0x956>
 8001670:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8001674:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001678:	0412      	lsls	r2, r2, #16
 800167a:	0c12      	lsrs	r2, r2, #16
 800167c:	f82c 2007 	strh.w	r2, [ip, r7]
 8001680:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8001684:	b292      	uxth	r2, r2
 8001686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800168a:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800168e:	2228      	movs	r2, #40	; 0x28
 8001690:	fb02 4606 	mla	r6, r2, r6, r4
 8001694:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8001696:	e713      	b.n	80014c0 <HAL_PCD_IRQHandler+0x768>
        else if (ep->xfer_len_db == 0U)
 8001698:	b91f      	cbnz	r7, 80016a2 <HAL_PCD_IRQHandler+0x94a>
    if (ep->xfer_len >= TxByteNbre)
 800169a:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800169c:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
 80016a0:	e7d6      	b.n	8001650 <HAL_PCD_IRQHandler+0x8f8>
          ep->xfer_len_db = 0U;
 80016a2:	2200      	movs	r2, #0
 80016a4:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80016a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80016aa:	463a      	mov	r2, r7
 80016ac:	e7d0      	b.n	8001650 <HAL_PCD_IRQHandler+0x8f8>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80016ae:	2a3e      	cmp	r2, #62	; 0x3e
 80016b0:	d80c      	bhi.n	80016cc <HAL_PCD_IRQHandler+0x974>
 80016b2:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80016b6:	07d2      	lsls	r2, r2, #31
 80016b8:	bf48      	it	mi
 80016ba:	f10e 0e01 	addmi.w	lr, lr, #1
 80016be:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80016c2:	fa1f fe8e 	uxth.w	lr, lr
 80016c6:	f82c e007 	strh.w	lr, [ip, r7]
 80016ca:	e7e0      	b.n	800168e <HAL_PCD_IRQHandler+0x936>
 80016cc:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 80016d0:	06d2      	lsls	r2, r2, #27
 80016d2:	bf08      	it	eq
 80016d4:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 80016d8:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 80016dc:	e7f1      	b.n	80016c2 <HAL_PCD_IRQHandler+0x96a>
 80016de:	2f01      	cmp	r7, #1
 80016e0:	d1d5      	bne.n	800168e <HAL_PCD_IRQHandler+0x936>
 80016e2:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80016e6:	b2ba      	uxth	r2, r7
 80016e8:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 80016ec:	4417      	add	r7, r2
 80016ee:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	52bb      	strh	r3, [r7, r2]
 80016f6:	e7ca      	b.n	800168e <HAL_PCD_IRQHandler+0x936>
 80016f8:	ffff8f0f 	.word	0xffff8f0f
 80016fc:	ffff8000 	.word	0xffff8000

08001700 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001700:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	4605      	mov	r5, r0
 8001708:	f001 0007 	and.w	r0, r1, #7
 800170c:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8001710:	d01c      	beq.n	800174c <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 8001712:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001714:	fb00 1101 	mla	r1, r0, r1, r1
 8001718:	4429      	add	r1, r5
    ep->is_in = 1U;
 800171a:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
 800171c:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800171e:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001720:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8001722:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001724:	b102      	cbz	r2, 8001728 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8001726:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8001728:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800172a:	bf04      	itt	eq
 800172c:	2300      	moveq	r3, #0
 800172e:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001730:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8001734:	2b01      	cmp	r3, #1
 8001736:	d013      	beq.n	8001760 <HAL_PCD_EP_Open+0x60>
 8001738:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800173a:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 800173c:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001740:	f000 fd78 	bl	8002234 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001744:	2000      	movs	r0, #0
 8001746:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 800174a:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800174c:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800174e:	fb01 f400 	mul.w	r4, r1, r0
 8001752:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8001756:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001758:	4429      	add	r1, r5
    ep->is_in = 0U;
 800175a:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 800175e:	e7dd      	b.n	800171c <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8001760:	2002      	movs	r0, #2
 8001762:	e7f2      	b.n	800174a <HAL_PCD_EP_Open+0x4a>

08001764 <HAL_PCD_EP_Receive>:
{
 8001764:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8001766:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 8001768:	2600      	movs	r6, #0
 800176a:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800176e:	434c      	muls	r4, r1
 8001770:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8001772:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001776:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800177a:	4401      	add	r1, r0
  ep->xfer_len = len;
 800177c:	e9c5 235f 	strd	r2, r3, [r5, #380]	; 0x17c
  ep->xfer_count = 0U;
 8001780:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8001784:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001788:	6800      	ldr	r0, [r0, #0]
 800178a:	f000 ff37 	bl	80025fc <USB_EPStartXfer>
}
 800178e:	4630      	mov	r0, r6
 8001790:	bd70      	pop	{r4, r5, r6, pc}

08001792 <HAL_PCD_EP_Transmit>:
{
 8001792:	b570      	push	{r4, r5, r6, lr}
 8001794:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8001798:	2128      	movs	r1, #40	; 0x28
 800179a:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 800179e:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80017a0:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 80017a4:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a6:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 80017aa:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017ae:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 80017b0:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80017b2:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80017b4:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 80017b8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017bc:	6800      	ldr	r0, [r0, #0]
 80017be:	f000 ff1d 	bl	80025fc <USB_EPStartXfer>
}
 80017c2:	4630      	mov	r0, r6
 80017c4:	bd70      	pop	{r4, r5, r6, pc}

080017c6 <HAL_PCD_EP_SetStall>:
{
 80017c6:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017c8:	6843      	ldr	r3, [r0, #4]
 80017ca:	f001 0507 	and.w	r5, r1, #7
 80017ce:	429d      	cmp	r5, r3
{
 80017d0:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017d2:	d828      	bhi.n	8001826 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80017d4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80017d8:	f04f 0328 	mov.w	r3, #40	; 0x28
 80017dc:	d01a      	beq.n	8001814 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017de:	fb05 3303 	mla	r3, r5, r3, r3
 80017e2:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 80017e4:	2301      	movs	r3, #1
 80017e6:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 80017e8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ea:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80017ec:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80017ee:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d019      	beq.n	800182a <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017f6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80017f8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017fc:	f000 fe72 	bl	80024e4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001800:	b925      	cbnz	r5, 800180c <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001802:	6820      	ldr	r0, [r4, #0]
 8001804:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001808:	f000 fee5 	bl	80025d6 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800180c:	2000      	movs	r0, #0
 800180e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001812:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8001814:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001816:	434b      	muls	r3, r1
 8001818:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 800181c:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800181e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001820:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8001824:	e7e0      	b.n	80017e8 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8001826:	2001      	movs	r0, #1
 8001828:	e7f3      	b.n	8001812 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 800182a:	2002      	movs	r0, #2
 800182c:	e7f1      	b.n	8001812 <HAL_PCD_EP_SetStall+0x4c>

0800182e <HAL_PCD_EP_ClrStall>:
{
 800182e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001830:	6843      	ldr	r3, [r0, #4]
 8001832:	f001 020f 	and.w	r2, r1, #15
 8001836:	429a      	cmp	r2, r3
{
 8001838:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800183a:	d826      	bhi.n	800188a <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 800183c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001840:	f001 0207 	and.w	r2, r1, #7
 8001844:	f04f 0128 	mov.w	r1, #40	; 0x28
 8001848:	d015      	beq.n	8001876 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 800184a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800184c:	fb02 1101 	mla	r1, r2, r1, r1
 8001850:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001852:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 8001854:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001856:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8001858:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800185a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800185e:	2b01      	cmp	r3, #1
 8001860:	d015      	beq.n	800188e <HAL_PCD_EP_ClrStall+0x60>
 8001862:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001864:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001866:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800186a:	f000 fe5b 	bl	8002524 <USB_EPClearStall>
  return HAL_OK;
 800186e:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8001870:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8001874:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001876:	fb01 f302 	mul.w	r3, r1, r2
 800187a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800187e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001880:	4403      	add	r3, r0
 8001882:	2000      	movs	r0, #0
 8001884:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8001888:	e7e4      	b.n	8001854 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 800188a:	2001      	movs	r0, #1
 800188c:	e7f2      	b.n	8001874 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 800188e:	2002      	movs	r0, #2
 8001890:	e7f0      	b.n	8001874 <HAL_PCD_EP_ClrStall+0x46>

08001892 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001892:	b510      	push	{r4, lr}
 8001894:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001896:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800189a:	bf1b      	ittet	ne
 800189c:	f001 0107 	andne.w	r1, r1, #7
 80018a0:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018a4:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a8:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80018aa:	bf08      	it	eq
 80018ac:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80018b0:	b299      	uxth	r1, r3
 80018b2:	b91a      	cbnz	r2, 80018bc <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80018b4:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80018b6:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80018b8:	2000      	movs	r0, #0
 80018ba:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80018bc:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80018be:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80018c0:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80018c2:	e7f9      	b.n	80018b8 <HAL_PCDEx_PMAConfig+0x26>

080018c4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80018c4:	2201      	movs	r2, #1
 80018c6:	4b01      	ldr	r3, [pc, #4]	; (80018cc <HAL_PWR_EnableBkUpAccess+0x8>)
 80018c8:	601a      	str	r2, [r3, #0]
}
 80018ca:	4770      	bx	lr
 80018cc:	420e0020 	.word	0x420e0020

080018d0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80018d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80018d2:	f7fe fef1 	bl	80006b8 <HAL_GetTick>
 80018d6:	4605      	mov	r5, r0

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80018d8:	4c2f      	ldr	r4, [pc, #188]	; (8001998 <HAL_RCC_DeInit+0xc8>)
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	079b      	lsls	r3, r3, #30
 80018e6:	d53b      	bpl.n	8001960 <HAL_RCC_DeInit+0x90>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80018e8:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ea:	f241 3688 	movw	r6, #5000	; 0x1388
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80018ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f6:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80018f8:	f7fe fede 	bl	80006b8 <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
 80018fc:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 80018fe:	4605      	mov	r5, r0
  CLEAR_REG(RCC->CFGR);
 8001900:	6063      	str	r3, [r4, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001902:	6863      	ldr	r3, [r4, #4]
 8001904:	f013 0f0c 	tst.w	r3, #12
 8001908:	d132      	bne.n	8001970 <HAL_RCC_DeInit+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_DeInit+0xcc>)
 800190c:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <HAL_RCC_DeInit+0xd0>)
 800190e:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001910:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_RCC_DeInit+0xd4>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	f7fe fe8e 	bl	8000634 <HAL_InitTick>
 8001918:	4605      	mov	r5, r0
 800191a:	2800      	cmp	r0, #0
 800191c:	d13a      	bne.n	8001994 <HAL_RCC_DeInit+0xc4>
  {
    return HAL_ERROR;
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800191e:	f7fe fecb 	bl	80006b8 <HAL_GetTick>
 8001922:	4606      	mov	r6, r0

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800192a:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001932:	d123      	bne.n	800197c <HAL_RCC_DeInit+0xac>
      return HAL_TIMEOUT;
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001934:	6063      	str	r3, [r4, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001936:	f7fe febf 	bl	80006b8 <HAL_GetTick>
 800193a:	4606      	mov	r6, r0

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001942:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800194a:	d11d      	bne.n	8001988 <HAL_RCC_DeInit+0xb8>
      return HAL_TIMEOUT;
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800194c:	6822      	ldr	r2, [r4, #0]
 800194e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001952:	6022      	str	r2, [r4, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001954:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001956:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800195a:	6262      	str	r2, [r4, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800195c:	60a3      	str	r3, [r4, #8]

  return HAL_OK;
 800195e:	e005      	b.n	800196c <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001960:	f7fe feaa 	bl	80006b8 <HAL_GetTick>
 8001964:	1b40      	subs	r0, r0, r5
 8001966:	2802      	cmp	r0, #2
 8001968:	d9bb      	bls.n	80018e2 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 800196a:	2503      	movs	r5, #3
}
 800196c:	4628      	mov	r0, r5
 800196e:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	f7fe fea2 	bl	80006b8 <HAL_GetTick>
 8001974:	1b40      	subs	r0, r0, r5
 8001976:	42b0      	cmp	r0, r6
 8001978:	d9c3      	bls.n	8001902 <HAL_RCC_DeInit+0x32>
 800197a:	e7f6      	b.n	800196a <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7fe fe9c 	bl	80006b8 <HAL_GetTick>
 8001980:	1b80      	subs	r0, r0, r6
 8001982:	2802      	cmp	r0, #2
 8001984:	d9d2      	bls.n	800192c <HAL_RCC_DeInit+0x5c>
 8001986:	e7f0      	b.n	800196a <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7fe fe96 	bl	80006b8 <HAL_GetTick>
 800198c:	1b80      	subs	r0, r0, r6
 800198e:	2864      	cmp	r0, #100	; 0x64
 8001990:	d9d8      	bls.n	8001944 <HAL_RCC_DeInit+0x74>
 8001992:	e7ea      	b.n	800196a <HAL_RCC_DeInit+0x9a>
    return HAL_ERROR;
 8001994:	2501      	movs	r5, #1
 8001996:	e7e9      	b.n	800196c <HAL_RCC_DeInit+0x9c>
 8001998:	40021000 	.word	0x40021000
 800199c:	20000000 	.word	0x20000000
 80019a0:	007a1200 	.word	0x007a1200
 80019a4:	20000010 	.word	0x20000010

080019a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019ac:	4605      	mov	r5, r0
 80019ae:	b338      	cbz	r0, 8001a00 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b0:	6803      	ldr	r3, [r0, #0]
 80019b2:	07db      	lsls	r3, r3, #31
 80019b4:	d410      	bmi.n	80019d8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	682b      	ldr	r3, [r5, #0]
 80019b8:	079f      	lsls	r7, r3, #30
 80019ba:	d45e      	bmi.n	8001a7a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019bc:	682b      	ldr	r3, [r5, #0]
 80019be:	0719      	lsls	r1, r3, #28
 80019c0:	f100 8095 	bmi.w	8001aee <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c4:	682b      	ldr	r3, [r5, #0]
 80019c6:	075a      	lsls	r2, r3, #29
 80019c8:	f100 80bf 	bmi.w	8001b4a <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019cc:	69e8      	ldr	r0, [r5, #28]
 80019ce:	2800      	cmp	r0, #0
 80019d0:	f040 812c 	bne.w	8001c2c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80019d4:	2000      	movs	r0, #0
 80019d6:	e029      	b.n	8001a2c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d8:	4c8f      	ldr	r4, [pc, #572]	; (8001c18 <HAL_RCC_OscConfig+0x270>)
 80019da:	6863      	ldr	r3, [r4, #4]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d007      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e4:	6863      	ldr	r3, [r4, #4]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d10a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x5c>
 80019ee:	6863      	ldr	r3, [r4, #4]
 80019f0:	03de      	lsls	r6, r3, #15
 80019f2:	d507      	bpl.n	8001a04 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	039c      	lsls	r4, r3, #14
 80019f8:	d5dd      	bpl.n	80019b6 <HAL_RCC_OscConfig+0xe>
 80019fa:	686b      	ldr	r3, [r5, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1da      	bne.n	80019b6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001a00:	2001      	movs	r0, #1
 8001a02:	e013      	b.n	8001a2c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a04:	686b      	ldr	r3, [r5, #4]
 8001a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0a:	d112      	bne.n	8001a32 <HAL_RCC_OscConfig+0x8a>
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a12:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a14:	f7fe fe50 	bl	80006b8 <HAL_GetTick>
 8001a18:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	0398      	lsls	r0, r3, #14
 8001a1e:	d4ca      	bmi.n	80019b6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7fe fe4a 	bl	80006b8 <HAL_GetTick>
 8001a24:	1b80      	subs	r0, r0, r6
 8001a26:	2864      	cmp	r0, #100	; 0x64
 8001a28:	d9f7      	bls.n	8001a1a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001a2a:	2003      	movs	r0, #3
}
 8001a2c:	b002      	add	sp, #8
 8001a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a32:	b99b      	cbnz	r3, 8001a5c <HAL_RCC_OscConfig+0xb4>
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3a:	6023      	str	r3, [r4, #0]
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a42:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a44:	f7fe fe38 	bl	80006b8 <HAL_GetTick>
 8001a48:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	0399      	lsls	r1, r3, #14
 8001a4e:	d5b2      	bpl.n	80019b6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7fe fe32 	bl	80006b8 <HAL_GetTick>
 8001a54:	1b80      	subs	r0, r0, r6
 8001a56:	2864      	cmp	r0, #100	; 0x64
 8001a58:	d9f7      	bls.n	8001a4a <HAL_RCC_OscConfig+0xa2>
 8001a5a:	e7e6      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	d103      	bne.n	8001a6c <HAL_RCC_OscConfig+0xc4>
 8001a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a68:	6023      	str	r3, [r4, #0]
 8001a6a:	e7cf      	b.n	8001a0c <HAL_RCC_OscConfig+0x64>
 8001a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a70:	6023      	str	r3, [r4, #0]
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a78:	e7cb      	b.n	8001a12 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7a:	4c67      	ldr	r4, [pc, #412]	; (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	6863      	ldr	r3, [r4, #4]
 8001a7e:	f013 0f0c 	tst.w	r3, #12
 8001a82:	d007      	beq.n	8001a94 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a84:	6863      	ldr	r3, [r4, #4]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d110      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x108>
 8001a8e:	6863      	ldr	r3, [r4, #4]
 8001a90:	03da      	lsls	r2, r3, #15
 8001a92:	d40d      	bmi.n	8001ab0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	079b      	lsls	r3, r3, #30
 8001a98:	d502      	bpl.n	8001aa0 <HAL_RCC_OscConfig+0xf8>
 8001a9a:	692b      	ldr	r3, [r5, #16]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d1af      	bne.n	8001a00 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	696a      	ldr	r2, [r5, #20]
 8001aa4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001aa8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001aac:	6023      	str	r3, [r4, #0]
 8001aae:	e785      	b.n	80019bc <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab0:	692a      	ldr	r2, [r5, #16]
 8001ab2:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001ab4:	b16a      	cbz	r2, 8001ad2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001aba:	f7fe fdfd 	bl	80006b8 <HAL_GetTick>
 8001abe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	079f      	lsls	r7, r3, #30
 8001ac4:	d4ec      	bmi.n	8001aa0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac6:	f7fe fdf7 	bl	80006b8 <HAL_GetTick>
 8001aca:	1b80      	subs	r0, r0, r6
 8001acc:	2802      	cmp	r0, #2
 8001ace:	d9f7      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x118>
 8001ad0:	e7ab      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001ad2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ad4:	f7fe fdf0 	bl	80006b8 <HAL_GetTick>
 8001ad8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	0798      	lsls	r0, r3, #30
 8001ade:	f57f af6d 	bpl.w	80019bc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7fe fde9 	bl	80006b8 <HAL_GetTick>
 8001ae6:	1b80      	subs	r0, r0, r6
 8001ae8:	2802      	cmp	r0, #2
 8001aea:	d9f6      	bls.n	8001ada <HAL_RCC_OscConfig+0x132>
 8001aec:	e79d      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aee:	69aa      	ldr	r2, [r5, #24]
 8001af0:	4e49      	ldr	r6, [pc, #292]	; (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001af2:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <HAL_RCC_OscConfig+0x278>)
 8001af4:	b1da      	cbz	r2, 8001b2e <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001afa:	f7fe fddd 	bl	80006b8 <HAL_GetTick>
 8001afe:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b00:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b02:	079b      	lsls	r3, r3, #30
 8001b04:	d50d      	bpl.n	8001b22 <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b06:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001b0a:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <HAL_RCC_OscConfig+0x27c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b12:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001b14:	bf00      	nop
  }
  while (Delay --);
 8001b16:	9b01      	ldr	r3, [sp, #4]
 8001b18:	1e5a      	subs	r2, r3, #1
 8001b1a:	9201      	str	r2, [sp, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f9      	bne.n	8001b14 <HAL_RCC_OscConfig+0x16c>
 8001b20:	e750      	b.n	80019c4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b22:	f7fe fdc9 	bl	80006b8 <HAL_GetTick>
 8001b26:	1b00      	subs	r0, r0, r4
 8001b28:	2802      	cmp	r0, #2
 8001b2a:	d9e9      	bls.n	8001b00 <HAL_RCC_OscConfig+0x158>
 8001b2c:	e77d      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001b2e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b30:	f7fe fdc2 	bl	80006b8 <HAL_GetTick>
 8001b34:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b36:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b38:	079f      	lsls	r7, r3, #30
 8001b3a:	f57f af43 	bpl.w	80019c4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3e:	f7fe fdbb 	bl	80006b8 <HAL_GetTick>
 8001b42:	1b00      	subs	r0, r0, r4
 8001b44:	2802      	cmp	r0, #2
 8001b46:	d9f6      	bls.n	8001b36 <HAL_RCC_OscConfig+0x18e>
 8001b48:	e76f      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4c33      	ldr	r4, [pc, #204]	; (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	69e3      	ldr	r3, [r4, #28]
 8001b4e:	00d8      	lsls	r0, r3, #3
 8001b50:	d424      	bmi.n	8001b9c <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8001b52:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	69e3      	ldr	r3, [r4, #28]
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	61e3      	str	r3, [r4, #28]
 8001b5c:	69e3      	ldr	r3, [r4, #28]
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b66:	4e30      	ldr	r6, [pc, #192]	; (8001c28 <HAL_RCC_OscConfig+0x280>)
 8001b68:	6833      	ldr	r3, [r6, #0]
 8001b6a:	05d9      	lsls	r1, r3, #23
 8001b6c:	d518      	bpl.n	8001ba0 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6e:	68eb      	ldr	r3, [r5, #12]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d126      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x21a>
 8001b74:	6a23      	ldr	r3, [r4, #32]
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b7c:	f7fe fd9c 	bl	80006b8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b80:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b84:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b86:	6a23      	ldr	r3, [r4, #32]
 8001b88:	079b      	lsls	r3, r3, #30
 8001b8a:	d53f      	bpl.n	8001c0c <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8001b8c:	2f00      	cmp	r7, #0
 8001b8e:	f43f af1d 	beq.w	80019cc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	69e3      	ldr	r3, [r4, #28]
 8001b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b98:	61e3      	str	r3, [r4, #28]
 8001b9a:	e717      	b.n	80019cc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001b9c:	2700      	movs	r7, #0
 8001b9e:	e7e2      	b.n	8001b66 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba0:	6833      	ldr	r3, [r6, #0]
 8001ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ba8:	f7fe fd86 	bl	80006b8 <HAL_GetTick>
 8001bac:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bae:	6833      	ldr	r3, [r6, #0]
 8001bb0:	05da      	lsls	r2, r3, #23
 8001bb2:	d4dc      	bmi.n	8001b6e <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb4:	f7fe fd80 	bl	80006b8 <HAL_GetTick>
 8001bb8:	eba0 0008 	sub.w	r0, r0, r8
 8001bbc:	2864      	cmp	r0, #100	; 0x64
 8001bbe:	d9f6      	bls.n	8001bae <HAL_RCC_OscConfig+0x206>
 8001bc0:	e733      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc2:	b9ab      	cbnz	r3, 8001bf0 <HAL_RCC_OscConfig+0x248>
 8001bc4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	6223      	str	r3, [r4, #32]
 8001bd0:	6a23      	ldr	r3, [r4, #32]
 8001bd2:	f023 0304 	bic.w	r3, r3, #4
 8001bd6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001bd8:	f7fe fd6e 	bl	80006b8 <HAL_GetTick>
 8001bdc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	6a23      	ldr	r3, [r4, #32]
 8001be0:	0798      	lsls	r0, r3, #30
 8001be2:	d5d3      	bpl.n	8001b8c <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7fe fd68 	bl	80006b8 <HAL_GetTick>
 8001be8:	1b80      	subs	r0, r0, r6
 8001bea:	4540      	cmp	r0, r8
 8001bec:	d9f7      	bls.n	8001bde <HAL_RCC_OscConfig+0x236>
 8001bee:	e71c      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	6a23      	ldr	r3, [r4, #32]
 8001bf4:	d103      	bne.n	8001bfe <HAL_RCC_OscConfig+0x256>
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6223      	str	r3, [r4, #32]
 8001bfc:	e7ba      	b.n	8001b74 <HAL_RCC_OscConfig+0x1cc>
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	6223      	str	r3, [r4, #32]
 8001c04:	6a23      	ldr	r3, [r4, #32]
 8001c06:	f023 0304 	bic.w	r3, r3, #4
 8001c0a:	e7b6      	b.n	8001b7a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0c:	f7fe fd54 	bl	80006b8 <HAL_GetTick>
 8001c10:	1b80      	subs	r0, r0, r6
 8001c12:	4540      	cmp	r0, r8
 8001c14:	d9b7      	bls.n	8001b86 <HAL_RCC_OscConfig+0x1de>
 8001c16:	e708      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	42420000 	.word	0x42420000
 8001c20:	42420480 	.word	0x42420480
 8001c24:	20000000 	.word	0x20000000
 8001c28:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	461c      	mov	r4, r3
 8001c32:	f002 020c 	and.w	r2, r2, #12
 8001c36:	2a08      	cmp	r2, #8
 8001c38:	d03d      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	4e27      	ldr	r6, [pc, #156]	; (8001cdc <HAL_RCC_OscConfig+0x334>)
 8001c3e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001c40:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c42:	d12b      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001c44:	f7fe fd38 	bl	80006b8 <HAL_GetTick>
 8001c48:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	0199      	lsls	r1, r3, #6
 8001c4e:	d41f      	bmi.n	8001c90 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c50:	6a2b      	ldr	r3, [r5, #32]
 8001c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c56:	d105      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c58:	6862      	ldr	r2, [r4, #4]
 8001c5a:	68a9      	ldr	r1, [r5, #8]
 8001c5c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c60:	430a      	orrs	r2, r1
 8001c62:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c64:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001c66:	6862      	ldr	r2, [r4, #4]
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c72:	2301      	movs	r3, #1
 8001c74:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c76:	f7fe fd1f 	bl	80006b8 <HAL_GetTick>
 8001c7a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	019a      	lsls	r2, r3, #6
 8001c80:	f53f aea8 	bmi.w	80019d4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7fe fd18 	bl	80006b8 <HAL_GetTick>
 8001c88:	1b40      	subs	r0, r0, r5
 8001c8a:	2802      	cmp	r0, #2
 8001c8c:	d9f6      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2d4>
 8001c8e:	e6cc      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c90:	f7fe fd12 	bl	80006b8 <HAL_GetTick>
 8001c94:	1bc0      	subs	r0, r0, r7
 8001c96:	2802      	cmp	r0, #2
 8001c98:	d9d7      	bls.n	8001c4a <HAL_RCC_OscConfig+0x2a2>
 8001c9a:	e6c6      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001c9c:	f7fe fd0c 	bl	80006b8 <HAL_GetTick>
 8001ca0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	f57f ae95 	bpl.w	80019d4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fd05 	bl	80006b8 <HAL_GetTick>
 8001cae:	1b40      	subs	r0, r0, r5
 8001cb0:	2802      	cmp	r0, #2
 8001cb2:	d9f6      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x2fa>
 8001cb4:	e6b9      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb6:	2801      	cmp	r0, #1
 8001cb8:	f43f aeb8 	beq.w	8001a2c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001cbc:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	6a2a      	ldr	r2, [r5, #32]
 8001cc0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001cc4:	4291      	cmp	r1, r2
 8001cc6:	f47f ae9b 	bne.w	8001a00 <HAL_RCC_OscConfig+0x58>
 8001cca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ccc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	f43f ae7f 	beq.w	80019d4 <HAL_RCC_OscConfig+0x2c>
 8001cd6:	e693      	b.n	8001a00 <HAL_RCC_OscConfig+0x58>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	42420060 	.word	0x42420060

08001ce0 <HAL_RCC_GetSysClockFreq>:
{
 8001ce0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001ce4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ce6:	ac02      	add	r4, sp, #8
 8001ce8:	f103 0510 	add.w	r5, r3, #16
 8001cec:	4622      	mov	r2, r4
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	6859      	ldr	r1, [r3, #4]
 8001cf2:	3308      	adds	r3, #8
 8001cf4:	c203      	stmia	r2!, {r0, r1}
 8001cf6:	42ab      	cmp	r3, r5
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	d1f7      	bne.n	8001cec <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cfc:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001d00:	4911      	ldr	r1, [pc, #68]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d02:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001d06:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d08:	f003 020c 	and.w	r2, r3, #12
 8001d0c:	2a08      	cmp	r2, #8
 8001d0e:	d117      	bne.n	8001d40 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d10:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001d14:	a806      	add	r0, sp, #24
 8001d16:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d18:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d1a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d1e:	d50c      	bpl.n	8001d3a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d20:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d22:	480a      	ldr	r0, [pc, #40]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d24:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d28:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d2a:	aa06      	add	r2, sp, #24
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d32:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001d36:	b007      	add	sp, #28
 8001d38:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x70>)
 8001d3c:	4350      	muls	r0, r2
 8001d3e:	e7fa      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001d42:	e7f8      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x56>
 8001d44:	08003e50 	.word	0x08003e50
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	007a1200 	.word	0x007a1200
 8001d50:	003d0900 	.word	0x003d0900

08001d54 <HAL_RCC_ClockConfig>:
{
 8001d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d58:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	b910      	cbnz	r0, 8001d64 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d5e:	2001      	movs	r0, #1
}
 8001d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4a44      	ldr	r2, [pc, #272]	; (8001e78 <HAL_RCC_ClockConfig+0x124>)
 8001d66:	6813      	ldr	r3, [r2, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	428b      	cmp	r3, r1
 8001d6e:	d328      	bcc.n	8001dc2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	6821      	ldr	r1, [r4, #0]
 8001d72:	078e      	lsls	r6, r1, #30
 8001d74:	d430      	bmi.n	8001dd8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d76:	07ca      	lsls	r2, r1, #31
 8001d78:	d443      	bmi.n	8001e02 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7a:	4a3f      	ldr	r2, [pc, #252]	; (8001e78 <HAL_RCC_ClockConfig+0x124>)
 8001d7c:	6813      	ldr	r3, [r2, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	42ab      	cmp	r3, r5
 8001d84:	d865      	bhi.n	8001e52 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d86:	6822      	ldr	r2, [r4, #0]
 8001d88:	4d3c      	ldr	r5, [pc, #240]	; (8001e7c <HAL_RCC_ClockConfig+0x128>)
 8001d8a:	f012 0f04 	tst.w	r2, #4
 8001d8e:	d16c      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	0713      	lsls	r3, r2, #28
 8001d92:	d506      	bpl.n	8001da2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d94:	686b      	ldr	r3, [r5, #4]
 8001d96:	6922      	ldr	r2, [r4, #16]
 8001d98:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d9c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001da0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001da2:	f7ff ff9d 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001da6:	686b      	ldr	r3, [r5, #4]
 8001da8:	4a35      	ldr	r2, [pc, #212]	; (8001e80 <HAL_RCC_ClockConfig+0x12c>)
 8001daa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	40d8      	lsrs	r0, r3
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_ClockConfig+0x130>)
 8001db4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCC_ClockConfig+0x134>)
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	f7fe fc3b 	bl	8000634 <HAL_InitTick>
  return HAL_OK;
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	e7ce      	b.n	8001d60 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	6813      	ldr	r3, [r2, #0]
 8001dc4:	f023 0307 	bic.w	r3, r3, #7
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dcc:	6813      	ldr	r3, [r2, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	428b      	cmp	r3, r1
 8001dd4:	d1c3      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xa>
 8001dd6:	e7cb      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <HAL_RCC_ClockConfig+0x128>)
 8001dda:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dde:	bf1e      	ittt	ne
 8001de0:	685a      	ldrne	r2, [r3, #4]
 8001de2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001de6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dea:	bf42      	ittt	mi
 8001dec:	685a      	ldrmi	r2, [r3, #4]
 8001dee:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001df2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	68a0      	ldr	r0, [r4, #8]
 8001df8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001dfc:	4302      	orrs	r2, r0
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	e7b9      	b.n	8001d76 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e02:	6862      	ldr	r2, [r4, #4]
 8001e04:	4e1d      	ldr	r6, [pc, #116]	; (8001e7c <HAL_RCC_ClockConfig+0x128>)
 8001e06:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e08:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0a:	d11a      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	d0a5      	beq.n	8001d5e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e12:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e14:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e18:	f023 0303 	bic.w	r3, r3, #3
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001e20:	f7fe fc4a 	bl	80006b8 <HAL_GetTick>
 8001e24:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	6873      	ldr	r3, [r6, #4]
 8001e28:	6862      	ldr	r2, [r4, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e32:	d0a2      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7fe fc40 	bl	80006b8 <HAL_GetTick>
 8001e38:	1bc0      	subs	r0, r0, r7
 8001e3a:	4540      	cmp	r0, r8
 8001e3c:	d9f3      	bls.n	8001e26 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001e3e:	2003      	movs	r0, #3
 8001e40:	e78e      	b.n	8001d60 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e42:	2a02      	cmp	r2, #2
 8001e44:	d102      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e4a:	e7e1      	b.n	8001e10 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4c:	f013 0f02 	tst.w	r3, #2
 8001e50:	e7de      	b.n	8001e10 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	6813      	ldr	r3, [r2, #0]
 8001e54:	f023 0307 	bic.w	r3, r3, #7
 8001e58:	432b      	orrs	r3, r5
 8001e5a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5c:	6813      	ldr	r3, [r2, #0]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	42ab      	cmp	r3, r5
 8001e64:	f47f af7b 	bne.w	8001d5e <HAL_RCC_ClockConfig+0xa>
 8001e68:	e78d      	b.n	8001d86 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6a:	686b      	ldr	r3, [r5, #4]
 8001e6c:	68e1      	ldr	r1, [r4, #12]
 8001e6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e72:	430b      	orrs	r3, r1
 8001e74:	606b      	str	r3, [r5, #4]
 8001e76:	e78b      	b.n	8001d90 <HAL_RCC_ClockConfig+0x3c>
 8001e78:	40022000 	.word	0x40022000
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	08003e38 	.word	0x08003e38
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000010 	.word	0x20000010

08001e8c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e9a:	6810      	ldr	r0, [r2, #0]
}
 8001e9c:	40d8      	lsrs	r0, r3
 8001e9e:	4770      	bx	lr
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08003e48 	.word	0x08003e48
 8001ea8:	20000000 	.word	0x20000000

08001eac <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eac:	6803      	ldr	r3, [r0, #0]
{
 8001eae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eb2:	07d9      	lsls	r1, r3, #31
{
 8001eb4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eb6:	d520      	bpl.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb8:	4c35      	ldr	r4, [pc, #212]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001eba:	69e3      	ldr	r3, [r4, #28]
 8001ebc:	00da      	lsls	r2, r3, #3
 8001ebe:	d432      	bmi.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001ec0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	69e3      	ldr	r3, [r4, #28]
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	61e3      	str	r3, [r4, #28]
 8001eca:	69e3      	ldr	r3, [r4, #28]
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	4e2f      	ldr	r6, [pc, #188]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001ed6:	6833      	ldr	r3, [r6, #0]
 8001ed8:	05db      	lsls	r3, r3, #23
 8001eda:	d526      	bpl.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001edc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ede:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ee2:	d136      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee4:	6a23      	ldr	r3, [r4, #32]
 8001ee6:	686a      	ldr	r2, [r5, #4]
 8001ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eec:	4313      	orrs	r3, r2
 8001eee:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ef0:	b11f      	cbz	r7, 8001efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef2:	69e3      	ldr	r3, [r4, #28]
 8001ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001efa:	6828      	ldr	r0, [r5, #0]
 8001efc:	0783      	lsls	r3, r0, #30
 8001efe:	d506      	bpl.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f00:	4923      	ldr	r1, [pc, #140]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001f02:	68ab      	ldr	r3, [r5, #8]
 8001f04:	684a      	ldr	r2, [r1, #4]
 8001f06:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f0e:	f010 0010 	ands.w	r0, r0, #16
 8001f12:	d01b      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f14:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001f16:	68e9      	ldr	r1, [r5, #12]
 8001f18:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f1a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f20:	430b      	orrs	r3, r1
 8001f22:	6053      	str	r3, [r2, #4]
 8001f24:	e012      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8001f26:	2700      	movs	r7, #0
 8001f28:	e7d4      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2a:	6833      	ldr	r3, [r6, #0]
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001f32:	f7fe fbc1 	bl	80006b8 <HAL_GetTick>
 8001f36:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	6833      	ldr	r3, [r6, #0]
 8001f3a:	05d8      	lsls	r0, r3, #23
 8001f3c:	d4ce      	bmi.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3e:	f7fe fbbb 	bl	80006b8 <HAL_GetTick>
 8001f42:	eba0 0008 	sub.w	r0, r0, r8
 8001f46:	2864      	cmp	r0, #100	; 0x64
 8001f48:	d9f6      	bls.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001f4a:	2003      	movs	r0, #3
}
 8001f4c:	b002      	add	sp, #8
 8001f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f52:	686a      	ldr	r2, [r5, #4]
 8001f54:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d0c3      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f60:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f62:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f64:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f6a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001f6c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f6e:	07d9      	lsls	r1, r3, #31
 8001f70:	d5b8      	bpl.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001f72:	f7fe fba1 	bl	80006b8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f7a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	6a23      	ldr	r3, [r4, #32]
 8001f7e:	079a      	lsls	r2, r3, #30
 8001f80:	d4b0      	bmi.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe fb99 	bl	80006b8 <HAL_GetTick>
 8001f86:	1b80      	subs	r0, r0, r6
 8001f88:	4540      	cmp	r0, r8
 8001f8a:	d9f7      	bls.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001f8c:	e7dd      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40007000 	.word	0x40007000
 8001f98:	42420440 	.word	0x42420440

08001f9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fa0:	4b34      	ldr	r3, [pc, #208]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 8001fa2:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fa4:	ad02      	add	r5, sp, #8
 8001fa6:	f103 0610 	add.w	r6, r3, #16
 8001faa:	462c      	mov	r4, r5
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	3308      	adds	r3, #8
 8001fb2:	c403      	stmia	r4!, {r0, r1}
 8001fb4:	42b3      	cmp	r3, r6
 8001fb6:	4625      	mov	r5, r4
 8001fb8:	d1f7      	bne.n	8001faa <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fba:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001fbe:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fc0:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8001fc4:	d049      	beq.n	800205a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8001fc6:	2a10      	cmp	r2, #16
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8001fca:	2a01      	cmp	r2, #1
 8001fcc:	d026      	beq.n	800201c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
  uint32_t temp_reg = 0U, frequency = 0U;
 8001fce:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8001fd0:	e038      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      temp_reg = RCC->CFGR;
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001fd4:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001fdc:	d032      	beq.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fde:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8001fe2:	a806      	add	r0, sp, #24
 8001fe4:	4402      	add	r2, r0
 8001fe6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fea:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fec:	bf41      	itttt	mi
 8001fee:	685a      	ldrmi	r2, [r3, #4]
 8001ff0:	a906      	addmi	r1, sp, #24
 8001ff2:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001ff6:	1852      	addmi	r2, r2, r1
 8001ff8:	bf44      	itt	mi
 8001ffa:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001ffe:	4a1f      	ldrmi	r2, [pc, #124]	; (800207c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002000:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002002:	bf4c      	ite	mi
 8002004:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002008:	4a1d      	ldrpl	r2, [pc, #116]	; (8002080 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800200a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800200c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002010:	d418      	bmi.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (pllclk * 2) / 3;
 8002012:	2303      	movs	r3, #3
 8002014:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002016:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800201a:	e013      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800201c:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8002020:	4a15      	ldr	r2, [pc, #84]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8002022:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002024:	4019      	ands	r1, r3
 8002026:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800202a:	d01f      	beq.n	800206c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800202c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002034:	d108      	bne.n	8002048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        frequency = LSI_VALUE;
 8002036:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800203a:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800203c:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8002040:	bf18      	it	ne
 8002042:	4618      	movne	r0, r3
}
 8002044:	b006      	add	sp, #24
 8002046:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800204c:	d1bf      	bne.n	8001fce <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 800204e:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8002050:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002054:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8002058:	e7f2      	b.n	8002040 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800205a:	f7ff ff17 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002066:	3301      	adds	r3, #1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	e7d4      	b.n	8002016 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSE_VALUE;
 800206c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002070:	e7e8      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8002072:	bf00      	nop
 8002074:	08003e50 	.word	0x08003e50
 8002078:	40021000 	.word	0x40021000
 800207c:	007a1200 	.word	0x007a1200
 8002080:	003d0900 	.word	0x003d0900

08002084 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8002088:	f7fe fb16 	bl	80006b8 <HAL_GetTick>
 800208c:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	0692      	lsls	r2, r2, #26
 8002094:	d505      	bpl.n	80020a2 <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 8002096:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	f042 0210 	orr.w	r2, r2, #16
 800209e:	605a      	str	r2, [r3, #4]
}
 80020a0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020a2:	f7fe fb09 	bl	80006b8 <HAL_GetTick>
 80020a6:	1b40      	subs	r0, r0, r5
 80020a8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020ac:	d9ef      	bls.n	800208e <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80020ae:	2003      	movs	r0, #3
 80020b0:	e7f6      	b.n	80020a0 <RTC_EnterInitMode+0x1c>

080020b2 <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020b2:	6802      	ldr	r2, [r0, #0]
{
 80020b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020b6:	6853      	ldr	r3, [r2, #4]
{
 80020b8:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ba:	f023 0310 	bic.w	r3, r3, #16
 80020be:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 80020c0:	f7fe fafa 	bl	80006b8 <HAL_GetTick>
 80020c4:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	069b      	lsls	r3, r3, #26
 80020cc:	d501      	bpl.n	80020d2 <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80020ce:	2000      	movs	r0, #0
}
 80020d0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020d2:	f7fe faf1 	bl	80006b8 <HAL_GetTick>
 80020d6:	1b40      	subs	r0, r0, r5
 80020d8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020dc:	d9f3      	bls.n	80020c6 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80020de:	2003      	movs	r0, #3
 80020e0:	e7f6      	b.n	80020d0 <RTC_ExitInitMode+0x1e>

080020e2 <HAL_RTC_WaitForSynchro>:
{
 80020e2:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80020e4:	4604      	mov	r4, r0
 80020e6:	b1a8      	cbz	r0, 8002114 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80020e8:	6802      	ldr	r2, [r0, #0]
 80020ea:	6853      	ldr	r3, [r2, #4]
 80020ec:	f023 0308 	bic.w	r3, r3, #8
 80020f0:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80020f2:	f7fe fae1 	bl	80006b8 <HAL_GetTick>
 80020f6:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	071b      	lsls	r3, r3, #28
 80020fe:	d501      	bpl.n	8002104 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8002100:	2000      	movs	r0, #0
}
 8002102:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002104:	f7fe fad8 	bl	80006b8 <HAL_GetTick>
 8002108:	1b40      	subs	r0, r0, r5
 800210a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800210e:	d9f3      	bls.n	80020f8 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8002110:	2003      	movs	r0, #3
 8002112:	e7f6      	b.n	8002102 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8002114:	2001      	movs	r0, #1
 8002116:	e7f4      	b.n	8002102 <HAL_RTC_WaitForSynchro+0x20>

08002118 <HAL_RTC_Init>:
{
 8002118:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 800211a:	4604      	mov	r4, r0
 800211c:	b170      	cbz	r0, 800213c <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800211e:	7c43      	ldrb	r3, [r0, #17]
 8002120:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002124:	b913      	cbnz	r3, 800212c <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8002126:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8002128:	f7fe fa1e 	bl	8000568 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800212c:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800212e:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002130:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002132:	f7ff ffd6 	bl	80020e2 <HAL_RTC_WaitForSynchro>
 8002136:	b118      	cbz	r0, 8002140 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002138:	2304      	movs	r3, #4
 800213a:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 800213c:	2001      	movs	r0, #1
 800213e:	e036      	b.n	80021ae <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff ff9f 	bl	8002084 <RTC_EnterInitMode>
 8002146:	2800      	cmp	r0, #0
 8002148:	d1f6      	bne.n	8002138 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800214a:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800214c:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800214e:	6853      	ldr	r3, [r2, #4]
 8002150:	f023 0307 	bic.w	r3, r3, #7
 8002154:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002156:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_RTC_Init+0x98>)
 8002158:	b118      	cbz	r0, 8002162 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800215a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800215c:	f021 0101 	bic.w	r1, r1, #1
 8002160:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002162:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002164:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8002168:	4303      	orrs	r3, r0
 800216a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800216c:	6860      	ldr	r0, [r4, #4]
 800216e:	1c43      	adds	r3, r0, #1
 8002170:	d105      	bne.n	800217e <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002172:	2001      	movs	r0, #1
 8002174:	f7ff ff12 	bl	8001f9c <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002178:	2800      	cmp	r0, #0
 800217a:	d0dd      	beq.n	8002138 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 800217c:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800217e:	6822      	ldr	r2, [r4, #0]
 8002180:	6893      	ldr	r3, [r2, #8]
 8002182:	f023 030f 	bic.w	r3, r3, #15
 8002186:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800218a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800218c:	68d3      	ldr	r3, [r2, #12]
 800218e:	b280      	uxth	r0, r0
 8002190:	0c1b      	lsrs	r3, r3, #16
 8002192:	041b      	lsls	r3, r3, #16
 8002194:	4318      	orrs	r0, r3
 8002196:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002198:	4620      	mov	r0, r4
 800219a:	f7ff ff8a 	bl	80020b2 <RTC_ExitInitMode>
 800219e:	2301      	movs	r3, #1
 80021a0:	b110      	cbz	r0, 80021a8 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80021a2:	2204      	movs	r2, #4
 80021a4:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 80021a6:	e7c9      	b.n	800213c <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80021a8:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80021aa:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80021ac:	7463      	strb	r3, [r4, #17]
}
 80021ae:	bd10      	pop	{r4, pc}
 80021b0:	40006c00 	.word	0x40006c00

080021b4 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 80021b4:	0089      	lsls	r1, r1, #2
 80021b6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80021ba:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80021be:	b292      	uxth	r2, r2
 80021c0:	600a      	str	r2, [r1, #0]
}
 80021c2:	4770      	bx	lr

080021c4 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 80021c4:	0089      	lsls	r1, r1, #2
 80021c6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80021ca:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80021ce:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 80021d0:	b280      	uxth	r0, r0
 80021d2:	4770      	bx	lr

080021d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021d4:	b084      	sub	sp, #16
 80021d6:	a801      	add	r0, sp, #4
 80021d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80021dc:	b004      	add	sp, #16
 80021de:	2000      	movs	r0, #0
 80021e0:	4770      	bx	lr

080021e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80021e2:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80021e4:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 80021e8:	2000      	movs	r0, #0
 80021ea:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80021ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80021f2:	4770      	bx	lr

080021f4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80021f4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80021f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021fc:	045b      	lsls	r3, r3, #17
 80021fe:	0c5b      	lsrs	r3, r3, #17
 8002200:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002204:	2000      	movs	r0, #0
 8002206:	4770      	bx	lr

08002208 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002208:	2000      	movs	r0, #0
 800220a:	4770      	bx	lr

0800220c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800220c:	b084      	sub	sp, #16
 800220e:	b510      	push	{r4, lr}
 8002210:	4604      	mov	r4, r0
 8002212:	a803      	add	r0, sp, #12
 8002214:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002218:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800221a:	2301      	movs	r3, #1
 800221c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8002220:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002224:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002228:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 800222c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002230:	b004      	add	sp, #16
 8002232:	4770      	bx	lr

08002234 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002234:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002236:	780d      	ldrb	r5, [r1, #0]
{
 8002238:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800223a:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 800223e:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002240:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002244:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002248:	0412      	lsls	r2, r2, #16
 800224a:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 800224c:	2803      	cmp	r0, #3
 800224e:	d84f      	bhi.n	80022f0 <USB_ActivateEndpoint+0xbc>
 8002250:	e8df f000 	tbb	[pc, r0]
 8002254:	47494b02 	.word	0x47494b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800225c:	f248 0480 	movw	r4, #32896	; 0x8080
 8002260:	4322      	orrs	r2, r4
 8002262:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002266:	780e      	ldrb	r6, [r1, #0]
 8002268:	4d9b      	ldr	r5, [pc, #620]	; (80024d8 <USB_ActivateEndpoint+0x2a4>)
 800226a:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 800226e:	b292      	uxth	r2, r2
 8002270:	402a      	ands	r2, r5
 8002272:	4332      	orrs	r2, r6
 8002274:	4322      	orrs	r2, r4
 8002276:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 800227a:	7b0c      	ldrb	r4, [r1, #12]
 800227c:	780a      	ldrb	r2, [r1, #0]
 800227e:	2c00      	cmp	r4, #0
 8002280:	f040 8089 	bne.w	8002396 <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 8002284:	88cc      	ldrh	r4, [r1, #6]
 8002286:	784e      	ldrb	r6, [r1, #1]
 8002288:	0864      	lsrs	r4, r4, #1
 800228a:	0064      	lsls	r4, r4, #1
 800228c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002290:	b386      	cbz	r6, 80022f4 <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002292:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002296:	b2b6      	uxth	r6, r6
 8002298:	4432      	add	r2, r6
 800229a:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800229e:	780c      	ldrb	r4, [r1, #0]
 80022a0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022a4:	0652      	lsls	r2, r2, #25
 80022a6:	d509      	bpl.n	80022bc <USB_ActivateEndpoint+0x88>
 80022a8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022ac:	b292      	uxth	r2, r2
 80022ae:	402a      	ands	r2, r5
 80022b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022b4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80022b8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80022bc:	78ca      	ldrb	r2, [r1, #3]
 80022be:	780c      	ldrb	r4, [r1, #0]
 80022c0:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80022c2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022c6:	4985      	ldr	r1, [pc, #532]	; (80024dc <USB_ActivateEndpoint+0x2a8>)
 80022c8:	b292      	uxth	r2, r2
 80022ca:	ea02 0201 	and.w	r2, r2, r1
 80022ce:	bf18      	it	ne
 80022d0:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80022d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022dc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 80022e2:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80022e6:	2000      	movs	r0, #0
      break;
 80022e8:	e7b8      	b.n	800225c <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80022ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 80022ee:	e7fa      	b.n	80022e6 <USB_ActivateEndpoint+0xb2>
      ret = HAL_ERROR;
 80022f0:	2001      	movs	r0, #1
 80022f2:	e7b3      	b.n	800225c <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022f4:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80022f8:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022fa:	b2ad      	uxth	r5, r5
 80022fc:	442a      	add	r2, r5
 80022fe:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002302:	780a      	ldrb	r2, [r1, #0]
 8002304:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002308:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800230c:	b2a4      	uxth	r4, r4
 800230e:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8002312:	bb7e      	cbnz	r6, 8002374 <USB_ActivateEndpoint+0x140>
 8002314:	5b15      	ldrh	r5, [r2, r4]
 8002316:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 800231a:	042d      	lsls	r5, r5, #16
 800231c:	0c2d      	lsrs	r5, r5, #16
 800231e:	5315      	strh	r5, [r2, r4]
 8002320:	5b15      	ldrh	r5, [r2, r4]
 8002322:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8002326:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800232a:	b2ad      	uxth	r5, r5
 800232c:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800232e:	780c      	ldrb	r4, [r1, #0]
 8002330:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002334:	0455      	lsls	r5, r2, #17
 8002336:	d50d      	bpl.n	8002354 <USB_ActivateEndpoint+0x120>
 8002338:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800233c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002340:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002344:	0412      	lsls	r2, r2, #16
 8002346:	0c12      	lsrs	r2, r2, #16
 8002348:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800234c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002350:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002354:	7809      	ldrb	r1, [r1, #0]
 8002356:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800235a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800235e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002362:	0412      	lsls	r2, r2, #16
 8002364:	0c12      	lsrs	r2, r2, #16
 8002366:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800236a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800236e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002372:	e071      	b.n	8002458 <USB_ActivateEndpoint+0x224>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002374:	2e3e      	cmp	r6, #62	; 0x3e
 8002376:	d805      	bhi.n	8002384 <USB_ActivateEndpoint+0x150>
 8002378:	0875      	lsrs	r5, r6, #1
 800237a:	07f7      	lsls	r7, r6, #31
 800237c:	bf48      	it	mi
 800237e:	3501      	addmi	r5, #1
 8002380:	02ad      	lsls	r5, r5, #10
 8002382:	e7d2      	b.n	800232a <USB_ActivateEndpoint+0xf6>
 8002384:	0977      	lsrs	r7, r6, #5
 8002386:	4d56      	ldr	r5, [pc, #344]	; (80024e0 <USB_ActivateEndpoint+0x2ac>)
 8002388:	06f6      	lsls	r6, r6, #27
 800238a:	bf08      	it	eq
 800238c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002390:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8002394:	e7c9      	b.n	800232a <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002396:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800239a:	b2a4      	uxth	r4, r4
 800239c:	402c      	ands	r4, r5
 800239e:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80023a2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80023a6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80023aa:	780a      	ldrb	r2, [r1, #0]
 80023ac:	890c      	ldrh	r4, [r1, #8]
 80023ae:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80023b2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80023b6:	0864      	lsrs	r4, r4, #1
 80023b8:	b2b6      	uxth	r6, r6
 80023ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023be:	0064      	lsls	r4, r4, #1
 80023c0:	5394      	strh	r4, [r2, r6]
 80023c2:	780a      	ldrb	r2, [r1, #0]
 80023c4:	894c      	ldrh	r4, [r1, #10]
 80023c6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80023ca:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80023ce:	0864      	lsrs	r4, r4, #1
 80023d0:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80023d4:	0064      	lsls	r4, r4, #1
 80023d6:	b2b6      	uxth	r6, r6
 80023d8:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 80023da:	784a      	ldrb	r2, [r1, #1]
 80023dc:	780c      	ldrb	r4, [r1, #0]
 80023de:	2a00      	cmp	r2, #0
 80023e0:	d13d      	bne.n	800245e <USB_ActivateEndpoint+0x22a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023e2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023e6:	0452      	lsls	r2, r2, #17
 80023e8:	d509      	bpl.n	80023fe <USB_ActivateEndpoint+0x1ca>
 80023ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023ee:	b292      	uxth	r2, r2
 80023f0:	402a      	ands	r2, r5
 80023f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80023f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023fa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023fe:	780c      	ldrb	r4, [r1, #0]
 8002400:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002404:	0657      	lsls	r7, r2, #25
 8002406:	d50d      	bpl.n	8002424 <USB_ActivateEndpoint+0x1f0>
 8002408:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800240c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002410:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002414:	0412      	lsls	r2, r2, #16
 8002416:	0c12      	lsrs	r2, r2, #16
 8002418:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800241c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002420:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002424:	f248 0480 	movw	r4, #32896	; 0x8080
 8002428:	780d      	ldrb	r5, [r1, #0]
 800242a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800242e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002432:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002436:	0412      	lsls	r2, r2, #16
 8002438:	0c12      	lsrs	r2, r2, #16
 800243a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800243e:	4322      	orrs	r2, r4
 8002440:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002444:	7809      	ldrb	r1, [r1, #0]
 8002446:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800244a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800244e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002452:	0412      	lsls	r2, r2, #16
 8002454:	0c12      	lsrs	r2, r2, #16
 8002456:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002458:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800245c:	e740      	b.n	80022e0 <USB_ActivateEndpoint+0xac>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800245e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002462:	0456      	lsls	r6, r2, #17
 8002464:	d509      	bpl.n	800247a <USB_ActivateEndpoint+0x246>
 8002466:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800246a:	b292      	uxth	r2, r2
 800246c:	402a      	ands	r2, r5
 800246e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002476:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800247a:	780c      	ldrb	r4, [r1, #0]
 800247c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002480:	0652      	lsls	r2, r2, #25
 8002482:	d50d      	bpl.n	80024a0 <USB_ActivateEndpoint+0x26c>
 8002484:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002488:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800248c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002490:	0412      	lsls	r2, r2, #16
 8002492:	0c12      	lsrs	r2, r2, #16
 8002494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002498:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800249c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80024a0:	78ca      	ldrb	r2, [r1, #3]
 80024a2:	780c      	ldrb	r4, [r1, #0]
 80024a4:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80024a6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024aa:	4d0c      	ldr	r5, [pc, #48]	; (80024dc <USB_ActivateEndpoint+0x2a8>)
 80024ac:	b292      	uxth	r2, r2
 80024ae:	ea02 0205 	and.w	r2, r2, r5
 80024b2:	bf18      	it	ne
 80024b4:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80024b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024c0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80024c4:	7809      	ldrb	r1, [r1, #0]
 80024c6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80024ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024d2:	0412      	lsls	r2, r2, #16
 80024d4:	0c12      	lsrs	r2, r2, #16
 80024d6:	e748      	b.n	800236a <USB_ActivateEndpoint+0x136>
 80024d8:	ffff8f8f 	.word	0xffff8f8f
 80024dc:	ffff8fbf 	.word	0xffff8fbf
 80024e0:	ffff8000 	.word	0xffff8000

080024e4 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80024e4:	784b      	ldrb	r3, [r1, #1]
 80024e6:	780a      	ldrb	r2, [r1, #0]
 80024e8:	b18b      	cbz	r3, 800250e <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80024ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024f6:	041b      	lsls	r3, r3, #16
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80024fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002506:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800250a:	2000      	movs	r0, #0
 800250c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800250e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002522:	e7ec      	b.n	80024fe <USB_EPSetStall+0x1a>

08002524 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002524:	7b0b      	ldrb	r3, [r1, #12]
 8002526:	bb43      	cbnz	r3, 800257a <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 8002528:	784b      	ldrb	r3, [r1, #1]
 800252a:	780a      	ldrb	r2, [r1, #0]
 800252c:	b33b      	cbz	r3, 800257e <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800252e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002532:	065b      	lsls	r3, r3, #25
 8002534:	d50d      	bpl.n	8002552 <USB_EPClearStall+0x2e>
 8002536:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800253a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800253e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002542:	041b      	lsls	r3, r3, #16
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800254a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800254e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002552:	78cb      	ldrb	r3, [r1, #3]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d010      	beq.n	800257a <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002558:	780a      	ldrb	r2, [r1, #0]
 800255a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800255e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800256e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002576:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800257a:	2000      	movs	r0, #0
 800257c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800257e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002582:	045b      	lsls	r3, r3, #17
 8002584:	d50d      	bpl.n	80025a2 <USB_EPClearStall+0x7e>
 8002586:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800258a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800258e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800259a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80025a2:	780a      	ldrb	r2, [r1, #0]
 80025a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80025b8:	e7d9      	b.n	800256e <USB_EPClearStall+0x4a>

080025ba <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80025ba:	b911      	cbnz	r1, 80025c2 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80025c2:	2000      	movs	r0, #0
 80025c4:	4770      	bx	lr

080025c6 <USB_DevConnect>:
 80025c6:	2000      	movs	r0, #0
 80025c8:	4770      	bx	lr

080025ca <USB_DevDisconnect>:
 80025ca:	2000      	movs	r0, #0
 80025cc:	4770      	bx	lr

080025ce <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80025ce:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80025d2:	b280      	uxth	r0, r0
 80025d4:	4770      	bx	lr

080025d6 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80025d6:	2000      	movs	r0, #0
 80025d8:	4770      	bx	lr

080025da <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80025da:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80025de:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80025e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d100      	bne.n	80025f0 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80025ee:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80025f0:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80025f4:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 80025f8:	e7f7      	b.n	80025ea <USB_WritePMA+0x10>
	...

080025fc <USB_EPStartXfer>:
{
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8002600:	7849      	ldrb	r1, [r1, #1]
{
 8002602:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8002604:	2901      	cmp	r1, #1
 8002606:	7b22      	ldrb	r2, [r4, #12]
 8002608:	f040 8255 	bne.w	8002ab6 <USB_EPStartXfer+0x4ba>
    if (ep->xfer_len > ep->maxpacket)
 800260c:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8002610:	69a6      	ldr	r6, [r4, #24]
 8002612:	6961      	ldr	r1, [r4, #20]
 8002614:	4566      	cmp	r6, ip
 8002616:	bf28      	it	cs
 8002618:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 800261a:	bb02      	cbnz	r2, 800265e <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800261c:	b2b6      	uxth	r6, r6
 800261e:	88e2      	ldrh	r2, [r4, #6]
 8002620:	4633      	mov	r3, r6
 8002622:	f7ff ffda 	bl	80025da <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002626:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800262a:	7821      	ldrb	r1, [r4, #0]
 800262c:	b290      	uxth	r0, r2
 800262e:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8002632:	0109      	lsls	r1, r1, #4
 8002634:	4402      	add	r2, r0
 8002636:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002638:	7822      	ldrb	r2, [r4, #0]
 800263a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800263e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	0c1b      	lsrs	r3, r3, #16
 800264a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 800264e:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002658:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 800265c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 800265e:	78e2      	ldrb	r2, [r4, #3]
 8002660:	7827      	ldrb	r7, [r4, #0]
 8002662:	2a02      	cmp	r2, #2
 8002664:	6a23      	ldr	r3, [r4, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002666:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
      if (ep->type == EP_TYPE_BULK)
 800266a:	f040 811e 	bne.w	80028aa <USB_EPStartXfer+0x2ae>
        if (ep->xfer_len_db > ep->maxpacket)
 800266e:	459c      	cmp	ip, r3
 8002670:	f080 8101 	bcs.w	8002876 <USB_EPStartXfer+0x27a>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002674:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002678:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800267c:	0412      	lsls	r2, r2, #16
 800267e:	0c12      	lsrs	r2, r2, #16
 8002680:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002684:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002688:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800268c:	7822      	ldrb	r2, [r4, #0]
          ep->xfer_len_db -= len;
 800268e:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002690:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8002694:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002696:	f010 0f40 	tst.w	r0, #64	; 0x40
 800269a:	b2b3      	uxth	r3, r6
 800269c:	7860      	ldrb	r0, [r4, #1]
 800269e:	d075      	beq.n	800278c <USB_EPStartXfer+0x190>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d153      	bne.n	800274c <USB_EPStartXfer+0x150>
 80026a4:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80026a8:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 80026ac:	b280      	uxth	r0, r0
 80026ae:	4438      	add	r0, r7
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	2e00      	cmp	r6, #0
 80026b4:	d137      	bne.n	8002726 <USB_EPStartXfer+0x12a>
 80026b6:	5a87      	ldrh	r7, [r0, r2]
 80026b8:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80026bc:	043f      	lsls	r7, r7, #16
 80026be:	0c3f      	lsrs	r7, r7, #16
 80026c0:	5287      	strh	r7, [r0, r2]
 80026c2:	5a87      	ldrh	r7, [r0, r2]
 80026c4:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 80026c8:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 80026cc:	b2bf      	uxth	r7, r7
 80026ce:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80026d0:	4628      	mov	r0, r5
 80026d2:	8962      	ldrh	r2, [r4, #10]
 80026d4:	f7ff ff81 	bl	80025da <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80026d8:	6a22      	ldr	r2, [r4, #32]
 80026da:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80026dc:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80026de:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 80026e0:	bf8a      	itet	hi
 80026e2:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 80026e4:	2300      	movls	r3, #0
 80026e6:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026e8:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 80026ea:	4431      	add	r1, r6
 80026ec:	6223      	str	r3, [r4, #32]
 80026ee:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026f0:	b293      	uxth	r3, r2
 80026f2:	2800      	cmp	r0, #0
 80026f4:	f040 8159 	bne.w	80029aa <USB_EPStartXfer+0x3ae>
 80026f8:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80026fc:	7826      	ldrb	r6, [r4, #0]
 80026fe:	b280      	uxth	r0, r0
 8002700:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8002704:	0136      	lsls	r6, r6, #4
 8002706:	4438      	add	r0, r7
 8002708:	bb5a      	cbnz	r2, 8002762 <USB_EPStartXfer+0x166>
 800270a:	5a32      	ldrh	r2, [r6, r0]
 800270c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002710:	0412      	lsls	r2, r2, #16
 8002712:	0c12      	lsrs	r2, r2, #16
 8002714:	5232      	strh	r2, [r6, r0]
 8002716:	5a32      	ldrh	r2, [r6, r0]
 8002718:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800271c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002720:	b292      	uxth	r2, r2
 8002722:	5232      	strh	r2, [r6, r0]
 8002724:	e026      	b.n	8002774 <USB_EPStartXfer+0x178>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002726:	2e3e      	cmp	r6, #62	; 0x3e
 8002728:	d806      	bhi.n	8002738 <USB_EPStartXfer+0x13c>
 800272a:	0877      	lsrs	r7, r6, #1
 800272c:	f016 0f01 	tst.w	r6, #1
 8002730:	bf18      	it	ne
 8002732:	3701      	addne	r7, #1
 8002734:	02bf      	lsls	r7, r7, #10
 8002736:	e7c9      	b.n	80026cc <USB_EPStartXfer+0xd0>
 8002738:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 800273c:	06f7      	lsls	r7, r6, #27
 800273e:	4fa1      	ldr	r7, [pc, #644]	; (80029c4 <USB_EPStartXfer+0x3c8>)
 8002740:	bf08      	it	eq
 8002742:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002746:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 800274a:	e7bf      	b.n	80026cc <USB_EPStartXfer+0xd0>
 800274c:	2801      	cmp	r0, #1
 800274e:	d1bf      	bne.n	80026d0 <USB_EPStartXfer+0xd4>
 8002750:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	b287      	uxth	r7, r0
 8002758:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800275c:	4438      	add	r0, r7
 800275e:	5283      	strh	r3, [r0, r2]
 8002760:	e7b6      	b.n	80026d0 <USB_EPStartXfer+0xd4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002762:	2a3e      	cmp	r2, #62	; 0x3e
 8002764:	d809      	bhi.n	800277a <USB_EPStartXfer+0x17e>
 8002766:	0857      	lsrs	r7, r2, #1
 8002768:	07d2      	lsls	r2, r2, #31
 800276a:	bf48      	it	mi
 800276c:	3701      	addmi	r7, #1
 800276e:	02bf      	lsls	r7, r7, #10
 8002770:	b2bf      	uxth	r7, r7
 8002772:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002774:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002776:	4628      	mov	r0, r5
 8002778:	e094      	b.n	80028a4 <USB_EPStartXfer+0x2a8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800277a:	0957      	lsrs	r7, r2, #5
 800277c:	06d2      	lsls	r2, r2, #27
 800277e:	4a91      	ldr	r2, [pc, #580]	; (80029c4 <USB_EPStartXfer+0x3c8>)
 8002780:	bf08      	it	eq
 8002782:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002786:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800278a:	e7c9      	b.n	8002720 <USB_EPStartXfer+0x124>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800278c:	2800      	cmp	r0, #0
 800278e:	d153      	bne.n	8002838 <USB_EPStartXfer+0x23c>
 8002790:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002794:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8002798:	b280      	uxth	r0, r0
 800279a:	4438      	add	r0, r7
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	2e00      	cmp	r6, #0
 80027a0:	d137      	bne.n	8002812 <USB_EPStartXfer+0x216>
 80027a2:	5a87      	ldrh	r7, [r0, r2]
 80027a4:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80027a8:	043f      	lsls	r7, r7, #16
 80027aa:	0c3f      	lsrs	r7, r7, #16
 80027ac:	5287      	strh	r7, [r0, r2]
 80027ae:	5a87      	ldrh	r7, [r0, r2]
 80027b0:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 80027b4:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 80027b8:	b2bf      	uxth	r7, r7
 80027ba:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80027bc:	4628      	mov	r0, r5
 80027be:	8922      	ldrh	r2, [r4, #8]
 80027c0:	f7ff ff0b 	bl	80025da <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80027c4:	6a22      	ldr	r2, [r4, #32]
 80027c6:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80027c8:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80027ca:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 80027cc:	bf8a      	itet	hi
 80027ce:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 80027d0:	2300      	movls	r3, #0
 80027d2:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027d4:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 80027d6:	4431      	add	r1, r6
 80027d8:	6223      	str	r3, [r4, #32]
 80027da:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027dc:	b293      	uxth	r3, r2
 80027de:	2800      	cmp	r0, #0
 80027e0:	f040 815c 	bne.w	8002a9c <USB_EPStartXfer+0x4a0>
 80027e4:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80027e8:	7826      	ldrb	r6, [r4, #0]
 80027ea:	b280      	uxth	r0, r0
 80027ec:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 80027f0:	0136      	lsls	r6, r6, #4
 80027f2:	4438      	add	r0, r7
 80027f4:	bb5a      	cbnz	r2, 800284e <USB_EPStartXfer+0x252>
 80027f6:	5a32      	ldrh	r2, [r6, r0]
 80027f8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80027fc:	0412      	lsls	r2, r2, #16
 80027fe:	0c12      	lsrs	r2, r2, #16
 8002800:	5232      	strh	r2, [r6, r0]
 8002802:	5a32      	ldrh	r2, [r6, r0]
 8002804:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002808:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800280c:	b292      	uxth	r2, r2
 800280e:	5232      	strh	r2, [r6, r0]
 8002810:	e026      	b.n	8002860 <USB_EPStartXfer+0x264>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002812:	2e3e      	cmp	r6, #62	; 0x3e
 8002814:	d806      	bhi.n	8002824 <USB_EPStartXfer+0x228>
 8002816:	0877      	lsrs	r7, r6, #1
 8002818:	f016 0f01 	tst.w	r6, #1
 800281c:	bf18      	it	ne
 800281e:	3701      	addne	r7, #1
 8002820:	02bf      	lsls	r7, r7, #10
 8002822:	e7c9      	b.n	80027b8 <USB_EPStartXfer+0x1bc>
 8002824:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8002828:	06f7      	lsls	r7, r6, #27
 800282a:	4f66      	ldr	r7, [pc, #408]	; (80029c4 <USB_EPStartXfer+0x3c8>)
 800282c:	bf08      	it	eq
 800282e:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002832:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8002836:	e7bf      	b.n	80027b8 <USB_EPStartXfer+0x1bc>
 8002838:	2801      	cmp	r0, #1
 800283a:	d1bf      	bne.n	80027bc <USB_EPStartXfer+0x1c0>
 800283c:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b287      	uxth	r7, r0
 8002844:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8002848:	4438      	add	r0, r7
 800284a:	5283      	strh	r3, [r0, r2]
 800284c:	e7b6      	b.n	80027bc <USB_EPStartXfer+0x1c0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800284e:	2a3e      	cmp	r2, #62	; 0x3e
 8002850:	d808      	bhi.n	8002864 <USB_EPStartXfer+0x268>
 8002852:	0857      	lsrs	r7, r2, #1
 8002854:	07d2      	lsls	r2, r2, #31
 8002856:	bf48      	it	mi
 8002858:	3701      	addmi	r7, #1
 800285a:	02bf      	lsls	r7, r7, #10
 800285c:	b2bf      	uxth	r7, r7
 800285e:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002860:	8962      	ldrh	r2, [r4, #10]
 8002862:	e788      	b.n	8002776 <USB_EPStartXfer+0x17a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002864:	0957      	lsrs	r7, r2, #5
 8002866:	06d2      	lsls	r2, r2, #27
 8002868:	4a56      	ldr	r2, [pc, #344]	; (80029c4 <USB_EPStartXfer+0x3c8>)
 800286a:	bf08      	it	eq
 800286c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002870:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002874:	e7ca      	b.n	800280c <USB_EPStartXfer+0x210>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002876:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800287a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800287e:	0412      	lsls	r2, r2, #16
 8002880:	0c12      	lsrs	r2, r2, #16
 8002882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800288a:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800288e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002892:	7826      	ldrb	r6, [r4, #0]
 8002894:	b297      	uxth	r7, r2
 8002896:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800289a:	443a      	add	r2, r7
 800289c:	0136      	lsls	r6, r6, #4
 800289e:	b29b      	uxth	r3, r3
 80028a0:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80028a2:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80028a4:	f7ff fe99 	bl	80025da <USB_WritePMA>
 80028a8:	e6c6      	b.n	8002638 <USB_EPStartXfer+0x3c>
        PCD_SET_EP_DBUF(USBx, ep->num);
 80028aa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80028ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028b2:	0412      	lsls	r2, r2, #16
 80028b4:	0c12      	lsrs	r2, r2, #16
 80028b6:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80028ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028be:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80028c2:	7822      	ldrb	r2, [r4, #0]
        ep->xfer_len_db -= len;
 80028c4:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80028c6:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
        ep->xfer_len_db -= len;
 80028ca:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80028cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028d0:	b2b3      	uxth	r3, r6
 80028d2:	7860      	ldrb	r0, [r4, #1]
 80028d4:	d078      	beq.n	80029c8 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d151      	bne.n	800297e <USB_EPStartXfer+0x382>
 80028da:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80028de:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 80028e2:	b280      	uxth	r0, r0
 80028e4:	4438      	add	r0, r7
 80028e6:	0112      	lsls	r2, r2, #4
 80028e8:	2e00      	cmp	r6, #0
 80028ea:	d135      	bne.n	8002958 <USB_EPStartXfer+0x35c>
 80028ec:	5a87      	ldrh	r7, [r0, r2]
 80028ee:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80028f2:	043f      	lsls	r7, r7, #16
 80028f4:	0c3f      	lsrs	r7, r7, #16
 80028f6:	5287      	strh	r7, [r0, r2]
 80028f8:	5a87      	ldrh	r7, [r0, r2]
 80028fa:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 80028fe:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8002902:	b2bf      	uxth	r7, r7
 8002904:	5287      	strh	r7, [r0, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002906:	8962      	ldrh	r2, [r4, #10]
 8002908:	4628      	mov	r0, r5
 800290a:	f7ff fe66 	bl	80025da <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 800290e:	6a22      	ldr	r2, [r4, #32]
 8002910:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 8002912:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8002914:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 8002916:	bf8a      	itet	hi
 8002918:	1b93      	subhi	r3, r2, r6
            ep->xfer_len_db = 0U;
 800291a:	2300      	movls	r3, #0
 800291c:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 800291e:	4431      	add	r1, r6
 8002920:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db -= len;
 8002922:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8002924:	2a00      	cmp	r2, #0
 8002926:	f43f ae87 	beq.w	8002638 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800292a:	7860      	ldrb	r0, [r4, #1]
 800292c:	b293      	uxth	r3, r2
 800292e:	2800      	cmp	r0, #0
 8002930:	d13b      	bne.n	80029aa <USB_EPStartXfer+0x3ae>
 8002932:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8002936:	7827      	ldrb	r7, [r4, #0]
 8002938:	b2b0      	uxth	r0, r6
 800293a:	2a3e      	cmp	r2, #62	; 0x3e
 800293c:	f205 4604 	addw	r6, r5, #1028	; 0x404
 8002940:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8002944:	4406      	add	r6, r0
 8002946:	d825      	bhi.n	8002994 <USB_EPStartXfer+0x398>
 8002948:	0850      	lsrs	r0, r2, #1
 800294a:	07d2      	lsls	r2, r2, #31
 800294c:	bf48      	it	mi
 800294e:	3001      	addmi	r0, #1
 8002950:	0280      	lsls	r0, r0, #10
 8002952:	b280      	uxth	r0, r0
 8002954:	53b8      	strh	r0, [r7, r6]
 8002956:	e70d      	b.n	8002774 <USB_EPStartXfer+0x178>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002958:	2e3e      	cmp	r6, #62	; 0x3e
 800295a:	d806      	bhi.n	800296a <USB_EPStartXfer+0x36e>
 800295c:	0877      	lsrs	r7, r6, #1
 800295e:	f016 0f01 	tst.w	r6, #1
 8002962:	bf18      	it	ne
 8002964:	3701      	addne	r7, #1
 8002966:	02bf      	lsls	r7, r7, #10
 8002968:	e7cb      	b.n	8002902 <USB_EPStartXfer+0x306>
 800296a:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 800296e:	06f7      	lsls	r7, r6, #27
 8002970:	4f14      	ldr	r7, [pc, #80]	; (80029c4 <USB_EPStartXfer+0x3c8>)
 8002972:	bf08      	it	eq
 8002974:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002978:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 800297c:	e7c1      	b.n	8002902 <USB_EPStartXfer+0x306>
 800297e:	2801      	cmp	r0, #1
 8002980:	d1c1      	bne.n	8002906 <USB_EPStartXfer+0x30a>
 8002982:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b287      	uxth	r7, r0
 800298a:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800298e:	4438      	add	r0, r7
 8002990:	5283      	strh	r3, [r0, r2]
 8002992:	e7b8      	b.n	8002906 <USB_EPStartXfer+0x30a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002994:	0950      	lsrs	r0, r2, #5
 8002996:	06d2      	lsls	r2, r2, #27
 8002998:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <USB_EPStartXfer+0x3c8>)
 800299a:	bf08      	it	eq
 800299c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80029a0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80029a4:	b292      	uxth	r2, r2
 80029a6:	53ba      	strh	r2, [r7, r6]
 80029a8:	e6e4      	b.n	8002774 <USB_EPStartXfer+0x178>
 80029aa:	2801      	cmp	r0, #1
 80029ac:	f47f aee2 	bne.w	8002774 <USB_EPStartXfer+0x178>
 80029b0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80029b4:	7820      	ldrb	r0, [r4, #0]
 80029b6:	b296      	uxth	r6, r2
 80029b8:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80029bc:	0100      	lsls	r0, r0, #4
 80029be:	4432      	add	r2, r6
 80029c0:	5283      	strh	r3, [r0, r2]
 80029c2:	e6d7      	b.n	8002774 <USB_EPStartXfer+0x178>
 80029c4:	ffff8000 	.word	0xffff8000
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80029c8:	2800      	cmp	r0, #0
 80029ca:	d151      	bne.n	8002a70 <USB_EPStartXfer+0x474>
 80029cc:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80029d0:	f205 4704 	addw	r7, r5, #1028	; 0x404
 80029d4:	b280      	uxth	r0, r0
 80029d6:	4438      	add	r0, r7
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	2e00      	cmp	r6, #0
 80029dc:	d135      	bne.n	8002a4a <USB_EPStartXfer+0x44e>
 80029de:	5a87      	ldrh	r7, [r0, r2]
 80029e0:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80029e4:	043f      	lsls	r7, r7, #16
 80029e6:	0c3f      	lsrs	r7, r7, #16
 80029e8:	5287      	strh	r7, [r0, r2]
 80029ea:	5a87      	ldrh	r7, [r0, r2]
 80029ec:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 80029f0:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 80029f4:	b2bf      	uxth	r7, r7
 80029f6:	5287      	strh	r7, [r0, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80029f8:	8922      	ldrh	r2, [r4, #8]
 80029fa:	4628      	mov	r0, r5
 80029fc:	f7ff fded 	bl	80025da <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 8002a00:	6a22      	ldr	r2, [r4, #32]
 8002a02:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 8002a04:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8002a06:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 8002a08:	bf8a      	itet	hi
 8002a0a:	1b93      	subhi	r3, r2, r6
            ep->xfer_len_db = 0U;
 8002a0c:	2300      	movls	r3, #0
 8002a0e:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 8002a10:	4431      	add	r1, r6
 8002a12:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db -= len;
 8002a14:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8002a16:	2a00      	cmp	r2, #0
 8002a18:	f43f ae0e 	beq.w	8002638 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a1c:	7860      	ldrb	r0, [r4, #1]
 8002a1e:	b293      	uxth	r3, r2
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d13b      	bne.n	8002a9c <USB_EPStartXfer+0x4a0>
 8002a24:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8002a28:	7827      	ldrb	r7, [r4, #0]
 8002a2a:	b2b0      	uxth	r0, r6
 8002a2c:	2a3e      	cmp	r2, #62	; 0x3e
 8002a2e:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 8002a32:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8002a36:	4406      	add	r6, r0
 8002a38:	d825      	bhi.n	8002a86 <USB_EPStartXfer+0x48a>
 8002a3a:	0850      	lsrs	r0, r2, #1
 8002a3c:	07d2      	lsls	r2, r2, #31
 8002a3e:	bf48      	it	mi
 8002a40:	3001      	addmi	r0, #1
 8002a42:	0280      	lsls	r0, r0, #10
 8002a44:	b280      	uxth	r0, r0
 8002a46:	53b8      	strh	r0, [r7, r6]
 8002a48:	e70a      	b.n	8002860 <USB_EPStartXfer+0x264>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a4a:	2e3e      	cmp	r6, #62	; 0x3e
 8002a4c:	d806      	bhi.n	8002a5c <USB_EPStartXfer+0x460>
 8002a4e:	0877      	lsrs	r7, r6, #1
 8002a50:	f016 0f01 	tst.w	r6, #1
 8002a54:	bf18      	it	ne
 8002a56:	3701      	addne	r7, #1
 8002a58:	02bf      	lsls	r7, r7, #10
 8002a5a:	e7cb      	b.n	80029f4 <USB_EPStartXfer+0x3f8>
 8002a5c:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8002a60:	06f7      	lsls	r7, r6, #27
 8002a62:	4fac      	ldr	r7, [pc, #688]	; (8002d14 <USB_EPStartXfer+0x718>)
 8002a64:	bf08      	it	eq
 8002a66:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002a6a:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8002a6e:	e7c1      	b.n	80029f4 <USB_EPStartXfer+0x3f8>
 8002a70:	2801      	cmp	r0, #1
 8002a72:	d1c1      	bne.n	80029f8 <USB_EPStartXfer+0x3fc>
 8002a74:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	b287      	uxth	r7, r0
 8002a7c:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8002a80:	4438      	add	r0, r7
 8002a82:	5283      	strh	r3, [r0, r2]
 8002a84:	e7b8      	b.n	80029f8 <USB_EPStartXfer+0x3fc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a86:	0950      	lsrs	r0, r2, #5
 8002a88:	06d2      	lsls	r2, r2, #27
 8002a8a:	4aa2      	ldr	r2, [pc, #648]	; (8002d14 <USB_EPStartXfer+0x718>)
 8002a8c:	bf08      	it	eq
 8002a8e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002a92:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002a96:	b292      	uxth	r2, r2
 8002a98:	53ba      	strh	r2, [r7, r6]
 8002a9a:	e6e1      	b.n	8002860 <USB_EPStartXfer+0x264>
 8002a9c:	2801      	cmp	r0, #1
 8002a9e:	f47f aedf 	bne.w	8002860 <USB_EPStartXfer+0x264>
 8002aa2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002aa6:	7820      	ldrb	r0, [r4, #0]
 8002aa8:	b296      	uxth	r6, r2
 8002aaa:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8002aae:	0100      	lsls	r0, r0, #4
 8002ab0:	4432      	add	r2, r6
 8002ab2:	5283      	strh	r3, [r0, r2]
 8002ab4:	e6d4      	b.n	8002860 <USB_EPStartXfer+0x264>
    if (ep->doublebuffer == 0U)
 8002ab6:	2a00      	cmp	r2, #0
 8002ab8:	d13b      	bne.n	8002b32 <USB_EPStartXfer+0x536>
      if (ep->xfer_len > ep->maxpacket)
 8002aba:	69a3      	ldr	r3, [r4, #24]
 8002abc:	6921      	ldr	r1, [r4, #16]
 8002abe:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8002ac0:	bf84      	itt	hi
 8002ac2:	1a5a      	subhi	r2, r3, r1
 8002ac4:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002ac6:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8002aca:	7820      	ldrb	r0, [r4, #0]
 8002acc:	61a2      	str	r2, [r4, #24]
 8002ace:	b28a      	uxth	r2, r1
 8002ad0:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8002ad4:	0100      	lsls	r0, r0, #4
 8002ad6:	4411      	add	r1, r2
 8002ad8:	b96b      	cbnz	r3, 8002af6 <USB_EPStartXfer+0x4fa>
 8002ada:	5a43      	ldrh	r3, [r0, r1]
 8002adc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	0c1b      	lsrs	r3, r3, #16
 8002ae4:	5243      	strh	r3, [r0, r1]
 8002ae6:	5a43      	ldrh	r3, [r0, r1]
 8002ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	5243      	strh	r3, [r0, r1]
 8002af4:	e008      	b.n	8002b08 <USB_EPStartXfer+0x50c>
 8002af6:	2b3e      	cmp	r3, #62	; 0x3e
 8002af8:	d812      	bhi.n	8002b20 <USB_EPStartXfer+0x524>
 8002afa:	085a      	lsrs	r2, r3, #1
 8002afc:	07df      	lsls	r7, r3, #31
 8002afe:	bf48      	it	mi
 8002b00:	3201      	addmi	r2, #1
 8002b02:	0292      	lsls	r2, r2, #10
 8002b04:	b292      	uxth	r2, r2
 8002b06:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b08:	7822      	ldrb	r2, [r4, #0]
 8002b0a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b1e:	e596      	b.n	800264e <USB_EPStartXfer+0x52>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002b20:	095a      	lsrs	r2, r3, #5
 8002b22:	06de      	lsls	r6, r3, #27
 8002b24:	4b7b      	ldr	r3, [pc, #492]	; (8002d14 <USB_EPStartXfer+0x718>)
 8002b26:	bf08      	it	eq
 8002b28:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002b2c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002b30:	e7de      	b.n	8002af0 <USB_EPStartXfer+0x4f4>
      if (ep->type == EP_TYPE_BULK)
 8002b32:	78e3      	ldrb	r3, [r4, #3]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d17e      	bne.n	8002c36 <USB_EPStartXfer+0x63a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002b38:	b9b9      	cbnz	r1, 8002b6a <USB_EPStartXfer+0x56e>
 8002b3a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002b3e:	7821      	ldrb	r1, [r4, #0]
 8002b40:	b293      	uxth	r3, r2
 8002b42:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002b46:	6920      	ldr	r0, [r4, #16]
 8002b48:	0109      	lsls	r1, r1, #4
 8002b4a:	441a      	add	r2, r3
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	d144      	bne.n	8002bda <USB_EPStartXfer+0x5de>
 8002b50:	5a8b      	ldrh	r3, [r1, r2]
 8002b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b56:	041b      	lsls	r3, r3, #16
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	528b      	strh	r3, [r1, r2]
 8002b5c:	5a8b      	ldrh	r3, [r1, r2]
 8002b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	528b      	strh	r3, [r1, r2]
 8002b6a:	7862      	ldrb	r2, [r4, #1]
 8002b6c:	7823      	ldrb	r3, [r4, #0]
 8002b6e:	2a00      	cmp	r2, #0
 8002b70:	d155      	bne.n	8002c1e <USB_EPStartXfer+0x622>
 8002b72:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002b76:	6920      	ldr	r0, [r4, #16]
 8002b78:	b28a      	uxth	r2, r1
 8002b7a:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8002b7e:	4411      	add	r1, r2
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	2800      	cmp	r0, #0
 8002b84:	d13a      	bne.n	8002bfc <USB_EPStartXfer+0x600>
 8002b86:	5aca      	ldrh	r2, [r1, r3]
 8002b88:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002b8c:	0412      	lsls	r2, r2, #16
 8002b8e:	0c12      	lsrs	r2, r2, #16
 8002b90:	52ca      	strh	r2, [r1, r3]
 8002b92:	5aca      	ldrh	r2, [r1, r3]
 8002b94:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002b98:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8002ba0:	69e3      	ldr	r3, [r4, #28]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0b0      	beq.n	8002b08 <USB_EPStartXfer+0x50c>
 8002ba6:	f244 0340 	movw	r3, #16448	; 0x4040
 8002baa:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002bac:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002bb0:	ea03 0001 	and.w	r0, r3, r1
 8002bb4:	438b      	bics	r3, r1
 8002bb6:	d001      	beq.n	8002bbc <USB_EPStartXfer+0x5c0>
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	d1a5      	bne.n	8002b08 <USB_EPStartXfer+0x50c>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8002bbc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc8:	041b      	lsls	r3, r3, #16
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bd4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002bd8:	e796      	b.n	8002b08 <USB_EPStartXfer+0x50c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002bda:	283e      	cmp	r0, #62	; 0x3e
 8002bdc:	d805      	bhi.n	8002bea <USB_EPStartXfer+0x5ee>
 8002bde:	0843      	lsrs	r3, r0, #1
 8002be0:	07c0      	lsls	r0, r0, #31
 8002be2:	bf48      	it	mi
 8002be4:	3301      	addmi	r3, #1
 8002be6:	029b      	lsls	r3, r3, #10
 8002be8:	e7bd      	b.n	8002b66 <USB_EPStartXfer+0x56a>
 8002bea:	0946      	lsrs	r6, r0, #5
 8002bec:	4b49      	ldr	r3, [pc, #292]	; (8002d14 <USB_EPStartXfer+0x718>)
 8002bee:	06c7      	lsls	r7, r0, #27
 8002bf0:	bf08      	it	eq
 8002bf2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002bf6:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8002bfa:	e7b4      	b.n	8002b66 <USB_EPStartXfer+0x56a>
 8002bfc:	283e      	cmp	r0, #62	; 0x3e
 8002bfe:	d805      	bhi.n	8002c0c <USB_EPStartXfer+0x610>
 8002c00:	0842      	lsrs	r2, r0, #1
 8002c02:	07c0      	lsls	r0, r0, #31
 8002c04:	bf48      	it	mi
 8002c06:	3201      	addmi	r2, #1
 8002c08:	0292      	lsls	r2, r2, #10
 8002c0a:	e7c7      	b.n	8002b9c <USB_EPStartXfer+0x5a0>
 8002c0c:	0946      	lsrs	r6, r0, #5
 8002c0e:	4a41      	ldr	r2, [pc, #260]	; (8002d14 <USB_EPStartXfer+0x718>)
 8002c10:	06c7      	lsls	r7, r0, #27
 8002c12:	bf08      	it	eq
 8002c14:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002c18:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8002c1c:	e7be      	b.n	8002b9c <USB_EPStartXfer+0x5a0>
 8002c1e:	2a01      	cmp	r2, #1
 8002c20:	d1be      	bne.n	8002ba0 <USB_EPStartXfer+0x5a4>
 8002c22:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	b291      	uxth	r1, r2
 8002c2a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8002c2e:	440a      	add	r2, r1
 8002c30:	8a21      	ldrh	r1, [r4, #16]
 8002c32:	52d1      	strh	r1, [r2, r3]
 8002c34:	e7b4      	b.n	8002ba0 <USB_EPStartXfer+0x5a4>
      else if (ep->type == EP_TYPE_ISOC)
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d16a      	bne.n	8002d10 <USB_EPStartXfer+0x714>
        if (ep->xfer_len > ep->maxpacket)
 8002c3a:	69a3      	ldr	r3, [r4, #24]
 8002c3c:	6922      	ldr	r2, [r4, #16]
 8002c3e:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8002c40:	bf94      	ite	ls
 8002c42:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8002c44:	1a98      	subhi	r0, r3, r2
 8002c46:	61a0      	str	r0, [r4, #24]
 8002c48:	bf88      	it	hi
 8002c4a:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002c4c:	b9a9      	cbnz	r1, 8002c7a <USB_EPStartXfer+0x67e>
 8002c4e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002c52:	7820      	ldrb	r0, [r4, #0]
 8002c54:	b28a      	uxth	r2, r1
 8002c56:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8002c5a:	0100      	lsls	r0, r0, #4
 8002c5c:	4411      	add	r1, r2
 8002c5e:	bb33      	cbnz	r3, 8002cae <USB_EPStartXfer+0x6b2>
 8002c60:	5a42      	ldrh	r2, [r0, r1]
 8002c62:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002c66:	0412      	lsls	r2, r2, #16
 8002c68:	0c12      	lsrs	r2, r2, #16
 8002c6a:	5242      	strh	r2, [r0, r1]
 8002c6c:	5a42      	ldrh	r2, [r0, r1]
 8002c6e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002c72:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002c76:	b292      	uxth	r2, r2
 8002c78:	5242      	strh	r2, [r0, r1]
 8002c7a:	7861      	ldrb	r1, [r4, #1]
 8002c7c:	7822      	ldrb	r2, [r4, #0]
 8002c7e:	2900      	cmp	r1, #0
 8002c80:	d139      	bne.n	8002cf6 <USB_EPStartXfer+0x6fa>
 8002c82:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	b281      	uxth	r1, r0
 8002c8a:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8002c8e:	4408      	add	r0, r1
 8002c90:	b9f3      	cbnz	r3, 8002cd0 <USB_EPStartXfer+0x6d4>
 8002c92:	5a83      	ldrh	r3, [r0, r2]
 8002c94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c98:	041b      	lsls	r3, r3, #16
 8002c9a:	0c1b      	lsrs	r3, r3, #16
 8002c9c:	5283      	strh	r3, [r0, r2]
 8002c9e:	5a83      	ldrh	r3, [r0, r2]
 8002ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	5283      	strh	r3, [r0, r2]
 8002cac:	e72c      	b.n	8002b08 <USB_EPStartXfer+0x50c>
 8002cae:	2b3e      	cmp	r3, #62	; 0x3e
 8002cb0:	d805      	bhi.n	8002cbe <USB_EPStartXfer+0x6c2>
 8002cb2:	085a      	lsrs	r2, r3, #1
 8002cb4:	07de      	lsls	r6, r3, #31
 8002cb6:	bf48      	it	mi
 8002cb8:	3201      	addmi	r2, #1
 8002cba:	0292      	lsls	r2, r2, #10
 8002cbc:	e7db      	b.n	8002c76 <USB_EPStartXfer+0x67a>
 8002cbe:	095e      	lsrs	r6, r3, #5
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <USB_EPStartXfer+0x718>)
 8002cc2:	06df      	lsls	r7, r3, #27
 8002cc4:	bf08      	it	eq
 8002cc6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002cca:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8002cce:	e7d2      	b.n	8002c76 <USB_EPStartXfer+0x67a>
 8002cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8002cd2:	d807      	bhi.n	8002ce4 <USB_EPStartXfer+0x6e8>
 8002cd4:	0859      	lsrs	r1, r3, #1
 8002cd6:	07de      	lsls	r6, r3, #31
 8002cd8:	bf48      	it	mi
 8002cda:	3101      	addmi	r1, #1
 8002cdc:	0289      	lsls	r1, r1, #10
 8002cde:	b289      	uxth	r1, r1
 8002ce0:	5281      	strh	r1, [r0, r2]
 8002ce2:	e711      	b.n	8002b08 <USB_EPStartXfer+0x50c>
 8002ce4:	0959      	lsrs	r1, r3, #5
 8002ce6:	06db      	lsls	r3, r3, #27
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <USB_EPStartXfer+0x718>)
 8002cea:	bf08      	it	eq
 8002cec:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002cf0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002cf4:	e7d8      	b.n	8002ca8 <USB_EPStartXfer+0x6ac>
 8002cf6:	2901      	cmp	r1, #1
 8002cf8:	f47f af06 	bne.w	8002b08 <USB_EPStartXfer+0x50c>
 8002cfc:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	b288      	uxth	r0, r1
 8002d04:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8002d08:	4401      	add	r1, r0
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	528b      	strh	r3, [r1, r2]
 8002d0e:	e6fb      	b.n	8002b08 <USB_EPStartXfer+0x50c>
        return HAL_ERROR;
 8002d10:	2001      	movs	r0, #1
 8002d12:	e4a3      	b.n	800265c <USB_EPStartXfer+0x60>
 8002d14:	ffff8000 	.word	0xffff8000

08002d18 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d18:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8002d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002d22:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 8002d24:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d26:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8002d28:	462e      	mov	r6, r5
 8002d2a:	3402      	adds	r4, #2
 8002d2c:	b936      	cbnz	r6, 8002d3c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002d2e:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8002d30:	bf44      	itt	mi
 8002d32:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002d36:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8002d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8002d3c:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8002d40:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8002d42:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002d44:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002d48:	0a00      	lsrs	r0, r0, #8
 8002d4a:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 8002d4e:	e7ec      	b.n	8002d2a <USB_ReadPMA+0x12>

08002d50 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_CfgDesc);
 8002d50:	231b      	movs	r3, #27
 8002d52:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_CfgDesc;
}
 8002d54:	4800      	ldr	r0, [pc, #0]	; (8002d58 <USBD_DFU_GetCfgDesc+0x8>)
 8002d56:	4770      	bx	lr
 8002d58:	20000050 	.word	0x20000050

08002d5c <USBD_DFU_DataIn>:
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{

  return USBD_OK;
}
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	4770      	bx	lr

08002d60 <USBD_DFU_EP0_RxReady>:
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{

  return USBD_OK;
}
 8002d60:	2000      	movs	r0, #0
 8002d62:	4770      	bx	lr

08002d64 <USBD_DFU_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8002d64:	230a      	movs	r3, #10
 8002d66:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_DeviceQualifierDesc;
}
 8002d68:	4800      	ldr	r0, [pc, #0]	; (8002d6c <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 8002d6a:	4770      	bx	lr
 8002d6c:	2000006c 	.word	0x2000006c

08002d70 <USBD_DFU_EP0_TxReady>:
{
 8002d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002d72:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
{
 8002d76:	4605      	mov	r5, r0
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8002d78:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d164      	bne.n	8002e4a <USBD_DFU_EP0_TxReady+0xda>
    if (hdfu->wblock_num == 0U)
 8002d80:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
 8002d84:	2900      	cmp	r1, #0
 8002d86:	d151      	bne.n	8002e2c <USBD_DFU_EP0_TxReady+0xbc>
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8002d88:	7823      	ldrb	r3, [r4, #0]
 8002d8a:	b99b      	cbnz	r3, 8002db4 <USBD_DFU_EP0_TxReady+0x44>
 8002d8c:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d13c      	bne.n	8002e0e <USBD_DFU_EP0_TxReady+0x9e>
    hdfu->wlength = 0U;
 8002d94:	2000      	movs	r0, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002d96:	2303      	movs	r3, #3
    hdfu->wlength = 0U;
 8002d98:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8002d9c:	f8c4 0400 	str.w	r0, [r4, #1024]	; 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002da0:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8002da4:	f884 0411 	strb.w	r0, [r4, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8002da8:	f8a4 0412 	strh.w	r0, [r4, #1042]	; 0x412
    hdfu->dev_status[4] = hdfu->dev_state;
 8002dac:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
}
 8002db0:	b003      	add	sp, #12
 8002db2:	bd30      	pop	{r4, r5, pc}
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8002db4:	2b21      	cmp	r3, #33	; 0x21
 8002db6:	d110      	bne.n	8002dda <USBD_DFU_EP0_TxReady+0x6a>
 8002db8:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d126      	bne.n	8002e0e <USBD_DFU_EP0_TxReady+0x9e>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002dc0:	78e3      	ldrb	r3, [r4, #3]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8002dc2:	78a2      	ldrb	r2, [r4, #2]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8002dca:	7862      	ldrb	r2, [r4, #1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002dcc:	4413      	add	r3, r2
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002dce:	7922      	ldrb	r2, [r4, #4]
 8002dd0:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8002dd4:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
 8002dd8:	e7dc      	b.n	8002d94 <USBD_DFU_EP0_TxReady+0x24>
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 8002dda:	2b41      	cmp	r3, #65	; 0x41
 8002ddc:	d117      	bne.n	8002e0e <USBD_DFU_EP0_TxReady+0x9e>
 8002dde:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d113      	bne.n	8002e0e <USBD_DFU_EP0_TxReady+0x9e>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002de6:	78e3      	ldrb	r3, [r4, #3]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8002de8:	78a0      	ldrb	r0, [r4, #2]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002dea:	041b      	lsls	r3, r3, #16
 8002dec:	eb03 2300 	add.w	r3, r3, r0, lsl #8
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8002df0:	7860      	ldrb	r0, [r4, #1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002df2:	4403      	add	r3, r0
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002df4:	7920      	ldrb	r0, [r4, #4]
 8002df6:	eb03 6000 	add.w	r0, r3, r0, lsl #24
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8002dfa:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002dfe:	f8c4 0408 	str.w	r0, [r4, #1032]	; 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4798      	blx	r3
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d0c4      	beq.n	8002d94 <USBD_DFU_EP0_TxReady+0x24>
          return USBD_FAIL;
 8002e0a:	2002      	movs	r0, #2
 8002e0c:	e7d0      	b.n	8002db0 <USBD_DFU_EP0_TxReady+0x40>
        hdfu->wlength = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8002e14:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
        req.bmRequest = 0U;
 8002e18:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 8002e1c:	2301      	movs	r3, #1
        USBD_CtlError(pdev, &req);
 8002e1e:	4669      	mov	r1, sp
 8002e20:	4628      	mov	r0, r5
        req.wLength = 1U;
 8002e22:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 8002e26:	f000 fd7d 	bl	8003924 <USBD_CtlError>
 8002e2a:	e7b3      	b.n	8002d94 <USBD_DFU_EP0_TxReady+0x24>
      if (hdfu->wblock_num > 1U)
 8002e2c:	2901      	cmp	r1, #1
 8002e2e:	d9b1      	bls.n	8002d94 <USBD_DFU_EP0_TxReady+0x24>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002e30:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002e34:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002e38:	3902      	subs	r1, #2
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002e3a:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	4620      	mov	r0, r4
 8002e42:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
 8002e46:	4798      	blx	r3
 8002e48:	e7dd      	b.n	8002e06 <USBD_DFU_EP0_TxReady+0x96>
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8002e4a:	2b07      	cmp	r3, #7
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	d10f      	bne.n	8002e72 <USBD_DFU_EP0_TxReady+0x102>

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002e52:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <USBD_DFU_EP0_TxReady+0x140>)
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8002e54:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002e58:	7d12      	ldrb	r2, [r2, #20]
 8002e5a:	f012 0204 	ands.w	r2, r2, #4
 8002e5e:	d00a      	beq.n	8002e76 <USBD_DFU_EP0_TxReady+0x106>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002e60:	2206      	movs	r2, #6

    hdfu->dev_status[1] = 0U;
 8002e62:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002e66:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 8002e6a:	f8a4 3412 	strh.w	r3, [r4, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 8002e6e:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
  return USBD_OK;
 8002e72:	4618      	mov	r0, r3
 8002e74:	e79c      	b.n	8002db0 <USBD_DFU_EP0_TxReady+0x40>
    return;
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002e76:	2308      	movs	r3, #8

    hdfu->dev_status[1] = 0U;
 8002e78:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002e7c:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 8002e80:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 8002e84:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8002e88:	f000 fa24 	bl	80032d4 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002e8c:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002e94:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e98:	4906      	ldr	r1, [pc, #24]	; (8002eb4 <USBD_DFU_EP0_TxReady+0x144>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <USBD_DFU_EP0_TxReady+0x148>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e9c:	68ca      	ldr	r2, [r1, #12]
 8002e9e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60cb      	str	r3, [r1, #12]
 8002ea6:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002eaa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002eac:	e7fd      	b.n	8002eaa <USBD_DFU_EP0_TxReady+0x13a>
 8002eae:	bf00      	nop
 8002eb0:	20000050 	.word	0x20000050
 8002eb4:	e000ed00 	.word	0xe000ed00
 8002eb8:	05fa0004 	.word	0x05fa0004

08002ebc <USBD_DFU_DeInit>:
{
 8002ebc:	b538      	push	{r3, r4, r5, lr}
  hdfu->dev_state = DFU_STATE_IDLE;
 8002ebe:	2202      	movs	r2, #2
  hdfu->wblock_num = 0U;
 8002ec0:	2500      	movs	r5, #0
{
 8002ec2:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002ec4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  hdfu->dev_state = DFU_STATE_IDLE;
 8002ec8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002ecc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002ed0:	f883 5410 	strb.w	r5, [r3, #1040]	; 0x410
  hdfu->wblock_num = 0U;
 8002ed4:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8002ed8:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002edc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002ee4:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8002ee8:	f000 ff62 	bl	8003db0 <USBD_static_free>
}
 8002eec:	4628      	mov	r0, r5
    pdev->pClassData = NULL;
 8002eee:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}

08002ef4 <USBD_DFU_Init>:
{
 8002ef4:	b510      	push	{r4, lr}
 8002ef6:	4604      	mov	r4, r0
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8002ef8:	f240 401c 	movw	r0, #1052	; 0x41c
 8002efc:	f000 ff54 	bl	8003da8 <USBD_static_malloc>
 8002f00:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8002f04:	b1a8      	cbz	r0, 8002f32 <USBD_DFU_Init+0x3e>
    hdfu->wblock_num = 0U;
 8002f06:	2300      	movs	r3, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8002f08:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002f0a:	f8c0 3410 	str.w	r3, [r0, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002f0e:	f8a0 2418 	strh.w	r2, [r0, #1048]	; 0x418
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002f12:	f8a0 2414 	strh.w	r2, [r0, #1044]	; 0x414
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002f16:	4908      	ldr	r1, [pc, #32]	; (8002f38 <USBD_DFU_Init+0x44>)
    hdfu->wblock_num = 0U;
 8002f18:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
    hdfu->wlength = 0U;
 8002f1c:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
    hdfu->alt_setting = 0U;
 8002f20:	f8c0 340c 	str.w	r3, [r0, #1036]	; 0x40c
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8002f24:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002f28:	f8c0 1408 	str.w	r1, [r0, #1032]	; 0x408
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4798      	blx	r3
 8002f30:	b100      	cbz	r0, 8002f34 <USBD_DFU_Init+0x40>
      return USBD_FAIL;
 8002f32:	2002      	movs	r0, #2
}
 8002f34:	bd10      	pop	{r4, pc}
 8002f36:	bf00      	nop
 8002f38:	08005000 	.word	0x08005000

08002f3c <USBD_DFU_GetUsrStringDesc>:
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8002f3c:	2906      	cmp	r1, #6
{
 8002f3e:	b508      	push	{r3, lr}
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8002f40:	d807      	bhi.n	8002f52 <USBD_DFU_GetUsrStringDesc+0x16>
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8002f42:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8002f46:	4904      	ldr	r1, [pc, #16]	; (8002f58 <USBD_DFU_GetUsrStringDesc+0x1c>)
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	f000 fcf6 	bl	800393a <USBD_GetString>
 8002f4e:	4802      	ldr	r0, [pc, #8]	; (8002f58 <USBD_DFU_GetUsrStringDesc+0x1c>)
}
 8002f50:	bd08      	pop	{r3, pc}
    return NULL;
 8002f52:	2000      	movs	r0, #0
 8002f54:	e7fc      	b.n	8002f50 <USBD_DFU_GetUsrStringDesc+0x14>
 8002f56:	bf00      	nop
 8002f58:	2000031c 	.word	0x2000031c

08002f5c <USBD_DFU_Setup>:
  uint16_t status_info = 0U;
 8002f5c:	2300      	movs	r3, #0
{
 8002f5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002f62:	780d      	ldrb	r5, [r1, #0]
 8002f64:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f66:	f015 0560 	ands.w	r5, r5, #96	; 0x60
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002f6a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  uint16_t status_info = 0U;
 8002f6e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f72:	f000 8143 	beq.w	80031fc <USBD_DFU_Setup+0x2a0>
 8002f76:	2d20      	cmp	r5, #32
 8002f78:	f040 8156 	bne.w	8003228 <USBD_DFU_Setup+0x2cc>
      switch (req->bRequest)
 8002f7c:	f891 8001 	ldrb.w	r8, [r1, #1]
 8002f80:	f1b8 0f06 	cmp.w	r8, #6
 8002f84:	f200 8150 	bhi.w	8003228 <USBD_DFU_Setup+0x2cc>
 8002f88:	e8df f018 	tbh	[pc, r8, lsl #1]
 8002f8c:	00070111 	.word	0x00070111
 8002f90:	00980037 	.word	0x00980037
 8002f94:	00f400de 	.word	0x00f400de
 8002f98:	00f8      	.short	0x00f8
  if (req->wLength > 0U)
 8002f9a:	88ca      	ldrh	r2, [r1, #6]
 8002f9c:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002fa0:	b1ba      	cbz	r2, 8002fd2 <USBD_DFU_Setup+0x76>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d001      	beq.n	8002faa <USBD_DFU_Setup+0x4e>
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d10f      	bne.n	8002fca <USBD_DFU_Setup+0x6e>
      hdfu->wblock_num = req->wValue;
 8002faa:	884b      	ldrh	r3, [r1, #2]
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002fac:	4630      	mov	r0, r6
      hdfu->wblock_num = req->wValue;
 8002fae:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002fb2:	2303      	movs	r3, #3
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002fb4:	4621      	mov	r1, r4
      hdfu->wlength = req->wLength;
 8002fb6:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002fba:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8002fbe:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002fc2:	f000 fceb 	bl	800399c <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8002fc6:	2500      	movs	r5, #0
 8002fc8:	e013      	b.n	8002ff2 <USBD_DFU_Setup+0x96>
      USBD_CtlError(pdev, req);
 8002fca:	4630      	mov	r0, r6
 8002fcc:	f000 fcaa 	bl	8003924 <USBD_CtlError>
 8002fd0:	e7f9      	b.n	8002fc6 <USBD_DFU_Setup+0x6a>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8002fd2:	2b05      	cmp	r3, #5
 8002fd4:	d001      	beq.n	8002fda <USBD_DFU_Setup+0x7e>
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d1f7      	bne.n	8002fca <USBD_DFU_Setup+0x6e>
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002fda:	f44f 7383 	mov.w	r3, #262	; 0x106
      hdfu->dev_status[1] = 0U;
 8002fde:	2500      	movs	r5, #0
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002fe0:	f8a4 3418 	strh.w	r3, [r4, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8002fe4:	2306      	movs	r3, #6
      hdfu->dev_status[1] = 0U;
 8002fe6:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8002fea:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
      hdfu->dev_status[4] = hdfu->dev_state;
 8002fee:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
}
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	b002      	add	sp, #8
 8002ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (req->wLength > 0U)
 8002ffa:	88ca      	ldrh	r2, [r1, #6]
 8002ffc:	2a00      	cmp	r2, #0
 8002ffe:	d053      	beq.n	80030a8 <USBD_DFU_Setup+0x14c>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8003000:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8003004:	2b02      	cmp	r3, #2
 8003006:	d001      	beq.n	800300c <USBD_DFU_Setup+0xb0>
 8003008:	2b09      	cmp	r3, #9
 800300a:	d147      	bne.n	800309c <USBD_DFU_Setup+0x140>
      hdfu->wblock_num = req->wValue;
 800300c:	884f      	ldrh	r7, [r1, #2]
      hdfu->wlength = req->wLength;
 800300e:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
      hdfu->wblock_num = req->wValue;
 8003012:	f8c4 7400 	str.w	r7, [r4, #1024]	; 0x400
      if (hdfu->wblock_num == 0U)
 8003016:	b9b7      	cbnz	r7, 8003046 <USBD_DFU_Setup+0xea>
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8003018:	f44f 5304 	mov.w	r3, #8448	; 0x2100
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800301c:	2a03      	cmp	r2, #3
 800301e:	bf98      	it	ls
 8003020:	f04f 0809 	movls.w	r8, #9
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8003024:	8023      	strh	r3, [r4, #0]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8003026:	2341      	movs	r3, #65	; 0x41
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8003028:	2203      	movs	r2, #3
 800302a:	4621      	mov	r1, r4
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800302c:	f884 8418 	strb.w	r8, [r4, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8003030:	f884 7411 	strb.w	r7, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8003034:	f8a4 7412 	strh.w	r7, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8003038:	f884 8414 	strb.w	r8, [r4, #1044]	; 0x414
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800303c:	70a3      	strb	r3, [r4, #2]
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800303e:	4630      	mov	r0, r6
 8003040:	f000 fc97 	bl	8003972 <USBD_CtlSendData>
 8003044:	e7bf      	b.n	8002fc6 <USBD_DFU_Setup+0x6a>
      else if (hdfu->wblock_num > 1U)
 8003046:	2f01      	cmp	r7, #1
 8003048:	f04f 0500 	mov.w	r5, #0
 800304c:	d019      	beq.n	8003082 <USBD_DFU_Setup+0x126>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800304e:	2309      	movs	r3, #9
        hdfu->dev_status[1] = 0U;
 8003050:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8003054:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[2] = 0U;
 8003058:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 800305c:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8003060:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8003064:	f8d6 32bc 	ldr.w	r3, [r6, #700]	; 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8003068:	3f02      	subs	r7, #2
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800306a:	4621      	mov	r1, r4
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	eb00 2087 	add.w	r0, r0, r7, lsl #10
 8003072:	4798      	blx	r3
 8003074:	4601      	mov	r1, r0
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8003076:	f8b4 2404 	ldrh.w	r2, [r4, #1028]	; 0x404
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 800307a:	4630      	mov	r0, r6
 800307c:	f000 fc79 	bl	8003972 <USBD_CtlSendData>
 8003080:	e7b7      	b.n	8002ff2 <USBD_DFU_Setup+0x96>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8003082:	230f      	movs	r3, #15
        hdfu->dev_status[1] = 0U;
 8003084:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8003088:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[2] = 0U;
 800308c:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8003090:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
      USBD_CtlError(pdev, req);
 8003094:	4630      	mov	r0, r6
 8003096:	f000 fc45 	bl	8003924 <USBD_CtlError>
 800309a:	e7aa      	b.n	8002ff2 <USBD_DFU_Setup+0x96>
      hdfu->wlength = 0U;
 800309c:	2500      	movs	r5, #0
 800309e:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 80030a2:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
 80030a6:	e7f5      	b.n	8003094 <USBD_DFU_Setup+0x138>
    hdfu->dev_state = DFU_STATE_IDLE;
 80030a8:	2302      	movs	r3, #2
    hdfu->dev_status[1] = 0U;
 80030aa:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_IDLE;
 80030ae:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 80030b2:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
    hdfu->dev_status[4] = hdfu->dev_state;
 80030b6:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 80030ba:	e784      	b.n	8002fc6 <USBD_DFU_Setup+0x6a>
  switch (hdfu->dev_state)
 80030bc:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80030c0:	f504 6582 	add.w	r5, r4, #1040	; 0x410
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d004      	beq.n	80030d2 <USBD_DFU_Setup+0x176>
 80030c8:	2b06      	cmp	r3, #6
 80030ca:	d026      	beq.n	800311a <USBD_DFU_Setup+0x1be>
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80030cc:	2206      	movs	r2, #6
 80030ce:	4629      	mov	r1, r5
 80030d0:	e7b5      	b.n	800303e <USBD_DFU_Setup+0xe2>
      if (hdfu->wlength != 0U)
 80030d2:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 80030d6:	b1d3      	cbz	r3, 800310e <USBD_DFU_Setup+0x1b2>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80030d8:	2304      	movs	r3, #4
        hdfu->dev_status[1] = 0U;
 80030da:	2200      	movs	r2, #0
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80030dc:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80030e0:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80030e4:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 80030e8:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80030ec:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80030f0:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
 80030fa:	b929      	cbnz	r1, 8003108 <USBD_DFU_Setup+0x1ac>
 80030fc:	7822      	ldrb	r2, [r4, #0]
 80030fe:	2a41      	cmp	r2, #65	; 0x41
 8003100:	d102      	bne.n	8003108 <USBD_DFU_Setup+0x1ac>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8003102:	462a      	mov	r2, r5
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8003104:	4798      	blx	r3
 8003106:	e7e1      	b.n	80030cc <USBD_DFU_Setup+0x170>
 8003108:	462a      	mov	r2, r5
 800310a:	2101      	movs	r1, #1
 800310c:	e7fa      	b.n	8003104 <USBD_DFU_Setup+0x1a8>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800310e:	2205      	movs	r2, #5
          hdfu->dev_state = DFU_STATE_IDLE;
 8003110:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8003114:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
 8003118:	e009      	b.n	800312e <USBD_DFU_Setup+0x1d2>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800311a:	f894 3419 	ldrb.w	r3, [r4, #1049]	; 0x419
 800311e:	2b01      	cmp	r3, #1
 8003120:	d10a      	bne.n	8003138 <USBD_DFU_Setup+0x1dc>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8003122:	2207      	movs	r2, #7
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8003124:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8003128:	2300      	movs	r3, #0
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800312a:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
          hdfu->dev_status[2] = 0U;
 800312e:	f8a4 3412 	strh.w	r3, [r4, #1042]	; 0x412
          hdfu->dev_status[4] = hdfu->dev_state;
 8003132:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
 8003136:	e7c9      	b.n	80030cc <USBD_DFU_Setup+0x170>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1c7      	bne.n	80030cc <USBD_DFU_Setup+0x170>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 800313c:	4a4c      	ldr	r2, [pc, #304]	; (8003270 <USBD_DFU_Setup+0x314>)
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800313e:	7d12      	ldrb	r2, [r2, #20]
 8003140:	0752      	lsls	r2, r2, #29
 8003142:	d5c3      	bpl.n	80030cc <USBD_DFU_Setup+0x170>
          hdfu->dev_state = DFU_STATE_IDLE;
 8003144:	2202      	movs	r2, #2
 8003146:	e7e3      	b.n	8003110 <USBD_DFU_Setup+0x1b4>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8003148:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 800314c:	2b0a      	cmp	r3, #10
 800314e:	d108      	bne.n	8003162 <USBD_DFU_Setup+0x206>
    hdfu->dev_state = DFU_STATE_IDLE;
 8003150:	2302      	movs	r3, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8003152:	2500      	movs	r5, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8003154:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8003158:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 800315c:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 8003160:	e747      	b.n	8002ff2 <USBD_DFU_Setup+0x96>
    hdfu->dev_state = DFU_STATE_ERROR;
 8003162:	230a      	movs	r3, #10
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8003164:	220e      	movs	r2, #14
    hdfu->dev_state = DFU_STATE_ERROR;
 8003166:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 800316a:	f8c4 2410 	str.w	r2, [r4, #1040]	; 0x410
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 800316e:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 8003172:	e728      	b.n	8002fc6 <USBD_DFU_Setup+0x6a>
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8003174:	2201      	movs	r2, #1
 8003176:	f504 6183 	add.w	r1, r4, #1048	; 0x418
 800317a:	e760      	b.n	800303e <USBD_DFU_Setup+0xe2>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 800317c:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8003180:	2b09      	cmp	r3, #9
 8003182:	f63f af20 	bhi.w	8002fc6 <USBD_DFU_Setup+0x6a>
 8003186:	f44f 751b 	mov.w	r5, #620	; 0x26c
 800318a:	40dd      	lsrs	r5, r3
 800318c:	43ed      	mvns	r5, r5
 800318e:	f015 0501 	ands.w	r5, r5, #1
 8003192:	f47f af18 	bne.w	8002fc6 <USBD_DFU_Setup+0x6a>
    hdfu->dev_state = DFU_STATE_IDLE;
 8003196:	2302      	movs	r3, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8003198:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 800319c:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 80031a0:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 80031a4:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
    hdfu->wlength = 0U;
 80031a8:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
 80031ac:	e721      	b.n	8002ff2 <USBD_DFU_Setup+0x96>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 80031ae:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 80031b2:	2a09      	cmp	r2, #9
 80031b4:	d811      	bhi.n	80031da <USBD_DFU_Setup+0x27e>
 80031b6:	f44f 731b 	mov.w	r3, #620	; 0x26c
 80031ba:	40d3      	lsrs	r3, r2
 80031bc:	43db      	mvns	r3, r3
 80031be:	f013 0301 	ands.w	r3, r3, #1
 80031c2:	d10a      	bne.n	80031da <USBD_DFU_Setup+0x27e>
    hdfu->dev_state = DFU_STATE_IDLE;
 80031c4:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80031c6:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 80031ca:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 80031ce:	f8a4 2414 	strh.w	r2, [r4, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 80031d2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    hdfu->wlength = 0U;
 80031d6:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 80031da:	4b25      	ldr	r3, [pc, #148]	; (8003270 <USBD_DFU_Setup+0x314>)
 80031dc:	7d5d      	ldrb	r5, [r3, #21]
 80031de:	f015 0510 	ands.w	r5, r5, #16
 80031e2:	d007      	beq.n	80031f4 <USBD_DFU_Setup+0x298>
    USBD_Stop(pdev);
 80031e4:	4630      	mov	r0, r6
 80031e6:	f000 f875 	bl	80032d4 <USBD_Stop>
    USBD_Start(pdev);
 80031ea:	4630      	mov	r0, r6
 80031ec:	f000 f86d 	bl	80032ca <USBD_Start>
  uint8_t ret = USBD_OK;
 80031f0:	4645      	mov	r5, r8
 80031f2:	e6fe      	b.n	8002ff2 <USBD_DFU_Setup+0x96>
    USBD_Delay((uint32_t)req->wValue);
 80031f4:	8848      	ldrh	r0, [r1, #2]
 80031f6:	f7fd fa65 	bl	80006c4 <HAL_Delay>
 80031fa:	e6fa      	b.n	8002ff2 <USBD_DFU_Setup+0x96>
      switch (req->bRequest)
 80031fc:	784f      	ldrb	r7, [r1, #1]
 80031fe:	2f0b      	cmp	r7, #11
 8003200:	d812      	bhi.n	8003228 <USBD_DFU_Setup+0x2cc>
 8003202:	e8df f007 	tbb	[pc, r7]
 8003206:	1106      	.short	0x1106
 8003208:	11111111 	.word	0x11111111
 800320c:	11111116 	.word	0x11111116
 8003210:	2b23      	.short	0x2b23
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003212:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003216:	2b03      	cmp	r3, #3
 8003218:	d106      	bne.n	8003228 <USBD_DFU_Setup+0x2cc>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800321a:	2202      	movs	r2, #2
 800321c:	f10d 0106 	add.w	r1, sp, #6
 8003220:	f000 fba7 	bl	8003972 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003224:	463d      	mov	r5, r7
 8003226:	e6e4      	b.n	8002ff2 <USBD_DFU_Setup+0x96>
            USBD_CtlError(pdev, req);
 8003228:	4630      	mov	r0, r6
 800322a:	f000 fb7b 	bl	8003924 <USBD_CtlError>
            ret = USBD_FAIL;
 800322e:	2502      	movs	r5, #2
 8003230:	e6df      	b.n	8002ff2 <USBD_DFU_Setup+0x96>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8003232:	884b      	ldrh	r3, [r1, #2]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	2b21      	cmp	r3, #33	; 0x21
 8003238:	d105      	bne.n	8003246 <USBD_DFU_Setup+0x2ea>
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800323a:	88ca      	ldrh	r2, [r1, #6]
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800323c:	490d      	ldr	r1, [pc, #52]	; (8003274 <USBD_DFU_Setup+0x318>)
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800323e:	2a09      	cmp	r2, #9
 8003240:	bf28      	it	cs
 8003242:	2209      	movcs	r2, #9
 8003244:	e719      	b.n	800307a <USBD_DFU_Setup+0x11e>
  uint16_t len = 0U;
 8003246:	2200      	movs	r2, #0
  uint8_t *pbuf = 0U;
 8003248:	4611      	mov	r1, r2
          USBD_CtlSendData(pdev, pbuf, len);
 800324a:	e716      	b.n	800307a <USBD_DFU_Setup+0x11e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800324c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003250:	2b03      	cmp	r3, #3
 8003252:	d1e9      	bne.n	8003228 <USBD_DFU_Setup+0x2cc>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8003254:	2201      	movs	r2, #1
 8003256:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 800325a:	e70e      	b.n	800307a <USBD_DFU_Setup+0x11e>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800325c:	788d      	ldrb	r5, [r1, #2]
 800325e:	2d00      	cmp	r5, #0
 8003260:	d1e2      	bne.n	8003228 <USBD_DFU_Setup+0x2cc>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003262:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003266:	2b03      	cmp	r3, #3
 8003268:	d1de      	bne.n	8003228 <USBD_DFU_Setup+0x2cc>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800326a:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
 800326e:	e6c0      	b.n	8002ff2 <USBD_DFU_Setup+0x96>
 8003270:	20000050 	.word	0x20000050
 8003274:	20000062 	.word	0x20000062

08003278 <USBD_DFU_IsoOutIncomplete>:
 8003278:	2000      	movs	r0, #0
 800327a:	4770      	bx	lr

0800327c <USBD_DFU_DataOut>:
 800327c:	2000      	movs	r0, #0
 800327e:	4770      	bx	lr

08003280 <USBD_DFU_IsoINIncomplete>:
 8003280:	2000      	movs	r0, #0
 8003282:	4770      	bx	lr

08003284 <USBD_DFU_SOF>:
 8003284:	2000      	movs	r0, #0
 8003286:	4770      	bx	lr

08003288 <USBD_DFU_RegisterMedia>:
  if (fops != NULL)
 8003288:	b109      	cbz	r1, 800328e <USBD_DFU_RegisterMedia+0x6>
    pdev->pUserData = fops;
 800328a:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
}
 800328e:	2000      	movs	r0, #0
 8003290:	4770      	bx	lr

08003292 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003292:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003294:	b180      	cbz	r0, 80032b8 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003296:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800329a:	b113      	cbz	r3, 80032a2 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800329c:	2300      	movs	r3, #0
 800329e:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80032a2:	b109      	cbz	r1, 80032a8 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80032a4:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80032a8:	2301      	movs	r3, #1
  pdev->id = id;
 80032aa:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80032ac:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80032b0:	f000 fccc 	bl	8003c4c <USBD_LL_Init>

  return USBD_OK;
 80032b4:	2000      	movs	r0, #0
}
 80032b6:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80032b8:	2002      	movs	r0, #2
 80032ba:	e7fc      	b.n	80032b6 <USBD_Init+0x24>

080032bc <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80032bc:	b119      	cbz	r1, 80032c6 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80032be:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80032c2:	2000      	movs	r0, #0
 80032c4:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80032c6:	2002      	movs	r0, #2
  }

  return status;
}
 80032c8:	4770      	bx	lr

080032ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80032ca:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80032cc:	f000 fce8 	bl	8003ca0 <USBD_LL_Start>

  return USBD_OK;
}
 80032d0:	2000      	movs	r0, #0
 80032d2:	bd08      	pop	{r3, pc}

080032d4 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80032d4:	b510      	push	{r4, lr}
 80032d6:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80032d8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80032dc:	7901      	ldrb	r1, [r0, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 80032e2:	4620      	mov	r0, r4
 80032e4:	f000 fcea 	bl	8003cbc <USBD_LL_Stop>

  return USBD_OK;
}
 80032e8:	2000      	movs	r0, #0
 80032ea:	bd10      	pop	{r4, pc}

080032ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80032ec:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80032ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80032f2:	b90b      	cbnz	r3, 80032f8 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80032f4:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80032f6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4798      	blx	r3
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d0fa      	beq.n	80032f6 <USBD_SetClassConfig+0xa>
 8003300:	e7f8      	b.n	80032f4 <USBD_SetClassConfig+0x8>

08003302 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003302:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003304:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4798      	blx	r3

  return USBD_OK;
}
 800330c:	2000      	movs	r0, #0
 800330e:	bd08      	pop	{r3, pc}

08003310 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003310:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003312:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8003316:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003318:	4628      	mov	r0, r5
 800331a:	f000 faef 	bl	80038fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800331e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003320:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8003324:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003328:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800332c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003330:	f001 031f 	and.w	r3, r1, #31
 8003334:	2b01      	cmp	r3, #1
 8003336:	d008      	beq.n	800334a <USBD_LL_SetupStage+0x3a>
 8003338:	2b02      	cmp	r3, #2
 800333a:	d00b      	beq.n	8003354 <USBD_LL_SetupStage+0x44>
 800333c:	b97b      	cbnz	r3, 800335e <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800333e:	4629      	mov	r1, r5
 8003340:	4620      	mov	r0, r4
 8003342:	f000 f8fb 	bl	800353c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8003346:	2000      	movs	r0, #0
 8003348:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800334a:	4629      	mov	r1, r5
 800334c:	4620      	mov	r0, r4
 800334e:	f000 fa27 	bl	80037a0 <USBD_StdItfReq>
      break;
 8003352:	e7f8      	b.n	8003346 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8003354:	4629      	mov	r1, r5
 8003356:	4620      	mov	r0, r4
 8003358:	f000 fa46 	bl	80037e8 <USBD_StdEPReq>
      break;
 800335c:	e7f3      	b.n	8003346 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800335e:	4620      	mov	r0, r4
 8003360:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003364:	f000 fcc8 	bl	8003cf8 <USBD_LL_StallEP>
      break;
 8003368:	e7ed      	b.n	8003346 <USBD_LL_SetupStage+0x36>

0800336a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800336a:	b570      	push	{r4, r5, r6, lr}
 800336c:	4604      	mov	r4, r0
 800336e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003370:	460d      	mov	r5, r1
 8003372:	bb39      	cbnz	r1, 80033c4 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003374:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003378:	2b03      	cmp	r3, #3
 800337a:	d11c      	bne.n	80033b6 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 800337c:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 8003380:	4291      	cmp	r1, r2
 8003382:	d90b      	bls.n	800339c <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8003384:	1a89      	subs	r1, r1, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003386:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8003388:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800338c:	bf8c      	ite	hi
 800338e:	b28a      	uxthhi	r2, r1
 8003390:	b292      	uxthls	r2, r2
 8003392:	4631      	mov	r1, r6
 8003394:	f000 fb0f 	bl	80039b6 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8003398:	4628      	mov	r0, r5
 800339a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800339c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	b123      	cbz	r3, 80033ae <USBD_LL_DataOutStage+0x44>
 80033a4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80033a8:	2a03      	cmp	r2, #3
 80033aa:	d100      	bne.n	80033ae <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 80033ac:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80033ae:	4620      	mov	r0, r4
 80033b0:	f000 fb09 	bl	80039c6 <USBD_CtlSendStatus>
 80033b4:	e7f0      	b.n	8003398 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80033b6:	2b05      	cmp	r3, #5
 80033b8:	d1ee      	bne.n	8003398 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 80033ba:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80033be:	f000 fc9b 	bl	8003cf8 <USBD_LL_StallEP>
 80033c2:	e7e9      	b.n	8003398 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 80033c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	b133      	cbz	r3, 80033da <USBD_LL_DataOutStage+0x70>
 80033cc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80033d0:	2a03      	cmp	r2, #3
 80033d2:	d102      	bne.n	80033da <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80033d4:	4798      	blx	r3
  return USBD_OK;
 80033d6:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 80033d8:	e7de      	b.n	8003398 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 80033da:	2502      	movs	r5, #2
 80033dc:	e7dc      	b.n	8003398 <USBD_LL_DataOutStage+0x2e>

080033de <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80033de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e0:	4604      	mov	r4, r0
 80033e2:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80033e4:	460d      	mov	r5, r1
 80033e6:	2900      	cmp	r1, #0
 80033e8:	d147      	bne.n	800347a <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80033ea:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d13c      	bne.n	800346c <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 80033f2:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 80033f6:	429e      	cmp	r6, r3
 80033f8:	d914      	bls.n	8003424 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80033fa:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80033fc:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 80033fe:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003400:	b29a      	uxth	r2, r3
 8003402:	f000 fac3 	bl	800398c <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003406:	462b      	mov	r3, r5
 8003408:	462a      	mov	r2, r5
 800340a:	4629      	mov	r1, r5
 800340c:	4620      	mov	r0, r4
 800340e:	f000 fcbd 	bl	8003d8c <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003412:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003416:	2b01      	cmp	r3, #1
 8003418:	d102      	bne.n	8003420 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8003420:	4628      	mov	r0, r5
 8003422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003424:	69c2      	ldr	r2, [r0, #28]
 8003426:	fbb2 f6f3 	udiv	r6, r2, r3
 800342a:	fb03 2616 	mls	r6, r3, r6, r2
 800342e:	b95e      	cbnz	r6, 8003448 <USBD_LL_DataInStage+0x6a>
 8003430:	4293      	cmp	r3, r2
 8003432:	d809      	bhi.n	8003448 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8003434:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8003438:	429a      	cmp	r2, r3
 800343a:	d205      	bcs.n	8003448 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800343c:	460a      	mov	r2, r1
 800343e:	f000 faa5 	bl	800398c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003442:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8003446:	e7de      	b.n	8003406 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003448:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	b12b      	cbz	r3, 800345c <USBD_LL_DataInStage+0x7e>
 8003450:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003454:	2a03      	cmp	r2, #3
 8003456:	d101      	bne.n	800345c <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8003458:	4620      	mov	r0, r4
 800345a:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	4620      	mov	r0, r4
 8003460:	f000 fc4a 	bl	8003cf8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003464:	4620      	mov	r0, r4
 8003466:	f000 fab9 	bl	80039dc <USBD_CtlReceiveStatus>
 800346a:	e7d2      	b.n	8003412 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800346c:	f033 0304 	bics.w	r3, r3, #4
 8003470:	d1cf      	bne.n	8003412 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003472:	2180      	movs	r1, #128	; 0x80
 8003474:	f000 fc40 	bl	8003cf8 <USBD_LL_StallEP>
 8003478:	e7cb      	b.n	8003412 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 800347a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	b133      	cbz	r3, 8003490 <USBD_LL_DataInStage+0xb2>
 8003482:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003486:	2a03      	cmp	r2, #3
 8003488:	d102      	bne.n	8003490 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 800348a:	4798      	blx	r3
  return USBD_OK;
 800348c:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 800348e:	e7c7      	b.n	8003420 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8003490:	2502      	movs	r5, #2
 8003492:	e7c5      	b.n	8003420 <USBD_LL_DataInStage+0x42>

08003494 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003494:	2200      	movs	r2, #0
{
 8003496:	b570      	push	{r4, r5, r6, lr}
 8003498:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800349a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800349c:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800349e:	4611      	mov	r1, r2
 80034a0:	2340      	movs	r3, #64	; 0x40
 80034a2:	f000 fc19 	bl	8003cd8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80034a6:	4633      	mov	r3, r6
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	2200      	movs	r2, #0
 80034ac:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80034ae:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80034b2:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80034b6:	f000 fc0f 	bl	8003cd8 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80034ba:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80034bc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80034c0:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80034c2:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80034c4:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80034c8:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80034cc:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80034ce:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80034d2:	b123      	cbz	r3, 80034de <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80034d4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80034d8:	4620      	mov	r0, r4
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4798      	blx	r3
  }

  return USBD_OK;
}
 80034de:	2000      	movs	r0, #0
 80034e0:	bd70      	pop	{r4, r5, r6, pc}

080034e2 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80034e2:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80034e4:	2000      	movs	r0, #0
 80034e6:	4770      	bx	lr

080034e8 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80034e8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80034ec:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80034f0:	2304      	movs	r3, #4
 80034f2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80034f6:	2000      	movs	r0, #0
 80034f8:	4770      	bx	lr

080034fa <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80034fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80034fe:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8003500:	bf04      	itt	eq
 8003502:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8003506:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800350a:	2000      	movs	r0, #0
 800350c:	4770      	bx	lr

0800350e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800350e:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003510:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003514:	2a03      	cmp	r2, #3
 8003516:	d104      	bne.n	8003522 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8003518:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	b103      	cbz	r3, 8003522 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003520:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003522:	2000      	movs	r0, #0
 8003524:	bd08      	pop	{r3, pc}

08003526 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8003526:	b510      	push	{r4, lr}
 8003528:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	f000 fbe4 	bl	8003cf8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003530:	4620      	mov	r0, r4
}
 8003532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003536:	2100      	movs	r1, #0
 8003538:	f000 bbde 	b.w	8003cf8 <USBD_LL_StallEP>

0800353c <USBD_StdDevReq>:
{
 800353c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800353e:	780b      	ldrb	r3, [r1, #0]
 8003540:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003542:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003546:	2b20      	cmp	r3, #32
{
 8003548:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800354a:	d012      	beq.n	8003572 <USBD_StdDevReq+0x36>
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d010      	beq.n	8003572 <USBD_StdDevReq+0x36>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d151      	bne.n	80035f8 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8003554:	784b      	ldrb	r3, [r1, #1]
 8003556:	2b09      	cmp	r3, #9
 8003558:	d84e      	bhi.n	80035f8 <USBD_StdDevReq+0xbc>
 800355a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800355e:	00f7      	.short	0x00f7
 8003560:	004d0113 	.word	0x004d0113
 8003564:	004d010c 	.word	0x004d010c
 8003568:	00130090 	.word	0x00130090
 800356c:	00df004d 	.word	0x00df004d
 8003570:	00ac      	.short	0x00ac
      pdev->pClass->Setup(pdev, req);
 8003572:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003576:	4629      	mov	r1, r5
 8003578:	4620      	mov	r0, r4
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4798      	blx	r3
}
 800357e:	2000      	movs	r0, #0
 8003580:	b003      	add	sp, #12
 8003582:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8003584:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8003586:	8849      	ldrh	r1, [r1, #2]
  uint16_t len = 0U;
 8003588:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800358c:	0a0b      	lsrs	r3, r1, #8
 800358e:	3b01      	subs	r3, #1
 8003590:	2b06      	cmp	r3, #6
 8003592:	d831      	bhi.n	80035f8 <USBD_StdDevReq+0xbc>
 8003594:	e8df f003 	tbb	[pc, r3]
 8003598:	30231604 	.word	0x30231604
 800359c:	5130      	.short	0x5130
 800359e:	5b          	.byte	0x5b
 800359f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80035a0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80035a4:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80035a6:	7c20      	ldrb	r0, [r4, #16]
 80035a8:	f10d 0106 	add.w	r1, sp, #6
 80035ac:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80035ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80035b2:	2a00      	cmp	r2, #0
 80035b4:	d05f      	beq.n	8003676 <USBD_StdDevReq+0x13a>
 80035b6:	88eb      	ldrh	r3, [r5, #6]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d153      	bne.n	8003664 <USBD_StdDevReq+0x128>
        USBD_CtlSendStatus(pdev);
 80035bc:	4620      	mov	r0, r4
 80035be:	f000 fa02 	bl	80039c6 <USBD_CtlSendStatus>
 80035c2:	e7dc      	b.n	800357e <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80035c4:	7c02      	ldrb	r2, [r0, #16]
 80035c6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80035ca:	b932      	cbnz	r2, 80035da <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80035ce:	f10d 0006 	add.w	r0, sp, #6
 80035d2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80035d4:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80035d6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80035d8:	e7e9      	b.n	80035ae <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	e7f7      	b.n	80035ce <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 80035de:	b2c9      	uxtb	r1, r1
 80035e0:	2905      	cmp	r1, #5
 80035e2:	d821      	bhi.n	8003628 <USBD_StdDevReq+0xec>
 80035e4:	e8df f001 	tbb	[pc, r1]
 80035e8:	14100c03 	.word	0x14100c03
 80035ec:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80035ee:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80035f2:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1d6      	bne.n	80035a6 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80035f8:	4620      	mov	r0, r4
 80035fa:	f7ff ff94 	bl	8003526 <USBD_CtlError.constprop.0>
        break;
 80035fe:	e7be      	b.n	800357e <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003600:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	e7f5      	b.n	80035f4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003608:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	e7f1      	b.n	80035f4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003610:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	e7ed      	b.n	80035f4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003618:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	e7e9      	b.n	80035f4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003620:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	e7e5      	b.n	80035f4 <USBD_StdDevReq+0xb8>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8003628:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0e2      	beq.n	80035f8 <USBD_StdDevReq+0xbc>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8003632:	f10d 0206 	add.w	r2, sp, #6
 8003636:	4798      	blx	r3
  if (err != 0U)
 8003638:	e7b9      	b.n	80035ae <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800363a:	7c03      	ldrb	r3, [r0, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1db      	bne.n	80035f8 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003640:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003644:	f10d 0006 	add.w	r0, sp, #6
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	4798      	blx	r3
  if (err != 0U)
 800364c:	e7af      	b.n	80035ae <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800364e:	7c03      	ldrb	r3, [r0, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1d1      	bne.n	80035f8 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003654:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003658:	f10d 0006 	add.w	r0, sp, #6
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003660:	2307      	movs	r3, #7
 8003662:	e7b8      	b.n	80035d6 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8003664:	429a      	cmp	r2, r3
 8003666:	bf28      	it	cs
 8003668:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800366a:	4601      	mov	r1, r0
 800366c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800366e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003672:	f000 f97e 	bl	8003972 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003676:	88eb      	ldrh	r3, [r5, #6]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d180      	bne.n	800357e <USBD_StdDevReq+0x42>
 800367c:	e79e      	b.n	80035bc <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800367e:	888b      	ldrh	r3, [r1, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1b9      	bne.n	80035f8 <USBD_StdDevReq+0xbc>
 8003684:	88cb      	ldrh	r3, [r1, #6]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1b6      	bne.n	80035f8 <USBD_StdDevReq+0xbc>
 800368a:	884d      	ldrh	r5, [r1, #2]
 800368c:	2d7f      	cmp	r5, #127	; 0x7f
 800368e:	d8b3      	bhi.n	80035f8 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003690:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003694:	2b03      	cmp	r3, #3
 8003696:	d0af      	beq.n	80035f8 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003698:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800369a:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800369e:	f000 fb59 	bl	8003d54 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80036a2:	4620      	mov	r0, r4
 80036a4:	f000 f98f 	bl	80039c6 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80036a8:	b11d      	cbz	r5, 80036b2 <USBD_StdDevReq+0x176>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80036aa:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80036ac:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80036b0:	e765      	b.n	800357e <USBD_StdDevReq+0x42>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e7fa      	b.n	80036ac <USBD_StdDevReq+0x170>
  cfgidx = (uint8_t)(req->wValue);
 80036b6:	7889      	ldrb	r1, [r1, #2]
 80036b8:	4d38      	ldr	r5, [pc, #224]	; (800379c <USBD_StdDevReq+0x260>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80036ba:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80036bc:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80036be:	d89b      	bhi.n	80035f8 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80036c0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d008      	beq.n	80036da <USBD_StdDevReq+0x19e>
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d015      	beq.n	80036f8 <USBD_StdDevReq+0x1bc>
        USBD_CtlError(pdev, req);
 80036cc:	f7ff ff2b 	bl	8003526 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 80036d0:	4620      	mov	r0, r4
 80036d2:	7829      	ldrb	r1, [r5, #0]
 80036d4:	f7ff fe15 	bl	8003302 <USBD_ClrClassConfig>
        break;
 80036d8:	e751      	b.n	800357e <USBD_StdDevReq+0x42>
        if (cfgidx)
 80036da:	2900      	cmp	r1, #0
 80036dc:	f43f af6e 	beq.w	80035bc <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 80036e0:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80036e2:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80036e4:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80036e6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80036ea:	4620      	mov	r0, r4
 80036ec:	f7ff fdfe 	bl	80032ec <USBD_SetClassConfig>
 80036f0:	2802      	cmp	r0, #2
 80036f2:	f47f af63 	bne.w	80035bc <USBD_StdDevReq+0x80>
 80036f6:	e77f      	b.n	80035f8 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 80036f8:	b931      	cbnz	r1, 8003708 <USBD_StdDevReq+0x1cc>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80036fa:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80036fc:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80036fe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8003702:	f7ff fdfe 	bl	8003302 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8003706:	e759      	b.n	80035bc <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 8003708:	6841      	ldr	r1, [r0, #4]
 800370a:	2901      	cmp	r1, #1
 800370c:	f43f af56 	beq.w	80035bc <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003710:	b2c9      	uxtb	r1, r1
 8003712:	f7ff fdf6 	bl	8003302 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003716:	7829      	ldrb	r1, [r5, #0]
 8003718:	6061      	str	r1, [r4, #4]
 800371a:	e7e6      	b.n	80036ea <USBD_StdDevReq+0x1ae>
  if (req->wLength != 1U)
 800371c:	88ca      	ldrh	r2, [r1, #6]
 800371e:	2a01      	cmp	r2, #1
 8003720:	f47f af6a 	bne.w	80035f8 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8003724:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003728:	2b02      	cmp	r3, #2
 800372a:	d80a      	bhi.n	8003742 <USBD_StdDevReq+0x206>
 800372c:	2b00      	cmp	r3, #0
 800372e:	f43f af63 	beq.w	80035f8 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8003732:	4601      	mov	r1, r0
 8003734:	2300      	movs	r3, #0
 8003736:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800373a:	4620      	mov	r0, r4
 800373c:	f000 f919 	bl	8003972 <USBD_CtlSendData>
      break;
 8003740:	e71d      	b.n	800357e <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8003742:	2b03      	cmp	r3, #3
 8003744:	f47f af58 	bne.w	80035f8 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003748:	1d01      	adds	r1, r0, #4
 800374a:	e7f6      	b.n	800373a <USBD_StdDevReq+0x1fe>
  switch (pdev->dev_state)
 800374c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003750:	3b01      	subs	r3, #1
 8003752:	2b02      	cmp	r3, #2
 8003754:	f63f af50 	bhi.w	80035f8 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8003758:	88cb      	ldrh	r3, [r1, #6]
 800375a:	2b02      	cmp	r3, #2
 800375c:	f47f af4c 	bne.w	80035f8 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003760:	2301      	movs	r3, #1
 8003762:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003764:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003768:	b10b      	cbz	r3, 800376e <USBD_StdDevReq+0x232>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800376a:	2303      	movs	r3, #3
 800376c:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800376e:	2202      	movs	r2, #2
 8003770:	f104 010c 	add.w	r1, r4, #12
 8003774:	e7e1      	b.n	800373a <USBD_StdDevReq+0x1fe>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003776:	884b      	ldrh	r3, [r1, #2]
 8003778:	2b01      	cmp	r3, #1
 800377a:	f47f af00 	bne.w	800357e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800377e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8003782:	e71b      	b.n	80035bc <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8003784:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003788:	3b01      	subs	r3, #1
 800378a:	2b02      	cmp	r3, #2
 800378c:	f63f af34 	bhi.w	80035f8 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003790:	884b      	ldrh	r3, [r1, #2]
 8003792:	2b01      	cmp	r3, #1
 8003794:	f47f aef3 	bne.w	800357e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	e7f0      	b.n	800377e <USBD_StdDevReq+0x242>
 800379c:	2000041b 	.word	0x2000041b

080037a0 <USBD_StdItfReq>:
{
 80037a0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037a2:	780b      	ldrb	r3, [r1, #0]
{
 80037a4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037a6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80037aa:	2a40      	cmp	r2, #64	; 0x40
{
 80037ac:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037ae:	d001      	beq.n	80037b4 <USBD_StdItfReq+0x14>
 80037b0:	065b      	lsls	r3, r3, #25
 80037b2:	d415      	bmi.n	80037e0 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 80037b4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80037b8:	3b01      	subs	r3, #1
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d810      	bhi.n	80037e0 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80037be:	792b      	ldrb	r3, [r5, #4]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d80d      	bhi.n	80037e0 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80037c4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80037c8:	4629      	mov	r1, r5
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4620      	mov	r0, r4
 80037ce:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80037d0:	88eb      	ldrh	r3, [r5, #6]
 80037d2:	b91b      	cbnz	r3, 80037dc <USBD_StdItfReq+0x3c>
 80037d4:	b910      	cbnz	r0, 80037dc <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 80037d6:	4620      	mov	r0, r4
 80037d8:	f000 f8f5 	bl	80039c6 <USBD_CtlSendStatus>
}
 80037dc:	2000      	movs	r0, #0
 80037de:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7ff fea0 	bl	8003526 <USBD_CtlError.constprop.0>
          break;
 80037e6:	e7f9      	b.n	80037dc <USBD_StdItfReq+0x3c>

080037e8 <USBD_StdEPReq>:
{
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	780a      	ldrb	r2, [r1, #0]
 80037ec:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037ee:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80037f2:	2a20      	cmp	r2, #32
{
 80037f4:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037f6:	d027      	beq.n	8003848 <USBD_StdEPReq+0x60>
 80037f8:	2a40      	cmp	r2, #64	; 0x40
 80037fa:	d025      	beq.n	8003848 <USBD_StdEPReq+0x60>
 80037fc:	bb92      	cbnz	r2, 8003864 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 80037fe:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003800:	888d      	ldrh	r5, [r1, #4]
 8003802:	2a01      	cmp	r2, #1
 8003804:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 8003806:	d03d      	beq.n	8003884 <USBD_StdEPReq+0x9c>
 8003808:	2a03      	cmp	r2, #3
 800380a:	d025      	beq.n	8003858 <USBD_StdEPReq+0x70>
 800380c:	bb52      	cbnz	r2, 8003864 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 800380e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003812:	2b02      	cmp	r3, #2
 8003814:	d04d      	beq.n	80038b2 <USBD_StdEPReq+0xca>
 8003816:	2b03      	cmp	r3, #3
 8003818:	d124      	bne.n	8003864 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 800381a:	2214      	movs	r2, #20
 800381c:	f001 030f 	and.w	r3, r1, #15
 8003820:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003824:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8003828:	d054      	beq.n	80038d4 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	b1d3      	cbz	r3, 8003864 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800382e:	2314      	movs	r3, #20
 8003830:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003834:	fb05 3303 	mla	r3, r5, r3, r3
 8003838:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800383a:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800383e:	d155      	bne.n	80038ec <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8003840:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003842:	2202      	movs	r2, #2
 8003844:	4629      	mov	r1, r5
 8003846:	e041      	b.n	80038cc <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 8003848:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 800384c:	4619      	mov	r1, r3
 800384e:	4620      	mov	r0, r4
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	4790      	blx	r2
}
 8003854:	2000      	movs	r0, #0
 8003856:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8003858:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800385c:	2a02      	cmp	r2, #2
 800385e:	d01f      	beq.n	80038a0 <USBD_StdEPReq+0xb8>
 8003860:	2a03      	cmp	r2, #3
 8003862:	d003      	beq.n	800386c <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8003864:	4620      	mov	r0, r4
 8003866:	f7ff fe5e 	bl	8003526 <USBD_CtlError.constprop.0>
              break;
 800386a:	e7f3      	b.n	8003854 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800386c:	885a      	ldrh	r2, [r3, #2]
 800386e:	b92a      	cbnz	r2, 800387c <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8003870:	064a      	lsls	r2, r1, #25
 8003872:	d003      	beq.n	800387c <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003874:	88db      	ldrh	r3, [r3, #6]
 8003876:	b90b      	cbnz	r3, 800387c <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003878:	f000 fa3e 	bl	8003cf8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800387c:	4620      	mov	r0, r4
 800387e:	f000 f8a2 	bl	80039c6 <USBD_CtlSendStatus>
              break;
 8003882:	e7e7      	b.n	8003854 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8003884:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003888:	2a02      	cmp	r2, #2
 800388a:	d009      	beq.n	80038a0 <USBD_StdEPReq+0xb8>
 800388c:	2a03      	cmp	r2, #3
 800388e:	d1e9      	bne.n	8003864 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003890:	885b      	ldrh	r3, [r3, #2]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1de      	bne.n	8003854 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003896:	064d      	lsls	r5, r1, #25
 8003898:	d0f0      	beq.n	800387c <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800389a:	f000 fa3b 	bl	8003d14 <USBD_LL_ClearStallEP>
 800389e:	e7ed      	b.n	800387c <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80038a0:	064b      	lsls	r3, r1, #25
 80038a2:	d0df      	beq.n	8003864 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 80038a4:	f000 fa28 	bl	8003cf8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80038a8:	2180      	movs	r1, #128	; 0x80
 80038aa:	4620      	mov	r0, r4
 80038ac:	f000 fa24 	bl	8003cf8 <USBD_LL_StallEP>
 80038b0:	e7d0      	b.n	8003854 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80038b2:	064a      	lsls	r2, r1, #25
 80038b4:	d1d6      	bne.n	8003864 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80038b6:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 80038b8:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80038bc:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80038c0:	bf4c      	ite	mi
 80038c2:	f100 0114 	addmi.w	r1, r0, #20
 80038c6:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80038ca:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80038cc:	4620      	mov	r0, r4
 80038ce:	f000 f850 	bl	8003972 <USBD_CtlSendData>
              break;
 80038d2:	e7bf      	b.n	8003854 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80038d4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0c3      	beq.n	8003864 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80038dc:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 80038de:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80038e2:	fb03 0505 	mla	r5, r3, r5, r0
 80038e6:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80038ea:	e7a6      	b.n	800383a <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80038ec:	4620      	mov	r0, r4
 80038ee:	f000 fa1f 	bl	8003d30 <USBD_LL_IsStallEP>
 80038f2:	b108      	cbz	r0, 80038f8 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e7a3      	b.n	8003840 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 80038f8:	6028      	str	r0, [r5, #0]
 80038fa:	e7a2      	b.n	8003842 <USBD_StdEPReq+0x5a>

080038fc <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80038fc:	780b      	ldrb	r3, [r1, #0]
 80038fe:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003900:	784b      	ldrb	r3, [r1, #1]
 8003902:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003904:	78ca      	ldrb	r2, [r1, #3]
 8003906:	788b      	ldrb	r3, [r1, #2]
 8003908:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800390c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800390e:	794a      	ldrb	r2, [r1, #5]
 8003910:	790b      	ldrb	r3, [r1, #4]
 8003912:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003916:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003918:	79ca      	ldrb	r2, [r1, #7]
 800391a:	798b      	ldrb	r3, [r1, #6]
 800391c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003920:	80c3      	strh	r3, [r0, #6]
}
 8003922:	4770      	bx	lr

08003924 <USBD_CtlError>:
{
 8003924:	b510      	push	{r4, lr}
 8003926:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	f000 f9e5 	bl	8003cf8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800392e:	4620      	mov	r0, r4
}
 8003930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003934:	2100      	movs	r1, #0
 8003936:	f000 b9df 	b.w	8003cf8 <USBD_LL_StallEP>

0800393a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800393a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800393c:	b188      	cbz	r0, 8003962 <USBD_GetString+0x28>
 800393e:	2500      	movs	r5, #0
 8003940:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003942:	462b      	mov	r3, r5
 8003944:	3501      	adds	r5, #1
 8003946:	5d44      	ldrb	r4, [r0, r5]
 8003948:	2c00      	cmp	r4, #0
 800394a:	d1fa      	bne.n	8003942 <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800394c:	b2db      	uxtb	r3, r3
 800394e:	3301      	adds	r3, #1
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003954:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003956:	2303      	movs	r3, #3
 8003958:	704b      	strb	r3, [r1, #1]
 800395a:	2302      	movs	r3, #2
    while (*desc != '\0')
 800395c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003960:	b905      	cbnz	r5, 8003964 <USBD_GetString+0x2a>
}
 8003962:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	54cd      	strb	r5, [r1, r3]
 8003968:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800396a:	3302      	adds	r3, #2
 800396c:	b2db      	uxtb	r3, r3
 800396e:	548c      	strb	r4, [r1, r2]
 8003970:	e7f4      	b.n	800395c <USBD_GetString+0x22>

08003972 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003972:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003974:	2202      	movs	r2, #2
{
 8003976:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8003978:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800397c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003980:	460a      	mov	r2, r1
 8003982:	2100      	movs	r1, #0
 8003984:	f000 f9f4 	bl	8003d70 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003988:	2000      	movs	r0, #0
 800398a:	bd10      	pop	{r4, pc}

0800398c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800398c:	b508      	push	{r3, lr}
 800398e:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003990:	460a      	mov	r2, r1
 8003992:	2100      	movs	r1, #0
 8003994:	f000 f9ec 	bl	8003d70 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003998:	2000      	movs	r0, #0
 800399a:	bd08      	pop	{r3, pc}

0800399c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800399c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800399e:	2203      	movs	r2, #3
{
 80039a0:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 80039a2:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80039a6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80039aa:	460a      	mov	r2, r1
 80039ac:	2100      	movs	r1, #0
 80039ae:	f000 f9ed 	bl	8003d8c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80039b2:	2000      	movs	r0, #0
 80039b4:	bd10      	pop	{r4, pc}

080039b6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80039b6:	b508      	push	{r3, lr}
 80039b8:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80039ba:	460a      	mov	r2, r1
 80039bc:	2100      	movs	r1, #0
 80039be:	f000 f9e5 	bl	8003d8c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80039c2:	2000      	movs	r0, #0
 80039c4:	bd08      	pop	{r3, pc}

080039c6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80039c6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80039c8:	2304      	movs	r3, #4
 80039ca:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80039ce:	2300      	movs	r3, #0
 80039d0:	461a      	mov	r2, r3
 80039d2:	4619      	mov	r1, r3
 80039d4:	f000 f9cc 	bl	8003d70 <USBD_LL_Transmit>

  return USBD_OK;
}
 80039d8:	2000      	movs	r0, #0
 80039da:	bd08      	pop	{r3, pc}

080039dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80039dc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80039de:	2305      	movs	r3, #5
 80039e0:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80039e4:	2300      	movs	r3, #0
 80039e6:	461a      	mov	r2, r3
 80039e8:	4619      	mov	r1, r3
 80039ea:	f000 f9cf 	bl	8003d8c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80039ee:	2000      	movs	r0, #0
 80039f0:	bd08      	pop	{r3, pc}
	...

080039f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80039f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80039f6:	2200      	movs	r2, #0
 80039f8:	490e      	ldr	r1, [pc, #56]	; (8003a34 <MX_USB_DEVICE_Init+0x40>)
 80039fa:	480f      	ldr	r0, [pc, #60]	; (8003a38 <MX_USB_DEVICE_Init+0x44>)
 80039fc:	f7ff fc49 	bl	8003292 <USBD_Init>
 8003a00:	b108      	cbz	r0, 8003a06 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8003a02:	f7fc fc3f 	bl	8000284 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8003a06:	490d      	ldr	r1, [pc, #52]	; (8003a3c <MX_USB_DEVICE_Init+0x48>)
 8003a08:	480b      	ldr	r0, [pc, #44]	; (8003a38 <MX_USB_DEVICE_Init+0x44>)
 8003a0a:	f7ff fc57 	bl	80032bc <USBD_RegisterClass>
 8003a0e:	b108      	cbz	r0, 8003a14 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8003a10:	f7fc fc38 	bl	8000284 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8003a14:	490a      	ldr	r1, [pc, #40]	; (8003a40 <MX_USB_DEVICE_Init+0x4c>)
 8003a16:	4808      	ldr	r0, [pc, #32]	; (8003a38 <MX_USB_DEVICE_Init+0x44>)
 8003a18:	f7ff fc36 	bl	8003288 <USBD_DFU_RegisterMedia>
 8003a1c:	b108      	cbz	r0, 8003a22 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8003a1e:	f7fc fc31 	bl	8000284 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003a22:	4805      	ldr	r0, [pc, #20]	; (8003a38 <MX_USB_DEVICE_Init+0x44>)
 8003a24:	f7ff fc51 	bl	80032ca <USBD_Start>
 8003a28:	b118      	cbz	r0, 8003a32 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003a2e:	f7fc bc29 	b.w	8000284 <Error_Handler>
}
 8003a32:	bd08      	pop	{r3, pc}
 8003a34:	20000078 	.word	0x20000078
 8003a38:	20000860 	.word	0x20000860
 8003a3c:	20000014 	.word	0x20000014
 8003a40:	200000c8 	.word	0x200000c8

08003a44 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003a44:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003a46:	4801      	ldr	r0, [pc, #4]	; (8003a4c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003a48:	800b      	strh	r3, [r1, #0]
}
 8003a4a:	4770      	bx	lr
 8003a4c:	20000094 	.word	0x20000094

08003a50 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003a50:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003a52:	4801      	ldr	r0, [pc, #4]	; (8003a58 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003a54:	800b      	strh	r3, [r1, #0]
}
 8003a56:	4770      	bx	lr
 8003a58:	200000a8 	.word	0x200000a8

08003a5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003a60:	461e      	mov	r6, r3
 8003a62:	1c4d      	adds	r5, r1, #1
    if (((value >> 28)) < 0xA)
 8003a64:	0f04      	lsrs	r4, r0, #28
 8003a66:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8003a6a:	bf34      	ite	cc
 8003a6c:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003a6e:	3437      	addcs	r4, #55	; 0x37
 8003a70:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003a74:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
 8003a78:	3301      	adds	r3, #1
  for (idx = 0; idx < len; idx++)
 8003a7a:	b2dc      	uxtb	r4, r3
 8003a7c:	42a2      	cmp	r2, r4
    value = value << 4;
 8003a7e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8003a82:	d8ef      	bhi.n	8003a64 <IntToUnicode+0x8>
  }
}
 8003a84:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a88 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003a88:	231a      	movs	r3, #26
{
 8003a8a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003a8c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <USBD_FS_SerialStrDescriptor+0x2c>)
 8003a90:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003a92:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003a94:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003a96:	18c0      	adds	r0, r0, r3
 8003a98:	d00a      	beq.n	8003ab0 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003a9c:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003a9e:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003aa0:	4906      	ldr	r1, [pc, #24]	; (8003abc <USBD_FS_SerialStrDescriptor+0x34>)
 8003aa2:	f7ff ffdb 	bl	8003a5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	4905      	ldr	r1, [pc, #20]	; (8003ac0 <USBD_FS_SerialStrDescriptor+0x38>)
 8003aac:	f7ff ffd6 	bl	8003a5c <IntToUnicode>
}
 8003ab0:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <USBD_FS_SerialStrDescriptor+0x3c>)
 8003ab2:	bd10      	pop	{r4, pc}
 8003ab4:	1ffff7e8 	.word	0x1ffff7e8
 8003ab8:	1ffff7ec 	.word	0x1ffff7ec
 8003abc:	200000ae 	.word	0x200000ae
 8003ac0:	200000be 	.word	0x200000be
 8003ac4:	200000ac 	.word	0x200000ac

08003ac8 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003ac8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003aca:	4c04      	ldr	r4, [pc, #16]	; (8003adc <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8003acc:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003ace:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	f7ff ff32 	bl	800393a <USBD_GetString>
}
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	bd10      	pop	{r4, pc}
 8003ada:	bf00      	nop
 8003adc:	20000b24 	.word	0x20000b24
 8003ae0:	08003e61 	.word	0x08003e61

08003ae4 <USBD_FS_ProductStrDescriptor>:
{
 8003ae4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003ae6:	4c04      	ldr	r4, [pc, #16]	; (8003af8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8003ae8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003aea:	4804      	ldr	r0, [pc, #16]	; (8003afc <USBD_FS_ProductStrDescriptor+0x18>)
 8003aec:	4621      	mov	r1, r4
 8003aee:	f7ff ff24 	bl	800393a <USBD_GetString>
}
 8003af2:	4620      	mov	r0, r4
 8003af4:	bd10      	pop	{r4, pc}
 8003af6:	bf00      	nop
 8003af8:	20000b24 	.word	0x20000b24
 8003afc:	08003e74 	.word	0x08003e74

08003b00 <USBD_FS_ConfigStrDescriptor>:
{
 8003b00:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003b02:	4c04      	ldr	r4, [pc, #16]	; (8003b14 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8003b04:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003b06:	4804      	ldr	r0, [pc, #16]	; (8003b18 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003b08:	4621      	mov	r1, r4
 8003b0a:	f7ff ff16 	bl	800393a <USBD_GetString>
}
 8003b0e:	4620      	mov	r0, r4
 8003b10:	bd10      	pop	{r4, pc}
 8003b12:	bf00      	nop
 8003b14:	20000b24 	.word	0x20000b24
 8003b18:	08003e93 	.word	0x08003e93

08003b1c <USBD_FS_InterfaceStrDescriptor>:
{
 8003b1c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003b1e:	4c04      	ldr	r4, [pc, #16]	; (8003b30 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8003b20:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003b22:	4804      	ldr	r0, [pc, #16]	; (8003b34 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003b24:	4621      	mov	r1, r4
 8003b26:	f7ff ff08 	bl	800393a <USBD_GetString>
}
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	bd10      	pop	{r4, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000b24 	.word	0x20000b24
 8003b34:	08003e9e 	.word	0x08003e9e

08003b38 <MEM_If_Init_FS>:
uint16_t MEM_If_Init_FS(void)
{
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
  /* USER CODE END 0 */
}
 8003b38:	2000      	movs	r0, #0
 8003b3a:	4770      	bx	lr

08003b3c <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8003b3c:	b510      	push	{r4, lr}
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */

  for (int i = 0; i < Len; i++)
 8003b3e:	2300      	movs	r3, #0
{
 8003b40:	4604      	mov	r4, r0
 8003b42:	4608      	mov	r0, r1
  for (int i = 0; i < Len; i++)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d100      	bne.n	8003b4a <MEM_If_Read_FS+0xe>
    dest[i] = src[i];
  }

  return (uint8_t*)(dest);
  /* USER CODE END 4 */
}
 8003b48:	bd10      	pop	{r4, pc}
    dest[i] = src[i];
 8003b4a:	5ce1      	ldrb	r1, [r4, r3]
 8003b4c:	54c1      	strb	r1, [r0, r3]
  for (int i = 0; i < Len; i++)
 8003b4e:	3301      	adds	r3, #1
 8003b50:	e7f8      	b.n	8003b44 <MEM_If_Read_FS+0x8>

08003b52 <MEM_If_GetStatus_FS>:
  /* USER CODE BEGIN 5 */
  switch (Cmd)
  {
    case DFU_MEDIA_PROGRAM:
      buffer[1] = (50 >> 0);
      buffer[2] = (50 >> 8);
 8003b52:	2000      	movs	r0, #0
      buffer[1] = (50 >> 0);
 8003b54:	2332      	movs	r3, #50	; 0x32
      buffer[2] = (50 >> 8);
 8003b56:	7090      	strb	r0, [r2, #2]
      buffer[1] = (50 >> 0);
 8003b58:	7053      	strb	r3, [r2, #1]
      buffer[3] = 0;
 8003b5a:	70d0      	strb	r0, [r2, #3]
      buffer[3] = 0;
    break;
  }
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003b5c:	4770      	bx	lr

08003b5e <MEM_If_Write_FS>:
{
 8003b5e:	b508      	push	{r3, lr}
 8003b60:	460b      	mov	r3, r1
  if (flashWrite((uint32_t)dest, src, Len) != true)
 8003b62:	4601      	mov	r1, r0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fc fc4b 	bl	8000400 <flashWrite>
 8003b6a:	f080 0001 	eor.w	r0, r0, #1
}
 8003b6e:	b2c0      	uxtb	r0, r0
 8003b70:	bd08      	pop	{r3, pc}

08003b72 <MEM_If_Erase_FS>:
  if (flashErase(Add, 1024) != true)
 8003b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
{
 8003b76:	b508      	push	{r3, lr}
  if (flashErase(Add, 1024) != true)
 8003b78:	f7fc fbf4 	bl	8000364 <flashErase>
 8003b7c:	f080 0001 	eor.w	r0, r0, #1
}
 8003b80:	b2c0      	uxtb	r0, r0
 8003b82:	bd08      	pop	{r3, pc}

08003b84 <MEM_If_DeInit_FS>:
 8003b84:	2000      	movs	r0, #0
 8003b86:	4770      	bx	lr

08003b88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003b88:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <HAL_PCD_MspInit+0x3c>)
 8003b8c:	6802      	ldr	r2, [r0, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d115      	bne.n	8003bbe <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003b92:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003b96:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003b98:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8003b9a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b9e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003ba0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003ba2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003ba4:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003ba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003bae:	f7fc fdad 	bl	800070c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003bb2:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003bb4:	b003      	add	sp, #12
 8003bb6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003bba:	f7fc bdd9 	b.w	8000770 <HAL_NVIC_EnableIRQ>
}
 8003bbe:	b003      	add	sp, #12
 8003bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bc4:	40005c00 	.word	0x40005c00

08003bc8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003bc8:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8003bcc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003bd0:	f7ff bb9e 	b.w	8003310 <USBD_LL_SetupStage>

08003bd4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003bd4:	2328      	movs	r3, #40	; 0x28
 8003bd6:	fb03 0301 	mla	r3, r3, r1, r0
 8003bda:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003bde:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003be2:	f7ff bbc2 	b.w	800336a <USBD_LL_DataOutStage>

08003be6 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003be6:	2328      	movs	r3, #40	; 0x28
 8003be8:	fb03 0301 	mla	r3, r3, r1, r0
 8003bec:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf2:	f7ff bbf4 	b.w	80033de <USBD_LL_DataInStage>

08003bf6 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003bf6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003bfa:	f7ff bc88 	b.w	800350e <USBD_LL_SOF>

08003bfe <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003bfe:	6883      	ldr	r3, [r0, #8]
{
 8003c00:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003c02:	2b02      	cmp	r3, #2
{
 8003c04:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003c06:	d001      	beq.n	8003c0c <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8003c08:	f7fc fb3c 	bl	8000284 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003c0c:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8003c10:	2101      	movs	r1, #1
 8003c12:	f7ff fc66 	bl	80034e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c16:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8003c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c1e:	f7ff bc39 	b.w	8003494 <USBD_LL_Reset>
	...

08003c24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003c24:	b510      	push	{r4, lr}
 8003c26:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003c28:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003c2c:	f7ff fc5c 	bl	80034e8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003c30:	69a3      	ldr	r3, [r4, #24]
 8003c32:	b123      	cbz	r3, 8003c3e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003c34:	4a02      	ldr	r2, [pc, #8]	; (8003c40 <HAL_PCD_SuspendCallback+0x1c>)
 8003c36:	6913      	ldr	r3, [r2, #16]
 8003c38:	f043 0306 	orr.w	r3, r3, #6
 8003c3c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003c3e:	bd10      	pop	{r4, pc}
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003c44:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003c48:	f7ff bc57 	b.w	80034fa <USBD_LL_Resume>

08003c4c <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003c4c:	2308      	movs	r3, #8
{
 8003c4e:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003c50:	4a11      	ldr	r2, [pc, #68]	; (8003c98 <USBD_LL_Init+0x4c>)
{
 8003c52:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003c54:	4811      	ldr	r0, [pc, #68]	; (8003c9c <USBD_LL_Init+0x50>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003c56:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003c5e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003c60:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8003c64:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003c68:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003c6c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003c6e:	f7fc ffb3 	bl	8000bd8 <HAL_PCD_Init>
 8003c72:	b108      	cbz	r0, 8003c78 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8003c74:	f7fc fb06 	bl	8000284 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2318      	movs	r3, #24
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003c82:	f7fd fe06 	bl	8001892 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003c86:	2358      	movs	r3, #88	; 0x58
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003c90:	f7fd fdff 	bl	8001892 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
}
 8003c94:	2000      	movs	r0, #0
 8003c96:	bd10      	pop	{r4, pc}
 8003c98:	40005c00 	.word	0x40005c00
 8003c9c:	20000d24 	.word	0x20000d24

08003ca0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003ca0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8003ca2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003ca6:	f7fd f810 	bl	8000cca <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003caa:	2803      	cmp	r0, #3
 8003cac:	bf96      	itet	ls
 8003cae:	4b02      	ldrls	r3, [pc, #8]	; (8003cb8 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8003cb0:	2002      	movhi	r0, #2
 8003cb2:	5c18      	ldrbls	r0, [r3, r0]
}
 8003cb4:	bd08      	pop	{r3, pc}
 8003cb6:	bf00      	nop
 8003cb8:	08003edb 	.word	0x08003edb

08003cbc <USBD_LL_Stop>:
{
 8003cbc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8003cbe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003cc2:	f7fd f81b 	bl	8000cfc <HAL_PCD_Stop>
  switch (hal_status)
 8003cc6:	2803      	cmp	r0, #3
 8003cc8:	bf96      	itet	ls
 8003cca:	4b02      	ldrls	r3, [pc, #8]	; (8003cd4 <USBD_LL_Stop+0x18>)
  hal_status = HAL_PCD_Stop(pdev->pData);
 8003ccc:	2002      	movhi	r0, #2
 8003cce:	5c18      	ldrbls	r0, [r3, r0]
}
 8003cd0:	bd08      	pop	{r3, pc}
 8003cd2:	bf00      	nop
 8003cd4:	08003edb 	.word	0x08003edb

08003cd8 <USBD_LL_OpenEP>:
{
 8003cd8:	b510      	push	{r4, lr}
 8003cda:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003cdc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8003ce0:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003ce2:	4623      	mov	r3, r4
 8003ce4:	f7fd fd0c 	bl	8001700 <HAL_PCD_EP_Open>
  switch (hal_status)
 8003ce8:	2803      	cmp	r0, #3
 8003cea:	bf96      	itet	ls
 8003cec:	4b01      	ldrls	r3, [pc, #4]	; (8003cf4 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003cee:	2002      	movhi	r0, #2
 8003cf0:	5c18      	ldrbls	r0, [r3, r0]
}
 8003cf2:	bd10      	pop	{r4, pc}
 8003cf4:	08003edb 	.word	0x08003edb

08003cf8 <USBD_LL_StallEP>:
{
 8003cf8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003cfa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003cfe:	f7fd fd62 	bl	80017c6 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8003d02:	2803      	cmp	r0, #3
 8003d04:	bf96      	itet	ls
 8003d06:	4b02      	ldrls	r3, [pc, #8]	; (8003d10 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003d08:	2002      	movhi	r0, #2
 8003d0a:	5c18      	ldrbls	r0, [r3, r0]
}
 8003d0c:	bd08      	pop	{r3, pc}
 8003d0e:	bf00      	nop
 8003d10:	08003edb 	.word	0x08003edb

08003d14 <USBD_LL_ClearStallEP>:
{
 8003d14:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003d16:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003d1a:	f7fd fd88 	bl	800182e <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8003d1e:	2803      	cmp	r0, #3
 8003d20:	bf96      	itet	ls
 8003d22:	4b02      	ldrls	r3, [pc, #8]	; (8003d2c <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003d24:	2002      	movhi	r0, #2
 8003d26:	5c18      	ldrbls	r0, [r3, r0]
}
 8003d28:	bd08      	pop	{r3, pc}
 8003d2a:	bf00      	nop
 8003d2c:	08003edb 	.word	0x08003edb

08003d30 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003d30:	2328      	movs	r3, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 8003d32:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003d36:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003d3a:	bf1b      	ittet	ne
 8003d3c:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003d40:	fb01 3103 	mlane	r1, r1, r3, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003d44:	fb03 2101 	mlaeq	r1, r3, r1, r2
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003d48:	1889      	addne	r1, r1, r2
 8003d4a:	bf14      	ite	ne
 8003d4c:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003d4e:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 8003d52:	4770      	bx	lr

08003d54 <USBD_LL_SetUSBAddress>:
{
 8003d54:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003d56:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003d5a:	f7fc ffe8 	bl	8000d2e <HAL_PCD_SetAddress>
  switch (hal_status)
 8003d5e:	2803      	cmp	r0, #3
 8003d60:	bf96      	itet	ls
 8003d62:	4b02      	ldrls	r3, [pc, #8]	; (8003d6c <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003d64:	2002      	movhi	r0, #2
 8003d66:	5c18      	ldrbls	r0, [r3, r0]
}
 8003d68:	bd08      	pop	{r3, pc}
 8003d6a:	bf00      	nop
 8003d6c:	08003edb 	.word	0x08003edb

08003d70 <USBD_LL_Transmit>:
{
 8003d70:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003d72:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003d76:	f7fd fd0c 	bl	8001792 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8003d7a:	2803      	cmp	r0, #3
 8003d7c:	bf96      	itet	ls
 8003d7e:	4b02      	ldrls	r3, [pc, #8]	; (8003d88 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003d80:	2002      	movhi	r0, #2
 8003d82:	5c18      	ldrbls	r0, [r3, r0]
}
 8003d84:	bd08      	pop	{r3, pc}
 8003d86:	bf00      	nop
 8003d88:	08003edb 	.word	0x08003edb

08003d8c <USBD_LL_PrepareReceive>:
{
 8003d8c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003d8e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003d92:	f7fd fce7 	bl	8001764 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8003d96:	2803      	cmp	r0, #3
 8003d98:	bf96      	itet	ls
 8003d9a:	4b02      	ldrls	r3, [pc, #8]	; (8003da4 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003d9c:	2002      	movhi	r0, #2
 8003d9e:	5c18      	ldrbls	r0, [r3, r0]
}
 8003da0:	bd08      	pop	{r3, pc}
 8003da2:	bf00      	nop
 8003da4:	08003edb 	.word	0x08003edb

08003da8 <USBD_static_malloc>:
}
 8003da8:	4800      	ldr	r0, [pc, #0]	; (8003dac <USBD_static_malloc+0x4>)
 8003daa:	4770      	bx	lr
 8003dac:	2000041c 	.word	0x2000041c

08003db0 <USBD_static_free>:
}
 8003db0:	4770      	bx	lr

08003db2 <HAL_PCDEx_SetConnectionState>:
}
 8003db2:	4770      	bx	lr

08003db4 <main>:




int main(void)
{
 8003db4:	b508      	push	{r3, lr}
  hwInit();
 8003db6:	f7fc fc1d 	bl	80005f4 <hwInit>
  apInit();
 8003dba:	f7fc f9c7 	bl	800014c <apInit>

  apMain();
 8003dbe:	f7fc f9c6 	bl	800014e <apMain>

  return 0;
}
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	bd08      	pop	{r3, pc}
	...

08003dc8 <__libc_init_array>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	2600      	movs	r6, #0
 8003dcc:	4d0c      	ldr	r5, [pc, #48]	; (8003e00 <__libc_init_array+0x38>)
 8003dce:	4c0d      	ldr	r4, [pc, #52]	; (8003e04 <__libc_init_array+0x3c>)
 8003dd0:	1b64      	subs	r4, r4, r5
 8003dd2:	10a4      	asrs	r4, r4, #2
 8003dd4:	42a6      	cmp	r6, r4
 8003dd6:	d109      	bne.n	8003dec <__libc_init_array+0x24>
 8003dd8:	f000 f822 	bl	8003e20 <_init>
 8003ddc:	2600      	movs	r6, #0
 8003dde:	4d0a      	ldr	r5, [pc, #40]	; (8003e08 <__libc_init_array+0x40>)
 8003de0:	4c0a      	ldr	r4, [pc, #40]	; (8003e0c <__libc_init_array+0x44>)
 8003de2:	1b64      	subs	r4, r4, r5
 8003de4:	10a4      	asrs	r4, r4, #2
 8003de6:	42a6      	cmp	r6, r4
 8003de8:	d105      	bne.n	8003df6 <__libc_init_array+0x2e>
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df0:	4798      	blx	r3
 8003df2:	3601      	adds	r6, #1
 8003df4:	e7ee      	b.n	8003dd4 <__libc_init_array+0xc>
 8003df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfa:	4798      	blx	r3
 8003dfc:	3601      	adds	r6, #1
 8003dfe:	e7f2      	b.n	8003de6 <__libc_init_array+0x1e>
 8003e00:	08003ee0 	.word	0x08003ee0
 8003e04:	08003ee0 	.word	0x08003ee0
 8003e08:	08003ee0 	.word	0x08003ee0
 8003e0c:	08003ee4 	.word	0x08003ee4

08003e10 <memset>:
 8003e10:	4603      	mov	r3, r0
 8003e12:	4402      	add	r2, r0
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d100      	bne.n	8003e1a <memset+0xa>
 8003e18:	4770      	bx	lr
 8003e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e1e:	e7f9      	b.n	8003e14 <memset+0x4>

08003e20 <_init>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	bf00      	nop
 8003e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e26:	bc08      	pop	{r3}
 8003e28:	469e      	mov	lr, r3
 8003e2a:	4770      	bx	lr

08003e2c <_fini>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	bf00      	nop
 8003e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e32:	bc08      	pop	{r3}
 8003e34:	469e      	mov	lr, r3
 8003e36:	4770      	bx	lr
