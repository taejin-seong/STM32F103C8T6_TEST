
stm32f103_remind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009278  08009278  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  08009278  08009278  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009278  08009278  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009278  08009278  00019278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800927c  0800927c  0001927c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08009280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c4  20000190  08009410  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b54  08009410  00021b54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e7b6  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ee4  00000000  00000000  0003e96f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00043858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  000449d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d360  00000000  00000000  00045940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea76  00000000  00000000  00062ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a38c  00000000  00000000  00081716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010baa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004314  00000000  00000000  0010baf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	080091e0 	.word	0x080091e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	080091e0 	.word	0x080091e0

0800014c <apInit>:

#include "ap.h"


void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 115200); // USB
 8000150:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000154:	2000      	movs	r0, #0
 8000156:	f000 faef 	bl	8000738 <uartOpen>
  uartOpen(_DEF_UART2, 115200); // UART
 800015a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800015e:	2001      	movs	r0, #1
 8000160:	f000 faea 	bl	8000738 <uartOpen>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apMain>:


void apMain(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
#endif /* UARTUSING */
#endif /* USBTOUART */
#endif /* UARTTOUSB */


  pre_time = millis();
 800016e:	f000 f878 	bl	8000262 <millis>
 8000172:	6078      	str	r0, [r7, #4]

  while(1)
  {
    if (millis() - pre_time >= 500)
 8000174:	f000 f875 	bl	8000262 <millis>
 8000178:	4602      	mov	r2, r0
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	1ad3      	subs	r3, r2, r3
 800017e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000182:	d3f7      	bcc.n	8000174 <apMain+0xc>
    {
      pre_time = millis();
 8000184:	f000 f86d 	bl	8000262 <millis>
 8000188:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 800018a:	2000      	movs	r0, #0
 800018c:	f000 fa0c 	bl	80005a8 <ledToggle>
    if (millis() - pre_time >= 500)
 8000190:	e7f0      	b.n	8000174 <apMain+0xc>
	...

08000194 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b088      	sub	sp, #32
 8000198:	af00      	add	r7, sp, #0

  HAL_Init();
 800019a:	f000 fc63 	bl	8000a64 <HAL_Init>
  SystemClock_Config();
 800019e:	f000 f867 	bl	8000270 <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001a2:	4b28      	ldr	r3, [pc, #160]	; (8000244 <bspInit+0xb0>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	4a27      	ldr	r2, [pc, #156]	; (8000244 <bspInit+0xb0>)
 80001a8:	f043 0320 	orr.w	r3, r3, #32
 80001ac:	6193      	str	r3, [r2, #24]
 80001ae:	4b25      	ldr	r3, [pc, #148]	; (8000244 <bspInit+0xb0>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	f003 0320 	and.w	r3, r3, #32
 80001b6:	60fb      	str	r3, [r7, #12]
 80001b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ba:	4b22      	ldr	r3, [pc, #136]	; (8000244 <bspInit+0xb0>)
 80001bc:	699b      	ldr	r3, [r3, #24]
 80001be:	4a21      	ldr	r2, [pc, #132]	; (8000244 <bspInit+0xb0>)
 80001c0:	f043 0310 	orr.w	r3, r3, #16
 80001c4:	6193      	str	r3, [r2, #24]
 80001c6:	4b1f      	ldr	r3, [pc, #124]	; (8000244 <bspInit+0xb0>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	f003 0310 	and.w	r3, r3, #16
 80001ce:	60bb      	str	r3, [r7, #8]
 80001d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d2:	4b1c      	ldr	r3, [pc, #112]	; (8000244 <bspInit+0xb0>)
 80001d4:	699b      	ldr	r3, [r3, #24]
 80001d6:	4a1b      	ldr	r2, [pc, #108]	; (8000244 <bspInit+0xb0>)
 80001d8:	f043 0304 	orr.w	r3, r3, #4
 80001dc:	6193      	str	r3, [r2, #24]
 80001de:	4b19      	ldr	r3, [pc, #100]	; (8000244 <bspInit+0xb0>)
 80001e0:	699b      	ldr	r3, [r3, #24]
 80001e2:	f003 0304 	and.w	r3, r3, #4
 80001e6:	607b      	str	r3, [r7, #4]
 80001e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ea:	4b16      	ldr	r3, [pc, #88]	; (8000244 <bspInit+0xb0>)
 80001ec:	699b      	ldr	r3, [r3, #24]
 80001ee:	4a15      	ldr	r2, [pc, #84]	; (8000244 <bspInit+0xb0>)
 80001f0:	f043 0308 	orr.w	r3, r3, #8
 80001f4:	6193      	str	r3, [r2, #24]
 80001f6:	4b13      	ldr	r3, [pc, #76]	; (8000244 <bspInit+0xb0>)
 80001f8:	699b      	ldr	r3, [r3, #24]
 80001fa:	f003 0308 	and.w	r3, r3, #8
 80001fe:	603b      	str	r3, [r7, #0]
 8000200:	683b      	ldr	r3, [r7, #0]

  // USB RESET으로 먼저 내림
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000202:	f107 0310 	add.w	r3, r7, #16
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000216:	2311      	movs	r3, #17
 8000218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021a:	2300      	movs	r3, #0
 800021c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021e:	2302      	movs	r3, #2
 8000220:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000222:	f107 0310 	add.w	r3, r7, #16
 8000226:	4619      	mov	r1, r3
 8000228:	4807      	ldr	r0, [pc, #28]	; (8000248 <bspInit+0xb4>)
 800022a:	f001 f8db 	bl	80013e4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <bspInit+0xb4>)
 8000236:	f001 fb15 	bl	8001864 <HAL_GPIO_WritePin>
}
 800023a:	bf00      	nop
 800023c:	3720      	adds	r7, #32
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000
 8000248:	40010800 	.word	0x40010800

0800024c <delay>:

void delay(uint32_t ms)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 fc67 	bl	8000b28 <HAL_Delay>
}
 800025a:	bf00      	nop
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}

08000262 <millis>:

uint32_t millis(void)
{
 8000262:	b580      	push	{r7, lr}
 8000264:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000266:	f000 fc55 	bl	8000b14 <HAL_GetTick>
 800026a:	4603      	mov	r3, r0
}
 800026c:	4618      	mov	r0, r3
 800026e:	bd80      	pop	{r7, pc}

08000270 <SystemClock_Config>:

  return 1;
}

void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b094      	sub	sp, #80	; 0x50
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f008 ffa6 	bl	80091d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002a0:	2305      	movs	r3, #5
 80002a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	2302      	movs	r3, #2
 80002b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 ffcc 	bl	8003268 <HAL_RCC_OscConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002d6:	f000 f82a 	bl	800032e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	230f      	movs	r3, #15
 80002dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002de:	2302      	movs	r3, #2
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f0:	f107 0314 	add.w	r3, r7, #20
 80002f4:	2102      	movs	r1, #2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f003 fa36 	bl	8003768 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000302:	f000 f814 	bl	800032e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000306:	2311      	movs	r3, #17
 8000308:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800030a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800030e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000310:	2300      	movs	r3, #0
 8000312:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fbc0 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000322:	f000 f804 	bl	800032e <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3750      	adds	r7, #80	; 0x50
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}

0800032e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000332:	b672      	cpsid	i
}
 8000334:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000336:	e7fe      	b.n	8000336 <Error_Handler+0x8>

08000338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <HAL_MspInit+0x5c>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a14      	ldr	r2, [pc, #80]	; (8000394 <HAL_MspInit+0x5c>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b12      	ldr	r3, [pc, #72]	; (8000394 <HAL_MspInit+0x5c>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <HAL_MspInit+0x5c>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <HAL_MspInit+0x5c>)
 800035c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000360:	61d3      	str	r3, [r2, #28]
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <HAL_MspInit+0x5c>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <HAL_MspInit+0x60>)
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	4a04      	ldr	r2, [pc, #16]	; (8000398 <HAL_MspInit+0x60>)
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40021000 	.word	0x40021000
 8000398:	40010000 	.word	0x40010000

0800039c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <NMI_Handler+0x4>

080003a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <HardFault_Handler+0x4>

080003a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <MemManage_Handler+0x4>

080003ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <BusFault_Handler+0x4>

080003b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <UsageFault_Handler+0x4>

080003ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr

080003c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr

080003d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr

080003de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e2:	f000 fb85 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80003f0:	4802      	ldr	r0, [pc, #8]	; (80003fc <DMA1_Channel5_IRQHandler+0x10>)
 80003f2:	f000 fec3 	bl	800117c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000718 	.word	0x20000718

08000400 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000404:	4802      	ldr	r0, [pc, #8]	; (8000410 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000406:	f001 fb8f 	bl	8001b28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20001868 	.word	0x20001868

08000414 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <USART1_IRQHandler+0x10>)
 800041a:	f003 feaf 	bl	800417c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	2000075c 	.word	0x2000075c

08000428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000434:	480c      	ldr	r0, [pc, #48]	; (8000468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000436:	490d      	ldr	r1, [pc, #52]	; (800046c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000438:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800043c:	e002      	b.n	8000444 <LoopCopyDataInit>

0800043e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000442:	3304      	adds	r3, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000448:	d3f9      	bcc.n	800043e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800044c:	4c0a      	ldr	r4, [pc, #40]	; (8000478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000450:	e001      	b.n	8000456 <LoopFillZerobss>

08000452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000454:	3204      	adds	r2, #4

08000456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000458:	d3fb      	bcc.n	8000452 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800045a:	f7ff ffe5 	bl	8000428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800045e:	f008 fe93 	bl	8009188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000462:	f008 fe85 	bl	8009170 <main>
  bx lr
 8000466:	4770      	bx	lr
  ldr r0, =_sdata
 8000468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800046c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000470:	08009280 	.word	0x08009280
  ldr r2, =_sbss
 8000474:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000478:	20001b54 	.word	0x20001b54

0800047c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC1_2_IRQHandler>

0800047e <qbufferCreate>:

}


bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800047e:	b480      	push	{r7}
 8000480:	b087      	sub	sp, #28
 8000482:	af00      	add	r7, sp, #0
 8000484:	60f8      	str	r0, [r7, #12]
 8000486:	60b9      	str	r1, [r7, #8]
 8000488:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800048a:	2301      	movs	r3, #1
 800048c:	75fb      	strb	r3, [r7, #23]

  p_node->in  = 0;
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	2200      	movs	r2, #0
 8000498:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	68ba      	ldr	r2, [r7, #8]
 80004a4:	60da      	str	r2, [r3, #12]

  return ret;
 80004a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	371c      	adds	r7, #28
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
	...

080004b4 <flashInit>:
//내부에서 쓰는 함수이므로 static 선언을 통해 외부로 사용되지 않게 막음
static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);


bool flashInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
  for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	e012      	b.n	80004e6 <flashInit+0x32>
  {
    flash_tbl[i].addr   = 0x8000000 + i * 1024;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80004c6:	029b      	lsls	r3, r3, #10
 80004c8:	4619      	mov	r1, r3
 80004ca:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <flashInit+0x44>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    flash_tbl[i].length = 1024;
 80004d2:	4a09      	ldr	r2, [pc, #36]	; (80004f8 <flashInit+0x44>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	4413      	add	r3, r2
 80004da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004de:	809a      	strh	r2, [r3, #4]
  for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3301      	adds	r3, #1
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b3f      	cmp	r3, #63	; 0x3f
 80004ea:	dde9      	ble.n	80004c0 <flashInit+0xc>
  }

  return true;
 80004ec:	2301      	movs	r3, #1

}
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	200001ac 	.word	0x200001ac

080004fc <ledInit>:
    };



bool ledInit(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
  bool ret = true;
 8000502:	2301      	movs	r3, #1
 8000504:	74fb      	strb	r3, [r7, #19]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	2301      	movs	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	2302      	movs	r3, #2
 800051c:	60fb      	str	r3, [r7, #12]


  for (int i=0; i<LED_MAX_CH; i++)
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	e016      	b.n	8000552 <ledInit+0x56>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000524:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <ledInit+0x68>)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	4413      	add	r3, r2
 800052c:	889b      	ldrh	r3, [r3, #4]
 800052e:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <ledInit+0x68>)
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000538:	463a      	mov	r2, r7
 800053a:	4611      	mov	r1, r2
 800053c:	4618      	mov	r0, r3
 800053e:	f000 ff51 	bl	80013e4 <HAL_GPIO_Init>

    ledOff(i);
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f80e 	bl	8000568 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	3301      	adds	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	2b00      	cmp	r3, #0
 8000556:	dde5      	ble.n	8000524 <ledInit+0x28>
  }

  return ret;
 8000558:	7cfb      	ldrb	r3, [r7, #19]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000004 	.word	0x20000004

08000568 <ledOff>:
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}


void ledOff(uint8_t ch)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d111      	bne.n	800059c <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <ledOff+0x3c>)
 800057c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <ledOff+0x3c>)
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	4413      	add	r3, r2
 8000588:	8899      	ldrh	r1, [r3, #4]
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <ledOff+0x3c>)
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	4413      	add	r3, r2
 8000592:	79db      	ldrb	r3, [r3, #7]
 8000594:	461a      	mov	r2, r3
 8000596:	f001 f965 	bl	8001864 <HAL_GPIO_WritePin>
 800059a:	e000      	b.n	800059e <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 800059c:	bf00      	nop
}
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000004 	.word	0x20000004

080005a8 <ledToggle>:


void ledToggle(uint8_t ch)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10d      	bne.n	80005d4 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	4a08      	ldr	r2, [pc, #32]	; (80005dc <ledToggle+0x34>)
 80005bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4906      	ldr	r1, [pc, #24]	; (80005dc <ledToggle+0x34>)
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	440b      	add	r3, r1
 80005c8:	889b      	ldrh	r3, [r3, #4]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4610      	mov	r0, r2
 80005ce:	f001 f961 	bl	8001894 <HAL_GPIO_TogglePin>
 80005d2:	e000      	b.n	80005d6 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 80005d4:	bf00      	nop
}
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000004 	.word	0x20000004

080005e0 <resetInit>:

static uint32_t reset_count = 0;


bool resetInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  bool ret = true;
 80005e6:	2301      	movs	r3, #1
 80005e8:	71fb      	strb	r3, [r7, #7]

  //만약 Reset Pin이 눌렸다면
  if (RCC->CSR & (1<<26))
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <resetInit+0x50>)
 80005ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d012      	beq.n	800061c <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 f840 	bl	800067c <rtcBackupRegRead>
 80005fc:	4603      	mov	r3, r0
 80005fe:	3301      	adds	r3, #1
 8000600:	4619      	mov	r1, r3
 8000602:	2001      	movs	r0, #1
 8000604:	f000 f84a 	bl	800069c <rtcBackupRegWrite>
    delay(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f7ff fe1e 	bl	800024c <delay>
    reset_count = rtcBackupRegRead(1);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f833 	bl	800067c <rtcBackupRegRead>
 8000616:	4603      	mov	r3, r0
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <resetInit+0x54>)
 800061a:	6013      	str	r3, [r2, #0]
  }

  rtcBackupRegWrite(1, 0);
 800061c:	2100      	movs	r1, #0
 800061e:	2001      	movs	r0, #1
 8000620:	f000 f83c 	bl	800069c <rtcBackupRegWrite>

  return ret;
 8000624:	79fb      	ldrb	r3, [r7, #7]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	200003ac 	.word	0x200003ac

08000638 <rtcInit>:

static RTC_HandleTypeDef hrtc;


bool rtcInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  bool ret = true;
 800063e:	2301      	movs	r3, #1
 8000640:	71fb      	strb	r3, [r7, #7]

  hrtc.Instance          = RTC;
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <rtcInit+0x3c>)
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <rtcInit+0x40>)
 8000646:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <rtcInit+0x3c>)
 800064a:	f04f 32ff 	mov.w	r2, #4294967295
 800064e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut       = RTC_OUTPUTSOURCE_ALARM;
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <rtcInit+0x3c>)
 8000652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000656:	609a      	str	r2, [r3, #8]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <rtcInit+0x3c>)
 800065a:	f003 fb99 	bl	8003d90 <HAL_RTC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <rtcInit+0x30>
  {
    Error_Handler();
 8000664:	f7ff fe63 	bl	800032e <Error_Handler>
  }
  return ret;
 8000668:	79fb      	ldrb	r3, [r7, #7]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200003b0 	.word	0x200003b0
 8000678:	40002800 	.word	0x40002800

0800067c <rtcBackupRegRead>:


uint32_t rtcBackupRegRead(uint32_t index)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <rtcBackupRegRead+0x1c>)
 8000688:	f003 fcb0 	bl	8003fec <HAL_RTCEx_BKUPRead>
 800068c:	4603      	mov	r3, r0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200003b0 	.word	0x200003b0

0800069c <rtcBackupRegWrite>:


void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	4803      	ldr	r0, [pc, #12]	; (80006b8 <rtcBackupRegWrite+0x1c>)
 80006ac:	f003 fc84 	bl	8003fb8 <HAL_RTCEx_BKUPWrite>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200003b0 	.word	0x200003b0

080006bc <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <HAL_RTC_MspInit+0x3c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d110      	bne.n	80006f0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80006ce:	f002 fdbf 	bl	8003250 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_RTC_MspInit+0x40>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a09      	ldr	r2, [pc, #36]	; (80006fc <HAL_RTC_MspInit+0x40>)
 80006d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <HAL_RTC_MspInit+0x40>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_RTC_MspInit+0x44>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40002800 	.word	0x40002800
 80006fc:	40021000 	.word	0x40021000
 8000700:	4242043c 	.word	0x4242043c

08000704 <uartInit>:
DMA_HandleTypeDef hdma_usart1_rx;



bool uartInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
  for (int i = 0; i < UART_MAX_CH; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	e007      	b.n	8000720 <uartInit+0x1c>
  {
    is_open[i] = false;
 8000710:	4a08      	ldr	r2, [pc, #32]	; (8000734 <uartInit+0x30>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < UART_MAX_CH; i++)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3301      	adds	r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b01      	cmp	r3, #1
 8000724:	ddf4      	ble.n	8000710 <uartInit+0xc>
  }

  return true;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200003c4 	.word	0x200003c4

08000738 <uartOpen>:


bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000744:	2300      	movs	r3, #0
 8000746:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <uartOpen+0x1c>
 800074e:	2b01      	cmp	r3, #1
 8000750:	d007      	beq.n	8000762 <uartOpen+0x2a>
 8000752:	e074      	b.n	800083e <uartOpen+0x106>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	4a3c      	ldr	r2, [pc, #240]	; (8000848 <uartOpen+0x110>)
 8000758:	2101      	movs	r1, #1
 800075a:	54d1      	strb	r1, [r2, r3]
      ret = true;
 800075c:	2301      	movs	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
      break;
 8000760:	e06d      	b.n	800083e <uartOpen+0x106>

    case _DEF_UART2:
      huart1.Instance             = USART1;
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <uartOpen+0x114>)
 8000764:	4a3a      	ldr	r2, [pc, #232]	; (8000850 <uartOpen+0x118>)
 8000766:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate        = baud;
 8000768:	4a38      	ldr	r2, [pc, #224]	; (800084c <uartOpen+0x114>)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength      = UART_WORDLENGTH_8B;
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <uartOpen+0x114>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits        = UART_STOPBITS_1;
 8000774:	4b35      	ldr	r3, [pc, #212]	; (800084c <uartOpen+0x114>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity          = UART_PARITY_NONE;
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <uartOpen+0x114>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode            = UART_MODE_TX_RX;
 8000780:	4b32      	ldr	r3, [pc, #200]	; (800084c <uartOpen+0x114>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl       = UART_HWCONTROL_NONE;
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <uartOpen+0x114>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling    = UART_OVERSAMPLING_16;
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <uartOpen+0x114>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8000792:	482e      	ldr	r0, [pc, #184]	; (800084c <uartOpen+0x114>)
 8000794:	f003 fc93 	bl	80040be <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	011b      	lsls	r3, r3, #4
 800079c:	4a2d      	ldr	r2, [pc, #180]	; (8000854 <uartOpen+0x11c>)
 800079e:	4413      	add	r3, r2
 80007a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a4:	492c      	ldr	r1, [pc, #176]	; (8000858 <uartOpen+0x120>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe69 	bl	800047e <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <uartOpen+0x124>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	4a2a      	ldr	r2, [pc, #168]	; (800085c <uartOpen+0x124>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6153      	str	r3, [r2, #20]
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <uartOpen+0x124>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]

      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	200f      	movs	r0, #15
 80007ca:	f000 facc 	bl	8000d66 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007ce:	200f      	movs	r0, #15
 80007d0:	f000 fae5 	bl	8000d9e <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d4:	481d      	ldr	r0, [pc, #116]	; (800084c <uartOpen+0x114>)
 80007d6:	f003 fc25 	bl	8004024 <HAL_UART_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d002      	beq.n	80007e6 <uartOpen+0xae>
      {
        ret = false;
 80007e0:	2300      	movs	r3, #0
 80007e2:	73fb      	strb	r3, [r7, #15]

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }

      break;
 80007e4:	e02a      	b.n	800083c <uartOpen+0x104>
        ret = true;
 80007e6:	2301      	movs	r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	4a16      	ldr	r2, [pc, #88]	; (8000848 <uartOpen+0x110>)
 80007ee:	2101      	movs	r1, #1
 80007f0:	54d1      	strb	r1, [r2, r3]
        if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80007f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007f6:	4918      	ldr	r1, [pc, #96]	; (8000858 <uartOpen+0x120>)
 80007f8:	4814      	ldr	r0, [pc, #80]	; (800084c <uartOpen+0x114>)
 80007fa:	f003 fc8f 	bl	800411c <HAL_UART_Receive_DMA>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <uartOpen+0xd0>
          ret = false;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <uartOpen+0x11c>)
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	6819      	ldr	r1, [r3, #0]
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <uartOpen+0x128>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	1a8a      	subs	r2, r1, r2
 800081e:	490d      	ldr	r1, [pc, #52]	; (8000854 <uartOpen+0x11c>)
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	440b      	add	r3, r1
 8000824:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8000826:	79fa      	ldrb	r2, [r7, #7]
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	490a      	ldr	r1, [pc, #40]	; (8000854 <uartOpen+0x11c>)
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	440a      	add	r2, r1
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	4908      	ldr	r1, [pc, #32]	; (8000854 <uartOpen+0x11c>)
 8000834:	011b      	lsls	r3, r3, #4
 8000836:	440b      	add	r3, r1
 8000838:	3304      	adds	r3, #4
 800083a:	601a      	str	r2, [r3, #0]
      break;
 800083c:	bf00      	nop
  }

  return ret;
 800083e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200003c4 	.word	0x200003c4
 800084c:	2000075c 	.word	0x2000075c
 8000850:	40013800 	.word	0x40013800
 8000854:	200003c8 	.word	0x200003c8
 8000858:	200003e8 	.word	0x200003e8
 800085c:	40021000 	.word	0x40021000
 8000860:	20000718 	.word	0x20000718

08000864 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {

  }
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif /* 0 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a33      	ldr	r2, [pc, #204]	; (8000970 <HAL_UART_MspInit+0xe8>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d15f      	bne.n	8000968 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a8:	4b32      	ldr	r3, [pc, #200]	; (8000974 <HAL_UART_MspInit+0xec>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a31      	ldr	r2, [pc, #196]	; (8000974 <HAL_UART_MspInit+0xec>)
 80008ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <HAL_UART_MspInit+0xec>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <HAL_UART_MspInit+0xec>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a2b      	ldr	r2, [pc, #172]	; (8000974 <HAL_UART_MspInit+0xec>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <HAL_UART_MspInit+0xec>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	4822      	ldr	r0, [pc, #136]	; (8000978 <HAL_UART_MspInit+0xf0>)
 80008ee:	f000 fd79 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	481c      	ldr	r0, [pc, #112]	; (8000978 <HAL_UART_MspInit+0xf0>)
 8000908:	f000 fd6c 	bl	80013e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <HAL_UART_MspInit+0xf4>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <HAL_UART_MspInit+0xf8>)
 8000910:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_UART_MspInit+0xf4>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_UART_MspInit+0xf4>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000932:	2220      	movs	r2, #32
 8000934:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800093c:	480f      	ldr	r0, [pc, #60]	; (800097c <HAL_UART_MspInit+0xf4>)
 800093e:	f000 fa57 	bl	8000df0 <HAL_DMA_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000948:	f7ff fcf1 	bl	800032e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000950:	639a      	str	r2, [r3, #56]	; 0x38
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2025      	movs	r0, #37	; 0x25
 800095e:	f000 fa02 	bl	8000d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000962:	2025      	movs	r0, #37	; 0x25
 8000964:	f000 fa1b 	bl	8000d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40013800 	.word	0x40013800
 8000974:	40021000 	.word	0x40021000
 8000978:	40010800 	.word	0x40010800
 800097c:	20000718 	.word	0x20000718
 8000980:	40020058 	.word	0x40020058

08000984 <HAL_UART_MspDeInit>:


void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <HAL_UART_MspDeInit+0x40>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d112      	bne.n	80009bc <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_UART_MspDeInit+0x44>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <HAL_UART_MspDeInit+0x44>)
 800099c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009a0:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80009a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80009a6:	4809      	ldr	r0, [pc, #36]	; (80009cc <HAL_UART_MspDeInit+0x48>)
 80009a8:	f000 fea0 	bl	80016ec <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fa77 	bl	8000ea4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80009b6:	2025      	movs	r0, #37	; 0x25
 80009b8:	f000 f9ff 	bl	8000dba <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40013800 	.word	0x40013800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010800 	.word	0x40010800

080009d0 <usbInit>:




bool usbInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
  bool ret =true;
 80009d6:	2301      	movs	r3, #1
 80009d8:	75fb      	strb	r3, [r7, #23]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009ec:	2311      	movs	r3, #17
 80009ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2302      	movs	r3, #2
 80009f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <usbInit+0x6c>)
 80009fe:	f000 fcf1 	bl	80013e4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <usbInit+0x6c>)
 8000a0a:	f000 ff2b 	bl	8001864 <HAL_GPIO_WritePin>
  delay(200);
 8000a0e:	20c8      	movs	r0, #200	; 0xc8
 8000a10:	f7ff fc1c 	bl	800024c <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a1a:	4808      	ldr	r0, [pc, #32]	; (8000a3c <usbInit+0x6c>)
 8000a1c:	f000 ff22 	bl	8001864 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <usbInit+0x6c>)
 8000a2a:	f000 fcdb 	bl	80013e4 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 8000a2e:	f007 fe41 	bl	80086b4 <MX_USB_DEVICE_Init>

  return ret;
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40010800 	.word	0x40010800

08000a40 <hwInit>:




void hwInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  bspInit();
 8000a44:	f7ff fba6 	bl	8000194 <bspInit>
  rtcInit();
 8000a48:	f7ff fdf6 	bl	8000638 <rtcInit>

  resetInit();
 8000a4c:	f7ff fdc8 	bl	80005e0 <resetInit>
  ledInit();
 8000a50:	f7ff fd54 	bl	80004fc <ledInit>
  usbInit();
 8000a54:	f7ff ffbc 	bl	80009d0 <usbInit>
  uartInit();
 8000a58:	f7ff fe54 	bl	8000704 <uartInit>
  flashInit();
 8000a5c:	f7ff fd2a 	bl	80004b4 <flashInit>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x28>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x28>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f96b 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f808 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff fc5a 	bl	8000338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40022000 	.word	0x40022000

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f991 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f94b 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000010 	.word	0x20000010
 8000aec:	2000000c 	.word	0x2000000c

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <HAL_IncTick+0x20>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	20000010 	.word	0x20000010
 8000b10:	200007a0 	.word	0x200007a0

08000b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	200007a0 	.word	0x200007a0

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff fff0 	bl	8000b14 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_Delay+0x44>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffe0 	bl	8000b14 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000010 	.word	0x20000010

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db0b      	blt.n	8000bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 021f 	and.w	r2, r3, #31
 8000bec:	4906      	ldr	r1, [pc, #24]	; (8000c08 <__NVIC_EnableIRQ+0x34>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db12      	blt.n	8000c44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	490a      	ldr	r1, [pc, #40]	; (8000c50 <__NVIC_DisableIRQ+0x44>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	3320      	adds	r3, #32
 8000c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c38:	f3bf 8f4f 	dsb	sy
}
 8000c3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c3e:	f3bf 8f6f 	isb	sy
}
 8000c42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff90 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff09 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff1e 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff90 	bl	8000ca8 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5f 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff11 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff1f 	bl	8000c0c <__NVIC_DisableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ff94 	bl	8000d0c <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e043      	b.n	8000e8e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <HAL_DMA_Init+0xa8>)
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <HAL_DMA_Init+0xac>)
 8000e12:	fba2 2303 	umull	r2, r3, r2, r3
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	009a      	lsls	r2, r3, #2
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <HAL_DMA_Init+0xb0>)
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2202      	movs	r2, #2
 8000e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	bffdfff8 	.word	0xbffdfff8
 8000e9c:	cccccccd 	.word	0xcccccccd
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e046      	b.n	8000f44 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0201 	bic.w	r2, r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_DMA_DeInit+0xac>)
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <HAL_DMA_DeInit+0xb0>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	091b      	lsrs	r3, r3, #4
 8000ef8:	009a      	lsls	r2, r3, #2
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <HAL_DMA_DeInit+0xb4>)
 8000f02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	bffdfff8 	.word	0xbffdfff8
 8000f54:	cccccccd 	.word	0xcccccccd
 8000f58:	40020000 	.word	0x40020000

08000f5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <HAL_DMA_Start_IT+0x20>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e04a      	b.n	8001012 <HAL_DMA_Start_IT+0xb6>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d13a      	bne.n	8001004 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2202      	movs	r2, #2
 8000f92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f000 f9e8 	bl	8001388 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d008      	beq.n	8000fd2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 020e 	orr.w	r2, r2, #14
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e00f      	b.n	8000ff2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0204 	bic.w	r2, r2, #4
 8000fe0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f042 020a 	orr.w	r2, r2, #10
 8000ff0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f042 0201 	orr.w	r2, r2, #1
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e005      	b.n	8001010 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800100c:	2302      	movs	r3, #2
 800100e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001010:	7dfb      	ldrb	r3, [r7, #23]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800101a:	b480      	push	{r7}
 800101c:	b085      	sub	sp, #20
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800102c:	2b02      	cmp	r3, #2
 800102e:	d008      	beq.n	8001042 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2204      	movs	r2, #4
 8001034:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e020      	b.n	8001084 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 020e 	bic.w	r2, r2, #14
 8001050:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f202 	lsl.w	r2, r1, r2
 8001070:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
	...

08001090 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d005      	beq.n	80010b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2204      	movs	r2, #4
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e051      	b.n	8001156 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 020e 	bic.w	r2, r2, #14
 80010c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a22      	ldr	r2, [pc, #136]	; (8001160 <HAL_DMA_Abort_IT+0xd0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d029      	beq.n	8001130 <HAL_DMA_Abort_IT+0xa0>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <HAL_DMA_Abort_IT+0xd4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d022      	beq.n	800112c <HAL_DMA_Abort_IT+0x9c>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <HAL_DMA_Abort_IT+0xd8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d01a      	beq.n	8001126 <HAL_DMA_Abort_IT+0x96>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_DMA_Abort_IT+0xdc>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d012      	beq.n	8001120 <HAL_DMA_Abort_IT+0x90>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <HAL_DMA_Abort_IT+0xe0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d00a      	beq.n	800111a <HAL_DMA_Abort_IT+0x8a>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <HAL_DMA_Abort_IT+0xe4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d102      	bne.n	8001114 <HAL_DMA_Abort_IT+0x84>
 800110e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001112:	e00e      	b.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 8001114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001118:	e00b      	b.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 800111a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800111e:	e008      	b.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	e005      	b.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 8001126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112a:	e002      	b.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 800112c:	2310      	movs	r3, #16
 800112e:	e000      	b.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 8001130:	2301      	movs	r3, #1
 8001132:	4a11      	ldr	r2, [pc, #68]	; (8001178 <HAL_DMA_Abort_IT+0xe8>)
 8001134:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	4798      	blx	r3
    } 
  }
  return status;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020008 	.word	0x40020008
 8001164:	4002001c 	.word	0x4002001c
 8001168:	40020030 	.word	0x40020030
 800116c:	40020044 	.word	0x40020044
 8001170:	40020058 	.word	0x40020058
 8001174:	4002006c 	.word	0x4002006c
 8001178:	40020000 	.word	0x40020000

0800117c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	2204      	movs	r2, #4
 800119a:	409a      	lsls	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d04f      	beq.n	8001244 <HAL_DMA_IRQHandler+0xc8>
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d04a      	beq.n	8001244 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d107      	bne.n	80011cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0204 	bic.w	r2, r2, #4
 80011ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a66      	ldr	r2, [pc, #408]	; (800136c <HAL_DMA_IRQHandler+0x1f0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d029      	beq.n	800122a <HAL_DMA_IRQHandler+0xae>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a65      	ldr	r2, [pc, #404]	; (8001370 <HAL_DMA_IRQHandler+0x1f4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d022      	beq.n	8001226 <HAL_DMA_IRQHandler+0xaa>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a63      	ldr	r2, [pc, #396]	; (8001374 <HAL_DMA_IRQHandler+0x1f8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01a      	beq.n	8001220 <HAL_DMA_IRQHandler+0xa4>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a62      	ldr	r2, [pc, #392]	; (8001378 <HAL_DMA_IRQHandler+0x1fc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d012      	beq.n	800121a <HAL_DMA_IRQHandler+0x9e>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a60      	ldr	r2, [pc, #384]	; (800137c <HAL_DMA_IRQHandler+0x200>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00a      	beq.n	8001214 <HAL_DMA_IRQHandler+0x98>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a5f      	ldr	r2, [pc, #380]	; (8001380 <HAL_DMA_IRQHandler+0x204>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d102      	bne.n	800120e <HAL_DMA_IRQHandler+0x92>
 8001208:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800120c:	e00e      	b.n	800122c <HAL_DMA_IRQHandler+0xb0>
 800120e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001212:	e00b      	b.n	800122c <HAL_DMA_IRQHandler+0xb0>
 8001214:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001218:	e008      	b.n	800122c <HAL_DMA_IRQHandler+0xb0>
 800121a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800121e:	e005      	b.n	800122c <HAL_DMA_IRQHandler+0xb0>
 8001220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001224:	e002      	b.n	800122c <HAL_DMA_IRQHandler+0xb0>
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	e000      	b.n	800122c <HAL_DMA_IRQHandler+0xb0>
 800122a:	2304      	movs	r3, #4
 800122c:	4a55      	ldr	r2, [pc, #340]	; (8001384 <HAL_DMA_IRQHandler+0x208>)
 800122e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 8094 	beq.w	8001362 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001242:	e08e      	b.n	8001362 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	2202      	movs	r2, #2
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d056      	beq.n	8001302 <HAL_DMA_IRQHandler+0x186>
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d051      	beq.n	8001302 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10b      	bne.n	8001284 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 020a 	bic.w	r2, r2, #10
 800127a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a38      	ldr	r2, [pc, #224]	; (800136c <HAL_DMA_IRQHandler+0x1f0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d029      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x166>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a37      	ldr	r2, [pc, #220]	; (8001370 <HAL_DMA_IRQHandler+0x1f4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d022      	beq.n	80012de <HAL_DMA_IRQHandler+0x162>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a35      	ldr	r2, [pc, #212]	; (8001374 <HAL_DMA_IRQHandler+0x1f8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d01a      	beq.n	80012d8 <HAL_DMA_IRQHandler+0x15c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a34      	ldr	r2, [pc, #208]	; (8001378 <HAL_DMA_IRQHandler+0x1fc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d012      	beq.n	80012d2 <HAL_DMA_IRQHandler+0x156>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a32      	ldr	r2, [pc, #200]	; (800137c <HAL_DMA_IRQHandler+0x200>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00a      	beq.n	80012cc <HAL_DMA_IRQHandler+0x150>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a31      	ldr	r2, [pc, #196]	; (8001380 <HAL_DMA_IRQHandler+0x204>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d102      	bne.n	80012c6 <HAL_DMA_IRQHandler+0x14a>
 80012c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012c4:	e00e      	b.n	80012e4 <HAL_DMA_IRQHandler+0x168>
 80012c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ca:	e00b      	b.n	80012e4 <HAL_DMA_IRQHandler+0x168>
 80012cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d0:	e008      	b.n	80012e4 <HAL_DMA_IRQHandler+0x168>
 80012d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d6:	e005      	b.n	80012e4 <HAL_DMA_IRQHandler+0x168>
 80012d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012dc:	e002      	b.n	80012e4 <HAL_DMA_IRQHandler+0x168>
 80012de:	2320      	movs	r3, #32
 80012e0:	e000      	b.n	80012e4 <HAL_DMA_IRQHandler+0x168>
 80012e2:	2302      	movs	r3, #2
 80012e4:	4a27      	ldr	r2, [pc, #156]	; (8001384 <HAL_DMA_IRQHandler+0x208>)
 80012e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d034      	beq.n	8001362 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001300:	e02f      	b.n	8001362 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	2208      	movs	r2, #8
 8001308:	409a      	lsls	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d028      	beq.n	8001364 <HAL_DMA_IRQHandler+0x1e8>
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	2b00      	cmp	r3, #0
 800131a:	d023      	beq.n	8001364 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 020e 	bic.w	r2, r2, #14
 800132a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001334:	2101      	movs	r1, #1
 8001336:	fa01 f202 	lsl.w	r2, r1, r2
 800133a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	4798      	blx	r3
    }
  }
  return;
 8001362:	bf00      	nop
 8001364:	bf00      	nop
}
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40020008 	.word	0x40020008
 8001370:	4002001c 	.word	0x4002001c
 8001374:	40020030 	.word	0x40020030
 8001378:	40020044 	.word	0x40020044
 800137c:	40020058 	.word	0x40020058
 8001380:	4002006c 	.word	0x4002006c
 8001384:	40020000 	.word	0x40020000

08001388 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b10      	cmp	r3, #16
 80013b4:	d108      	bne.n	80013c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013c6:	e007      	b.n	80013d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	60da      	str	r2, [r3, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	e169      	b.n	80016cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013f8:	2201      	movs	r2, #1
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	429a      	cmp	r2, r3
 8001412:	f040 8158 	bne.w	80016c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a9a      	ldr	r2, [pc, #616]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d05e      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001420:	4a98      	ldr	r2, [pc, #608]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d875      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001426:	4a98      	ldr	r2, [pc, #608]	; (8001688 <HAL_GPIO_Init+0x2a4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d058      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 800142c:	4a96      	ldr	r2, [pc, #600]	; (8001688 <HAL_GPIO_Init+0x2a4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d86f      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001432:	4a96      	ldr	r2, [pc, #600]	; (800168c <HAL_GPIO_Init+0x2a8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d052      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001438:	4a94      	ldr	r2, [pc, #592]	; (800168c <HAL_GPIO_Init+0x2a8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d869      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800143e:	4a94      	ldr	r2, [pc, #592]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d04c      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001444:	4a92      	ldr	r2, [pc, #584]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d863      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800144a:	4a92      	ldr	r2, [pc, #584]	; (8001694 <HAL_GPIO_Init+0x2b0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d046      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001450:	4a90      	ldr	r2, [pc, #576]	; (8001694 <HAL_GPIO_Init+0x2b0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d85d      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001456:	2b12      	cmp	r3, #18
 8001458:	d82a      	bhi.n	80014b0 <HAL_GPIO_Init+0xcc>
 800145a:	2b12      	cmp	r3, #18
 800145c:	d859      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <HAL_GPIO_Init+0x80>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	080014df 	.word	0x080014df
 8001468:	080014b9 	.word	0x080014b9
 800146c:	080014cb 	.word	0x080014cb
 8001470:	0800150d 	.word	0x0800150d
 8001474:	08001513 	.word	0x08001513
 8001478:	08001513 	.word	0x08001513
 800147c:	08001513 	.word	0x08001513
 8001480:	08001513 	.word	0x08001513
 8001484:	08001513 	.word	0x08001513
 8001488:	08001513 	.word	0x08001513
 800148c:	08001513 	.word	0x08001513
 8001490:	08001513 	.word	0x08001513
 8001494:	08001513 	.word	0x08001513
 8001498:	08001513 	.word	0x08001513
 800149c:	08001513 	.word	0x08001513
 80014a0:	08001513 	.word	0x08001513
 80014a4:	08001513 	.word	0x08001513
 80014a8:	080014c1 	.word	0x080014c1
 80014ac:	080014d5 	.word	0x080014d5
 80014b0:	4a79      	ldr	r2, [pc, #484]	; (8001698 <HAL_GPIO_Init+0x2b4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014b6:	e02c      	b.n	8001512 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e029      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	3304      	adds	r3, #4
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e024      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	3308      	adds	r3, #8
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e01f      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	330c      	adds	r3, #12
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e01a      	b.n	8001514 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014e6:	2304      	movs	r3, #4
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e013      	b.n	8001514 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f4:	2308      	movs	r3, #8
 80014f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	611a      	str	r2, [r3, #16]
          break;
 80014fe:	e009      	b.n	8001514 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001500:	2308      	movs	r3, #8
 8001502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	615a      	str	r2, [r3, #20]
          break;
 800150a:	e003      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x130>
          break;
 8001512:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2bff      	cmp	r3, #255	; 0xff
 8001518:	d801      	bhi.n	800151e <HAL_GPIO_Init+0x13a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	e001      	b.n	8001522 <HAL_GPIO_Init+0x13e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3304      	adds	r3, #4
 8001522:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2bff      	cmp	r3, #255	; 0xff
 8001528:	d802      	bhi.n	8001530 <HAL_GPIO_Init+0x14c>
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x152>
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	3b08      	subs	r3, #8
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	210f      	movs	r1, #15
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	401a      	ands	r2, r3
 8001548:	6a39      	ldr	r1, [r7, #32]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	431a      	orrs	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80b1 	beq.w	80016c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001564:	4b4d      	ldr	r3, [pc, #308]	; (800169c <HAL_GPIO_Init+0x2b8>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a4c      	ldr	r2, [pc, #304]	; (800169c <HAL_GPIO_Init+0x2b8>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b4a      	ldr	r3, [pc, #296]	; (800169c <HAL_GPIO_Init+0x2b8>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800157c:	4a48      	ldr	r2, [pc, #288]	; (80016a0 <HAL_GPIO_Init+0x2bc>)
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a40      	ldr	r2, [pc, #256]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d013      	beq.n	80015d0 <HAL_GPIO_Init+0x1ec>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3f      	ldr	r2, [pc, #252]	; (80016a8 <HAL_GPIO_Init+0x2c4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00d      	beq.n	80015cc <HAL_GPIO_Init+0x1e8>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3e      	ldr	r2, [pc, #248]	; (80016ac <HAL_GPIO_Init+0x2c8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d007      	beq.n	80015c8 <HAL_GPIO_Init+0x1e4>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3d      	ldr	r2, [pc, #244]	; (80016b0 <HAL_GPIO_Init+0x2cc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_GPIO_Init+0x1e0>
 80015c0:	2303      	movs	r3, #3
 80015c2:	e006      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c4:	2304      	movs	r3, #4
 80015c6:	e004      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e002      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015d0:	2300      	movs	r3, #0
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	f002 0203 	and.w	r2, r2, #3
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	4093      	lsls	r3, r2
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e2:	492f      	ldr	r1, [pc, #188]	; (80016a0 <HAL_GPIO_Init+0x2bc>)
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fc:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	492c      	ldr	r1, [pc, #176]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	43db      	mvns	r3, r3
 8001612:	4928      	ldr	r1, [pc, #160]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001614:	4013      	ands	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	4922      	ldr	r1, [pc, #136]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	43db      	mvns	r3, r3
 800163a:	491e      	ldr	r1, [pc, #120]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800163c:	4013      	ands	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	4918      	ldr	r1, [pc, #96]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	4914      	ldr	r1, [pc, #80]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001664:	4013      	ands	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d021      	beq.n	80016b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
 8001680:	e021      	b.n	80016c6 <HAL_GPIO_Init+0x2e2>
 8001682:	bf00      	nop
 8001684:	10320000 	.word	0x10320000
 8001688:	10310000 	.word	0x10310000
 800168c:	10220000 	.word	0x10220000
 8001690:	10210000 	.word	0x10210000
 8001694:	10120000 	.word	0x10120000
 8001698:	10110000 	.word	0x10110000
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	40011000 	.word	0x40011000
 80016b0:	40011400 	.word	0x40011400
 80016b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_GPIO_Init+0x304>)
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	43db      	mvns	r3, r3
 80016c0:	4909      	ldr	r1, [pc, #36]	; (80016e8 <HAL_GPIO_Init+0x304>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	3301      	adds	r3, #1
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	fa22 f303 	lsr.w	r3, r2, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f47f ae8e 	bne.w	80013f8 <HAL_GPIO_Init+0x14>
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	372c      	adds	r7, #44	; 0x2c
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80016fa:	e09a      	b.n	8001832 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 808d 	beq.w	800182c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001712:	4a4e      	ldr	r2, [pc, #312]	; (800184c <HAL_GPIO_DeInit+0x160>)
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4013      	ands	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a46      	ldr	r2, [pc, #280]	; (8001850 <HAL_GPIO_DeInit+0x164>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d013      	beq.n	8001764 <HAL_GPIO_DeInit+0x78>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a45      	ldr	r2, [pc, #276]	; (8001854 <HAL_GPIO_DeInit+0x168>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d00d      	beq.n	8001760 <HAL_GPIO_DeInit+0x74>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a44      	ldr	r2, [pc, #272]	; (8001858 <HAL_GPIO_DeInit+0x16c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d007      	beq.n	800175c <HAL_GPIO_DeInit+0x70>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a43      	ldr	r2, [pc, #268]	; (800185c <HAL_GPIO_DeInit+0x170>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d101      	bne.n	8001758 <HAL_GPIO_DeInit+0x6c>
 8001754:	2303      	movs	r3, #3
 8001756:	e006      	b.n	8001766 <HAL_GPIO_DeInit+0x7a>
 8001758:	2304      	movs	r3, #4
 800175a:	e004      	b.n	8001766 <HAL_GPIO_DeInit+0x7a>
 800175c:	2302      	movs	r3, #2
 800175e:	e002      	b.n	8001766 <HAL_GPIO_DeInit+0x7a>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_GPIO_DeInit+0x7a>
 8001764:	2300      	movs	r3, #0
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	f002 0203 	and.w	r2, r2, #3
 800176c:	0092      	lsls	r2, r2, #2
 800176e:	4093      	lsls	r3, r2
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	429a      	cmp	r2, r3
 8001774:	d132      	bne.n	80017dc <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001786:	4a31      	ldr	r2, [pc, #196]	; (800184c <HAL_GPIO_DeInit+0x160>)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	43da      	mvns	r2, r3
 8001796:	482d      	ldr	r0, [pc, #180]	; (800184c <HAL_GPIO_DeInit+0x160>)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	400a      	ands	r2, r1
 800179e:	3302      	adds	r3, #2
 80017a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80017a4:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <HAL_GPIO_DeInit+0x174>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	492c      	ldr	r1, [pc, #176]	; (8001860 <HAL_GPIO_DeInit+0x174>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_GPIO_DeInit+0x174>)
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4929      	ldr	r1, [pc, #164]	; (8001860 <HAL_GPIO_DeInit+0x174>)
 80017bc:	4013      	ands	r3, r2
 80017be:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_GPIO_DeInit+0x174>)
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4925      	ldr	r1, [pc, #148]	; (8001860 <HAL_GPIO_DeInit+0x174>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_GPIO_DeInit+0x174>)
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4922      	ldr	r1, [pc, #136]	; (8001860 <HAL_GPIO_DeInit+0x174>)
 80017d8:	4013      	ands	r3, r2
 80017da:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	d801      	bhi.n	80017e6 <HAL_GPIO_DeInit+0xfa>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	e001      	b.n	80017ea <HAL_GPIO_DeInit+0xfe>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3304      	adds	r3, #4
 80017ea:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2bff      	cmp	r3, #255	; 0xff
 80017f0:	d802      	bhi.n	80017f8 <HAL_GPIO_DeInit+0x10c>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	e002      	b.n	80017fe <HAL_GPIO_DeInit+0x112>
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	3b08      	subs	r3, #8
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	210f      	movs	r1, #15
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	401a      	ands	r2, r3
 8001810:	2104      	movs	r1, #4
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	431a      	orrs	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	43db      	mvns	r3, r3
 8001826:	401a      	ands	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	3301      	adds	r3, #1
 8001830:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	f47f af5e 	bne.w	80016fc <HAL_GPIO_DeInit+0x10>
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	40010000 	.word	0x40010000
 8001850:	40010800 	.word	0x40010800
 8001854:	40010c00 	.word	0x40010c00
 8001858:	40011000 	.word	0x40011000
 800185c:	40011400 	.word	0x40011400
 8001860:	40010400 	.word	0x40010400

08001864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001880:	e003      	b.n	800188a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	611a      	str	r2, [r3, #16]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	041a      	lsls	r2, r3, #16
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43d9      	mvns	r1, r3
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	400b      	ands	r3, r1
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	611a      	str	r2, [r3, #16]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c8:	b08b      	sub	sp, #44	; 0x2c
 80018ca:	af06      	add	r7, sp, #24
 80018cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0fd      	b.n	8001ad4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d106      	bne.n	80018f2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f007 f995 	bl	8008c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2203      	movs	r2, #3
 80018f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 f932 	bl	8004b68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	687e      	ldr	r6, [r7, #4]
 800190c:	466d      	mov	r5, sp
 800190e:	f106 0410 	add.w	r4, r6, #16
 8001912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	602b      	str	r3, [r5, #0]
 800191a:	1d33      	adds	r3, r6, #4
 800191c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800191e:	6838      	ldr	r0, [r7, #0]
 8001920:	f003 f8fc 	bl	8004b1c <USB_CoreInit>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0ce      	b.n	8001ad4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f003 f92d 	bl	8004b9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e04c      	b.n	80019e2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	3301      	adds	r3, #1
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001972:	7bfa      	ldrb	r2, [r7, #15]
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	b298      	uxth	r0, r3
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	3336      	adds	r3, #54	; 0x36
 8001986:	4602      	mov	r2, r0
 8001988:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	3303      	adds	r3, #3
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	3338      	adds	r3, #56	; 0x38
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	333c      	adds	r3, #60	; 0x3c
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	3340      	adds	r3, #64	; 0x40
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	3301      	adds	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d3ad      	bcc.n	8001948 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	e044      	b.n	8001a7c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a1a:	7bfa      	ldrb	r2, [r7, #15]
 8001a1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3b5      	bcc.n	80019f2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	687e      	ldr	r6, [r7, #4]
 8001a8e:	466d      	mov	r5, sp
 8001a90:	f106 0410 	add.w	r4, r6, #16
 8001a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	602b      	str	r3, [r5, #0]
 8001a9c:	1d33      	adds	r3, r6, #4
 8001a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa0:	6838      	ldr	r0, [r7, #0]
 8001aa2:	f003 f887 	bl	8004bb4 <USB_DevInit>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e00d      	b.n	8001ad4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f005 f9f8 	bl	8006ec2 <USB_DevDisconnect>

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001adc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_PCD_Start+0x16>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e016      	b.n	8001b20 <HAL_PCD_Start+0x44>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 f81c 	bl	8004b3c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b04:	2101      	movs	r1, #1
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f007 fafb 	bl	8009102 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f005 f9cc 	bl	8006eae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f005 f9ce 	bl	8006ed6 <USB_ReadInterrupts>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b44:	d102      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fb61 	bl	800220e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f005 f9c0 	bl	8006ed6 <USB_ReadInterrupts>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b60:	d112      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b74:	b292      	uxth	r2, r2
 8001b76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f007 f8c9 	bl	8008d12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b80:	2100      	movs	r1, #0
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f925 	bl	8001dd2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f005 f9a2 	bl	8006ed6 <USB_ReadInterrupts>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bb0:	b292      	uxth	r2, r2
 8001bb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f005 f98b 	bl	8006ed6 <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bca:	d10b      	bne.n	8001be4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bde:	b292      	uxth	r2, r2
 8001be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 f974 	bl	8006ed6 <USB_ReadInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf8:	d126      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0204 	bic.w	r2, r2, #4
 8001c0c:	b292      	uxth	r2, r2
 8001c0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0208 	bic.w	r2, r2, #8
 8001c24:	b292      	uxth	r2, r2
 8001c26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f007 f8aa 	bl	8008d84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c42:	b292      	uxth	r2, r2
 8001c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 f942 	bl	8006ed6 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c5c:	f040 8084 	bne.w	8001d68 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	77fb      	strb	r3, [r7, #31]
 8001c64:	e011      	b.n	8001c8a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	7ffb      	ldrb	r3, [r7, #31]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	441a      	add	r2, r3
 8001c72:	7ffb      	ldrb	r3, [r7, #31]
 8001c74:	8812      	ldrh	r2, [r2, #0]
 8001c76:	b292      	uxth	r2, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	f107 0120 	add.w	r1, r7, #32
 8001c7e:	440b      	add	r3, r1
 8001c80:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001c84:	7ffb      	ldrb	r3, [r7, #31]
 8001c86:	3301      	adds	r3, #1
 8001c88:	77fb      	strb	r3, [r7, #31]
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
 8001c8c:	2b07      	cmp	r3, #7
 8001c8e:	d9ea      	bls.n	8001c66 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	b292      	uxth	r2, r2
 8001ca4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001cc0:	bf00      	nop
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f6      	beq.n	8001cc2 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce6:	b292      	uxth	r2, r2
 8001ce8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	77fb      	strb	r3, [r7, #31]
 8001cf0:	e010      	b.n	8001d14 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001cf2:	7ffb      	ldrb	r3, [r7, #31]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	7ffa      	ldrb	r2, [r7, #31]
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	440a      	add	r2, r1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	f107 0120 	add.w	r1, r7, #32
 8001d06:	440b      	add	r3, r1
 8001d08:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d0c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d0e:	7ffb      	ldrb	r3, [r7, #31]
 8001d10:	3301      	adds	r3, #1
 8001d12:	77fb      	strb	r3, [r7, #31]
 8001d14:	7ffb      	ldrb	r3, [r7, #31]
 8001d16:	2b07      	cmp	r3, #7
 8001d18:	d9eb      	bls.n	8001cf2 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0208 	orr.w	r2, r2, #8
 8001d2c:	b292      	uxth	r2, r2
 8001d2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d44:	b292      	uxth	r2, r2
 8001d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0204 	orr.w	r2, r2, #4
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f006 fff4 	bl	8008d50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f005 f8b2 	bl	8006ed6 <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7c:	d10e      	bne.n	8001d9c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d90:	b292      	uxth	r2, r2
 8001d92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f006 ffad 	bl	8008cf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f005 f898 	bl	8006ed6 <USB_ReadInterrupts>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db0:	d10b      	bne.n	8001dca <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc4:	b292      	uxth	r2, r2
 8001dc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001dca:	bf00      	nop
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_PCD_SetAddress+0x1a>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e013      	b.n	8001e14 <HAL_PCD_SetAddress+0x42>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f005 f83f 	bl	8006e88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	4608      	mov	r0, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	70fb      	strb	r3, [r7, #3]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	803b      	strh	r3, [r7, #0]
 8001e32:	4613      	mov	r3, r2
 8001e34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da0e      	bge.n	8001e60 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	705a      	strb	r2, [r3, #1]
 8001e5e:	e00e      	b.n	8001e7e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 0207 	and.w	r2, r3, #7
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e8a:	883a      	ldrh	r2, [r7, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	78ba      	ldrb	r2, [r7, #2]
 8001e94:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	785b      	ldrb	r3, [r3, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ea8:	78bb      	ldrb	r3, [r7, #2]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d102      	bne.n	8001eb4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_PCD_EP_Open+0xa6>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e00e      	b.n	8001ee0 <HAL_PCD_EP_Open+0xc4>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68f9      	ldr	r1, [r7, #12]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 fe8f 	bl	8004bf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ede:	7afb      	ldrb	r3, [r7, #11]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	da0e      	bge.n	8001f1a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	705a      	strb	r2, [r3, #1]
 8001f18:	e00e      	b.n	8001f38 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 0207 	and.w	r2, r3, #7
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_PCD_EP_Close+0x6a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e00e      	b.n	8001f70 <HAL_PCD_EP_Close+0x88>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 f9b1 	bl	80052c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	460b      	mov	r3, r1
 8001f86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	7afb      	ldrb	r3, [r7, #11]
 8001f8a:	f003 0207 	and.w	r2, r3, #7
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb8:	7afb      	ldrb	r3, [r7, #11]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6979      	ldr	r1, [r7, #20]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 fb63 	bl	80056a0 <USB_EPStartXfer>
 8001fda:	e005      	b.n	8001fe8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6979      	ldr	r1, [r7, #20]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 fb5c 	bl	80056a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 0207 	and.w	r2, r3, #7
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002014:	681b      	ldr	r3, [r3, #0]
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	460b      	mov	r3, r1
 800202e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2201      	movs	r2, #1
 800206a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206c:	7afb      	ldrb	r3, [r7, #11]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	b2da      	uxtb	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002078:	7afb      	ldrb	r3, [r7, #11]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6979      	ldr	r1, [r7, #20]
 8002088:	4618      	mov	r0, r3
 800208a:	f003 fb09 	bl	80056a0 <USB_EPStartXfer>
 800208e:	e005      	b.n	800209c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6979      	ldr	r1, [r7, #20]
 8002096:	4618      	mov	r0, r3
 8002098:	f003 fb02 	bl	80056a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	f003 0207 	and.w	r2, r3, #7
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d901      	bls.n	80020c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e04c      	b.n	800215e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	da0e      	bge.n	80020ea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	705a      	strb	r2, [r3, #1]
 80020e8:	e00c      	b.n	8002104 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_PCD_EP_SetStall+0x7e>
 8002120:	2302      	movs	r3, #2
 8002122:	e01c      	b.n	800215e <HAL_PCD_EP_SetStall+0xb8>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	4618      	mov	r0, r3
 8002134:	f004 fdab 	bl	8006c8e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	2b00      	cmp	r3, #0
 8002140:	d108      	bne.n	8002154 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f004 fed0 	bl	8006ef4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	f003 020f 	and.w	r2, r3, #15
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	d901      	bls.n	8002184 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e040      	b.n	8002206 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002188:	2b00      	cmp	r3, #0
 800218a:	da0e      	bge.n	80021aa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	705a      	strb	r2, [r3, #1]
 80021a8:	e00e      	b.n	80021c8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 0207 	and.w	r2, r3, #7
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_PCD_EP_ClrStall+0x82>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e00e      	b.n	8002206 <HAL_PCD_EP_ClrStall+0xa0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68f9      	ldr	r1, [r7, #12]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 fd99 	bl	8006d2e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b08e      	sub	sp, #56	; 0x38
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002216:	e2ec      	b.n	80027f2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002220:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002222:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800222e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 8161 	bne.w	80024fa <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002238:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d152      	bne.n	80022e8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800224e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002252:	81fb      	strh	r3, [r7, #14]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	89fb      	ldrh	r3, [r7, #14]
 800225a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800225e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002262:	b29b      	uxth	r3, r3
 8002264:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3328      	adds	r3, #40	; 0x28
 800226a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002274:	b29b      	uxth	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	3302      	adds	r3, #2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	441a      	add	r2, r3
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022a6:	2100      	movs	r1, #0
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f006 fd0a 	bl	8008cc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 829b 	beq.w	80027f2 <PCD_EP_ISR_Handler+0x5e4>
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 8296 	bne.w	80027f2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b292      	uxth	r2, r2
 80022da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022e6:	e284      	b.n	80027f2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d034      	beq.n	800236c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230a:	b29b      	uxth	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	3306      	adds	r3, #6
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002340:	b29b      	uxth	r3, r3
 8002342:	f004 fe27 	bl	8006f94 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	b29a      	uxth	r2, r3
 800234e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002352:	4013      	ands	r3, r2
 8002354:	823b      	strh	r3, [r7, #16]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	8a3a      	ldrh	r2, [r7, #16]
 800235c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002360:	b292      	uxth	r2, r2
 8002362:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f006 fc7f 	bl	8008c68 <HAL_PCD_SetupStageCallback>
 800236a:	e242      	b.n	80027f2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800236c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002370:	2b00      	cmp	r3, #0
 8002372:	f280 823e 	bge.w	80027f2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b29a      	uxth	r2, r3
 800237e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002382:	4013      	ands	r3, r2
 8002384:	83bb      	strh	r3, [r7, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	8bba      	ldrh	r2, [r7, #28]
 800238c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002390:	b292      	uxth	r2, r2
 8002392:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239c:	b29b      	uxth	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	3306      	adds	r3, #6
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d019      	beq.n	80023fc <PCD_EP_ISR_Handler+0x1ee>
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	6959      	ldr	r1, [r3, #20]
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f004 fdd7 	bl	8006f94 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	441a      	add	r2, r3
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023f4:	2100      	movs	r1, #0
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f006 fc48 	bl	8008c8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002408:	2b00      	cmp	r3, #0
 800240a:	f040 81f2 	bne.w	80027f2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241c:	b29b      	uxth	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	4413      	add	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d112      	bne.n	800245c <PCD_EP_ISR_Handler+0x24e>
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002440:	b29a      	uxth	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	801a      	strh	r2, [r3, #0]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002454:	b29a      	uxth	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	801a      	strh	r2, [r3, #0]
 800245a:	e02f      	b.n	80024bc <PCD_EP_ISR_Handler+0x2ae>
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2b3e      	cmp	r3, #62	; 0x3e
 8002462:	d813      	bhi.n	800248c <PCD_EP_ISR_Handler+0x27e>
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	085b      	lsrs	r3, r3, #1
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <PCD_EP_ISR_Handler+0x270>
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	3301      	adds	r3, #1
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	b29b      	uxth	r3, r3
 8002482:	029b      	lsls	r3, r3, #10
 8002484:	b29a      	uxth	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	e017      	b.n	80024bc <PCD_EP_ISR_Handler+0x2ae>
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	633b      	str	r3, [r7, #48]	; 0x30
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <PCD_EP_ISR_Handler+0x298>
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	3b01      	subs	r3, #1
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	029b      	lsls	r3, r3, #10
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024cc:	827b      	strh	r3, [r7, #18]
 80024ce:	8a7b      	ldrh	r3, [r7, #18]
 80024d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024d4:	827b      	strh	r3, [r7, #18]
 80024d6:	8a7b      	ldrh	r3, [r7, #18]
 80024d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024dc:	827b      	strh	r3, [r7, #18]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	8a7b      	ldrh	r3, [r7, #18]
 80024e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	8013      	strh	r3, [r2, #0]
 80024f8:	e17b      	b.n	80027f2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800250c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002510:	2b00      	cmp	r3, #0
 8002512:	f280 80ea 	bge.w	80026ea <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29a      	uxth	r2, r3
 8002528:	f640 738f 	movw	r3, #3983	; 0xf8f
 800252c:	4013      	ands	r3, r2
 800252e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002540:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002544:	b292      	uxth	r2, r2
 8002546:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002548:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	7b1b      	ldrb	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d122      	bne.n	80025ac <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	3306      	adds	r3, #6
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800258e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002590:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 8087 	beq.w	80026a6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	6959      	ldr	r1, [r3, #20]
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	88da      	ldrh	r2, [r3, #6]
 80025a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025a6:	f004 fcf5 	bl	8006f94 <USB_ReadPMA>
 80025aa:	e07c      	b.n	80026a6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	78db      	ldrb	r3, [r3, #3]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d108      	bne.n	80025c6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025b6:	461a      	mov	r2, r3
 80025b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f927 	bl	800280e <HAL_PCD_EP_DB_Receive>
 80025c0:	4603      	mov	r3, r0
 80025c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025c4:	e06f      	b.n	80026a6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e0:	847b      	strh	r3, [r7, #34]	; 0x22
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	441a      	add	r2, r3
 80025f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002602:	b29b      	uxth	r3, r3
 8002604:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d021      	beq.n	8002664 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	3302      	adds	r3, #2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002648:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800264a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800264c:	2b00      	cmp	r3, #0
 800264e:	d02a      	beq.n	80026a6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	6959      	ldr	r1, [r3, #20]
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	891a      	ldrh	r2, [r3, #8]
 800265c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800265e:	f004 fc99 	bl	8006f94 <USB_ReadPMA>
 8002662:	e020      	b.n	80026a6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	3306      	adds	r3, #6
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800268e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	6959      	ldr	r1, [r3, #20]
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	895a      	ldrh	r2, [r3, #10]
 80026a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026a2:	f004 fc77 	bl	8006f94 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ac:	441a      	add	r2, r3
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026b8:	441a      	add	r2, r3
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d004      	beq.n	80026d0 <PCD_EP_ISR_Handler+0x4c2>
 80026c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d206      	bcs.n	80026de <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f006 fad8 	bl	8008c8c <HAL_PCD_DataOutStageCallback>
 80026dc:	e005      	b.n	80026ea <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e4:	4618      	mov	r0, r3
 80026e6:	f002 ffdb 	bl	80056a0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80026ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d07e      	beq.n	80027f2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80026f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b29b      	uxth	r3, r3
 800271a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	843b      	strh	r3, [r7, #32]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	441a      	add	r2, r3
 8002732:	8c3b      	ldrh	r3, [r7, #32]
 8002734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800273c:	b29b      	uxth	r3, r3
 800273e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	78db      	ldrb	r3, [r3, #3]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d00c      	beq.n	8002762 <PCD_EP_ISR_Handler+0x554>
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	78db      	ldrb	r3, [r3, #3]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002754:	2b02      	cmp	r3, #2
 8002756:	d146      	bne.n	80027e6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002758:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d141      	bne.n	80027e6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276a:	b29b      	uxth	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	3302      	adds	r3, #2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800278a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	8bfb      	ldrh	r3, [r7, #30]
 8002792:	429a      	cmp	r2, r3
 8002794:	d906      	bls.n	80027a4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	8bfb      	ldrh	r3, [r7, #30]
 800279c:	1ad2      	subs	r2, r2, r3
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	619a      	str	r2, [r3, #24]
 80027a2:	e002      	b.n	80027aa <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	2200      	movs	r2, #0
 80027a8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	4619      	mov	r1, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f006 fa82 	bl	8008cc2 <HAL_PCD_DataInStageCallback>
 80027be:	e018      	b.n	80027f2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	8bfb      	ldrh	r3, [r7, #30]
 80027c6:	441a      	add	r2, r3
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	69da      	ldr	r2, [r3, #28]
 80027d0:	8bfb      	ldrh	r3, [r7, #30]
 80027d2:	441a      	add	r2, r3
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 ff5e 	bl	80056a0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80027e4:	e005      	b.n	80027f2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80027e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027e8:	461a      	mov	r2, r3
 80027ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f91b 	bl	8002a28 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f6ff ad0a 	blt.w	8002218 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3738      	adds	r7, #56	; 0x38
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b088      	sub	sp, #32
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	4613      	mov	r3, r2
 800281a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d07e      	beq.n	8002924 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282e:	b29b      	uxth	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	3302      	adds	r3, #2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800284e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	8b7b      	ldrh	r3, [r7, #26]
 8002856:	429a      	cmp	r2, r3
 8002858:	d306      	bcc.n	8002868 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	8b7b      	ldrh	r3, [r7, #26]
 8002860:	1ad2      	subs	r2, r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	619a      	str	r2, [r3, #24]
 8002866:	e002      	b.n	800286e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d123      	bne.n	80028be <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800288c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002890:	833b      	strh	r3, [r7, #24]
 8002892:	8b3b      	ldrh	r3, [r7, #24]
 8002894:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002898:	833b      	strh	r3, [r7, #24]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	441a      	add	r2, r3
 80028a8:	8b3b      	ldrh	r3, [r7, #24]
 80028aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01f      	beq.n	8002908 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e2:	82fb      	strh	r3, [r7, #22]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	441a      	add	r2, r3
 80028f2:	8afb      	ldrh	r3, [r7, #22]
 80028f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002900:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002904:	b29b      	uxth	r3, r3
 8002906:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002908:	8b7b      	ldrh	r3, [r7, #26]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8087 	beq.w	8002a1e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	6959      	ldr	r1, [r3, #20]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	891a      	ldrh	r2, [r3, #8]
 800291c:	8b7b      	ldrh	r3, [r7, #26]
 800291e:	f004 fb39 	bl	8006f94 <USB_ReadPMA>
 8002922:	e07c      	b.n	8002a1e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292c:	b29b      	uxth	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	3306      	adds	r3, #6
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	4413      	add	r3, r2
 8002942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	8b7b      	ldrh	r3, [r7, #26]
 8002954:	429a      	cmp	r2, r3
 8002956:	d306      	bcc.n	8002966 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	699a      	ldr	r2, [r3, #24]
 800295c:	8b7b      	ldrh	r3, [r7, #26]
 800295e:	1ad2      	subs	r2, r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	619a      	str	r2, [r3, #24]
 8002964:	e002      	b.n	800296c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d123      	bne.n	80029bc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	83fb      	strh	r3, [r7, #30]
 8002990:	8bfb      	ldrh	r3, [r7, #30]
 8002992:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002996:	83fb      	strh	r3, [r7, #30]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	441a      	add	r2, r3
 80029a6:	8bfb      	ldrh	r3, [r7, #30]
 80029a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d11f      	bne.n	8002a06 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e0:	83bb      	strh	r3, [r7, #28]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	441a      	add	r2, r3
 80029f0:	8bbb      	ldrh	r3, [r7, #28]
 80029f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a06:	8b7b      	ldrh	r3, [r7, #26]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	6959      	ldr	r1, [r3, #20]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	895a      	ldrh	r2, [r3, #10]
 8002a18:	8b7b      	ldrh	r3, [r7, #26]
 8002a1a:	f004 fabb 	bl	8006f94 <USB_ReadPMA>
    }
  }

  return count;
 8002a1e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b0a2      	sub	sp, #136	; 0x88
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	4613      	mov	r3, r2
 8002a34:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 81c7 	beq.w	8002dd0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	3302      	adds	r3, #2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d907      	bls.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a82:	1ad2      	subs	r2, r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	619a      	str	r2, [r3, #24]
 8002a88:	e002      	b.n	8002a90 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f040 80b9 	bne.w	8002c0c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	785b      	ldrb	r3, [r3, #1]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d126      	bne.n	8002af0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	4413      	add	r3, r2
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	011a      	lsls	r2, r3, #4
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	801a      	strh	r2, [r3, #0]
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	801a      	strh	r2, [r3, #0]
 8002aee:	e01a      	b.n	8002b26 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	785b      	ldrb	r3, [r3, #1]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d116      	bne.n	8002b26 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	4413      	add	r3, r2
 8002b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	011a      	lsls	r2, r3, #4
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	4413      	add	r3, r2
 8002b1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b22:	2200      	movs	r2, #0
 8002b24:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	785b      	ldrb	r3, [r3, #1]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d126      	bne.n	8002b82 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	4413      	add	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	011a      	lsls	r2, r3, #4
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4413      	add	r3, r2
 8002b56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	801a      	strh	r2, [r3, #0]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	801a      	strh	r2, [r3, #0]
 8002b80:	e017      	b.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	785b      	ldrb	r3, [r3, #1]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d113      	bne.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	4413      	add	r3, r2
 8002b9a:	623b      	str	r3, [r7, #32]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	011a      	lsls	r2, r3, #4
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f006 f882 	bl	8008cc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 82d4 	beq.w	8003172 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be4:	827b      	strh	r3, [r7, #18]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	441a      	add	r2, r3
 8002bf4:	8a7b      	ldrh	r3, [r7, #18]
 8002bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	8013      	strh	r3, [r2, #0]
 8002c0a:	e2b2      	b.n	8003172 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d021      	beq.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	441a      	add	r2, r3
 8002c42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	f040 8286 	bne.w	8003172 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c6e:	441a      	add	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c7c:	441a      	add	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d309      	bcc.n	8002ca2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	6a1a      	ldr	r2, [r3, #32]
 8002c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c9a:	1ad2      	subs	r2, r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	621a      	str	r2, [r3, #32]
 8002ca0:	e015      	b.n	8002cce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d107      	bne.n	8002cba <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002caa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cb8:	e009      	b.n	8002cce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d155      	bne.n	8002d82 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cea:	4413      	add	r3, r2
 8002cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	011a      	lsls	r2, r3, #4
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d112      	bne.n	8002d2a <HAL_PCD_EP_DB_Transmit+0x302>
 8002d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d12:	801a      	strh	r2, [r3, #0]
 8002d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d26:	801a      	strh	r2, [r3, #0]
 8002d28:	e047      	b.n	8002dba <HAL_PCD_EP_DB_Transmit+0x392>
 8002d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d2e:	d811      	bhi.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d42:	3301      	adds	r3, #1
 8002d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	029b      	lsls	r3, r3, #10
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d50:	801a      	strh	r2, [r3, #0]
 8002d52:	e032      	b.n	8002dba <HAL_PCD_EP_DB_Transmit+0x392>
 8002d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <HAL_PCD_EP_DB_Transmit+0x342>
 8002d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d66:	3b01      	subs	r3, #1
 8002d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	029b      	lsls	r3, r3, #10
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7e:	801a      	strh	r2, [r3, #0]
 8002d80:	e01b      	b.n	8002dba <HAL_PCD_EP_DB_Transmit+0x392>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	785b      	ldrb	r3, [r3, #1]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d117      	bne.n	8002dba <HAL_PCD_EP_DB_Transmit+0x392>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9e:	4413      	add	r3, r2
 8002da0:	643b      	str	r3, [r7, #64]	; 0x40
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	011a      	lsls	r2, r3, #4
 8002da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002daa:	4413      	add	r3, r2
 8002dac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	6959      	ldr	r1, [r3, #20]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	891a      	ldrh	r2, [r3, #8]
 8002dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	f004 f89e 	bl	8006f0a <USB_WritePMA>
 8002dce:	e1d0      	b.n	8003172 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4413      	add	r3, r2
 8002de4:	3306      	adds	r3, #6
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d307      	bcc.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e10:	1ad2      	subs	r2, r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	619a      	str	r2, [r3, #24]
 8002e16:	e002      	b.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 80c4 	bne.w	8002fb0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	785b      	ldrb	r3, [r3, #1]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d126      	bne.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x456>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e44:	4413      	add	r3, r2
 8002e46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	011a      	lsls	r2, r3, #4
 8002e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e50:	4413      	add	r3, r2
 8002e52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e56:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e66:	801a      	strh	r2, [r3, #0]
 8002e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e7a:	801a      	strh	r2, [r3, #0]
 8002e7c:	e01a      	b.n	8002eb4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	785b      	ldrb	r3, [r3, #1]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d116      	bne.n	8002eb4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	677b      	str	r3, [r7, #116]	; 0x74
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e9a:	4413      	add	r3, r2
 8002e9c:	677b      	str	r3, [r7, #116]	; 0x74
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	011a      	lsls	r2, r3, #4
 8002ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002eac:	673b      	str	r3, [r7, #112]	; 0x70
 8002eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d12f      	bne.n	8002f22 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eda:	4413      	add	r3, r2
 8002edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	011a      	lsls	r2, r3, #4
 8002ee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eea:	4413      	add	r3, r2
 8002eec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f06:	801a      	strh	r2, [r3, #0]
 8002f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f1e:	801a      	strh	r2, [r3, #0]
 8002f20:	e017      	b.n	8002f52 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	785b      	ldrb	r3, [r3, #1]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d113      	bne.n	8002f52 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f38:	4413      	add	r3, r2
 8002f3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	011a      	lsls	r2, r3, #4
 8002f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f44:	4413      	add	r3, r2
 8002f46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f4e:	2200      	movs	r2, #0
 8002f50:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	4619      	mov	r1, r3
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f005 feb2 	bl	8008cc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 8104 	bne.w	8003172 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	441a      	add	r2, r3
 8002f96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	8013      	strh	r3, [r2, #0]
 8002fae:	e0e0      	b.n	8003172 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d121      	bne.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	441a      	add	r2, r3
 8002fe6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003004:	2b01      	cmp	r3, #1
 8003006:	f040 80b4 	bne.w	8003172 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003012:	441a      	add	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003020:	441a      	add	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	429a      	cmp	r2, r3
 8003030:	d309      	bcc.n	8003046 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6a1a      	ldr	r2, [r3, #32]
 800303c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303e:	1ad2      	subs	r2, r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	621a      	str	r2, [r3, #32]
 8003044:	e015      	b.n	8003072 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d107      	bne.n	800305e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800304e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003052:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800305c:	e009      	b.n	8003072 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2200      	movs	r2, #0
 8003068:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	667b      	str	r3, [r7, #100]	; 0x64
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	785b      	ldrb	r3, [r3, #1]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d155      	bne.n	800312c <HAL_PCD_EP_DB_Transmit+0x704>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003094:	4413      	add	r3, r2
 8003096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	011a      	lsls	r2, r3, #4
 800309e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a0:	4413      	add	r3, r2
 80030a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80030a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d112      	bne.n	80030d4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80030ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030bc:	801a      	strh	r2, [r3, #0]
 80030be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d0:	801a      	strh	r2, [r3, #0]
 80030d2:	e044      	b.n	800315e <HAL_PCD_EP_DB_Transmit+0x736>
 80030d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d6:	2b3e      	cmp	r3, #62	; 0x3e
 80030d8:	d811      	bhi.n	80030fe <HAL_PCD_EP_DB_Transmit+0x6d6>
 80030da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	657b      	str	r3, [r7, #84]	; 0x54
 80030e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80030ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ec:	3301      	adds	r3, #1
 80030ee:	657b      	str	r3, [r7, #84]	; 0x54
 80030f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	029b      	lsls	r3, r3, #10
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030fa:	801a      	strh	r2, [r3, #0]
 80030fc:	e02f      	b.n	800315e <HAL_PCD_EP_DB_Transmit+0x736>
 80030fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	657b      	str	r3, [r7, #84]	; 0x54
 8003104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800310e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003110:	3b01      	subs	r3, #1
 8003112:	657b      	str	r3, [r7, #84]	; 0x54
 8003114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003116:	b29b      	uxth	r3, r3
 8003118:	029b      	lsls	r3, r3, #10
 800311a:	b29b      	uxth	r3, r3
 800311c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003124:	b29a      	uxth	r2, r3
 8003126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	e018      	b.n	800315e <HAL_PCD_EP_DB_Transmit+0x736>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	785b      	ldrb	r3, [r3, #1]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d114      	bne.n	800315e <HAL_PCD_EP_DB_Transmit+0x736>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313c:	b29b      	uxth	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003142:	4413      	add	r3, r2
 8003144:	667b      	str	r3, [r7, #100]	; 0x64
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	011a      	lsls	r2, r3, #4
 800314c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800314e:	4413      	add	r3, r2
 8003150:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003154:	663b      	str	r3, [r7, #96]	; 0x60
 8003156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003158:	b29a      	uxth	r2, r3
 800315a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800315c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	6959      	ldr	r1, [r3, #20]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	895a      	ldrh	r2, [r3, #10]
 800316a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316c:	b29b      	uxth	r3, r3
 800316e:	f003 fecc 	bl	8006f0a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800318c:	823b      	strh	r3, [r7, #16]
 800318e:	8a3b      	ldrh	r3, [r7, #16]
 8003190:	f083 0310 	eor.w	r3, r3, #16
 8003194:	823b      	strh	r3, [r7, #16]
 8003196:	8a3b      	ldrh	r3, [r7, #16]
 8003198:	f083 0320 	eor.w	r3, r3, #32
 800319c:	823b      	strh	r3, [r7, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	441a      	add	r2, r3
 80031ac:	8a3b      	ldrh	r3, [r7, #16]
 80031ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031be:	b29b      	uxth	r3, r3
 80031c0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3788      	adds	r7, #136	; 0x88
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	817b      	strh	r3, [r7, #10]
 80031da:	4613      	mov	r3, r2
 80031dc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80031de:	897b      	ldrh	r3, [r7, #10]
 80031e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ea:	897b      	ldrh	r3, [r7, #10]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4413      	add	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	e009      	b.n	8003216 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003202:	897a      	ldrh	r2, [r7, #10]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003216:	893b      	ldrh	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d107      	bne.n	800322c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2200      	movs	r2, #0
 8003220:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	b29a      	uxth	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	80da      	strh	r2, [r3, #6]
 800322a:	e00b      	b.n	8003244 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2201      	movs	r2, #1
 8003230:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	b29a      	uxth	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	b29a      	uxth	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]
}
 800325a:	bf00      	nop
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	420e0020 	.word	0x420e0020

08003268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e26c      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8087 	beq.w	8003396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003288:	4b92      	ldr	r3, [pc, #584]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b04      	cmp	r3, #4
 8003292:	d00c      	beq.n	80032ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003294:	4b8f      	ldr	r3, [pc, #572]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 030c 	and.w	r3, r3, #12
 800329c:	2b08      	cmp	r3, #8
 800329e:	d112      	bne.n	80032c6 <HAL_RCC_OscConfig+0x5e>
 80032a0:	4b8c      	ldr	r3, [pc, #560]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ac:	d10b      	bne.n	80032c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ae:	4b89      	ldr	r3, [pc, #548]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d06c      	beq.n	8003394 <HAL_RCC_OscConfig+0x12c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d168      	bne.n	8003394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e246      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x76>
 80032d0:	4b80      	ldr	r3, [pc, #512]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a7f      	ldr	r2, [pc, #508]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	e02e      	b.n	800333c <HAL_RCC_OscConfig+0xd4>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x98>
 80032e6:	4b7b      	ldr	r3, [pc, #492]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7a      	ldr	r2, [pc, #488]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b78      	ldr	r3, [pc, #480]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a77      	ldr	r2, [pc, #476]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e01d      	b.n	800333c <HAL_RCC_OscConfig+0xd4>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0xbc>
 800330a:	4b72      	ldr	r3, [pc, #456]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a71      	ldr	r2, [pc, #452]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b6f      	ldr	r3, [pc, #444]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a6e      	ldr	r2, [pc, #440]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0xd4>
 8003324:	4b6b      	ldr	r3, [pc, #428]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6a      	ldr	r2, [pc, #424]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 800332a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b68      	ldr	r3, [pc, #416]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a67      	ldr	r2, [pc, #412]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fd fbe6 	bl	8000b14 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334c:	f7fd fbe2 	bl	8000b14 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e1fa      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	4b5d      	ldr	r3, [pc, #372]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0xe4>
 800336a:	e014      	b.n	8003396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fd fbd2 	bl	8000b14 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003374:	f7fd fbce 	bl	8000b14 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1e6      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	4b53      	ldr	r3, [pc, #332]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x10c>
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d063      	beq.n	800346a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033a2:	4b4c      	ldr	r3, [pc, #304]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033ae:	4b49      	ldr	r3, [pc, #292]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d11c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x18c>
 80033ba:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d116      	bne.n	80033f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c6:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_RCC_OscConfig+0x176>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d001      	beq.n	80033de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e1ba      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033de:	4b3d      	ldr	r3, [pc, #244]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4939      	ldr	r1, [pc, #228]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f2:	e03a      	b.n	800346a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033fc:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <HAL_RCC_OscConfig+0x270>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7fd fb87 	bl	8000b14 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340a:	f7fd fb83 	bl	8000b14 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e19b      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003428:	4b2a      	ldr	r3, [pc, #168]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4927      	ldr	r1, [pc, #156]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003438:	4313      	orrs	r3, r2
 800343a:	600b      	str	r3, [r1, #0]
 800343c:	e015      	b.n	800346a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343e:	4b26      	ldr	r3, [pc, #152]	; (80034d8 <HAL_RCC_OscConfig+0x270>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fd fb66 	bl	8000b14 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344c:	f7fd fb62 	bl	8000b14 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e17a      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d03a      	beq.n	80034ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d019      	beq.n	80034b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347e:	4b17      	ldr	r3, [pc, #92]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003484:	f7fd fb46 	bl	8000b14 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7fd fb42 	bl	8000b14 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e15a      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034aa:	2001      	movs	r0, #1
 80034ac:	f000 fad8 	bl	8003a60 <RCC_Delay>
 80034b0:	e01c      	b.n	80034ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b8:	f7fd fb2c 	bl	8000b14 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034be:	e00f      	b.n	80034e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c0:	f7fd fb28 	bl	8000b14 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d908      	bls.n	80034e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e140      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	42420000 	.word	0x42420000
 80034dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e0:	4b9e      	ldr	r3, [pc, #632]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e9      	bne.n	80034c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a6 	beq.w	8003646 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fe:	4b97      	ldr	r3, [pc, #604]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10d      	bne.n	8003526 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	4b94      	ldr	r3, [pc, #592]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	4a93      	ldr	r2, [pc, #588]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003514:	61d3      	str	r3, [r2, #28]
 8003516:	4b91      	ldr	r3, [pc, #580]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	4b8e      	ldr	r3, [pc, #568]	; (8003760 <HAL_RCC_OscConfig+0x4f8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d118      	bne.n	8003564 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003532:	4b8b      	ldr	r3, [pc, #556]	; (8003760 <HAL_RCC_OscConfig+0x4f8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a8a      	ldr	r2, [pc, #552]	; (8003760 <HAL_RCC_OscConfig+0x4f8>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353e:	f7fd fae9 	bl	8000b14 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003546:	f7fd fae5 	bl	8000b14 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b64      	cmp	r3, #100	; 0x64
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0fd      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	4b81      	ldr	r3, [pc, #516]	; (8003760 <HAL_RCC_OscConfig+0x4f8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x312>
 800356c:	4b7b      	ldr	r3, [pc, #492]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4a7a      	ldr	r2, [pc, #488]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6213      	str	r3, [r2, #32]
 8003578:	e02d      	b.n	80035d6 <HAL_RCC_OscConfig+0x36e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x334>
 8003582:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a75      	ldr	r2, [pc, #468]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	6213      	str	r3, [r2, #32]
 800358e:	4b73      	ldr	r3, [pc, #460]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4a72      	ldr	r2, [pc, #456]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 8003594:	f023 0304 	bic.w	r3, r3, #4
 8003598:	6213      	str	r3, [r2, #32]
 800359a:	e01c      	b.n	80035d6 <HAL_RCC_OscConfig+0x36e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b05      	cmp	r3, #5
 80035a2:	d10c      	bne.n	80035be <HAL_RCC_OscConfig+0x356>
 80035a4:	4b6d      	ldr	r3, [pc, #436]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4a6c      	ldr	r2, [pc, #432]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	f043 0304 	orr.w	r3, r3, #4
 80035ae:	6213      	str	r3, [r2, #32]
 80035b0:	4b6a      	ldr	r3, [pc, #424]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4a69      	ldr	r2, [pc, #420]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6213      	str	r3, [r2, #32]
 80035bc:	e00b      	b.n	80035d6 <HAL_RCC_OscConfig+0x36e>
 80035be:	4b67      	ldr	r3, [pc, #412]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4a66      	ldr	r2, [pc, #408]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	6213      	str	r3, [r2, #32]
 80035ca:	4b64      	ldr	r3, [pc, #400]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	4a63      	ldr	r2, [pc, #396]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80035d0:	f023 0304 	bic.w	r3, r3, #4
 80035d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d015      	beq.n	800360a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035de:	f7fd fa99 	bl	8000b14 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e4:	e00a      	b.n	80035fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e6:	f7fd fa95 	bl	8000b14 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e0ab      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fc:	4b57      	ldr	r3, [pc, #348]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ee      	beq.n	80035e6 <HAL_RCC_OscConfig+0x37e>
 8003608:	e014      	b.n	8003634 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360a:	f7fd fa83 	bl	8000b14 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003612:	f7fd fa7f 	bl	8000b14 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e095      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003628:	4b4c      	ldr	r3, [pc, #304]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1ee      	bne.n	8003612 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4b48      	ldr	r3, [pc, #288]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4a47      	ldr	r2, [pc, #284]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003644:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8081 	beq.w	8003752 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003650:	4b42      	ldr	r3, [pc, #264]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b08      	cmp	r3, #8
 800365a:	d061      	beq.n	8003720 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d146      	bne.n	80036f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003664:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <HAL_RCC_OscConfig+0x4fc>)
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fd fa53 	bl	8000b14 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003672:	f7fd fa4f 	bl	8000b14 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e067      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003684:	4b35      	ldr	r3, [pc, #212]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f0      	bne.n	8003672 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d108      	bne.n	80036ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800369a:	4b30      	ldr	r3, [pc, #192]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	492d      	ldr	r1, [pc, #180]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ac:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a19      	ldr	r1, [r3, #32]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	430b      	orrs	r3, r1
 80036be:	4927      	ldr	r1, [pc, #156]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c4:	4b27      	ldr	r3, [pc, #156]	; (8003764 <HAL_RCC_OscConfig+0x4fc>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fd fa23 	bl	8000b14 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fd fa1f 	bl	8000b14 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e037      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e4:	4b1d      	ldr	r3, [pc, #116]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x46a>
 80036f0:	e02f      	b.n	8003752 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <HAL_RCC_OscConfig+0x4fc>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fd fa0c 	bl	8000b14 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003700:	f7fd fa08 	bl	8000b14 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e020      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003712:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x498>
 800371e:	e018      	b.n	8003752 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e013      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_OscConfig+0x4f4>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	429a      	cmp	r2, r3
 800373e:	d106      	bne.n	800374e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d001      	beq.n	8003752 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000
 8003760:	40007000 	.word	0x40007000
 8003764:	42420060 	.word	0x42420060

08003768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0d0      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800377c:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d910      	bls.n	80037ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b67      	ldr	r3, [pc, #412]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 0207 	bic.w	r2, r3, #7
 8003792:	4965      	ldr	r1, [pc, #404]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0b8      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d020      	beq.n	80037fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c4:	4b59      	ldr	r3, [pc, #356]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4a58      	ldr	r2, [pc, #352]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037dc:	4b53      	ldr	r3, [pc, #332]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a52      	ldr	r2, [pc, #328]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e8:	4b50      	ldr	r3, [pc, #320]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	494d      	ldr	r1, [pc, #308]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d040      	beq.n	8003888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	4b47      	ldr	r3, [pc, #284]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d115      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e07f      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003826:	4b41      	ldr	r3, [pc, #260]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e073      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003836:	4b3d      	ldr	r3, [pc, #244]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e06b      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003846:	4b39      	ldr	r3, [pc, #228]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4936      	ldr	r1, [pc, #216]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003858:	f7fd f95c 	bl	8000b14 <HAL_GetTick>
 800385c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	e00a      	b.n	8003876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003860:	f7fd f958 	bl	8000b14 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e053      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	4b2d      	ldr	r3, [pc, #180]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 020c 	and.w	r2, r3, #12
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	429a      	cmp	r2, r3
 8003886:	d1eb      	bne.n	8003860 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003888:	4b27      	ldr	r3, [pc, #156]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d210      	bcs.n	80038b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b24      	ldr	r3, [pc, #144]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 0207 	bic.w	r2, r3, #7
 800389e:	4922      	ldr	r1, [pc, #136]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b20      	ldr	r3, [pc, #128]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e032      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c4:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4916      	ldr	r1, [pc, #88]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	490e      	ldr	r1, [pc, #56]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038f6:	f000 f821 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80038fa:	4602      	mov	r2, r0
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	490a      	ldr	r1, [pc, #40]	; (8003930 <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	5ccb      	ldrb	r3, [r1, r3]
 800390a:	fa22 f303 	lsr.w	r3, r2, r3
 800390e:	4a09      	ldr	r2, [pc, #36]	; (8003934 <HAL_RCC_ClockConfig+0x1cc>)
 8003910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <HAL_RCC_ClockConfig+0x1d0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd f8ba 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40022000 	.word	0x40022000
 800392c:	40021000 	.word	0x40021000
 8003930:	08009260 	.word	0x08009260
 8003934:	20000000 	.word	0x20000000
 8003938:	2000000c 	.word	0x2000000c

0800393c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	b490      	push	{r4, r7}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003942:	4b2a      	ldr	r3, [pc, #168]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003944:	1d3c      	adds	r4, r7, #4
 8003946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800394c:	f240 2301 	movw	r3, #513	; 0x201
 8003950:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	2300      	movs	r3, #0
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b04      	cmp	r3, #4
 8003974:	d002      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x40>
 8003976:	2b08      	cmp	r3, #8
 8003978:	d003      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x46>
 800397a:	e02d      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800397c:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800397e:	623b      	str	r3, [r7, #32]
      break;
 8003980:	e02d      	b.n	80039de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	0c9b      	lsrs	r3, r3, #18
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800398e:	4413      	add	r3, r2
 8003990:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003994:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d013      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039a0:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	0c5b      	lsrs	r3, r3, #17
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039ae:	4413      	add	r3, r2
 80039b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	4a0e      	ldr	r2, [pc, #56]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ba:	fb02 f203 	mul.w	r2, r2, r3
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
 80039c6:	e004      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039cc:	fb02 f303 	mul.w	r3, r2, r3
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	623b      	str	r3, [r7, #32]
      break;
 80039d6:	e002      	b.n	80039de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039da:	623b      	str	r3, [r7, #32]
      break;
 80039dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039de:	6a3b      	ldr	r3, [r7, #32]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3728      	adds	r7, #40	; 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc90      	pop	{r4, r7}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	080091f8 	.word	0x080091f8
 80039f0:	40021000 	.word	0x40021000
 80039f4:	007a1200 	.word	0x007a1200
 80039f8:	003d0900 	.word	0x003d0900

080039fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a00:	4b02      	ldr	r3, [pc, #8]	; (8003a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr
 8003a0c:	20000000 	.word	0x20000000

08003a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a14:	f7ff fff2 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4903      	ldr	r1, [pc, #12]	; (8003a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000
 8003a34:	08009270 	.word	0x08009270

08003a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a3c:	f7ff ffde 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	0adb      	lsrs	r3, r3, #11
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4903      	ldr	r1, [pc, #12]	; (8003a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	08009270 	.word	0x08009270

08003a60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <RCC_Delay+0x34>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <RCC_Delay+0x38>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0a5b      	lsrs	r3, r3, #9
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a7c:	bf00      	nop
  }
  while (Delay --);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1e5a      	subs	r2, r3, #1
 8003a82:	60fa      	str	r2, [r7, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f9      	bne.n	8003a7c <RCC_Delay+0x1c>
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	20000000 	.word	0x20000000
 8003a98:	10624dd3 	.word	0x10624dd3

08003a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d07d      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003abc:	4b4f      	ldr	r3, [pc, #316]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10d      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b4c      	ldr	r3, [pc, #304]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4a4b      	ldr	r2, [pc, #300]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	61d3      	str	r3, [r2, #28]
 8003ad4:	4b49      	ldr	r3, [pc, #292]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d118      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a42      	ldr	r2, [pc, #264]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afc:	f7fd f80a 	bl	8000b14 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b02:	e008      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b04:	f7fd f806 	bl	8000b14 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e06d      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	4b3a      	ldr	r3, [pc, #232]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b22:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d02e      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d027      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b40:	4b2e      	ldr	r3, [pc, #184]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4a:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b50:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b56:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d014      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fc ffd5 	bl	8000b14 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fc ffd1 	bl	8000b14 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e036      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b84:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ee      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4917      	ldr	r1, [pc, #92]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	490b      	ldr	r1, [pc, #44]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4904      	ldr	r1, [pc, #16]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40007000 	.word	0x40007000
 8003c04:	42420440 	.word	0x42420440

08003c08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b08d      	sub	sp, #52	; 0x34
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c10:	4b5a      	ldr	r3, [pc, #360]	; (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c12:	f107 040c 	add.w	r4, r7, #12
 8003c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c1c:	f240 2301 	movw	r3, #513	; 0x201
 8003c20:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
 8003c26:	2300      	movs	r3, #0
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	2300      	movs	r3, #0
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b10      	cmp	r3, #16
 8003c40:	f200 8091 	bhi.w	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d04c      	beq.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d07c      	beq.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c50:	e089      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003c52:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c58:	4b49      	ldr	r3, [pc, #292]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8082 	beq.w	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	0c9b      	lsrs	r3, r3, #18
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c72:	4413      	add	r3, r2
 8003c74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c78:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d018      	beq.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c84:	4b3e      	ldr	r3, [pc, #248]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	0c5b      	lsrs	r3, r3, #17
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c92:	4413      	add	r3, r2
 8003c94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00d      	beq.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ca4:	4a37      	ldr	r2, [pc, #220]	; (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb4:	e004      	b.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	4a33      	ldr	r2, [pc, #204]	; (8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cc0:	4b2f      	ldr	r3, [pc, #188]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ccc:	d102      	bne.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cd2:	e04a      	b.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4a2c      	ldr	r2, [pc, #176]	; (8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	085b      	lsrs	r3, r3, #1
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ce2:	e042      	b.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003ce4:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf4:	d108      	bne.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d06:	e01f      	b.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d12:	d109      	bne.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003d20:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d26:	e00f      	b.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d32:	d11c      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003d34:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d016      	beq.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003d40:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d46:	e012      	b.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003d48:	e011      	b.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d4a:	f7ff fe75 	bl	8003a38 <HAL_RCC_GetPCLK2Freq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	0b9b      	lsrs	r3, r3, #14
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d64:	e004      	b.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003d66:	bf00      	nop
 8003d68:	e002      	b.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e000      	b.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003d6e:	bf00      	nop
    }
  }
  return (frequency);
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3734      	adds	r7, #52	; 0x34
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08009208 	.word	0x08009208
 8003d80:	40021000 	.word	0x40021000
 8003d84:	007a1200 	.word	0x007a1200
 8003d88:	003d0900 	.word	0x003d0900
 8003d8c:	aaaaaaab 	.word	0xaaaaaaab

08003d90 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e084      	b.n	8003eb0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	7c5b      	ldrb	r3, [r3, #17]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fc fc80 	bl	80006bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f87a 	bl	8003ebc <HAL_RTC_WaitForSynchro>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e06b      	b.n	8003eb0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f89c 	bl	8003f16 <RTC_EnterInitMode>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2204      	movs	r2, #4
 8003de8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e060      	b.n	8003eb0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0207 	bic.w	r2, r2, #7
 8003dfc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003e06:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <HAL_RTC_Init+0x128>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	4a2b      	ldr	r2, [pc, #172]	; (8003eb8 <HAL_RTC_Init+0x128>)
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <HAL_RTC_Init+0x128>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	4926      	ldr	r1, [pc, #152]	; (8003eb8 <HAL_RTC_Init+0x128>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d003      	beq.n	8003e36 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e00e      	b.n	8003e54 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003e36:	2001      	movs	r0, #1
 8003e38:	f7ff fee6 	bl	8003c08 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e3c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d104      	bne.n	8003e4e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2204      	movs	r2, #4
 8003e48:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e030      	b.n	8003eb0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 010f 	bic.w	r1, r3, #15
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	0c1a      	lsrs	r2, r3, #16
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	041b      	lsls	r3, r3, #16
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	b291      	uxth	r1, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f870 	bl	8003f66 <RTC_ExitInitMode>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d004      	beq.n	8003e96 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2204      	movs	r2, #4
 8003e90:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e00c      	b.n	8003eb0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003eae:	2300      	movs	r3, #0
  }
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40006c00 	.word	0x40006c00

08003ebc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e01d      	b.n	8003f0e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0208 	bic.w	r2, r2, #8
 8003ee0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003ee2:	f7fc fe17 	bl	8000b14 <HAL_GetTick>
 8003ee6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003ee8:	e009      	b.n	8003efe <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003eea:	f7fc fe13 	bl	8000b14 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ef8:	d901      	bls.n	8003efe <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e007      	b.n	8003f0e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ee      	beq.n	8003eea <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003f22:	f7fc fdf7 	bl	8000b14 <HAL_GetTick>
 8003f26:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f28:	e009      	b.n	8003f3e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003f2a:	f7fc fdf3 	bl	8000b14 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f38:	d901      	bls.n	8003f3e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e00f      	b.n	8003f5e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ee      	beq.n	8003f2a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0210 	orr.w	r2, r2, #16
 8003f5a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0210 	bic.w	r2, r2, #16
 8003f80:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003f82:	f7fc fdc7 	bl	8000b14 <HAL_GetTick>
 8003f86:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f88:	e009      	b.n	8003f9e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003f8a:	f7fc fdc3 	bl	8000b14 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f98:	d901      	bls.n	8003f9e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e007      	b.n	8003fae <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0ee      	beq.n	8003f8a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <HAL_RTCEx_BKUPWrite+0x30>)
 8003fca:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	b292      	uxth	r2, r2
 8003fdc:	601a      	str	r2, [r3, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	40006c00 	.word	0x40006c00

08003fec <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8003ffe:	4b08      	ldr	r3, [pc, #32]	; (8004020 <HAL_RTCEx_BKUPRead+0x34>)
 8004000:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4413      	add	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	b29b      	uxth	r3, r3
 8004012:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8004014:	68bb      	ldr	r3, [r7, #8]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	40006c00 	.word	0x40006c00

08004024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e03f      	b.n	80040b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fc fc1c 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fcc9 	bl	8004a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800407c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800408c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800409c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e021      	b.n	8004114 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2224      	movs	r2, #36	; 0x24
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040e6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fc fc4b 	bl	8000984 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b20      	cmp	r3, #32
 8004134:	d11d      	bne.n	8004172 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <HAL_UART_Receive_DMA+0x26>
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e016      	b.n	8004174 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_UART_Receive_DMA+0x38>
 8004150:	2302      	movs	r3, #2
 8004152:	e00f      	b.n	8004174 <HAL_UART_Receive_DMA+0x58>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	461a      	mov	r2, r3
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 fa7f 	bl	800466c <UART_Start_Receive_DMA>
 800416e:	4603      	mov	r3, r0
 8004170:	e000      	b.n	8004174 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800419c:	2300      	movs	r3, #0
 800419e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10d      	bne.n	80041ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_UART_IRQHandler+0x52>
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fb70 	bl	80048ac <UART_Receive_IT>
      return;
 80041cc:	e17b      	b.n	80044c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80b1 	beq.w	8004338 <HAL_UART_IRQHandler+0x1bc>
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d105      	bne.n	80041ec <HAL_UART_IRQHandler+0x70>
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80a6 	beq.w	8004338 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <HAL_UART_IRQHandler+0x90>
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_UART_IRQHandler+0xb0>
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f043 0202 	orr.w	r2, r3, #2
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_UART_IRQHandler+0xd0>
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	f043 0204 	orr.w	r2, r3, #4
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00f      	beq.n	8004276 <HAL_UART_IRQHandler+0xfa>
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d104      	bne.n	800426a <HAL_UART_IRQHandler+0xee>
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f043 0208 	orr.w	r2, r3, #8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 811e 	beq.w	80044bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <HAL_UART_IRQHandler+0x11e>
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fb09 	bl	80048ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <HAL_UART_IRQHandler+0x146>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d031      	beq.n	8004326 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fa4b 	bl	800475e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d023      	beq.n	800431e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d013      	beq.n	8004316 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	4a76      	ldr	r2, [pc, #472]	; (80044cc <HAL_UART_IRQHandler+0x350>)
 80042f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fc fec8 	bl	8001090 <HAL_DMA_Abort_IT>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004310:	4610      	mov	r0, r2
 8004312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004314:	e00e      	b.n	8004334 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fc faa4 	bl	8000864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	e00a      	b.n	8004334 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fc faa0 	bl	8000864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004324:	e006      	b.n	8004334 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fc fa9c 	bl	8000864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004332:	e0c3      	b.n	80044bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004334:	bf00      	nop
    return;
 8004336:	e0c1      	b.n	80044bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	2b01      	cmp	r3, #1
 800433e:	f040 80a1 	bne.w	8004484 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 809b 	beq.w	8004484 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8095 	beq.w	8004484 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d04e      	beq.n	800441c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004388:	8a3b      	ldrh	r3, [r7, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8098 	beq.w	80044c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004394:	8a3a      	ldrh	r2, [r7, #16]
 8004396:	429a      	cmp	r2, r3
 8004398:	f080 8092 	bcs.w	80044c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8a3a      	ldrh	r2, [r7, #16]
 80043a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d02b      	beq.n	8004404 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0210 	bic.w	r2, r2, #16
 80043f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fc fe0b 	bl	800101a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800440c:	b29b      	uxth	r3, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	b29b      	uxth	r3, r3
 8004412:	4619      	mov	r1, r3
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f86d 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800441a:	e051      	b.n	80044c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004424:	b29b      	uxth	r3, r3
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d047      	beq.n	80044c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004434:	8a7b      	ldrh	r3, [r7, #18]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d044      	beq.n	80044c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004448:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0210 	bic.w	r2, r2, #16
 8004476:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004478:	8a7b      	ldrh	r3, [r7, #18]
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f839 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004482:	e01f      	b.n	80044c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <HAL_UART_IRQHandler+0x324>
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f9a0 	bl	80047de <UART_Transmit_IT>
    return;
 800449e:	e012      	b.n	80044c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <HAL_UART_IRQHandler+0x34a>
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f9e1 	bl	800487c <UART_EndTransmit_IT>
    return;
 80044ba:	e004      	b.n	80044c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80044bc:	bf00      	nop
 80044be:	e002      	b.n	80044c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80044c0:	bf00      	nop
 80044c2:	e000      	b.n	80044c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80044c4:	bf00      	nop
  }
}
 80044c6:	3728      	adds	r7, #40	; 0x28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	080047b7 	.word	0x080047b7

080044d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b00      	cmp	r3, #0
 8004524:	d12a      	bne.n	800457c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800453a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	2b01      	cmp	r3, #1
 800456a:	d107      	bne.n	800457c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0210 	bic.w	r2, r2, #16
 800457a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004588:	4619      	mov	r1, r3
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7ff ffb2 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004590:	e002      	b.n	8004598 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f7fc f96f 	bl	8000876 <HAL_UART_RxCpltCallback>
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d108      	bne.n	80045c8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	b29b      	uxth	r3, r3
 80045be:	4619      	mov	r1, r3
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f7ff ff97 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045c6:	e002      	b.n	80045ce <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff ff8a 	bl	80044e2 <HAL_UART_RxHalfCpltCallback>
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bf14      	ite	ne
 80045f6:	2301      	movne	r3, #1
 80045f8:	2300      	moveq	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b21      	cmp	r3, #33	; 0x21
 8004608:	d108      	bne.n	800461c <UART_DMAError+0x46>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2200      	movs	r2, #0
 8004614:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004616:	68b8      	ldr	r0, [r7, #8]
 8004618:	f000 f88c 	bl	8004734 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	bf14      	ite	ne
 800462a:	2301      	movne	r3, #1
 800462c:	2300      	moveq	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b22      	cmp	r3, #34	; 0x22
 800463c:	d108      	bne.n	8004650 <UART_DMAError+0x7a>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2200      	movs	r2, #0
 8004648:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800464a:	68b8      	ldr	r0, [r7, #8]
 800464c:	f000 f887 	bl	800475e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f043 0210 	orr.w	r2, r3, #16
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800465c:	68b8      	ldr	r0, [r7, #8]
 800465e:	f7fc f901 	bl	8000864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	4613      	mov	r3, r2
 8004678:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	88fa      	ldrh	r2, [r7, #6]
 8004684:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2222      	movs	r2, #34	; 0x22
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	4a23      	ldr	r2, [pc, #140]	; (8004728 <UART_Start_Receive_DMA+0xbc>)
 800469a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	4a22      	ldr	r2, [pc, #136]	; (800472c <UART_Start_Receive_DMA+0xc0>)
 80046a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	4a21      	ldr	r2, [pc, #132]	; (8004730 <UART_Start_Receive_DMA+0xc4>)
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	2200      	movs	r2, #0
 80046b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80046b4:	f107 0308 	add.w	r3, r7, #8
 80046b8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	f7fc fc46 	bl	8000f5c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046fc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695a      	ldr	r2, [r3, #20]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0201 	orr.w	r2, r2, #1
 800470c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800471c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	0800450b 	.word	0x0800450b
 800472c:	080045a1 	.word	0x080045a1
 8004730:	080045d7 	.word	0x080045d7

08004734 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800474a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004774:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695a      	ldr	r2, [r3, #20]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	2b01      	cmp	r3, #1
 800478c:	d107      	bne.n	800479e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0210 	bic.w	r2, r2, #16
 800479c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7fc f847 	bl	8000864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b21      	cmp	r3, #33	; 0x21
 80047f0:	d13e      	bne.n	8004870 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fa:	d114      	bne.n	8004826 <UART_Transmit_IT+0x48>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d110      	bne.n	8004826 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004818:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	1c9a      	adds	r2, r3, #2
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	621a      	str	r2, [r3, #32]
 8004824:	e008      	b.n	8004838 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	1c59      	adds	r1, r3, #1
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6211      	str	r1, [r2, #32]
 8004830:	781a      	ldrb	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29b      	uxth	r3, r3
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4619      	mov	r1, r3
 8004846:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10f      	bne.n	800486c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800485a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800486a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	e000      	b.n	8004872 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004870:	2302      	movs	r3, #2
  }
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr

0800487c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004892:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fe17 	bl	80044d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b22      	cmp	r3, #34	; 0x22
 80048be:	f040 8099 	bne.w	80049f4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ca:	d117      	bne.n	80048fc <UART_Receive_IT+0x50>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d113      	bne.n	80048fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	1c9a      	adds	r2, r3, #2
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	629a      	str	r2, [r3, #40]	; 0x28
 80048fa:	e026      	b.n	800494a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490e:	d007      	beq.n	8004920 <UART_Receive_IT+0x74>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <UART_Receive_IT+0x82>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	e008      	b.n	8004940 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800493a:	b2da      	uxtb	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29b      	uxth	r3, r3
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	4619      	mov	r1, r3
 8004958:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800495a:	2b00      	cmp	r3, #0
 800495c:	d148      	bne.n	80049f0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0220 	bic.w	r2, r2, #32
 800496c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800497c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	2b01      	cmp	r3, #1
 800499c:	d123      	bne.n	80049e6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0210 	bic.w	r2, r2, #16
 80049b2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b10      	cmp	r3, #16
 80049c0:	d10a      	bne.n	80049d8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fd88 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
 80049e4:	e002      	b.n	80049ec <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fb ff45 	bl	8000876 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e002      	b.n	80049f6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a3a:	f023 030c 	bic.w	r3, r3, #12
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	430b      	orrs	r3, r1
 8004a46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <UART_SetConfig+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d103      	bne.n	8004a70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a68:	f7fe ffe6 	bl	8003a38 <HAL_RCC_GetPCLK2Freq>
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	e002      	b.n	8004a76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a70:	f7fe ffce 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8004a74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009a      	lsls	r2, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <UART_SetConfig+0x118>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	0119      	lsls	r1, r3, #4
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009a      	lsls	r2, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aac:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <UART_SetConfig+0x118>)
 8004aae:	fba3 0302 	umull	r0, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2064      	movs	r0, #100	; 0x64
 8004ab6:	fb00 f303 	mul.w	r3, r0, r3
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	3332      	adds	r3, #50	; 0x32
 8004ac0:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <UART_SetConfig+0x118>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004acc:	4419      	add	r1, r3
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009a      	lsls	r2, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <UART_SetConfig+0x118>)
 8004ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2064      	movs	r0, #100	; 0x64
 8004aee:	fb00 f303 	mul.w	r3, r0, r3
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	3332      	adds	r3, #50	; 0x32
 8004af8:	4a07      	ldr	r2, [pc, #28]	; (8004b18 <UART_SetConfig+0x118>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	f003 020f 	and.w	r2, r3, #15
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	440a      	add	r2, r1
 8004b0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40013800 	.word	0x40013800
 8004b18:	51eb851f 	.word	0x51eb851f

08004b1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	f107 0014 	add.w	r0, r7, #20
 8004b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	b004      	add	sp, #16
 8004b3a:	4770      	bx	lr

08004b3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b4c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b70:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	43db      	mvns	r3, r3
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	4013      	ands	r3, r2
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	f107 0014 	add.w	r0, r7, #20
 8004bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	b004      	add	sp, #16
 8004bf2:	4770      	bx	lr

08004bf4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b09b      	sub	sp, #108	; 0x6c
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	78db      	ldrb	r3, [r3, #3]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d81f      	bhi.n	8004c66 <USB_ActivateEndpoint+0x72>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <USB_ActivateEndpoint+0x38>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c3d 	.word	0x08004c3d
 8004c30:	08004c59 	.word	0x08004c59
 8004c34:	08004c6f 	.word	0x08004c6f
 8004c38:	08004c4b 	.word	0x08004c4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c48:	e012      	b.n	8004c70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c4a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c4e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004c52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c56:	e00b      	b.n	8004c70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c60:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c64:	e004      	b.n	8004c70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004c6c:	e000      	b.n	8004c70 <USB_ActivateEndpoint+0x7c>
      break;
 8004c6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	441a      	add	r2, r3
 8004c7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	441a      	add	r2, r3
 8004cc0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	7b1b      	ldrb	r3, [r3, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f040 8149 	bne.w	8004f74 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	785b      	ldrb	r3, [r3, #1]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 8084 	beq.w	8004df4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	011a      	lsls	r2, r3, #4
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	88db      	ldrh	r3, [r3, #6]
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	81fb      	strh	r3, [r7, #14]
 8004d2e:	89fb      	ldrh	r3, [r7, #14]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01b      	beq.n	8004d70 <USB_ActivateEndpoint+0x17c>
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	81bb      	strh	r3, [r7, #12]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	89bb      	ldrh	r3, [r7, #12]
 8004d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	78db      	ldrb	r3, [r3, #3]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d020      	beq.n	8004dba <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d8e:	813b      	strh	r3, [r7, #8]
 8004d90:	893b      	ldrh	r3, [r7, #8]
 8004d92:	f083 0320 	eor.w	r3, r3, #32
 8004d96:	813b      	strh	r3, [r7, #8]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	441a      	add	r2, r3
 8004da2:	893b      	ldrh	r3, [r7, #8]
 8004da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	8013      	strh	r3, [r2, #0]
 8004db8:	e27f      	b.n	80052ba <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd0:	817b      	strh	r3, [r7, #10]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	441a      	add	r2, r3
 8004ddc:	897b      	ldrh	r3, [r7, #10]
 8004dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	8013      	strh	r3, [r2, #0]
 8004df2:	e262      	b.n	80052ba <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	4413      	add	r3, r2
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	011a      	lsls	r2, r3, #4
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	88db      	ldrh	r3, [r3, #6]
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	4413      	add	r3, r2
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	011a      	lsls	r2, r3, #4
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	4413      	add	r3, r2
 8004e46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e4a:	623b      	str	r3, [r7, #32]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d112      	bne.n	8004e7a <USB_ActivateEndpoint+0x286>
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	801a      	strh	r2, [r3, #0]
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	e02f      	b.n	8004eda <USB_ActivateEndpoint+0x2e6>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	2b3e      	cmp	r3, #62	; 0x3e
 8004e80:	d813      	bhi.n	8004eaa <USB_ActivateEndpoint+0x2b6>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	663b      	str	r3, [r7, #96]	; 0x60
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <USB_ActivateEndpoint+0x2a8>
 8004e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e98:	3301      	adds	r3, #1
 8004e9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	029b      	lsls	r3, r3, #10
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	801a      	strh	r2, [r3, #0]
 8004ea8:	e017      	b.n	8004eda <USB_ActivateEndpoint+0x2e6>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	663b      	str	r3, [r7, #96]	; 0x60
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 031f 	and.w	r3, r3, #31
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <USB_ActivateEndpoint+0x2d0>
 8004ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	029b      	lsls	r3, r3, #10
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	83fb      	strh	r3, [r7, #30]
 8004ee8:	8bfb      	ldrh	r3, [r7, #30]
 8004eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01b      	beq.n	8004f2a <USB_ActivateEndpoint+0x336>
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f08:	83bb      	strh	r3, [r7, #28]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	441a      	add	r2, r3
 8004f14:	8bbb      	ldrh	r3, [r7, #28]
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f40:	837b      	strh	r3, [r7, #26]
 8004f42:	8b7b      	ldrh	r3, [r7, #26]
 8004f44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f48:	837b      	strh	r3, [r7, #26]
 8004f4a:	8b7b      	ldrh	r3, [r7, #26]
 8004f4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f50:	837b      	strh	r3, [r7, #26]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	441a      	add	r2, r3
 8004f5c:	8b7b      	ldrh	r3, [r7, #26]
 8004f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	8013      	strh	r3, [r2, #0]
 8004f72:	e1a2      	b.n	80052ba <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	441a      	add	r2, r3
 8004f98:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fc0:	4413      	add	r3, r2
 8004fc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	011a      	lsls	r2, r3, #4
 8004fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd2:	657b      	str	r3, [r7, #84]	; 0x54
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	891b      	ldrh	r3, [r3, #8]
 8004fd8:	085b      	lsrs	r3, r3, #1
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff4:	4413      	add	r3, r2
 8004ff6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	011a      	lsls	r2, r3, #4
 8004ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005000:	4413      	add	r3, r2
 8005002:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	895b      	ldrh	r3, [r3, #10]
 800500c:	085b      	lsrs	r3, r3, #1
 800500e:	b29b      	uxth	r3, r3
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005016:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f040 8091 	bne.w	8005144 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005030:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01b      	beq.n	8005072 <USB_ActivateEndpoint+0x47e>
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005050:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	441a      	add	r2, r3
 800505c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800505e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800506a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506e:	b29b      	uxth	r3, r3
 8005070:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005080:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d01b      	beq.n	80050c2 <USB_ActivateEndpoint+0x4ce>
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29b      	uxth	r3, r3
 8005098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	441a      	add	r2, r3
 80050ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050be:	b29b      	uxth	r3, r3
 80050c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	441a      	add	r2, r3
 80050f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005106:	b29b      	uxth	r3, r3
 8005108:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005120:	867b      	strh	r3, [r7, #50]	; 0x32
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	441a      	add	r2, r3
 800512c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800512e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513e:	b29b      	uxth	r3, r3
 8005140:	8013      	strh	r3, [r2, #0]
 8005142:	e0ba      	b.n	80052ba <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005154:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01d      	beq.n	800519c <USB_ActivateEndpoint+0x5a8>
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005176:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	441a      	add	r2, r3
 8005184:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005198:	b29b      	uxth	r3, r3
 800519a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80051ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01d      	beq.n	80051f4 <USB_ActivateEndpoint+0x600>
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	78db      	ldrb	r3, [r3, #3]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d024      	beq.n	8005246 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005212:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005216:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800521a:	f083 0320 	eor.w	r3, r3, #32
 800521e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	441a      	add	r2, r3
 800522c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005240:	b29b      	uxth	r3, r3
 8005242:	8013      	strh	r3, [r2, #0]
 8005244:	e01d      	b.n	8005282 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	441a      	add	r2, r3
 800526a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800526e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527e:	b29b      	uxth	r3, r3
 8005280:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005298:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80052ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80052be:	4618      	mov	r0, r3
 80052c0:	376c      	adds	r7, #108	; 0x6c
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b08d      	sub	sp, #52	; 0x34
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	7b1b      	ldrb	r3, [r3, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f040 808e 	bne.w	80053f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d044      	beq.n	800536e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	81bb      	strh	r3, [r7, #12]
 80052f2:	89bb      	ldrh	r3, [r7, #12]
 80052f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01b      	beq.n	8005334 <USB_DeactivateEndpoint+0x6c>
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	817b      	strh	r3, [r7, #10]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	441a      	add	r2, r3
 800531e:	897b      	ldrh	r3, [r7, #10]
 8005320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800532c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005330:	b29b      	uxth	r3, r3
 8005332:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800534a:	813b      	strh	r3, [r7, #8]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	441a      	add	r2, r3
 8005356:	893b      	ldrh	r3, [r7, #8]
 8005358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005368:	b29b      	uxth	r3, r3
 800536a:	8013      	strh	r3, [r2, #0]
 800536c:	e192      	b.n	8005694 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	827b      	strh	r3, [r7, #18]
 800537c:	8a7b      	ldrh	r3, [r7, #18]
 800537e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01b      	beq.n	80053be <USB_DeactivateEndpoint+0xf6>
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539c:	823b      	strh	r3, [r7, #16]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	441a      	add	r2, r3
 80053a8:	8a3b      	ldrh	r3, [r7, #16]
 80053aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d4:	81fb      	strh	r3, [r7, #14]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	89fb      	ldrh	r3, [r7, #14]
 80053e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	8013      	strh	r3, [r2, #0]
 80053f6:	e14d      	b.n	8005694 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f040 80a5 	bne.w	800554c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	843b      	strh	r3, [r7, #32]
 8005410:	8c3b      	ldrh	r3, [r7, #32]
 8005412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01b      	beq.n	8005452 <USB_DeactivateEndpoint+0x18a>
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005430:	83fb      	strh	r3, [r7, #30]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	441a      	add	r2, r3
 800543c:	8bfb      	ldrh	r3, [r7, #30]
 800543e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800544a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544e:	b29b      	uxth	r3, r3
 8005450:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	83bb      	strh	r3, [r7, #28]
 8005460:	8bbb      	ldrh	r3, [r7, #28]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01b      	beq.n	80054a2 <USB_DeactivateEndpoint+0x1da>
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b29b      	uxth	r3, r3
 8005478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005480:	837b      	strh	r3, [r7, #26]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	441a      	add	r2, r3
 800548c:	8b7b      	ldrh	r3, [r7, #26]
 800548e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800549e:	b29b      	uxth	r3, r3
 80054a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b8:	833b      	strh	r3, [r7, #24]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	441a      	add	r2, r3
 80054c4:	8b3b      	ldrh	r3, [r7, #24]
 80054c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f0:	82fb      	strh	r3, [r7, #22]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	441a      	add	r2, r3
 80054fc:	8afb      	ldrh	r3, [r7, #22]
 80054fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550e:	b29b      	uxth	r3, r3
 8005510:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005528:	82bb      	strh	r3, [r7, #20]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	441a      	add	r2, r3
 8005534:	8abb      	ldrh	r3, [r7, #20]
 8005536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005546:	b29b      	uxth	r3, r3
 8005548:	8013      	strh	r3, [r2, #0]
 800554a:	e0a3      	b.n	8005694 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800555a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800555c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01b      	beq.n	800559c <USB_DeactivateEndpoint+0x2d4>
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	441a      	add	r2, r3
 8005586:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005598:	b29b      	uxth	r3, r3
 800559a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80055aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01b      	beq.n	80055ec <USB_DeactivateEndpoint+0x324>
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	441a      	add	r2, r3
 800560e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800561c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005620:	b29b      	uxth	r3, r3
 8005622:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800563a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	441a      	add	r2, r3
 8005646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005658:	b29b      	uxth	r3, r3
 800565a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800566e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005672:	847b      	strh	r3, [r7, #34]	; 0x22
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	441a      	add	r2, r3
 800567e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800568c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005690:	b29b      	uxth	r3, r3
 8005692:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3734      	adds	r7, #52	; 0x34
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b0cc      	sub	sp, #304	; 0x130
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	6018      	str	r0, [r3, #0]
 80056aa:	463b      	mov	r3, r7
 80056ac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056ae:	463b      	mov	r3, r7
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	f040 872e 	bne.w	8006516 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80056ba:	463b      	mov	r3, r7
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	463b      	mov	r3, r7
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d905      	bls.n	80056d6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80056ca:	463b      	mov	r3, r7
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80056d4:	e004      	b.n	80056e0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80056d6:	463b      	mov	r3, r7
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80056e0:	463b      	mov	r3, r7
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	7b1b      	ldrb	r3, [r3, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d134      	bne.n	8005754 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056ea:	463b      	mov	r3, r7
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6959      	ldr	r1, [r3, #20]
 80056f0:	463b      	mov	r3, r7
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	88da      	ldrh	r2, [r3, #6]
 80056f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	1d38      	adds	r0, r7, #4
 80056fe:	6800      	ldr	r0, [r0, #0]
 8005700:	f001 fc03 	bl	8006f0a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005704:	f107 0310 	add.w	r3, r7, #16
 8005708:	1d3a      	adds	r2, r7, #4
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005716:	b29b      	uxth	r3, r3
 8005718:	4619      	mov	r1, r3
 800571a:	f107 0310 	add.w	r3, r7, #16
 800571e:	f107 0210 	add.w	r2, r7, #16
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	440a      	add	r2, r1
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	463b      	mov	r3, r7
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	011a      	lsls	r2, r3, #4
 8005730:	f107 0310 	add.w	r3, r7, #16
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4413      	add	r3, r2
 8005738:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800573c:	f107 030c 	add.w	r3, r7, #12
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005746:	b29a      	uxth	r2, r3
 8005748:	f107 030c 	add.w	r3, r7, #12
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	f000 beac 	b.w	80064ac <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005754:	463b      	mov	r3, r7
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	78db      	ldrb	r3, [r3, #3]
 800575a:	2b02      	cmp	r3, #2
 800575c:	f040 838c 	bne.w	8005e78 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005760:	463b      	mov	r3, r7
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a1a      	ldr	r2, [r3, #32]
 8005766:	463b      	mov	r3, r7
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	429a      	cmp	r2, r3
 800576e:	f240 8330 	bls.w	8005dd2 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	463b      	mov	r3, r7
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005790:	1d3b      	adds	r3, r7, #4
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	463b      	mov	r3, r7
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80057b6:	463b      	mov	r3, r7
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c0:	1ad2      	subs	r2, r2, r3
 80057c2:	463b      	mov	r3, r7
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057c8:	1d3b      	adds	r3, r7, #4
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	463b      	mov	r3, r7
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 819e 	beq.w	8005b20 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057e8:	1d3a      	adds	r2, r7, #4
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	463b      	mov	r3, r7
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d17a      	bne.n	80058ee <USB_EPStartXfer+0x24e>
 80057f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057fc:	1d3a      	adds	r2, r7, #4
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	1d3b      	adds	r3, r7, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580a:	b29b      	uxth	r3, r3
 800580c:	4619      	mov	r1, r3
 800580e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005812:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	440a      	add	r2, r1
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	463b      	mov	r3, r7
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	011a      	lsls	r2, r3, #4
 8005824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4413      	add	r3, r2
 800582c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d11a      	bne.n	8005874 <USB_EPStartXfer+0x1d4>
 800583e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800584c:	b29a      	uxth	r2, r3
 800584e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005868:	b29a      	uxth	r2, r3
 800586a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	e062      	b.n	800593a <USB_EPStartXfer+0x29a>
 8005874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005878:	2b3e      	cmp	r3, #62	; 0x3e
 800587a:	d819      	bhi.n	80058b0 <USB_EPStartXfer+0x210>
 800587c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <USB_EPStartXfer+0x1fc>
 8005892:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005896:	3301      	adds	r3, #1
 8005898:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800589c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	029b      	lsls	r3, r3, #10
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	801a      	strh	r2, [r3, #0]
 80058ae:	e044      	b.n	800593a <USB_EPStartXfer+0x29a>
 80058b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80058ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <USB_EPStartXfer+0x230>
 80058c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058ca:	3b01      	subs	r3, #1
 80058cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80058d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	029b      	lsls	r3, r3, #10
 80058d8:	b29b      	uxth	r3, r3
 80058da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	801a      	strh	r2, [r3, #0]
 80058ec:	e025      	b.n	800593a <USB_EPStartXfer+0x29a>
 80058ee:	463b      	mov	r3, r7
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d120      	bne.n	800593a <USB_EPStartXfer+0x29a>
 80058f8:	1d3b      	adds	r3, r7, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005900:	b29b      	uxth	r3, r3
 8005902:	4619      	mov	r1, r3
 8005904:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005908:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	440a      	add	r2, r1
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	463b      	mov	r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	011a      	lsls	r2, r3, #4
 800591a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4413      	add	r3, r2
 8005922:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005930:	b29a      	uxth	r2, r3
 8005932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800593a:	463b      	mov	r3, r7
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	895b      	ldrh	r3, [r3, #10]
 8005940:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005944:	463b      	mov	r3, r7
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6959      	ldr	r1, [r3, #20]
 800594a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594e:	b29b      	uxth	r3, r3
 8005950:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005954:	1d38      	adds	r0, r7, #4
 8005956:	6800      	ldr	r0, [r0, #0]
 8005958:	f001 fad7 	bl	8006f0a <USB_WritePMA>
            ep->xfer_buff += len;
 800595c:	463b      	mov	r3, r7
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695a      	ldr	r2, [r3, #20]
 8005962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005966:	441a      	add	r2, r3
 8005968:	463b      	mov	r3, r7
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800596e:	463b      	mov	r3, r7
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	463b      	mov	r3, r7
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	429a      	cmp	r2, r3
 800597c:	d909      	bls.n	8005992 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800597e:	463b      	mov	r3, r7
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6a1a      	ldr	r2, [r3, #32]
 8005984:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005988:	1ad2      	subs	r2, r2, r3
 800598a:	463b      	mov	r3, r7
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	621a      	str	r2, [r3, #32]
 8005990:	e008      	b.n	80059a4 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005992:	463b      	mov	r3, r7
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2200      	movs	r2, #0
 80059a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059a4:	463b      	mov	r3, r7
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d17a      	bne.n	8005aa4 <USB_EPStartXfer+0x404>
 80059ae:	f107 0318 	add.w	r3, r7, #24
 80059b2:	1d3a      	adds	r2, r7, #4
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	4619      	mov	r1, r3
 80059c4:	f107 0318 	add.w	r3, r7, #24
 80059c8:	f107 0218 	add.w	r2, r7, #24
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	440a      	add	r2, r1
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	011a      	lsls	r2, r3, #4
 80059da:	f107 0318 	add.w	r3, r7, #24
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4413      	add	r3, r2
 80059e2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059e6:	f107 0314 	add.w	r3, r7, #20
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d11a      	bne.n	8005a2a <USB_EPStartXfer+0x38a>
 80059f4:	f107 0314 	add.w	r3, r7, #20
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	f107 0314 	add.w	r3, r7, #20
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	f107 0314 	add.w	r3, r7, #20
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	f107 0314 	add.w	r3, r7, #20
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	e067      	b.n	8005afa <USB_EPStartXfer+0x45a>
 8005a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a30:	d819      	bhi.n	8005a66 <USB_EPStartXfer+0x3c6>
 8005a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d004      	beq.n	8005a52 <USB_EPStartXfer+0x3b2>
 8005a48:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a52:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	029b      	lsls	r3, r3, #10
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	f107 0314 	add.w	r3, r7, #20
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	801a      	strh	r2, [r3, #0]
 8005a64:	e049      	b.n	8005afa <USB_EPStartXfer+0x45a>
 8005a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <USB_EPStartXfer+0x3e6>
 8005a7c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a80:	3b01      	subs	r3, #1
 8005a82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a86:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	f107 0314 	add.w	r3, r7, #20
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e02a      	b.n	8005afa <USB_EPStartXfer+0x45a>
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	785b      	ldrb	r3, [r3, #1]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d125      	bne.n	8005afa <USB_EPStartXfer+0x45a>
 8005aae:	f107 0320 	add.w	r3, r7, #32
 8005ab2:	1d3a      	adds	r2, r7, #4
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	1d3b      	adds	r3, r7, #4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	f107 0320 	add.w	r3, r7, #32
 8005ac8:	f107 0220 	add.w	r2, r7, #32
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	440a      	add	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	011a      	lsls	r2, r3, #4
 8005ada:	f107 0320 	add.w	r3, r7, #32
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ae6:	f107 031c 	add.w	r3, r7, #28
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	f107 031c 	add.w	r3, r7, #28
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005afa:	463b      	mov	r3, r7
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	891b      	ldrh	r3, [r3, #8]
 8005b00:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b04:	463b      	mov	r3, r7
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6959      	ldr	r1, [r3, #20]
 8005b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b14:	1d38      	adds	r0, r7, #4
 8005b16:	6800      	ldr	r0, [r0, #0]
 8005b18:	f001 f9f7 	bl	8006f0a <USB_WritePMA>
 8005b1c:	f000 bcc6 	b.w	80064ac <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b20:	463b      	mov	r3, r7
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d164      	bne.n	8005bf4 <USB_EPStartXfer+0x554>
 8005b2a:	1d3b      	adds	r3, r7, #4
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b30:	1d3b      	adds	r3, r7, #4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b3e:	4413      	add	r3, r2
 8005b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b42:	463b      	mov	r3, r7
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	011a      	lsls	r2, r3, #4
 8005b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b52:	647b      	str	r3, [r7, #68]	; 0x44
 8005b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d112      	bne.n	8005b82 <USB_EPStartXfer+0x4e2>
 8005b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b6a:	801a      	strh	r2, [r3, #0]
 8005b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	e057      	b.n	8005c32 <USB_EPStartXfer+0x592>
 8005b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b86:	2b3e      	cmp	r3, #62	; 0x3e
 8005b88:	d817      	bhi.n	8005bba <USB_EPStartXfer+0x51a>
 8005b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <USB_EPStartXfer+0x50a>
 8005ba0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005baa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	029b      	lsls	r3, r3, #10
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb6:	801a      	strh	r2, [r3, #0]
 8005bb8:	e03b      	b.n	8005c32 <USB_EPStartXfer+0x592>
 8005bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <USB_EPStartXfer+0x53a>
 8005bd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005bda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	029b      	lsls	r3, r3, #10
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e01e      	b.n	8005c32 <USB_EPStartXfer+0x592>
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d119      	bne.n	8005c32 <USB_EPStartXfer+0x592>
 8005bfe:	1d3b      	adds	r3, r7, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	653b      	str	r3, [r7, #80]	; 0x50
 8005c04:	1d3b      	adds	r3, r7, #4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c12:	4413      	add	r3, r2
 8005c14:	653b      	str	r3, [r7, #80]	; 0x50
 8005c16:	463b      	mov	r3, r7
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	011a      	lsls	r2, r3, #4
 8005c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c20:	4413      	add	r3, r2
 8005c22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	891b      	ldrh	r3, [r3, #8]
 8005c38:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6959      	ldr	r1, [r3, #20]
 8005c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c4c:	1d38      	adds	r0, r7, #4
 8005c4e:	6800      	ldr	r0, [r0, #0]
 8005c50:	f001 f95b 	bl	8006f0a <USB_WritePMA>
            ep->xfer_buff += len;
 8005c54:	463b      	mov	r3, r7
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5e:	441a      	add	r2, r3
 8005c60:	463b      	mov	r3, r7
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d909      	bls.n	8005c8a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005c76:	463b      	mov	r3, r7
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6a1a      	ldr	r2, [r3, #32]
 8005c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c80:	1ad2      	subs	r2, r2, r3
 8005c82:	463b      	mov	r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	621a      	str	r2, [r3, #32]
 8005c88:	e008      	b.n	8005c9c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005c94:	463b      	mov	r3, r7
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c9c:	1d3b      	adds	r3, r7, #4
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	785b      	ldrb	r3, [r3, #1]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d164      	bne.n	8005d76 <USB_EPStartXfer+0x6d6>
 8005cac:	1d3b      	adds	r3, r7, #4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cb2:	1d3b      	adds	r3, r7, #4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	4413      	add	r3, r2
 8005cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	011a      	lsls	r2, r3, #4
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cce:	4413      	add	r3, r2
 8005cd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d112      	bne.n	8005d04 <USB_EPStartXfer+0x664>
 8005cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d00:	801a      	strh	r2, [r3, #0]
 8005d02:	e054      	b.n	8005dae <USB_EPStartXfer+0x70e>
 8005d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d08:	2b3e      	cmp	r3, #62	; 0x3e
 8005d0a:	d817      	bhi.n	8005d3c <USB_EPStartXfer+0x69c>
 8005d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d10:	085b      	lsrs	r3, r3, #1
 8005d12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d004      	beq.n	8005d2c <USB_EPStartXfer+0x68c>
 8005d22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d26:	3301      	adds	r3, #1
 8005d28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	029b      	lsls	r3, r3, #10
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	e038      	b.n	8005dae <USB_EPStartXfer+0x70e>
 8005d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d104      	bne.n	8005d5c <USB_EPStartXfer+0x6bc>
 8005d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d56:	3b01      	subs	r3, #1
 8005d58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	029b      	lsls	r3, r3, #10
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d72:	801a      	strh	r2, [r3, #0]
 8005d74:	e01b      	b.n	8005dae <USB_EPStartXfer+0x70e>
 8005d76:	463b      	mov	r3, r7
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d116      	bne.n	8005dae <USB_EPStartXfer+0x70e>
 8005d80:	1d3b      	adds	r3, r7, #4
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8e:	4413      	add	r3, r2
 8005d90:	643b      	str	r3, [r7, #64]	; 0x40
 8005d92:	463b      	mov	r3, r7
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	011a      	lsls	r2, r3, #4
 8005d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005dae:	463b      	mov	r3, r7
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	895b      	ldrh	r3, [r3, #10]
 8005db4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005db8:	463b      	mov	r3, r7
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6959      	ldr	r1, [r3, #20]
 8005dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005dc8:	1d38      	adds	r0, r7, #4
 8005dca:	6800      	ldr	r0, [r0, #0]
 8005dcc:	f001 f89d 	bl	8006f0a <USB_WritePMA>
 8005dd0:	e36c      	b.n	80064ac <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005ddc:	1d3b      	adds	r3, r7, #4
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	463b      	mov	r3, r7
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005dfa:	1d3b      	adds	r3, r7, #4
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	463b      	mov	r3, r7
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	441a      	add	r2, r3
 8005e08:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e26:	1d3b      	adds	r3, r7, #4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e34:	4413      	add	r3, r2
 8005e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e38:	463b      	mov	r3, r7
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	011a      	lsls	r2, r3, #4
 8005e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e42:	4413      	add	r3, r2
 8005e44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e48:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	891b      	ldrh	r3, [r3, #8]
 8005e5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e5e:	463b      	mov	r3, r7
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6959      	ldr	r1, [r3, #20]
 8005e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e6e:	1d38      	adds	r0, r7, #4
 8005e70:	6800      	ldr	r0, [r0, #0]
 8005e72:	f001 f84a 	bl	8006f0a <USB_WritePMA>
 8005e76:	e319      	b.n	80064ac <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005e78:	1d3b      	adds	r3, r7, #4
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	441a      	add	r2, r3
 8005ea4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6a1a      	ldr	r2, [r3, #32]
 8005ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec6:	1ad2      	subs	r2, r2, r3
 8005ec8:	463b      	mov	r3, r7
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ece:	1d3b      	adds	r3, r7, #4
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8162 	beq.w	80061ae <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ef2:	463b      	mov	r3, r7
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d164      	bne.n	8005fc6 <USB_EPStartXfer+0x926>
 8005efc:	1d3b      	adds	r3, r7, #4
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f02:	1d3b      	adds	r3, r7, #4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f10:	4413      	add	r3, r2
 8005f12:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f14:	463b      	mov	r3, r7
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	011a      	lsls	r2, r3, #4
 8005f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f1e:	4413      	add	r3, r2
 8005f20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f24:	677b      	str	r3, [r7, #116]	; 0x74
 8005f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d112      	bne.n	8005f54 <USB_EPStartXfer+0x8b4>
 8005f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f50:	801a      	strh	r2, [r3, #0]
 8005f52:	e057      	b.n	8006004 <USB_EPStartXfer+0x964>
 8005f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f58:	2b3e      	cmp	r3, #62	; 0x3e
 8005f5a:	d817      	bhi.n	8005f8c <USB_EPStartXfer+0x8ec>
 8005f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f60:	085b      	lsrs	r3, r3, #1
 8005f62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d004      	beq.n	8005f7c <USB_EPStartXfer+0x8dc>
 8005f72:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f76:	3301      	adds	r3, #1
 8005f78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	029b      	lsls	r3, r3, #10
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	e03b      	b.n	8006004 <USB_EPStartXfer+0x964>
 8005f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <USB_EPStartXfer+0x90c>
 8005fa2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005fac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	029b      	lsls	r3, r3, #10
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	e01e      	b.n	8006004 <USB_EPStartXfer+0x964>
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d119      	bne.n	8006004 <USB_EPStartXfer+0x964>
 8005fd0:	1d3b      	adds	r3, r7, #4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	011a      	lsls	r2, r3, #4
 8005fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ff8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006002:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006004:	463b      	mov	r3, r7
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	895b      	ldrh	r3, [r3, #10]
 800600a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800600e:	463b      	mov	r3, r7
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6959      	ldr	r1, [r3, #20]
 8006014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006018:	b29b      	uxth	r3, r3
 800601a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800601e:	1d38      	adds	r0, r7, #4
 8006020:	6800      	ldr	r0, [r0, #0]
 8006022:	f000 ff72 	bl	8006f0a <USB_WritePMA>
          ep->xfer_buff += len;
 8006026:	463b      	mov	r3, r7
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006030:	441a      	add	r2, r3
 8006032:	463b      	mov	r3, r7
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006038:	463b      	mov	r3, r7
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6a1a      	ldr	r2, [r3, #32]
 800603e:	463b      	mov	r3, r7
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	429a      	cmp	r2, r3
 8006046:	d909      	bls.n	800605c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006048:	463b      	mov	r3, r7
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6a1a      	ldr	r2, [r3, #32]
 800604e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006052:	1ad2      	subs	r2, r2, r3
 8006054:	463b      	mov	r3, r7
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	621a      	str	r2, [r3, #32]
 800605a:	e008      	b.n	800606e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800605c:	463b      	mov	r3, r7
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006066:	463b      	mov	r3, r7
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800606e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 821a 	beq.w	80064ac <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006078:	463b      	mov	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d164      	bne.n	800614c <USB_EPStartXfer+0xaac>
 8006082:	1d3b      	adds	r3, r7, #4
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	66bb      	str	r3, [r7, #104]	; 0x68
 8006088:	1d3b      	adds	r3, r7, #4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006090:	b29b      	uxth	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006096:	4413      	add	r3, r2
 8006098:	66bb      	str	r3, [r7, #104]	; 0x68
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	011a      	lsls	r2, r3, #4
 80060a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060a4:	4413      	add	r3, r2
 80060a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060aa:	667b      	str	r3, [r7, #100]	; 0x64
 80060ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d112      	bne.n	80060da <USB_EPStartXfer+0xa3a>
 80060b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060be:	b29a      	uxth	r2, r3
 80060c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060c2:	801a      	strh	r2, [r3, #0]
 80060c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	e057      	b.n	800618a <USB_EPStartXfer+0xaea>
 80060da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060de:	2b3e      	cmp	r3, #62	; 0x3e
 80060e0:	d817      	bhi.n	8006112 <USB_EPStartXfer+0xa72>
 80060e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d004      	beq.n	8006102 <USB_EPStartXfer+0xa62>
 80060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fc:	3301      	adds	r3, #1
 80060fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006106:	b29b      	uxth	r3, r3
 8006108:	029b      	lsls	r3, r3, #10
 800610a:	b29a      	uxth	r2, r3
 800610c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800610e:	801a      	strh	r2, [r3, #0]
 8006110:	e03b      	b.n	800618a <USB_EPStartXfer+0xaea>
 8006112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800611c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006120:	f003 031f 	and.w	r3, r3, #31
 8006124:	2b00      	cmp	r3, #0
 8006126:	d104      	bne.n	8006132 <USB_EPStartXfer+0xa92>
 8006128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612c:	3b01      	subs	r3, #1
 800612e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006136:	b29b      	uxth	r3, r3
 8006138:	029b      	lsls	r3, r3, #10
 800613a:	b29b      	uxth	r3, r3
 800613c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006144:	b29a      	uxth	r2, r3
 8006146:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	e01e      	b.n	800618a <USB_EPStartXfer+0xaea>
 800614c:	463b      	mov	r3, r7
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d119      	bne.n	800618a <USB_EPStartXfer+0xaea>
 8006156:	1d3b      	adds	r3, r7, #4
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	673b      	str	r3, [r7, #112]	; 0x70
 800615c:	1d3b      	adds	r3, r7, #4
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006164:	b29b      	uxth	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800616a:	4413      	add	r3, r2
 800616c:	673b      	str	r3, [r7, #112]	; 0x70
 800616e:	463b      	mov	r3, r7
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	011a      	lsls	r2, r3, #4
 8006176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006178:	4413      	add	r3, r2
 800617a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800617e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006184:	b29a      	uxth	r2, r3
 8006186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006188:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800618a:	463b      	mov	r3, r7
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	891b      	ldrh	r3, [r3, #8]
 8006190:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006194:	463b      	mov	r3, r7
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6959      	ldr	r1, [r3, #20]
 800619a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061a4:	1d38      	adds	r0, r7, #4
 80061a6:	6800      	ldr	r0, [r0, #0]
 80061a8:	f000 feaf 	bl	8006f0a <USB_WritePMA>
 80061ac:	e17e      	b.n	80064ac <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061ae:	463b      	mov	r3, r7
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	785b      	ldrb	r3, [r3, #1]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d16f      	bne.n	8006298 <USB_EPStartXfer+0xbf8>
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061c0:	1d3b      	adds	r3, r7, #4
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061d0:	4413      	add	r3, r2
 80061d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061d6:	463b      	mov	r3, r7
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	011a      	lsls	r2, r3, #4
 80061de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061e2:	4413      	add	r3, r2
 80061e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d116      	bne.n	8006222 <USB_EPStartXfer+0xb82>
 80061f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006200:	b29a      	uxth	r2, r3
 8006202:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006218:	b29a      	uxth	r2, r3
 800621a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800621e:	801a      	strh	r2, [r3, #0]
 8006220:	e05f      	b.n	80062e2 <USB_EPStartXfer+0xc42>
 8006222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006226:	2b3e      	cmp	r3, #62	; 0x3e
 8006228:	d818      	bhi.n	800625c <USB_EPStartXfer+0xbbc>
 800622a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <USB_EPStartXfer+0xbaa>
 8006240:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006244:	3301      	adds	r3, #1
 8006246:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800624a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800624e:	b29b      	uxth	r3, r3
 8006250:	029b      	lsls	r3, r3, #10
 8006252:	b29a      	uxth	r2, r3
 8006254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	e042      	b.n	80062e2 <USB_EPStartXfer+0xc42>
 800625c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	2b00      	cmp	r3, #0
 8006270:	d104      	bne.n	800627c <USB_EPStartXfer+0xbdc>
 8006272:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006276:	3b01      	subs	r3, #1
 8006278:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800627c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006280:	b29b      	uxth	r3, r3
 8006282:	029b      	lsls	r3, r3, #10
 8006284:	b29b      	uxth	r3, r3
 8006286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800628e:	b29a      	uxth	r2, r3
 8006290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006294:	801a      	strh	r2, [r3, #0]
 8006296:	e024      	b.n	80062e2 <USB_EPStartXfer+0xc42>
 8006298:	463b      	mov	r3, r7
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	785b      	ldrb	r3, [r3, #1]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d11f      	bne.n	80062e2 <USB_EPStartXfer+0xc42>
 80062a2:	1d3b      	adds	r3, r7, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062aa:	1d3b      	adds	r3, r7, #4
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062ba:	4413      	add	r3, r2
 80062bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062c0:	463b      	mov	r3, r7
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	011a      	lsls	r2, r3, #4
 80062c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062cc:	4413      	add	r3, r2
 80062ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80062e2:	463b      	mov	r3, r7
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	891b      	ldrh	r3, [r3, #8]
 80062e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062ec:	463b      	mov	r3, r7
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6959      	ldr	r1, [r3, #20]
 80062f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062fc:	1d38      	adds	r0, r7, #4
 80062fe:	6800      	ldr	r0, [r0, #0]
 8006300:	f000 fe03 	bl	8006f0a <USB_WritePMA>
          ep->xfer_buff += len;
 8006304:	463b      	mov	r3, r7
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695a      	ldr	r2, [r3, #20]
 800630a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800630e:	441a      	add	r2, r3
 8006310:	463b      	mov	r3, r7
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006316:	463b      	mov	r3, r7
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a1a      	ldr	r2, [r3, #32]
 800631c:	463b      	mov	r3, r7
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	429a      	cmp	r2, r3
 8006324:	d909      	bls.n	800633a <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006326:	463b      	mov	r3, r7
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6a1a      	ldr	r2, [r3, #32]
 800632c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006330:	1ad2      	subs	r2, r2, r3
 8006332:	463b      	mov	r3, r7
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	621a      	str	r2, [r3, #32]
 8006338:	e008      	b.n	800634c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800633a:	463b      	mov	r3, r7
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006344:	463b      	mov	r3, r7
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2200      	movs	r2, #0
 800634a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800634c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80ab 	beq.w	80064ac <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006356:	1d3b      	adds	r3, r7, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800635e:	463b      	mov	r3, r7
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d16f      	bne.n	8006448 <USB_EPStartXfer+0xda8>
 8006368:	1d3b      	adds	r3, r7, #4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006370:	1d3b      	adds	r3, r7, #4
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006378:	b29b      	uxth	r3, r3
 800637a:	461a      	mov	r2, r3
 800637c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006380:	4413      	add	r3, r2
 8006382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006386:	463b      	mov	r3, r7
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	011a      	lsls	r2, r3, #4
 800638e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006392:	4413      	add	r3, r2
 8006394:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800639c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d116      	bne.n	80063d2 <USB_EPStartXfer+0xd32>
 80063a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063b6:	801a      	strh	r2, [r3, #0]
 80063b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063ce:	801a      	strh	r2, [r3, #0]
 80063d0:	e05b      	b.n	800648a <USB_EPStartXfer+0xdea>
 80063d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d6:	2b3e      	cmp	r3, #62	; 0x3e
 80063d8:	d818      	bhi.n	800640c <USB_EPStartXfer+0xd6c>
 80063da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d004      	beq.n	80063fa <USB_EPStartXfer+0xd5a>
 80063f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063f4:	3301      	adds	r3, #1
 80063f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063fe:	b29b      	uxth	r3, r3
 8006400:	029b      	lsls	r3, r3, #10
 8006402:	b29a      	uxth	r2, r3
 8006404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006408:	801a      	strh	r2, [r3, #0]
 800640a:	e03e      	b.n	800648a <USB_EPStartXfer+0xdea>
 800640c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	2b00      	cmp	r3, #0
 8006420:	d104      	bne.n	800642c <USB_EPStartXfer+0xd8c>
 8006422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006426:	3b01      	subs	r3, #1
 8006428:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800642c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006430:	b29b      	uxth	r3, r3
 8006432:	029b      	lsls	r3, r3, #10
 8006434:	b29b      	uxth	r3, r3
 8006436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643e:	b29a      	uxth	r2, r3
 8006440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	e020      	b.n	800648a <USB_EPStartXfer+0xdea>
 8006448:	463b      	mov	r3, r7
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	785b      	ldrb	r3, [r3, #1]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d11b      	bne.n	800648a <USB_EPStartXfer+0xdea>
 8006452:	1d3b      	adds	r3, r7, #4
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800645a:	b29b      	uxth	r3, r3
 800645c:	461a      	mov	r2, r3
 800645e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006462:	4413      	add	r3, r2
 8006464:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006468:	463b      	mov	r3, r7
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	011a      	lsls	r2, r3, #4
 8006470:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006474:	4413      	add	r3, r2
 8006476:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800647a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800647e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006482:	b29a      	uxth	r2, r3
 8006484:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006488:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800648a:	463b      	mov	r3, r7
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	895b      	ldrh	r3, [r3, #10]
 8006490:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006494:	463b      	mov	r3, r7
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6959      	ldr	r1, [r3, #20]
 800649a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064a4:	1d38      	adds	r0, r7, #4
 80064a6:	6800      	ldr	r0, [r0, #0]
 80064a8:	f000 fd2f 	bl	8006f0a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80064ac:	1d3b      	adds	r3, r7, #4
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	463b      	mov	r3, r7
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f107 020a 	add.w	r2, r7, #10
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ca:	8013      	strh	r3, [r2, #0]
 80064cc:	f107 030a 	add.w	r3, r7, #10
 80064d0:	f107 020a 	add.w	r2, r7, #10
 80064d4:	8812      	ldrh	r2, [r2, #0]
 80064d6:	f082 0210 	eor.w	r2, r2, #16
 80064da:	801a      	strh	r2, [r3, #0]
 80064dc:	f107 030a 	add.w	r3, r7, #10
 80064e0:	f107 020a 	add.w	r2, r7, #10
 80064e4:	8812      	ldrh	r2, [r2, #0]
 80064e6:	f082 0220 	eor.w	r2, r2, #32
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	1d3b      	adds	r3, r7, #4
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	463b      	mov	r3, r7
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	441a      	add	r2, r3
 80064fa:	f107 030a 	add.w	r3, r7, #10
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800650c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006510:	b29b      	uxth	r3, r3
 8006512:	8013      	strh	r3, [r2, #0]
 8006514:	e3b5      	b.n	8006c82 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006516:	463b      	mov	r3, r7
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	7b1b      	ldrb	r3, [r3, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	f040 8090 	bne.w	8006642 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006522:	463b      	mov	r3, r7
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699a      	ldr	r2, [r3, #24]
 8006528:	463b      	mov	r3, r7
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	429a      	cmp	r2, r3
 8006530:	d90e      	bls.n	8006550 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006532:	463b      	mov	r3, r7
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800653c:	463b      	mov	r3, r7
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	463b      	mov	r3, r7
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	619a      	str	r2, [r3, #24]
 800654e:	e008      	b.n	8006562 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006550:	463b      	mov	r3, r7
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800655a:	463b      	mov	r3, r7
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2200      	movs	r2, #0
 8006560:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006562:	1d3b      	adds	r3, r7, #4
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800656a:	1d3b      	adds	r3, r7, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006572:	b29b      	uxth	r3, r3
 8006574:	461a      	mov	r2, r3
 8006576:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800657a:	4413      	add	r3, r2
 800657c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006580:	463b      	mov	r3, r7
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	011a      	lsls	r2, r3, #4
 8006588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800658c:	4413      	add	r3, r2
 800658e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d116      	bne.n	80065cc <USB_EPStartXfer+0xf2c>
 800659e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065b0:	801a      	strh	r2, [r3, #0]
 80065b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	e32c      	b.n	8006c26 <USB_EPStartXfer+0x1586>
 80065cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d0:	2b3e      	cmp	r3, #62	; 0x3e
 80065d2:	d818      	bhi.n	8006606 <USB_EPStartXfer+0xf66>
 80065d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d004      	beq.n	80065f4 <USB_EPStartXfer+0xf54>
 80065ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ee:	3301      	adds	r3, #1
 80065f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	029b      	lsls	r3, r3, #10
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	e30f      	b.n	8006c26 <USB_EPStartXfer+0x1586>
 8006606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006614:	f003 031f 	and.w	r3, r3, #31
 8006618:	2b00      	cmp	r3, #0
 800661a:	d104      	bne.n	8006626 <USB_EPStartXfer+0xf86>
 800661c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006620:	3b01      	subs	r3, #1
 8006622:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006626:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800662a:	b29b      	uxth	r3, r3
 800662c:	029b      	lsls	r3, r3, #10
 800662e:	b29b      	uxth	r3, r3
 8006630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006638:	b29a      	uxth	r2, r3
 800663a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	e2f1      	b.n	8006c26 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006642:	463b      	mov	r3, r7
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	78db      	ldrb	r3, [r3, #3]
 8006648:	2b02      	cmp	r3, #2
 800664a:	f040 818f 	bne.w	800696c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800664e:	463b      	mov	r3, r7
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d175      	bne.n	8006744 <USB_EPStartXfer+0x10a4>
 8006658:	1d3b      	adds	r3, r7, #4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006660:	1d3b      	adds	r3, r7, #4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006668:	b29b      	uxth	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006670:	4413      	add	r3, r2
 8006672:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006676:	463b      	mov	r3, r7
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	011a      	lsls	r2, r3, #4
 800667e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006682:	4413      	add	r3, r2
 8006684:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800668c:	463b      	mov	r3, r7
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d116      	bne.n	80066c4 <USB_EPStartXfer+0x1024>
 8006696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066c0:	801a      	strh	r2, [r3, #0]
 80066c2:	e065      	b.n	8006790 <USB_EPStartXfer+0x10f0>
 80066c4:	463b      	mov	r3, r7
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	2b3e      	cmp	r3, #62	; 0x3e
 80066cc:	d81a      	bhi.n	8006704 <USB_EPStartXfer+0x1064>
 80066ce:	463b      	mov	r3, r7
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	085b      	lsrs	r3, r3, #1
 80066d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066da:	463b      	mov	r3, r7
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <USB_EPStartXfer+0x1052>
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ec:	3301      	adds	r3, #1
 80066ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	029b      	lsls	r3, r3, #10
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	e045      	b.n	8006790 <USB_EPStartXfer+0x10f0>
 8006704:	463b      	mov	r3, r7
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006710:	463b      	mov	r3, r7
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	2b00      	cmp	r3, #0
 800671c:	d104      	bne.n	8006728 <USB_EPStartXfer+0x1088>
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006722:	3b01      	subs	r3, #1
 8006724:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672c:	b29b      	uxth	r3, r3
 800672e:	029b      	lsls	r3, r3, #10
 8006730:	b29b      	uxth	r3, r3
 8006732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673a:	b29a      	uxth	r2, r3
 800673c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006740:	801a      	strh	r2, [r3, #0]
 8006742:	e025      	b.n	8006790 <USB_EPStartXfer+0x10f0>
 8006744:	463b      	mov	r3, r7
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d120      	bne.n	8006790 <USB_EPStartXfer+0x10f0>
 800674e:	1d3b      	adds	r3, r7, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006756:	1d3b      	adds	r3, r7, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675e:	b29b      	uxth	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006766:	4413      	add	r3, r2
 8006768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800676c:	463b      	mov	r3, r7
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	011a      	lsls	r2, r3, #4
 8006774:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006778:	4413      	add	r3, r2
 800677a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800677e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006782:	463b      	mov	r3, r7
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	b29a      	uxth	r2, r3
 800678a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800678e:	801a      	strh	r2, [r3, #0]
 8006790:	1d3b      	adds	r3, r7, #4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006798:	463b      	mov	r3, r7
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d175      	bne.n	800688e <USB_EPStartXfer+0x11ee>
 80067a2:	1d3b      	adds	r3, r7, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80067aa:	1d3b      	adds	r3, r7, #4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	461a      	mov	r2, r3
 80067b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067ba:	4413      	add	r3, r2
 80067bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80067c0:	463b      	mov	r3, r7
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	011a      	lsls	r2, r3, #4
 80067c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067cc:	4413      	add	r3, r2
 80067ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067d6:	463b      	mov	r3, r7
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d116      	bne.n	800680e <USB_EPStartXfer+0x116e>
 80067e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067f2:	801a      	strh	r2, [r3, #0]
 80067f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006804:	b29a      	uxth	r2, r3
 8006806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	e061      	b.n	80068d2 <USB_EPStartXfer+0x1232>
 800680e:	463b      	mov	r3, r7
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b3e      	cmp	r3, #62	; 0x3e
 8006816:	d81a      	bhi.n	800684e <USB_EPStartXfer+0x11ae>
 8006818:	463b      	mov	r3, r7
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006824:	463b      	mov	r3, r7
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d004      	beq.n	800683c <USB_EPStartXfer+0x119c>
 8006832:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006836:	3301      	adds	r3, #1
 8006838:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800683c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006840:	b29b      	uxth	r3, r3
 8006842:	029b      	lsls	r3, r3, #10
 8006844:	b29a      	uxth	r2, r3
 8006846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	e041      	b.n	80068d2 <USB_EPStartXfer+0x1232>
 800684e:	463b      	mov	r3, r7
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800685a:	463b      	mov	r3, r7
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	2b00      	cmp	r3, #0
 8006866:	d104      	bne.n	8006872 <USB_EPStartXfer+0x11d2>
 8006868:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800686c:	3b01      	subs	r3, #1
 800686e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006872:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006876:	b29b      	uxth	r3, r3
 8006878:	029b      	lsls	r3, r3, #10
 800687a:	b29b      	uxth	r3, r3
 800687c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006884:	b29a      	uxth	r2, r3
 8006886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800688a:	801a      	strh	r2, [r3, #0]
 800688c:	e021      	b.n	80068d2 <USB_EPStartXfer+0x1232>
 800688e:	463b      	mov	r3, r7
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d11c      	bne.n	80068d2 <USB_EPStartXfer+0x1232>
 8006898:	1d3b      	adds	r3, r7, #4
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068a8:	4413      	add	r3, r2
 80068aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068ae:	463b      	mov	r3, r7
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	011a      	lsls	r2, r3, #4
 80068b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068ba:	4413      	add	r3, r2
 80068bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068c4:	463b      	mov	r3, r7
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068d0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80068d2:	463b      	mov	r3, r7
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 81a4 	beq.w	8006c26 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80068de:	1d3b      	adds	r3, r7, #4
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	463b      	mov	r3, r7
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068f2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <USB_EPStartXfer+0x126a>
 80068fe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10d      	bne.n	8006926 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800690a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800690e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006912:	2b00      	cmp	r3, #0
 8006914:	f040 8187 	bne.w	8006c26 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006918:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	f040 8180 	bne.w	8006c26 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006926:	1d3b      	adds	r3, r7, #4
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	463b      	mov	r3, r7
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006940:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006944:	1d3b      	adds	r3, r7, #4
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	463b      	mov	r3, r7
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	441a      	add	r2, r3
 8006952:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006962:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006966:	b29b      	uxth	r3, r3
 8006968:	8013      	strh	r3, [r2, #0]
 800696a:	e15c      	b.n	8006c26 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800696c:	463b      	mov	r3, r7
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	78db      	ldrb	r3, [r3, #3]
 8006972:	2b01      	cmp	r3, #1
 8006974:	f040 8155 	bne.w	8006c22 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006978:	463b      	mov	r3, r7
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	463b      	mov	r3, r7
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	429a      	cmp	r2, r3
 8006986:	d90e      	bls.n	80069a6 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006988:	463b      	mov	r3, r7
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006992:	463b      	mov	r3, r7
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699a      	ldr	r2, [r3, #24]
 8006998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800699c:	1ad2      	subs	r2, r2, r3
 800699e:	463b      	mov	r3, r7
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	619a      	str	r2, [r3, #24]
 80069a4:	e008      	b.n	80069b8 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80069a6:	463b      	mov	r3, r7
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80069b0:	463b      	mov	r3, r7
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2200      	movs	r2, #0
 80069b6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80069b8:	463b      	mov	r3, r7
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d16f      	bne.n	8006aa2 <USB_EPStartXfer+0x1402>
 80069c2:	1d3b      	adds	r3, r7, #4
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069ca:	1d3b      	adds	r3, r7, #4
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069da:	4413      	add	r3, r2
 80069dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069e0:	463b      	mov	r3, r7
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	011a      	lsls	r2, r3, #4
 80069e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069ec:	4413      	add	r3, r2
 80069ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d116      	bne.n	8006a2c <USB_EPStartXfer+0x138c>
 80069fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a10:	801a      	strh	r2, [r3, #0]
 8006a12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	e05f      	b.n	8006aec <USB_EPStartXfer+0x144c>
 8006a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a30:	2b3e      	cmp	r3, #62	; 0x3e
 8006a32:	d818      	bhi.n	8006a66 <USB_EPStartXfer+0x13c6>
 8006a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a38:	085b      	lsrs	r3, r3, #1
 8006a3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d004      	beq.n	8006a54 <USB_EPStartXfer+0x13b4>
 8006a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a4e:	3301      	adds	r3, #1
 8006a50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	029b      	lsls	r3, r3, #10
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a62:	801a      	strh	r2, [r3, #0]
 8006a64:	e042      	b.n	8006aec <USB_EPStartXfer+0x144c>
 8006a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d104      	bne.n	8006a86 <USB_EPStartXfer+0x13e6>
 8006a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a80:	3b01      	subs	r3, #1
 8006a82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	029b      	lsls	r3, r3, #10
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	e024      	b.n	8006aec <USB_EPStartXfer+0x144c>
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	785b      	ldrb	r3, [r3, #1]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d11f      	bne.n	8006aec <USB_EPStartXfer+0x144c>
 8006aac:	1d3b      	adds	r3, r7, #4
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ab4:	1d3b      	adds	r3, r7, #4
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006aca:	463b      	mov	r3, r7
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	011a      	lsls	r2, r3, #4
 8006ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006adc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	1d3b      	adds	r3, r7, #4
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006af4:	463b      	mov	r3, r7
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d16f      	bne.n	8006bde <USB_EPStartXfer+0x153e>
 8006afe:	1d3b      	adds	r3, r7, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b06:	1d3b      	adds	r3, r7, #4
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b16:	4413      	add	r3, r2
 8006b18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	011a      	lsls	r2, r3, #4
 8006b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b28:	4413      	add	r3, r2
 8006b2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d116      	bne.n	8006b68 <USB_EPStartXfer+0x14c8>
 8006b3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b64:	801a      	strh	r2, [r3, #0]
 8006b66:	e05e      	b.n	8006c26 <USB_EPStartXfer+0x1586>
 8006b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b6e:	d818      	bhi.n	8006ba2 <USB_EPStartXfer+0x1502>
 8006b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <USB_EPStartXfer+0x14f0>
 8006b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	029b      	lsls	r3, r3, #10
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	e041      	b.n	8006c26 <USB_EPStartXfer+0x1586>
 8006ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb0:	f003 031f 	and.w	r3, r3, #31
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d104      	bne.n	8006bc2 <USB_EPStartXfer+0x1522>
 8006bb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	029b      	lsls	r3, r3, #10
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	e023      	b.n	8006c26 <USB_EPStartXfer+0x1586>
 8006bde:	463b      	mov	r3, r7
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d11e      	bne.n	8006c26 <USB_EPStartXfer+0x1586>
 8006be8:	1d3b      	adds	r3, r7, #4
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bfe:	463b      	mov	r3, r7
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	011a      	lsls	r2, r3, #4
 8006c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c1e:	801a      	strh	r2, [r3, #0]
 8006c20:	e001      	b.n	8006c26 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e02e      	b.n	8006c84 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c26:	1d3b      	adds	r3, r7, #4
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	463b      	mov	r3, r7
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c40:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c44:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c4c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c50:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c58:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c5c:	1d3b      	adds	r3, r7, #4
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	463b      	mov	r3, r7
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	441a      	add	r2, r3
 8006c6a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d020      	beq.n	8006ce2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb6:	81bb      	strh	r3, [r7, #12]
 8006cb8:	89bb      	ldrh	r3, [r7, #12]
 8006cba:	f083 0310 	eor.w	r3, r3, #16
 8006cbe:	81bb      	strh	r3, [r7, #12]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	89bb      	ldrh	r3, [r7, #12]
 8006ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	8013      	strh	r3, [r2, #0]
 8006ce0:	e01f      	b.n	8006d22 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf8:	81fb      	strh	r3, [r7, #14]
 8006cfa:	89fb      	ldrh	r3, [r7, #14]
 8006cfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d00:	81fb      	strh	r3, [r7, #14]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	441a      	add	r2, r3
 8006d0c:	89fb      	ldrh	r3, [r7, #14]
 8006d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bc80      	pop	{r7}
 8006d2c:	4770      	bx	lr

08006d2e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b087      	sub	sp, #28
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	7b1b      	ldrb	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f040 809d 	bne.w	8006e7c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d04c      	beq.n	8006de4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	823b      	strh	r3, [r7, #16]
 8006d58:	8a3b      	ldrh	r3, [r7, #16]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01b      	beq.n	8006d9a <USB_EPClearStall+0x6c>
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d78:	81fb      	strh	r3, [r7, #14]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	441a      	add	r2, r3
 8006d84:	89fb      	ldrh	r3, [r7, #14]
 8006d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	78db      	ldrb	r3, [r3, #3]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d06c      	beq.n	8006e7c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db8:	81bb      	strh	r3, [r7, #12]
 8006dba:	89bb      	ldrh	r3, [r7, #12]
 8006dbc:	f083 0320 	eor.w	r3, r3, #32
 8006dc0:	81bb      	strh	r3, [r7, #12]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	89bb      	ldrh	r3, [r7, #12]
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]
 8006de2:	e04b      	b.n	8006e7c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	82fb      	strh	r3, [r7, #22]
 8006df2:	8afb      	ldrh	r3, [r7, #22]
 8006df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01b      	beq.n	8006e34 <USB_EPClearStall+0x106>
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	82bb      	strh	r3, [r7, #20]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	441a      	add	r2, r3
 8006e1e:	8abb      	ldrh	r3, [r7, #20]
 8006e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4a:	827b      	strh	r3, [r7, #18]
 8006e4c:	8a7b      	ldrh	r3, [r7, #18]
 8006e4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e52:	827b      	strh	r3, [r7, #18]
 8006e54:	8a7b      	ldrh	r3, [r7, #18]
 8006e56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e5a:	827b      	strh	r3, [r7, #18]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	441a      	add	r2, r3
 8006e66:	8a7b      	ldrh	r3, [r7, #18]
 8006e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr

08006e88 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d103      	bne.n	8006ea2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2280      	movs	r2, #128	; 0x80
 8006e9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr

08006eae <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr

08006ec2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr

08006ed6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr

08006ef4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr

08006f0a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b08d      	sub	sp, #52	; 0x34
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	4611      	mov	r1, r2
 8006f16:	461a      	mov	r2, r3
 8006f18:	460b      	mov	r3, r1
 8006f1a:	80fb      	strh	r3, [r7, #6]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f20:	88bb      	ldrh	r3, [r7, #4]
 8006f22:	3301      	adds	r3, #1
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	005a      	lsls	r2, r3, #1
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f3c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f42:	e01e      	b.n	8006f82 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	021b      	lsls	r3, r3, #8
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	3302      	adds	r3, #2
 8006f6e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	3302      	adds	r3, #2
 8006f74:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	3301      	adds	r3, #1
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1dd      	bne.n	8006f44 <USB_WritePMA+0x3a>
  }
}
 8006f88:	bf00      	nop
 8006f8a:	bf00      	nop
 8006f8c:	3734      	adds	r7, #52	; 0x34
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr

08006f94 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b08b      	sub	sp, #44	; 0x2c
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	80fb      	strh	r3, [r7, #6]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006faa:	88bb      	ldrh	r3, [r7, #4]
 8006fac:	085b      	lsrs	r3, r3, #1
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	005a      	lsls	r2, r3, #1
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fc6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
 8006fcc:	e01b      	b.n	8007006 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	3302      	adds	r3, #2
 8006fda:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	0a1b      	lsrs	r3, r3, #8
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	3302      	adds	r3, #2
 8006ffe:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	3b01      	subs	r3, #1
 8007004:	627b      	str	r3, [r7, #36]	; 0x24
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e0      	bne.n	8006fce <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800700c:	88bb      	ldrh	r3, [r7, #4]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	d007      	beq.n	8007028 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	b2da      	uxtb	r2, r3
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	701a      	strb	r2, [r3, #0]
  }
}
 8007028:	bf00      	nop
 800702a:	372c      	adds	r7, #44	; 0x2c
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr

08007032 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	7c1b      	ldrb	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d115      	bne.n	8007076 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800704a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800704e:	2202      	movs	r2, #2
 8007050:	2181      	movs	r1, #129	; 0x81
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 ff19 	bl	8008e8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800705e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007062:	2202      	movs	r2, #2
 8007064:	2101      	movs	r1, #1
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 ff0f 	bl	8008e8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007074:	e012      	b.n	800709c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007076:	2340      	movs	r3, #64	; 0x40
 8007078:	2202      	movs	r2, #2
 800707a:	2181      	movs	r1, #129	; 0x81
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 ff04 	bl	8008e8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007088:	2340      	movs	r3, #64	; 0x40
 800708a:	2202      	movs	r2, #2
 800708c:	2101      	movs	r1, #1
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f001 fefb 	bl	8008e8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800709c:	2308      	movs	r3, #8
 800709e:	2203      	movs	r2, #3
 80070a0:	2182      	movs	r1, #130	; 0x82
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 fef1 	bl	8008e8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80070ae:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80070b2:	f002 f811 	bl	80090d8 <USBD_static_malloc>
 80070b6:	4602      	mov	r2, r0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d102      	bne.n	80070ce <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80070c8:	2301      	movs	r3, #1
 80070ca:	73fb      	strb	r3, [r7, #15]
 80070cc:	e026      	b.n	800711c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	7c1b      	ldrb	r3, [r3, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d109      	bne.n	800710c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007102:	2101      	movs	r1, #1
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 ffb1 	bl	800906c <USBD_LL_PrepareReceive>
 800710a:	e007      	b.n	800711c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007112:	2340      	movs	r3, #64	; 0x40
 8007114:	2101      	movs	r1, #1
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 ffa8 	bl	800906c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800711c:	7bfb      	ldrb	r3, [r7, #15]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	460b      	mov	r3, r1
 8007130:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007136:	2181      	movs	r1, #129	; 0x81
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 fecc 	bl	8008ed6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007144:	2101      	movs	r1, #1
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 fec5 	bl	8008ed6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007154:	2182      	movs	r1, #130	; 0x82
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 febd 	bl	8008ed6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00e      	beq.n	800718a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717c:	4618      	mov	r0, r3
 800717e:	f001 ffb7 	bl	80090f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800718a:	7bfb      	ldrb	r3, [r7, #15]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d039      	beq.n	8007232 <USBD_CDC_Setup+0x9e>
 80071be:	2b20      	cmp	r3, #32
 80071c0:	d17f      	bne.n	80072c2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	88db      	ldrh	r3, [r3, #6]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d029      	beq.n	800721e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	b25b      	sxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	da11      	bge.n	80071f8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80071e0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	88d2      	ldrh	r2, [r2, #6]
 80071e6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80071e8:	6939      	ldr	r1, [r7, #16]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	88db      	ldrh	r3, [r3, #6]
 80071ee:	461a      	mov	r2, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 f9da 	bl	80085aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80071f6:	e06b      	b.n	80072d0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	785a      	ldrb	r2, [r3, #1]
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	88db      	ldrh	r3, [r3, #6]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800720e:	6939      	ldr	r1, [r7, #16]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	88db      	ldrh	r3, [r3, #6]
 8007214:	461a      	mov	r2, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 f9f5 	bl	8008606 <USBD_CtlPrepareRx>
      break;
 800721c:	e058      	b.n	80072d0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	7850      	ldrb	r0, [r2, #1]
 800722a:	2200      	movs	r2, #0
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	4798      	blx	r3
      break;
 8007230:	e04e      	b.n	80072d0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	785b      	ldrb	r3, [r3, #1]
 8007236:	2b0b      	cmp	r3, #11
 8007238:	d02e      	beq.n	8007298 <USBD_CDC_Setup+0x104>
 800723a:	2b0b      	cmp	r3, #11
 800723c:	dc38      	bgt.n	80072b0 <USBD_CDC_Setup+0x11c>
 800723e:	2b00      	cmp	r3, #0
 8007240:	d002      	beq.n	8007248 <USBD_CDC_Setup+0xb4>
 8007242:	2b0a      	cmp	r3, #10
 8007244:	d014      	beq.n	8007270 <USBD_CDC_Setup+0xdc>
 8007246:	e033      	b.n	80072b0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724e:	2b03      	cmp	r3, #3
 8007250:	d107      	bne.n	8007262 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007252:	f107 030c 	add.w	r3, r7, #12
 8007256:	2202      	movs	r2, #2
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 f9a5 	bl	80085aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007260:	e02e      	b.n	80072c0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 f936 	bl	80084d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800726a:	2302      	movs	r3, #2
 800726c:	75fb      	strb	r3, [r7, #23]
          break;
 800726e:	e027      	b.n	80072c0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007276:	2b03      	cmp	r3, #3
 8007278:	d107      	bne.n	800728a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800727a:	f107 030f 	add.w	r3, r7, #15
 800727e:	2201      	movs	r2, #1
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 f991 	bl	80085aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007288:	e01a      	b.n	80072c0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 f922 	bl	80084d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007292:	2302      	movs	r3, #2
 8007294:	75fb      	strb	r3, [r7, #23]
          break;
 8007296:	e013      	b.n	80072c0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d00d      	beq.n	80072be <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 f916 	bl	80084d6 <USBD_CtlError>
            ret = USBD_FAIL;
 80072aa:	2302      	movs	r3, #2
 80072ac:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072ae:	e006      	b.n	80072be <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 f90f 	bl	80084d6 <USBD_CtlError>
          ret = USBD_FAIL;
 80072b8:	2302      	movs	r3, #2
 80072ba:	75fb      	strb	r3, [r7, #23]
          break;
 80072bc:	e000      	b.n	80072c0 <USBD_CDC_Setup+0x12c>
          break;
 80072be:	bf00      	nop
      }
      break;
 80072c0:	e006      	b.n	80072d0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 f906 	bl	80084d6 <USBD_CtlError>
      ret = USBD_FAIL;
 80072ca:	2302      	movs	r3, #2
 80072cc:	75fb      	strb	r3, [r7, #23]
      break;
 80072ce:	bf00      	nop
  }

  return ret;
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	460b      	mov	r3, r1
 80072e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ec:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072f4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d03a      	beq.n	8007376 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007300:	78fa      	ldrb	r2, [r7, #3]
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	440b      	add	r3, r1
 800730e:	331c      	adds	r3, #28
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d029      	beq.n	800736a <USBD_CDC_DataIn+0x90>
 8007316:	78fa      	ldrb	r2, [r7, #3]
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	440b      	add	r3, r1
 8007324:	331c      	adds	r3, #28
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	78f9      	ldrb	r1, [r7, #3]
 800732a:	68b8      	ldr	r0, [r7, #8]
 800732c:	460b      	mov	r3, r1
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	4403      	add	r3, r0
 8007336:	3338      	adds	r3, #56	; 0x38
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	fbb2 f1f3 	udiv	r1, r2, r3
 800733e:	fb03 f301 	mul.w	r3, r3, r1
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d110      	bne.n	800736a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007348:	78fa      	ldrb	r2, [r7, #3]
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	331c      	adds	r3, #28
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800735c:	78f9      	ldrb	r1, [r7, #3]
 800735e:	2300      	movs	r3, #0
 8007360:	2200      	movs	r2, #0
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 fe5f 	bl	8009026 <USBD_LL_Transmit>
 8007368:	e003      	b.n	8007372 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	e000      	b.n	8007378 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007376:	2302      	movs	r3, #2
  }
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007392:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 fe8a 	bl	80090b2 <USBD_LL_GetRxDataSize>
 800739e:	4602      	mov	r2, r0
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00d      	beq.n	80073cc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073c4:	4611      	mov	r1, r2
 80073c6:	4798      	blx	r3

    return USBD_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	e000      	b.n	80073ce <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80073cc:	2302      	movs	r3, #2
  }
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d015      	beq.n	800741c <USBD_CDC_EP0_RxReady+0x46>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073f6:	2bff      	cmp	r3, #255	; 0xff
 80073f8:	d010      	beq.n	800741c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007408:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007410:	b292      	uxth	r2, r2
 8007412:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	22ff      	movs	r2, #255	; 0xff
 8007418:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2243      	movs	r2, #67	; 0x43
 8007434:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007436:	4b03      	ldr	r3, [pc, #12]	; (8007444 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	2000009c 	.word	0x2000009c

08007448 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2243      	movs	r2, #67	; 0x43
 8007454:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007456:	4b03      	ldr	r3, [pc, #12]	; (8007464 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	bc80      	pop	{r7}
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	20000058 	.word	0x20000058

08007468 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2243      	movs	r2, #67	; 0x43
 8007474:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007476:	4b03      	ldr	r3, [pc, #12]	; (8007484 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	200000e0 	.word	0x200000e0

08007488 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	220a      	movs	r2, #10
 8007494:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007496:	4b03      	ldr	r3, [pc, #12]	; (80074a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	bc80      	pop	{r7}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	20000014 	.word	0x20000014

080074a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80074b2:	2302      	movs	r3, #2
 80074b4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d005      	beq.n	80074c8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr

080074d4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	4613      	mov	r3, r2
 80074e0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	371c      	adds	r7, #28
 8007500:	46bd      	mov	sp, r7
 8007502:	bc80      	pop	{r7}
 8007504:	4770      	bx	lr

08007506 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007506:	b480      	push	{r7}
 8007508:	b085      	sub	sp, #20
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007516:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	bc80      	pop	{r7}
 800752a:	4770      	bx	lr

0800752c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007542:	2b00      	cmp	r3, #0
 8007544:	d017      	beq.n	8007576 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	7c1b      	ldrb	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d109      	bne.n	8007562 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007558:	2101      	movs	r1, #1
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fd86 	bl	800906c <USBD_LL_PrepareReceive>
 8007560:	e007      	b.n	8007572 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007568:	2340      	movs	r3, #64	; 0x40
 800756a:	2101      	movs	r1, #1
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 fd7d 	bl	800906c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	e000      	b.n	8007578 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007576:	2302      	movs	r3, #2
  }
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	4613      	mov	r3, r2
 800758c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007594:	2302      	movs	r3, #2
 8007596:	e01a      	b.n	80075ce <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	79fa      	ldrb	r2, [r7, #7]
 80075c4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f001 fbea 	bl	8008da0 <USBD_LL_Init>

  return USBD_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b085      	sub	sp, #20
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d006      	beq.n	80075f8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
 80075f6:	e001      	b.n	80075fc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80075f8:	2302      	movs	r3, #2
 80075fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	bc80      	pop	{r7}
 8007606:	4770      	bx	lr

08007608 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 fc1f 	bl	8008e54 <USBD_LL_Start>

  return USBD_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	bc80      	pop	{r7}
 8007632:	4770      	bx	lr

08007634 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007640:	2302      	movs	r3, #2
 8007642:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00c      	beq.n	8007668 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	78fa      	ldrb	r2, [r7, #3]
 8007658:	4611      	mov	r1, r2
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007668:	7bfb      	ldrb	r3, [r7, #15]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	78fa      	ldrb	r2, [r7, #3]
 8007688:	4611      	mov	r1, r2
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3

  return USBD_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fed7 	bl	800845e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076be:	461a      	mov	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80076cc:	f003 031f 	and.w	r3, r3, #31
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d016      	beq.n	8007702 <USBD_LL_SetupStage+0x6a>
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d81c      	bhi.n	8007712 <USBD_LL_SetupStage+0x7a>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <USBD_LL_SetupStage+0x4a>
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d008      	beq.n	80076f2 <USBD_LL_SetupStage+0x5a>
 80076e0:	e017      	b.n	8007712 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f9ca 	bl	8007a84 <USBD_StdDevReq>
      break;
 80076f0:	e01a      	b.n	8007728 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fa2c 	bl	8007b58 <USBD_StdItfReq>
      break;
 8007700:	e012      	b.n	8007728 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa6c 	bl	8007be8 <USBD_StdEPReq>
      break;
 8007710:	e00a      	b.n	8007728 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007718:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800771c:	b2db      	uxtb	r3, r3
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 fbf7 	bl	8008f14 <USBD_LL_StallEP>
      break;
 8007726:	bf00      	nop
  }

  return USBD_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b086      	sub	sp, #24
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	460b      	mov	r3, r1
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007740:	7afb      	ldrb	r3, [r7, #11]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d14b      	bne.n	80077de <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800774c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007754:	2b03      	cmp	r3, #3
 8007756:	d134      	bne.n	80077c2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	429a      	cmp	r2, r3
 8007762:	d919      	bls.n	8007798 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	1ad2      	subs	r2, r2, r3
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800777a:	429a      	cmp	r2, r3
 800777c:	d203      	bcs.n	8007786 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007782:	b29b      	uxth	r3, r3
 8007784:	e002      	b.n	800778c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800778a:	b29b      	uxth	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 ff56 	bl	8008642 <USBD_CtlContinueRx>
 8007796:	e038      	b.n	800780a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d105      	bne.n	80077ba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 ff53 	bl	8008666 <USBD_CtlSendStatus>
 80077c0:	e023      	b.n	800780a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077c8:	2b05      	cmp	r3, #5
 80077ca:	d11e      	bne.n	800780a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80077d4:	2100      	movs	r1, #0
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f001 fb9c 	bl	8008f14 <USBD_LL_StallEP>
 80077dc:	e015      	b.n	800780a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00d      	beq.n	8007806 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d108      	bne.n	8007806 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	7afa      	ldrb	r2, [r7, #11]
 80077fe:	4611      	mov	r1, r2
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	4798      	blx	r3
 8007804:	e001      	b.n	800780a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007806:	2302      	movs	r3, #2
 8007808:	e000      	b.n	800780c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	460b      	mov	r3, r1
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007822:	7afb      	ldrb	r3, [r7, #11]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d17f      	bne.n	8007928 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3314      	adds	r3, #20
 800782c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007834:	2b02      	cmp	r3, #2
 8007836:	d15c      	bne.n	80078f2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	429a      	cmp	r2, r3
 8007842:	d915      	bls.n	8007870 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	1ad2      	subs	r2, r2, r3
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	b29b      	uxth	r3, r3
 8007858:	461a      	mov	r2, r3
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 fec0 	bl	80085e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007862:	2300      	movs	r3, #0
 8007864:	2200      	movs	r2, #0
 8007866:	2100      	movs	r1, #0
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f001 fbff 	bl	800906c <USBD_LL_PrepareReceive>
 800786e:	e04e      	b.n	800790e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	6912      	ldr	r2, [r2, #16]
 8007878:	fbb3 f1f2 	udiv	r1, r3, r2
 800787c:	fb02 f201 	mul.w	r2, r2, r1
 8007880:	1a9b      	subs	r3, r3, r2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d11c      	bne.n	80078c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800788e:	429a      	cmp	r2, r3
 8007890:	d316      	bcc.n	80078c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800789c:	429a      	cmp	r2, r3
 800789e:	d20f      	bcs.n	80078c0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078a0:	2200      	movs	r2, #0
 80078a2:	2100      	movs	r1, #0
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 fe9c 	bl	80085e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078b2:	2300      	movs	r3, #0
 80078b4:	2200      	movs	r2, #0
 80078b6:	2100      	movs	r1, #0
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f001 fbd7 	bl	800906c <USBD_LL_PrepareReceive>
 80078be:	e026      	b.n	800790e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00a      	beq.n	80078e2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d105      	bne.n	80078e2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80078e2:	2180      	movs	r1, #128	; 0x80
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f001 fb15 	bl	8008f14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 fece 	bl	800868c <USBD_CtlReceiveStatus>
 80078f0:	e00d      	b.n	800790e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d004      	beq.n	8007906 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007902:	2b00      	cmp	r3, #0
 8007904:	d103      	bne.n	800790e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007906:	2180      	movs	r1, #128	; 0x80
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f001 fb03 	bl	8008f14 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007914:	2b01      	cmp	r3, #1
 8007916:	d11d      	bne.n	8007954 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff fe81 	bl	8007620 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007926:	e015      	b.n	8007954 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00d      	beq.n	8007950 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800793a:	2b03      	cmp	r3, #3
 800793c:	d108      	bne.n	8007950 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	7afa      	ldrb	r2, [r7, #11]
 8007948:	4611      	mov	r1, r2
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	4798      	blx	r3
 800794e:	e001      	b.n	8007954 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007950:	2302      	movs	r3, #2
 8007952:	e000      	b.n	8007956 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007966:	2340      	movs	r3, #64	; 0x40
 8007968:	2200      	movs	r2, #0
 800796a:	2100      	movs	r1, #0
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 fa8c 	bl	8008e8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2240      	movs	r2, #64	; 0x40
 800797e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007982:	2340      	movs	r3, #64	; 0x40
 8007984:	2200      	movs	r2, #0
 8007986:	2180      	movs	r1, #128	; 0x80
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 fa7e 	bl	8008e8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2240      	movs	r2, #64	; 0x40
 8007998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6852      	ldr	r2, [r2, #4]
 80079ce:	b2d2      	uxtb	r2, r2
 80079d0:	4611      	mov	r1, r2
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
  }

  return USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	78fa      	ldrb	r2, [r7, #3]
 80079f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bc80      	pop	{r7}
 80079fc:	4770      	bx	lr

080079fe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2204      	movs	r2, #4
 8007a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bc80      	pop	{r7}
 8007a24:	4770      	bx	lr

08007a26 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d105      	bne.n	8007a44 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bc80      	pop	{r7}
 8007a4e:	4770      	bx	lr

08007a50 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d10b      	bne.n	8007a7a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a9a:	2b40      	cmp	r3, #64	; 0x40
 8007a9c:	d005      	beq.n	8007aaa <USBD_StdDevReq+0x26>
 8007a9e:	2b40      	cmp	r3, #64	; 0x40
 8007aa0:	d84f      	bhi.n	8007b42 <USBD_StdDevReq+0xbe>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d009      	beq.n	8007aba <USBD_StdDevReq+0x36>
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d14b      	bne.n	8007b42 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	4798      	blx	r3
      break;
 8007ab8:	e048      	b.n	8007b4c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	2b09      	cmp	r3, #9
 8007ac0:	d839      	bhi.n	8007b36 <USBD_StdDevReq+0xb2>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <USBD_StdDevReq+0x44>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007b19 	.word	0x08007b19
 8007acc:	08007b2d 	.word	0x08007b2d
 8007ad0:	08007b37 	.word	0x08007b37
 8007ad4:	08007b23 	.word	0x08007b23
 8007ad8:	08007b37 	.word	0x08007b37
 8007adc:	08007afb 	.word	0x08007afb
 8007ae0:	08007af1 	.word	0x08007af1
 8007ae4:	08007b37 	.word	0x08007b37
 8007ae8:	08007b0f 	.word	0x08007b0f
 8007aec:	08007b05 	.word	0x08007b05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f9dc 	bl	8007eb0 <USBD_GetDescriptor>
          break;
 8007af8:	e022      	b.n	8007b40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fb3f 	bl	8008180 <USBD_SetAddress>
          break;
 8007b02:	e01d      	b.n	8007b40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fb7e 	bl	8008208 <USBD_SetConfig>
          break;
 8007b0c:	e018      	b.n	8007b40 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fc07 	bl	8008324 <USBD_GetConfig>
          break;
 8007b16:	e013      	b.n	8007b40 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fc37 	bl	800838e <USBD_GetStatus>
          break;
 8007b20:	e00e      	b.n	8007b40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc65 	bl	80083f4 <USBD_SetFeature>
          break;
 8007b2a:	e009      	b.n	8007b40 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fc74 	bl	800841c <USBD_ClrFeature>
          break;
 8007b34:	e004      	b.n	8007b40 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fccc 	bl	80084d6 <USBD_CtlError>
          break;
 8007b3e:	bf00      	nop
      }
      break;
 8007b40:	e004      	b.n	8007b4c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fcc6 	bl	80084d6 <USBD_CtlError>
      break;
 8007b4a:	bf00      	nop
  }

  return ret;
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop

08007b58 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b6e:	2b40      	cmp	r3, #64	; 0x40
 8007b70:	d005      	beq.n	8007b7e <USBD_StdItfReq+0x26>
 8007b72:	2b40      	cmp	r3, #64	; 0x40
 8007b74:	d82e      	bhi.n	8007bd4 <USBD_StdItfReq+0x7c>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <USBD_StdItfReq+0x26>
 8007b7a:	2b20      	cmp	r3, #32
 8007b7c:	d12a      	bne.n	8007bd4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b84:	3b01      	subs	r3, #1
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d81d      	bhi.n	8007bc6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	889b      	ldrh	r3, [r3, #4]
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d813      	bhi.n	8007bbc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	88db      	ldrh	r3, [r3, #6]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d110      	bne.n	8007bd0 <USBD_StdItfReq+0x78>
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10d      	bne.n	8007bd0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fd56 	bl	8008666 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bba:	e009      	b.n	8007bd0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fc89 	bl	80084d6 <USBD_CtlError>
          break;
 8007bc4:	e004      	b.n	8007bd0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fc84 	bl	80084d6 <USBD_CtlError>
          break;
 8007bce:	e000      	b.n	8007bd2 <USBD_StdItfReq+0x7a>
          break;
 8007bd0:	bf00      	nop
      }
      break;
 8007bd2:	e004      	b.n	8007bde <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fc7d 	bl	80084d6 <USBD_CtlError>
      break;
 8007bdc:	bf00      	nop
  }

  return USBD_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	889b      	ldrh	r3, [r3, #4]
 8007bfa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c04:	2b40      	cmp	r3, #64	; 0x40
 8007c06:	d007      	beq.n	8007c18 <USBD_StdEPReq+0x30>
 8007c08:	2b40      	cmp	r3, #64	; 0x40
 8007c0a:	f200 8146 	bhi.w	8007e9a <USBD_StdEPReq+0x2b2>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <USBD_StdEPReq+0x40>
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	f040 8141 	bne.w	8007e9a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	4798      	blx	r3
      break;
 8007c26:	e13d      	b.n	8007ea4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c30:	2b20      	cmp	r3, #32
 8007c32:	d10a      	bne.n	8007c4a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	4798      	blx	r3
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	e12d      	b.n	8007ea6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	785b      	ldrb	r3, [r3, #1]
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d007      	beq.n	8007c62 <USBD_StdEPReq+0x7a>
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	f300 811b 	bgt.w	8007e8e <USBD_StdEPReq+0x2a6>
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d072      	beq.n	8007d42 <USBD_StdEPReq+0x15a>
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d03a      	beq.n	8007cd6 <USBD_StdEPReq+0xee>
 8007c60:	e115      	b.n	8007e8e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d002      	beq.n	8007c72 <USBD_StdEPReq+0x8a>
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d015      	beq.n	8007c9c <USBD_StdEPReq+0xb4>
 8007c70:	e02b      	b.n	8007cca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00c      	beq.n	8007c92 <USBD_StdEPReq+0xaa>
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b80      	cmp	r3, #128	; 0x80
 8007c7c:	d009      	beq.n	8007c92 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 f946 	bl	8008f14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007c88:	2180      	movs	r1, #128	; 0x80
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 f942 	bl	8008f14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c90:	e020      	b.n	8007cd4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fc1e 	bl	80084d6 <USBD_CtlError>
              break;
 8007c9a:	e01b      	b.n	8007cd4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	885b      	ldrh	r3, [r3, #2]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10e      	bne.n	8007cc2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007ca4:	7bbb      	ldrb	r3, [r7, #14]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <USBD_StdEPReq+0xda>
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	2b80      	cmp	r3, #128	; 0x80
 8007cae:	d008      	beq.n	8007cc2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	88db      	ldrh	r3, [r3, #6]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d104      	bne.n	8007cc2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 f929 	bl	8008f14 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fccf 	bl	8008666 <USBD_CtlSendStatus>

              break;
 8007cc8:	e004      	b.n	8007cd4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fc02 	bl	80084d6 <USBD_CtlError>
              break;
 8007cd2:	bf00      	nop
          }
          break;
 8007cd4:	e0e0      	b.n	8007e98 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d002      	beq.n	8007ce6 <USBD_StdEPReq+0xfe>
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d015      	beq.n	8007d10 <USBD_StdEPReq+0x128>
 8007ce4:	e026      	b.n	8007d34 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00c      	beq.n	8007d06 <USBD_StdEPReq+0x11e>
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	2b80      	cmp	r3, #128	; 0x80
 8007cf0:	d009      	beq.n	8007d06 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 f90c 	bl	8008f14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007cfc:	2180      	movs	r1, #128	; 0x80
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f001 f908 	bl	8008f14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d04:	e01c      	b.n	8007d40 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fbe4 	bl	80084d6 <USBD_CtlError>
              break;
 8007d0e:	e017      	b.n	8007d40 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	885b      	ldrh	r3, [r3, #2]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d112      	bne.n	8007d3e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d004      	beq.n	8007d2c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 f913 	bl	8008f52 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fc9a 	bl	8008666 <USBD_CtlSendStatus>
              }
              break;
 8007d32:	e004      	b.n	8007d3e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fbcd 	bl	80084d6 <USBD_CtlError>
              break;
 8007d3c:	e000      	b.n	8007d40 <USBD_StdEPReq+0x158>
              break;
 8007d3e:	bf00      	nop
          }
          break;
 8007d40:	e0aa      	b.n	8007e98 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d002      	beq.n	8007d52 <USBD_StdEPReq+0x16a>
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d032      	beq.n	8007db6 <USBD_StdEPReq+0x1ce>
 8007d50:	e097      	b.n	8007e82 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d007      	beq.n	8007d68 <USBD_StdEPReq+0x180>
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	2b80      	cmp	r3, #128	; 0x80
 8007d5c:	d004      	beq.n	8007d68 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fbb8 	bl	80084d6 <USBD_CtlError>
                break;
 8007d66:	e091      	b.n	8007e8c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	da0b      	bge.n	8007d88 <USBD_StdEPReq+0x1a0>
 8007d70:	7bbb      	ldrb	r3, [r7, #14]
 8007d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	3310      	adds	r3, #16
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	4413      	add	r3, r2
 8007d84:	3304      	adds	r3, #4
 8007d86:	e00b      	b.n	8007da0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	3304      	adds	r3, #4
 8007da0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2202      	movs	r2, #2
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fbfb 	bl	80085aa <USBD_CtlSendData>
              break;
 8007db4:	e06a      	b.n	8007e8c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007db6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	da11      	bge.n	8007de2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	f003 020f 	and.w	r2, r3, #15
 8007dc4:	6879      	ldr	r1, [r7, #4]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	440b      	add	r3, r1
 8007dd0:	3318      	adds	r3, #24
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d117      	bne.n	8007e08 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fb7b 	bl	80084d6 <USBD_CtlError>
                  break;
 8007de0:	e054      	b.n	8007e8c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	f003 020f 	and.w	r2, r3, #15
 8007de8:	6879      	ldr	r1, [r7, #4]
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	440b      	add	r3, r1
 8007df4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d104      	bne.n	8007e08 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fb68 	bl	80084d6 <USBD_CtlError>
                  break;
 8007e06:	e041      	b.n	8007e8c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	da0b      	bge.n	8007e28 <USBD_StdEPReq+0x240>
 8007e10:	7bbb      	ldrb	r3, [r7, #14]
 8007e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	3310      	adds	r3, #16
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	4413      	add	r3, r2
 8007e24:	3304      	adds	r3, #4
 8007e26:	e00b      	b.n	8007e40 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e2e:	4613      	mov	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3304      	adds	r3, #4
 8007e40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <USBD_StdEPReq+0x266>
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	2b80      	cmp	r3, #128	; 0x80
 8007e4c:	d103      	bne.n	8007e56 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e00e      	b.n	8007e74 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 f898 	bl	8008f90 <USBD_LL_IsStallEP>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	e002      	b.n	8007e74 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2202      	movs	r2, #2
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fb95 	bl	80085aa <USBD_CtlSendData>
              break;
 8007e80:	e004      	b.n	8007e8c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fb26 	bl	80084d6 <USBD_CtlError>
              break;
 8007e8a:	bf00      	nop
          }
          break;
 8007e8c:	e004      	b.n	8007e98 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fb20 	bl	80084d6 <USBD_CtlError>
          break;
 8007e96:	bf00      	nop
      }
      break;
 8007e98:	e004      	b.n	8007ea4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fb1a 	bl	80084d6 <USBD_CtlError>
      break;
 8007ea2:	bf00      	nop
  }

  return ret;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	885b      	ldrh	r3, [r3, #2]
 8007eca:	0a1b      	lsrs	r3, r3, #8
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	2b06      	cmp	r3, #6
 8007ed2:	f200 8128 	bhi.w	8008126 <USBD_GetDescriptor+0x276>
 8007ed6:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <USBD_GetDescriptor+0x2c>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007ef9 	.word	0x08007ef9
 8007ee0:	08007f11 	.word	0x08007f11
 8007ee4:	08007f51 	.word	0x08007f51
 8007ee8:	08008127 	.word	0x08008127
 8007eec:	08008127 	.word	0x08008127
 8007ef0:	080080c7 	.word	0x080080c7
 8007ef4:	080080f3 	.word	0x080080f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	7c12      	ldrb	r2, [r2, #16]
 8007f04:	f107 0108 	add.w	r1, r7, #8
 8007f08:	4610      	mov	r0, r2
 8007f0a:	4798      	blx	r3
 8007f0c:	60f8      	str	r0, [r7, #12]
      break;
 8007f0e:	e112      	b.n	8008136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	7c1b      	ldrb	r3, [r3, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10d      	bne.n	8007f34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	f107 0208 	add.w	r2, r7, #8
 8007f24:	4610      	mov	r0, r2
 8007f26:	4798      	blx	r3
 8007f28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	2202      	movs	r2, #2
 8007f30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f32:	e100      	b.n	8008136 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	f107 0208 	add.w	r2, r7, #8
 8007f40:	4610      	mov	r0, r2
 8007f42:	4798      	blx	r3
 8007f44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	701a      	strb	r2, [r3, #0]
      break;
 8007f4e:	e0f2      	b.n	8008136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	885b      	ldrh	r3, [r3, #2]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b05      	cmp	r3, #5
 8007f58:	f200 80ac 	bhi.w	80080b4 <USBD_GetDescriptor+0x204>
 8007f5c:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <USBD_GetDescriptor+0xb4>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	08007f7d 	.word	0x08007f7d
 8007f68:	08007fb1 	.word	0x08007fb1
 8007f6c:	08007fe5 	.word	0x08007fe5
 8007f70:	08008019 	.word	0x08008019
 8007f74:	0800804d 	.word	0x0800804d
 8007f78:	08008081 	.word	0x08008081
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00b      	beq.n	8007fa0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	7c12      	ldrb	r2, [r2, #16]
 8007f94:	f107 0108 	add.w	r1, r7, #8
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4798      	blx	r3
 8007f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f9e:	e091      	b.n	80080c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fa97 	bl	80084d6 <USBD_CtlError>
            err++;
 8007fa8:	7afb      	ldrb	r3, [r7, #11]
 8007faa:	3301      	adds	r3, #1
 8007fac:	72fb      	strb	r3, [r7, #11]
          break;
 8007fae:	e089      	b.n	80080c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	7c12      	ldrb	r2, [r2, #16]
 8007fc8:	f107 0108 	add.w	r1, r7, #8
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4798      	blx	r3
 8007fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fd2:	e077      	b.n	80080c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fa7d 	bl	80084d6 <USBD_CtlError>
            err++;
 8007fdc:	7afb      	ldrb	r3, [r7, #11]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8007fe2:	e06f      	b.n	80080c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00b      	beq.n	8008008 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	7c12      	ldrb	r2, [r2, #16]
 8007ffc:	f107 0108 	add.w	r1, r7, #8
 8008000:	4610      	mov	r0, r2
 8008002:	4798      	blx	r3
 8008004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008006:	e05d      	b.n	80080c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa63 	bl	80084d6 <USBD_CtlError>
            err++;
 8008010:	7afb      	ldrb	r3, [r7, #11]
 8008012:	3301      	adds	r3, #1
 8008014:	72fb      	strb	r3, [r7, #11]
          break;
 8008016:	e055      	b.n	80080c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00b      	beq.n	800803c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	7c12      	ldrb	r2, [r2, #16]
 8008030:	f107 0108 	add.w	r1, r7, #8
 8008034:	4610      	mov	r0, r2
 8008036:	4798      	blx	r3
 8008038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800803a:	e043      	b.n	80080c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa49 	bl	80084d6 <USBD_CtlError>
            err++;
 8008044:	7afb      	ldrb	r3, [r7, #11]
 8008046:	3301      	adds	r3, #1
 8008048:	72fb      	strb	r3, [r7, #11]
          break;
 800804a:	e03b      	b.n	80080c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00b      	beq.n	8008070 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	7c12      	ldrb	r2, [r2, #16]
 8008064:	f107 0108 	add.w	r1, r7, #8
 8008068:	4610      	mov	r0, r2
 800806a:	4798      	blx	r3
 800806c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800806e:	e029      	b.n	80080c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fa2f 	bl	80084d6 <USBD_CtlError>
            err++;
 8008078:	7afb      	ldrb	r3, [r7, #11]
 800807a:	3301      	adds	r3, #1
 800807c:	72fb      	strb	r3, [r7, #11]
          break;
 800807e:	e021      	b.n	80080c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00b      	beq.n	80080a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	7c12      	ldrb	r2, [r2, #16]
 8008098:	f107 0108 	add.w	r1, r7, #8
 800809c:	4610      	mov	r0, r2
 800809e:	4798      	blx	r3
 80080a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080a2:	e00f      	b.n	80080c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fa15 	bl	80084d6 <USBD_CtlError>
            err++;
 80080ac:	7afb      	ldrb	r3, [r7, #11]
 80080ae:	3301      	adds	r3, #1
 80080b0:	72fb      	strb	r3, [r7, #11]
          break;
 80080b2:	e007      	b.n	80080c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fa0d 	bl	80084d6 <USBD_CtlError>
          err++;
 80080bc:	7afb      	ldrb	r3, [r7, #11]
 80080be:	3301      	adds	r3, #1
 80080c0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80080c2:	e038      	b.n	8008136 <USBD_GetDescriptor+0x286>
 80080c4:	e037      	b.n	8008136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	7c1b      	ldrb	r3, [r3, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d109      	bne.n	80080e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d6:	f107 0208 	add.w	r2, r7, #8
 80080da:	4610      	mov	r0, r2
 80080dc:	4798      	blx	r3
 80080de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080e0:	e029      	b.n	8008136 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f9f6 	bl	80084d6 <USBD_CtlError>
        err++;
 80080ea:	7afb      	ldrb	r3, [r7, #11]
 80080ec:	3301      	adds	r3, #1
 80080ee:	72fb      	strb	r3, [r7, #11]
      break;
 80080f0:	e021      	b.n	8008136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	7c1b      	ldrb	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10d      	bne.n	8008116 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	f107 0208 	add.w	r2, r7, #8
 8008106:	4610      	mov	r0, r2
 8008108:	4798      	blx	r3
 800810a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3301      	adds	r3, #1
 8008110:	2207      	movs	r2, #7
 8008112:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008114:	e00f      	b.n	8008136 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f9dc 	bl	80084d6 <USBD_CtlError>
        err++;
 800811e:	7afb      	ldrb	r3, [r7, #11]
 8008120:	3301      	adds	r3, #1
 8008122:	72fb      	strb	r3, [r7, #11]
      break;
 8008124:	e007      	b.n	8008136 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f9d4 	bl	80084d6 <USBD_CtlError>
      err++;
 800812e:	7afb      	ldrb	r3, [r7, #11]
 8008130:	3301      	adds	r3, #1
 8008132:	72fb      	strb	r3, [r7, #11]
      break;
 8008134:	bf00      	nop
  }

  if (err != 0U)
 8008136:	7afb      	ldrb	r3, [r7, #11]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d11c      	bne.n	8008176 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800813c:	893b      	ldrh	r3, [r7, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d011      	beq.n	8008166 <USBD_GetDescriptor+0x2b6>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	88db      	ldrh	r3, [r3, #6]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00d      	beq.n	8008166 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	88da      	ldrh	r2, [r3, #6]
 800814e:	893b      	ldrh	r3, [r7, #8]
 8008150:	4293      	cmp	r3, r2
 8008152:	bf28      	it	cs
 8008154:	4613      	movcs	r3, r2
 8008156:	b29b      	uxth	r3, r3
 8008158:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800815a:	893b      	ldrh	r3, [r7, #8]
 800815c:	461a      	mov	r2, r3
 800815e:	68f9      	ldr	r1, [r7, #12]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fa22 	bl	80085aa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	88db      	ldrh	r3, [r3, #6]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d104      	bne.n	8008178 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fa79 	bl	8008666 <USBD_CtlSendStatus>
 8008174:	e000      	b.n	8008178 <USBD_GetDescriptor+0x2c8>
    return;
 8008176:	bf00      	nop
    }
  }
}
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop

08008180 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	889b      	ldrh	r3, [r3, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d130      	bne.n	80081f4 <USBD_SetAddress+0x74>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	88db      	ldrh	r3, [r3, #6]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d12c      	bne.n	80081f4 <USBD_SetAddress+0x74>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	885b      	ldrh	r3, [r3, #2]
 800819e:	2b7f      	cmp	r3, #127	; 0x7f
 80081a0:	d828      	bhi.n	80081f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	885b      	ldrh	r3, [r3, #2]
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d104      	bne.n	80081c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f98b 	bl	80084d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c0:	e01d      	b.n	80081fe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	7bfa      	ldrb	r2, [r7, #15]
 80081c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 ff0a 	bl	8008fe8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fa46 	bl	8008666 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d004      	beq.n	80081ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e8:	e009      	b.n	80081fe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f2:	e004      	b.n	80081fe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f96d 	bl	80084d6 <USBD_CtlError>
  }
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	885b      	ldrh	r3, [r3, #2]
 8008216:	b2da      	uxtb	r2, r3
 8008218:	4b41      	ldr	r3, [pc, #260]	; (8008320 <USBD_SetConfig+0x118>)
 800821a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800821c:	4b40      	ldr	r3, [pc, #256]	; (8008320 <USBD_SetConfig+0x118>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d904      	bls.n	800822e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f955 	bl	80084d6 <USBD_CtlError>
 800822c:	e075      	b.n	800831a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008234:	2b02      	cmp	r3, #2
 8008236:	d002      	beq.n	800823e <USBD_SetConfig+0x36>
 8008238:	2b03      	cmp	r3, #3
 800823a:	d023      	beq.n	8008284 <USBD_SetConfig+0x7c>
 800823c:	e062      	b.n	8008304 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800823e:	4b38      	ldr	r3, [pc, #224]	; (8008320 <USBD_SetConfig+0x118>)
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d01a      	beq.n	800827c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008246:	4b36      	ldr	r3, [pc, #216]	; (8008320 <USBD_SetConfig+0x118>)
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2203      	movs	r2, #3
 8008254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008258:	4b31      	ldr	r3, [pc, #196]	; (8008320 <USBD_SetConfig+0x118>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff f9e8 	bl	8007634 <USBD_SetClassConfig>
 8008264:	4603      	mov	r3, r0
 8008266:	2b02      	cmp	r3, #2
 8008268:	d104      	bne.n	8008274 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f932 	bl	80084d6 <USBD_CtlError>
            return;
 8008272:	e052      	b.n	800831a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f9f6 	bl	8008666 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800827a:	e04e      	b.n	800831a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f9f2 	bl	8008666 <USBD_CtlSendStatus>
        break;
 8008282:	e04a      	b.n	800831a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008284:	4b26      	ldr	r3, [pc, #152]	; (8008320 <USBD_SetConfig+0x118>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d112      	bne.n	80082b2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008294:	4b22      	ldr	r3, [pc, #136]	; (8008320 <USBD_SetConfig+0x118>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	461a      	mov	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800829e:	4b20      	ldr	r3, [pc, #128]	; (8008320 <USBD_SetConfig+0x118>)
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7ff f9e4 	bl	8007672 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f9db 	bl	8008666 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082b0:	e033      	b.n	800831a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80082b2:	4b1b      	ldr	r3, [pc, #108]	; (8008320 <USBD_SetConfig+0x118>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d01d      	beq.n	80082fc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff f9d2 	bl	8007672 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80082ce:	4b14      	ldr	r3, [pc, #80]	; (8008320 <USBD_SetConfig+0x118>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082d8:	4b11      	ldr	r3, [pc, #68]	; (8008320 <USBD_SetConfig+0x118>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7ff f9a8 	bl	8007634 <USBD_SetClassConfig>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d104      	bne.n	80082f4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f8f2 	bl	80084d6 <USBD_CtlError>
            return;
 80082f2:	e012      	b.n	800831a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f9b6 	bl	8008666 <USBD_CtlSendStatus>
        break;
 80082fa:	e00e      	b.n	800831a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f9b2 	bl	8008666 <USBD_CtlSendStatus>
        break;
 8008302:	e00a      	b.n	800831a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f8e5 	bl	80084d6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800830c:	4b04      	ldr	r3, [pc, #16]	; (8008320 <USBD_SetConfig+0x118>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff f9ad 	bl	8007672 <USBD_ClrClassConfig>
        break;
 8008318:	bf00      	nop
    }
  }
}
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	200004e8 	.word	0x200004e8

08008324 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	88db      	ldrh	r3, [r3, #6]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d004      	beq.n	8008340 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f8cc 	bl	80084d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800833e:	e022      	b.n	8008386 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008346:	2b02      	cmp	r3, #2
 8008348:	dc02      	bgt.n	8008350 <USBD_GetConfig+0x2c>
 800834a:	2b00      	cmp	r3, #0
 800834c:	dc03      	bgt.n	8008356 <USBD_GetConfig+0x32>
 800834e:	e015      	b.n	800837c <USBD_GetConfig+0x58>
 8008350:	2b03      	cmp	r3, #3
 8008352:	d00b      	beq.n	800836c <USBD_GetConfig+0x48>
 8008354:	e012      	b.n	800837c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3308      	adds	r3, #8
 8008360:	2201      	movs	r2, #1
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f920 	bl	80085aa <USBD_CtlSendData>
        break;
 800836a:	e00c      	b.n	8008386 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3304      	adds	r3, #4
 8008370:	2201      	movs	r2, #1
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f918 	bl	80085aa <USBD_CtlSendData>
        break;
 800837a:	e004      	b.n	8008386 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f8a9 	bl	80084d6 <USBD_CtlError>
        break;
 8008384:	bf00      	nop
}
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b082      	sub	sp, #8
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800839e:	3b01      	subs	r3, #1
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d81e      	bhi.n	80083e2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	88db      	ldrh	r3, [r3, #6]
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d004      	beq.n	80083b6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f891 	bl	80084d6 <USBD_CtlError>
        break;
 80083b4:	e01a      	b.n	80083ec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d005      	beq.n	80083d2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f043 0202 	orr.w	r2, r3, #2
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	330c      	adds	r3, #12
 80083d6:	2202      	movs	r2, #2
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f8e5 	bl	80085aa <USBD_CtlSendData>
      break;
 80083e0:	e004      	b.n	80083ec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f876 	bl	80084d6 <USBD_CtlError>
      break;
 80083ea:	bf00      	nop
  }
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	885b      	ldrh	r3, [r3, #2]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d106      	bne.n	8008414 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f929 	bl	8008666 <USBD_CtlSendStatus>
  }
}
 8008414:	bf00      	nop
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800842c:	3b01      	subs	r3, #1
 800842e:	2b02      	cmp	r3, #2
 8008430:	d80b      	bhi.n	800844a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	885b      	ldrh	r3, [r3, #2]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d10c      	bne.n	8008454 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f90f 	bl	8008666 <USBD_CtlSendStatus>
      }
      break;
 8008448:	e004      	b.n	8008454 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f842 	bl	80084d6 <USBD_CtlError>
      break;
 8008452:	e000      	b.n	8008456 <USBD_ClrFeature+0x3a>
      break;
 8008454:	bf00      	nop
  }
}
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781a      	ldrb	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	785a      	ldrb	r2, [r3, #1]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	3302      	adds	r3, #2
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	b29a      	uxth	r2, r3
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	3303      	adds	r3, #3
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	021b      	lsls	r3, r3, #8
 800848a:	b29b      	uxth	r3, r3
 800848c:	4413      	add	r3, r2
 800848e:	b29a      	uxth	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	3304      	adds	r3, #4
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	b29a      	uxth	r2, r3
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	3305      	adds	r3, #5
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	021b      	lsls	r3, r3, #8
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	4413      	add	r3, r2
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	3306      	adds	r3, #6
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	3307      	adds	r3, #7
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	021b      	lsls	r3, r3, #8
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	4413      	add	r3, r2
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	80da      	strh	r2, [r3, #6]

}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr

080084d6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80084e0:	2180      	movs	r1, #128	; 0x80
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fd16 	bl	8008f14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80084e8:	2100      	movs	r1, #0
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fd12 	bl	8008f14 <USBD_LL_StallEP>
}
 80084f0:	bf00      	nop
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008504:	2300      	movs	r3, #0
 8008506:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d032      	beq.n	8008574 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 f834 	bl	800857c <USBD_GetLen>
 8008514:	4603      	mov	r3, r0
 8008516:	3301      	adds	r3, #1
 8008518:	b29b      	uxth	r3, r3
 800851a:	005b      	lsls	r3, r3, #1
 800851c:	b29a      	uxth	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008522:	7dfb      	ldrb	r3, [r7, #23]
 8008524:	1c5a      	adds	r2, r3, #1
 8008526:	75fa      	strb	r2, [r7, #23]
 8008528:	461a      	mov	r2, r3
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	4413      	add	r3, r2
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	7812      	ldrb	r2, [r2, #0]
 8008532:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	75fa      	strb	r2, [r7, #23]
 800853a:	461a      	mov	r2, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4413      	add	r3, r2
 8008540:	2203      	movs	r2, #3
 8008542:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008544:	e012      	b.n	800856c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	60fa      	str	r2, [r7, #12]
 800854c:	7dfa      	ldrb	r2, [r7, #23]
 800854e:	1c51      	adds	r1, r2, #1
 8008550:	75f9      	strb	r1, [r7, #23]
 8008552:	4611      	mov	r1, r2
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	440a      	add	r2, r1
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800855c:	7dfb      	ldrb	r3, [r7, #23]
 800855e:	1c5a      	adds	r2, r3, #1
 8008560:	75fa      	strb	r2, [r7, #23]
 8008562:	461a      	mov	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4413      	add	r3, r2
 8008568:	2200      	movs	r2, #0
 800856a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e8      	bne.n	8008546 <USBD_GetString+0x4e>
    }
  }
}
 8008574:	bf00      	nop
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008588:	e005      	b.n	8008596 <USBD_GetLen+0x1a>
  {
    len++;
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	3301      	adds	r3, #1
 800858e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3301      	adds	r3, #1
 8008594:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1f5      	bne.n	800858a <USBD_GetLen+0xe>
  }

  return len;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bc80      	pop	{r7}
 80085a8:	4770      	bx	lr

080085aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	60f8      	str	r0, [r7, #12]
 80085b2:	60b9      	str	r1, [r7, #8]
 80085b4:	4613      	mov	r3, r2
 80085b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80085c0:	88fa      	ldrh	r2, [r7, #6]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085cc:	88fb      	ldrh	r3, [r7, #6]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	2100      	movs	r1, #0
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f000 fd27 	bl	8009026 <USBD_LL_Transmit>

  return USBD_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	60f8      	str	r0, [r7, #12]
 80085ea:	60b9      	str	r1, [r7, #8]
 80085ec:	4613      	mov	r3, r2
 80085ee:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085f0:	88fb      	ldrh	r3, [r7, #6]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	2100      	movs	r1, #0
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 fd15 	bl	8009026 <USBD_LL_Transmit>

  return USBD_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	4613      	mov	r3, r2
 8008612:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2203      	movs	r2, #3
 8008618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800861c:	88fa      	ldrh	r2, [r7, #6]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008624:	88fa      	ldrh	r2, [r7, #6]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800862c:	88fb      	ldrh	r3, [r7, #6]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	2100      	movs	r1, #0
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 fd1a 	bl	800906c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	4613      	mov	r3, r2
 800864e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008650:	88fb      	ldrh	r3, [r7, #6]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	2100      	movs	r1, #0
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 fd08 	bl	800906c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b082      	sub	sp, #8
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2204      	movs	r2, #4
 8008672:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008676:	2300      	movs	r3, #0
 8008678:	2200      	movs	r2, #0
 800867a:	2100      	movs	r1, #0
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fcd2 	bl	8009026 <USBD_LL_Transmit>

  return USBD_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2205      	movs	r2, #5
 8008698:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800869c:	2300      	movs	r3, #0
 800869e:	2200      	movs	r2, #0
 80086a0:	2100      	movs	r1, #0
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fce2 	bl	800906c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086b8:	2200      	movs	r2, #0
 80086ba:	4912      	ldr	r1, [pc, #72]	; (8008704 <MX_USB_DEVICE_Init+0x50>)
 80086bc:	4812      	ldr	r0, [pc, #72]	; (8008708 <MX_USB_DEVICE_Init+0x54>)
 80086be:	f7fe ff5f 	bl	8007580 <USBD_Init>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086c8:	f7f7 fe31 	bl	800032e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80086cc:	490f      	ldr	r1, [pc, #60]	; (800870c <MX_USB_DEVICE_Init+0x58>)
 80086ce:	480e      	ldr	r0, [pc, #56]	; (8008708 <MX_USB_DEVICE_Init+0x54>)
 80086d0:	f7fe ff81 	bl	80075d6 <USBD_RegisterClass>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80086da:	f7f7 fe28 	bl	800032e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80086de:	490c      	ldr	r1, [pc, #48]	; (8008710 <MX_USB_DEVICE_Init+0x5c>)
 80086e0:	4809      	ldr	r0, [pc, #36]	; (8008708 <MX_USB_DEVICE_Init+0x54>)
 80086e2:	f7fe fee1 	bl	80074a8 <USBD_CDC_RegisterInterface>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80086ec:	f7f7 fe1f 	bl	800032e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80086f0:	4805      	ldr	r0, [pc, #20]	; (8008708 <MX_USB_DEVICE_Init+0x54>)
 80086f2:	f7fe ff89 	bl	8007608 <USBD_Start>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80086fc:	f7f7 fe17 	bl	800032e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008700:	bf00      	nop
 8008702:	bd80      	pop	{r7, pc}
 8008704:	20000140 	.word	0x20000140
 8008708:	200007a4 	.word	0x200007a4
 800870c:	20000020 	.word	0x20000020
 8008710:	20000130 	.word	0x20000130

08008714 <cdcAvailable>:
bool     rx_full = false;



uint32_t cdcAvailable(void)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 800871a:	4b09      	ldr	r3, [pc, #36]	; (8008740 <cdcAvailable+0x2c>)
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <cdcAvailable+0x30>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	4a08      	ldr	r2, [pc, #32]	; (8008748 <cdcAvailable+0x34>)
 8008726:	6812      	ldr	r2, [r2, #0]
 8008728:	fbb3 f1f2 	udiv	r1, r3, r2
 800872c:	fb02 f201 	mul.w	r2, r2, r1
 8008730:	1a9b      	subs	r3, r3, r2
 8008732:	607b      	str	r3, [r7, #4]

  return ret;
 8008734:	687b      	ldr	r3, [r7, #4]
}
 8008736:	4618      	mov	r0, r3
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr
 8008740:	200004ec 	.word	0x200004ec
 8008744:	200004f0 	.word	0x200004f0
 8008748:	2000012c 	.word	0x2000012c

0800874c <cdcDataIn>:
  return ret;
}


void cdcDataIn(uint8_t rx_data)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	4603      	mov	r3, r0
 8008754:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 8008756:	4b0f      	ldr	r3, [pc, #60]	; (8008794 <cdcDataIn+0x48>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	79fa      	ldrb	r2, [r7, #7]
 800875c:	490e      	ldr	r1, [pc, #56]	; (8008798 <cdcDataIn+0x4c>)
 800875e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  next_rx_in = (rx_in + 1) % rx_len;
 8008762:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <cdcDataIn+0x48>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3301      	adds	r3, #1
 8008768:	4a0c      	ldr	r2, [pc, #48]	; (800879c <cdcDataIn+0x50>)
 800876a:	6812      	ldr	r2, [r2, #0]
 800876c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008770:	fb02 f201 	mul.w	r2, r2, r1
 8008774:	1a9b      	subs	r3, r3, r2
 8008776:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 8008778:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <cdcDataIn+0x54>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	429a      	cmp	r2, r3
 8008780:	d002      	beq.n	8008788 <cdcDataIn+0x3c>
  {
    rx_in = next_rx_in;
 8008782:	4a04      	ldr	r2, [pc, #16]	; (8008794 <cdcDataIn+0x48>)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6013      	str	r3, [r2, #0]
  }
}
 8008788:	bf00      	nop
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	bc80      	pop	{r7}
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	200004ec 	.word	0x200004ec
 8008798:	20000e68 	.word	0x20000e68
 800879c:	2000012c 	.word	0x2000012c
 80087a0:	200004f0 	.word	0x200004f0

080087a4 <USB_CDC_SOF>:
 return LineCoding.bitrate;
}


uint8_t USB_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 80087a4:	b590      	push	{r4, r7, lr}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  if (rx_full == true)
 80087ac:	4b0c      	ldr	r3, [pc, #48]	; (80087e0 <USB_CDC_SOF+0x3c>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d010      	beq.n	80087d6 <USB_CDC_SOF+0x32>
  {
    uint32_t buf_len;

      // 수신 버퍼에서 비어있는 데이터 양
      buf_len = (rx_len - cdcAvailable()) - 1 ;
 80087b4:	4b0b      	ldr	r3, [pc, #44]	; (80087e4 <USB_CDC_SOF+0x40>)
 80087b6:	681c      	ldr	r4, [r3, #0]
 80087b8:	f7ff ffac 	bl	8008714 <cdcAvailable>
 80087bc:	4603      	mov	r3, r0
 80087be:	1ae3      	subs	r3, r4, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	60fb      	str	r3, [r7, #12]

      if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b3f      	cmp	r3, #63	; 0x3f
 80087c8:	d905      	bls.n	80087d6 <USB_CDC_SOF+0x32>
      {
        // 다음 데이터도 보내줘.
        USBD_CDC_ReceivePacket(pdev);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7fe feae 	bl	800752c <USBD_CDC_ReceivePacket>
        rx_full = false;
 80087d0:	4b03      	ldr	r3, [pc, #12]	; (80087e0 <USB_CDC_SOF+0x3c>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
      }
  }

  return 0;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd90      	pop	{r4, r7, pc}
 80087e0:	200004f4 	.word	0x200004f4
 80087e4:	2000012c 	.word	0x2000012c

080087e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80087ec:	2200      	movs	r2, #0
 80087ee:	4905      	ldr	r1, [pc, #20]	; (8008804 <CDC_Init_FS+0x1c>)
 80087f0:	4805      	ldr	r0, [pc, #20]	; (8008808 <CDC_Init_FS+0x20>)
 80087f2:	f7fe fe6f 	bl	80074d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80087f6:	4905      	ldr	r1, [pc, #20]	; (800880c <CDC_Init_FS+0x24>)
 80087f8:	4803      	ldr	r0, [pc, #12]	; (8008808 <CDC_Init_FS+0x20>)
 80087fa:	f7fe fe84 	bl	8007506 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80087fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008800:	4618      	mov	r0, r3
 8008802:	bd80      	pop	{r7, pc}
 8008804:	20000c68 	.word	0x20000c68
 8008808:	200007a4 	.word	0x200007a4
 800880c:	20000a68 	.word	0x20000a68

08008810 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008810:	b480      	push	{r7}
 8008812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008814:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008816:	4618      	mov	r0, r3
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr
	...

08008820 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	4603      	mov	r3, r0
 8008828:	6039      	str	r1, [r7, #0]
 800882a:	71fb      	strb	r3, [r7, #7]
 800882c:	4613      	mov	r3, r2
 800882e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008830:	79fb      	ldrb	r3, [r7, #7]
 8008832:	2b23      	cmp	r3, #35	; 0x23
 8008834:	f200 80a3 	bhi.w	800897e <CDC_Control_FS+0x15e>
 8008838:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <CDC_Control_FS+0x20>)
 800883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883e:	bf00      	nop
 8008840:	0800897f 	.word	0x0800897f
 8008844:	0800897f 	.word	0x0800897f
 8008848:	0800897f 	.word	0x0800897f
 800884c:	0800897f 	.word	0x0800897f
 8008850:	0800897f 	.word	0x0800897f
 8008854:	0800897f 	.word	0x0800897f
 8008858:	0800897f 	.word	0x0800897f
 800885c:	0800897f 	.word	0x0800897f
 8008860:	0800897f 	.word	0x0800897f
 8008864:	0800897f 	.word	0x0800897f
 8008868:	0800897f 	.word	0x0800897f
 800886c:	0800897f 	.word	0x0800897f
 8008870:	0800897f 	.word	0x0800897f
 8008874:	0800897f 	.word	0x0800897f
 8008878:	0800897f 	.word	0x0800897f
 800887c:	0800897f 	.word	0x0800897f
 8008880:	0800897f 	.word	0x0800897f
 8008884:	0800897f 	.word	0x0800897f
 8008888:	0800897f 	.word	0x0800897f
 800888c:	0800897f 	.word	0x0800897f
 8008890:	0800897f 	.word	0x0800897f
 8008894:	0800897f 	.word	0x0800897f
 8008898:	0800897f 	.word	0x0800897f
 800889c:	0800897f 	.word	0x0800897f
 80088a0:	0800897f 	.word	0x0800897f
 80088a4:	0800897f 	.word	0x0800897f
 80088a8:	0800897f 	.word	0x0800897f
 80088ac:	0800897f 	.word	0x0800897f
 80088b0:	0800897f 	.word	0x0800897f
 80088b4:	0800897f 	.word	0x0800897f
 80088b8:	0800897f 	.word	0x0800897f
 80088bc:	0800897f 	.word	0x0800897f
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	0800892b 	.word	0x0800892b
 80088c8:	0800897f 	.word	0x0800897f
 80088cc:	0800897f 	.word	0x0800897f
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate    = (uint32_t)(pbuf[0]);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	4b2d      	ldr	r3, [pc, #180]	; (800898c <CDC_Control_FS+0x16c>)
 80088d8:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[1]<<8);
 80088da:	4b2c      	ldr	r3, [pc, #176]	; (800898c <CDC_Control_FS+0x16c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	3201      	adds	r2, #1
 80088e2:	7812      	ldrb	r2, [r2, #0]
 80088e4:	0212      	lsls	r2, r2, #8
 80088e6:	4313      	orrs	r3, r2
 80088e8:	4a28      	ldr	r2, [pc, #160]	; (800898c <CDC_Control_FS+0x16c>)
 80088ea:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[2]<<16);
 80088ec:	4b27      	ldr	r3, [pc, #156]	; (800898c <CDC_Control_FS+0x16c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	3202      	adds	r2, #2
 80088f4:	7812      	ldrb	r2, [r2, #0]
 80088f6:	0412      	lsls	r2, r2, #16
 80088f8:	4313      	orrs	r3, r2
 80088fa:	4a24      	ldr	r2, [pc, #144]	; (800898c <CDC_Control_FS+0x16c>)
 80088fc:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[3]<<24);
 80088fe:	4b23      	ldr	r3, [pc, #140]	; (800898c <CDC_Control_FS+0x16c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	3203      	adds	r2, #3
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	0612      	lsls	r2, r2, #24
 800890a:	4313      	orrs	r3, r2
 800890c:	4a1f      	ldr	r2, [pc, #124]	; (800898c <CDC_Control_FS+0x16c>)
 800890e:	6013      	str	r3, [r2, #0]
      LineCoding.format     = pbuf[4];
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	791a      	ldrb	r2, [r3, #4]
 8008914:	4b1d      	ldr	r3, [pc, #116]	; (800898c <CDC_Control_FS+0x16c>)
 8008916:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	795a      	ldrb	r2, [r3, #5]
 800891c:	4b1b      	ldr	r3, [pc, #108]	; (800898c <CDC_Control_FS+0x16c>)
 800891e:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype   = pbuf[6];
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	799a      	ldrb	r2, [r3, #6]
 8008924:	4b19      	ldr	r3, [pc, #100]	; (800898c <CDC_Control_FS+0x16c>)
 8008926:	719a      	strb	r2, [r3, #6]
    break;
 8008928:	e02a      	b.n	8008980 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800892a:	4b18      	ldr	r3, [pc, #96]	; (800898c <CDC_Control_FS+0x16c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	b2da      	uxtb	r2, r3
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8008934:	4b15      	ldr	r3, [pc, #84]	; (800898c <CDC_Control_FS+0x16c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	0a1a      	lsrs	r2, r3, #8
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	3301      	adds	r3, #1
 800893e:	b2d2      	uxtb	r2, r2
 8008940:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8008942:	4b12      	ldr	r3, [pc, #72]	; (800898c <CDC_Control_FS+0x16c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	0c1a      	lsrs	r2, r3, #16
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	3302      	adds	r3, #2
 800894c:	b2d2      	uxtb	r2, r2
 800894e:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8008950:	4b0e      	ldr	r3, [pc, #56]	; (800898c <CDC_Control_FS+0x16c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	0e1a      	lsrs	r2, r3, #24
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	3303      	adds	r3, #3
 800895a:	b2d2      	uxtb	r2, r2
 800895c:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	3304      	adds	r3, #4
 8008962:	4a0a      	ldr	r2, [pc, #40]	; (800898c <CDC_Control_FS+0x16c>)
 8008964:	7912      	ldrb	r2, [r2, #4]
 8008966:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	3305      	adds	r3, #5
 800896c:	4a07      	ldr	r2, [pc, #28]	; (800898c <CDC_Control_FS+0x16c>)
 800896e:	7952      	ldrb	r2, [r2, #5]
 8008970:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	3306      	adds	r3, #6
 8008976:	4a05      	ldr	r2, [pc, #20]	; (800898c <CDC_Control_FS+0x16c>)
 8008978:	7992      	ldrb	r2, [r2, #6]
 800897a:	701a      	strb	r2, [r3, #0]
    break;
 800897c:	e000      	b.n	8008980 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800897e:	bf00      	nop
  }

  return (USBD_OK);
 8008980:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008982:	4618      	mov	r0, r3
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	bc80      	pop	{r7}
 800898a:	4770      	bx	lr
 800898c:	20000124 	.word	0x20000124

08008990 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008990:	b590      	push	{r4, r7, lr}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  for(int i = 0; i < *Len; i++)
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]
 800899e:	e009      	b.n	80089b4 <CDC_Receive_FS+0x24>
  {
     cdcDataIn(Buf[i]);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	4413      	add	r3, r2
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff fecf 	bl	800874c <cdcDataIn>
  for(int i = 0; i < *Len; i++)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3301      	adds	r3, #1
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d8f0      	bhi.n	80089a0 <CDC_Receive_FS+0x10>
  }

  uint32_t buf_len;

  // 수신 버퍼에서 비어있는 데이터 양
  buf_len = (rx_len - cdcAvailable()) - 1 ;
 80089be:	4b0d      	ldr	r3, [pc, #52]	; (80089f4 <CDC_Receive_FS+0x64>)
 80089c0:	681c      	ldr	r4, [r3, #0]
 80089c2:	f7ff fea7 	bl	8008714 <cdcAvailable>
 80089c6:	4603      	mov	r3, r0
 80089c8:	1ae3      	subs	r3, r4, r3
 80089ca:	3b01      	subs	r3, #1
 80089cc:	60bb      	str	r3, [r7, #8]

  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2b3f      	cmp	r3, #63	; 0x3f
 80089d2:	d907      	bls.n	80089e4 <CDC_Receive_FS+0x54>
  {
    // 다음 데이터도 보내줘.
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	4808      	ldr	r0, [pc, #32]	; (80089f8 <CDC_Receive_FS+0x68>)
 80089d8:	f7fe fd95 	bl	8007506 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80089dc:	4806      	ldr	r0, [pc, #24]	; (80089f8 <CDC_Receive_FS+0x68>)
 80089de:	f7fe fda5 	bl	800752c <USBD_CDC_ReceivePacket>
 80089e2:	e002      	b.n	80089ea <CDC_Receive_FS+0x5a>
  }

  else
  {
    //버퍼 용량이 부족하니, 기다려
    rx_full = true;
 80089e4:	4b05      	ldr	r3, [pc, #20]	; (80089fc <CDC_Receive_FS+0x6c>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 80089ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd90      	pop	{r4, r7, pc}
 80089f4:	2000012c 	.word	0x2000012c
 80089f8:	200007a4 	.word	0x200007a4
 80089fc:	200004f4 	.word	0x200004f4

08008a00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	6039      	str	r1, [r7, #0]
 8008a0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2212      	movs	r2, #18
 8008a10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a12:	4b03      	ldr	r3, [pc, #12]	; (8008a20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bc80      	pop	{r7}
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	2000015c 	.word	0x2000015c

08008a24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	6039      	str	r1, [r7, #0]
 8008a2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2204      	movs	r2, #4
 8008a34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a36:	4b03      	ldr	r3, [pc, #12]	; (8008a44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bc80      	pop	{r7}
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	20000170 	.word	0x20000170

08008a48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	6039      	str	r1, [r7, #0]
 8008a52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a54:	79fb      	ldrb	r3, [r7, #7]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d105      	bne.n	8008a66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	4907      	ldr	r1, [pc, #28]	; (8008a7c <USBD_FS_ProductStrDescriptor+0x34>)
 8008a5e:	4808      	ldr	r0, [pc, #32]	; (8008a80 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a60:	f7ff fd4a 	bl	80084f8 <USBD_GetString>
 8008a64:	e004      	b.n	8008a70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	4904      	ldr	r1, [pc, #16]	; (8008a7c <USBD_FS_ProductStrDescriptor+0x34>)
 8008a6a:	4805      	ldr	r0, [pc, #20]	; (8008a80 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a6c:	f7ff fd44 	bl	80084f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a70:	4b02      	ldr	r3, [pc, #8]	; (8008a7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20001668 	.word	0x20001668
 8008a80:	08009218 	.word	0x08009218

08008a84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	6039      	str	r1, [r7, #0]
 8008a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	4904      	ldr	r1, [pc, #16]	; (8008aa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a94:	4804      	ldr	r0, [pc, #16]	; (8008aa8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a96:	f7ff fd2f 	bl	80084f8 <USBD_GetString>
  return USBD_StrDesc;
 8008a9a:	4b02      	ldr	r3, [pc, #8]	; (8008aa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	20001668 	.word	0x20001668
 8008aa8:	08009230 	.word	0x08009230

08008aac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	221a      	movs	r2, #26
 8008abc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008abe:	f000 f843 	bl	8008b48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ac2:	4b02      	ldr	r3, [pc, #8]	; (8008acc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000174 	.word	0x20000174

08008ad0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	6039      	str	r1, [r7, #0]
 8008ada:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008adc:	79fb      	ldrb	r3, [r7, #7]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d105      	bne.n	8008aee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	4907      	ldr	r1, [pc, #28]	; (8008b04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ae6:	4808      	ldr	r0, [pc, #32]	; (8008b08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ae8:	f7ff fd06 	bl	80084f8 <USBD_GetString>
 8008aec:	e004      	b.n	8008af8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	4904      	ldr	r1, [pc, #16]	; (8008b04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008af2:	4805      	ldr	r0, [pc, #20]	; (8008b08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008af4:	f7ff fd00 	bl	80084f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008af8:	4b02      	ldr	r3, [pc, #8]	; (8008b04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20001668 	.word	0x20001668
 8008b08:	08009244 	.word	0x08009244

08008b0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d105      	bne.n	8008b2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	4907      	ldr	r1, [pc, #28]	; (8008b40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b22:	4808      	ldr	r0, [pc, #32]	; (8008b44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b24:	f7ff fce8 	bl	80084f8 <USBD_GetString>
 8008b28:	e004      	b.n	8008b34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	4904      	ldr	r1, [pc, #16]	; (8008b40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b2e:	4805      	ldr	r0, [pc, #20]	; (8008b44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b30:	f7ff fce2 	bl	80084f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	20001668 	.word	0x20001668
 8008b44:	08009250 	.word	0x08009250

08008b48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b4e:	4b0f      	ldr	r3, [pc, #60]	; (8008b8c <Get_SerialNum+0x44>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b54:	4b0e      	ldr	r3, [pc, #56]	; (8008b90 <Get_SerialNum+0x48>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b5a:	4b0e      	ldr	r3, [pc, #56]	; (8008b94 <Get_SerialNum+0x4c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4413      	add	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b6e:	2208      	movs	r2, #8
 8008b70:	4909      	ldr	r1, [pc, #36]	; (8008b98 <Get_SerialNum+0x50>)
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 f814 	bl	8008ba0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b78:	2204      	movs	r2, #4
 8008b7a:	4908      	ldr	r1, [pc, #32]	; (8008b9c <Get_SerialNum+0x54>)
 8008b7c:	68b8      	ldr	r0, [r7, #8]
 8008b7e:	f000 f80f 	bl	8008ba0 <IntToUnicode>
  }
}
 8008b82:	bf00      	nop
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	1ffff7e8 	.word	0x1ffff7e8
 8008b90:	1ffff7ec 	.word	0x1ffff7ec
 8008b94:	1ffff7f0 	.word	0x1ffff7f0
 8008b98:	20000176 	.word	0x20000176
 8008b9c:	20000186 	.word	0x20000186

08008ba0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	4613      	mov	r3, r2
 8008bac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	75fb      	strb	r3, [r7, #23]
 8008bb6:	e027      	b.n	8008c08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	0f1b      	lsrs	r3, r3, #28
 8008bbc:	2b09      	cmp	r3, #9
 8008bbe:	d80b      	bhi.n	8008bd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	0f1b      	lsrs	r3, r3, #28
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	4619      	mov	r1, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	440b      	add	r3, r1
 8008bd0:	3230      	adds	r2, #48	; 0x30
 8008bd2:	b2d2      	uxtb	r2, r2
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	e00a      	b.n	8008bee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	0f1b      	lsrs	r3, r3, #28
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	4619      	mov	r1, r3
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	440b      	add	r3, r1
 8008be8:	3237      	adds	r2, #55	; 0x37
 8008bea:	b2d2      	uxtb	r2, r2
 8008bec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	011b      	lsls	r3, r3, #4
 8008bf2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	2200      	movs	r2, #0
 8008c00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	3301      	adds	r3, #1
 8008c06:	75fb      	strb	r3, [r7, #23]
 8008c08:	7dfa      	ldrb	r2, [r7, #23]
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d3d3      	bcc.n	8008bb8 <IntToUnicode+0x18>
  }
}
 8008c10:	bf00      	nop
 8008c12:	bf00      	nop
 8008c14:	371c      	adds	r7, #28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bc80      	pop	{r7}
 8008c1a:	4770      	bx	lr

08008c1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a0d      	ldr	r2, [pc, #52]	; (8008c60 <HAL_PCD_MspInit+0x44>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d113      	bne.n	8008c56 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008c2e:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <HAL_PCD_MspInit+0x48>)
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	4a0c      	ldr	r2, [pc, #48]	; (8008c64 <HAL_PCD_MspInit+0x48>)
 8008c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c38:	61d3      	str	r3, [r2, #28]
 8008c3a:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <HAL_PCD_MspInit+0x48>)
 8008c3c:	69db      	ldr	r3, [r3, #28]
 8008c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008c46:	2200      	movs	r2, #0
 8008c48:	2100      	movs	r1, #0
 8008c4a:	2014      	movs	r0, #20
 8008c4c:	f7f8 f88b 	bl	8000d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008c50:	2014      	movs	r0, #20
 8008c52:	f7f8 f8a4 	bl	8000d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	40005c00 	.word	0x40005c00
 8008c64:	40021000 	.word	0x40021000

08008c68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f7fe fd0a 	bl	8007698 <USBD_LL_SetupStage>
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	460b      	mov	r3, r1
 8008c96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008c9e:	78fa      	ldrb	r2, [r7, #3]
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	440b      	add	r3, r1
 8008cac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	78fb      	ldrb	r3, [r7, #3]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	f7fe fd3c 	bl	8007732 <USBD_LL_DataOutStage>
}
 8008cba:	bf00      	nop
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	460b      	mov	r3, r1
 8008ccc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008cd4:	78fa      	ldrb	r2, [r7, #3]
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	440b      	add	r3, r1
 8008ce2:	333c      	adds	r3, #60	; 0x3c
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	78fb      	ldrb	r3, [r7, #3]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	f7fe fd93 	bl	8007814 <USBD_LL_DataInStage>
}
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fe fea3 	bl	8007a50 <USBD_LL_SOF>
}
 8008d0a:	bf00      	nop
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d001      	beq.n	8008d2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d26:	f7f7 fb02 	bl	800032e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d30:	7bfa      	ldrb	r2, [r7, #15]
 8008d32:	4611      	mov	r1, r2
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fe fe53 	bl	80079e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fe fe0c 	bl	800795e <USBD_LL_Reset>
}
 8008d46:	bf00      	nop
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fe4d 	bl	80079fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d005      	beq.n	8008d78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d6c:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <HAL_PCD_SuspendCallback+0x30>)
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	4a03      	ldr	r2, [pc, #12]	; (8008d80 <HAL_PCD_SuspendCallback+0x30>)
 8008d72:	f043 0306 	orr.w	r3, r3, #6
 8008d76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	e000ed00 	.word	0xe000ed00

08008d84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fe fe47 	bl	8007a26 <USBD_LL_Resume>
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008da8:	4a28      	ldr	r2, [pc, #160]	; (8008e4c <USBD_LL_Init+0xac>)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a26      	ldr	r2, [pc, #152]	; (8008e4c <USBD_LL_Init+0xac>)
 8008db4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008db8:	4b24      	ldr	r3, [pc, #144]	; (8008e4c <USBD_LL_Init+0xac>)
 8008dba:	4a25      	ldr	r2, [pc, #148]	; (8008e50 <USBD_LL_Init+0xb0>)
 8008dbc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008dbe:	4b23      	ldr	r3, [pc, #140]	; (8008e4c <USBD_LL_Init+0xac>)
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008dc4:	4b21      	ldr	r3, [pc, #132]	; (8008e4c <USBD_LL_Init+0xac>)
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008dca:	4b20      	ldr	r3, [pc, #128]	; (8008e4c <USBD_LL_Init+0xac>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008dd0:	4b1e      	ldr	r3, [pc, #120]	; (8008e4c <USBD_LL_Init+0xac>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008dd6:	4b1d      	ldr	r3, [pc, #116]	; (8008e4c <USBD_LL_Init+0xac>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008ddc:	481b      	ldr	r0, [pc, #108]	; (8008e4c <USBD_LL_Init+0xac>)
 8008dde:	f7f8 fd72 	bl	80018c6 <HAL_PCD_Init>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008de8:	f7f7 faa1 	bl	800032e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008df2:	2318      	movs	r3, #24
 8008df4:	2200      	movs	r2, #0
 8008df6:	2100      	movs	r1, #0
 8008df8:	f7fa f9e8 	bl	80031cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e02:	2358      	movs	r3, #88	; 0x58
 8008e04:	2200      	movs	r2, #0
 8008e06:	2180      	movs	r1, #128	; 0x80
 8008e08:	f7fa f9e0 	bl	80031cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e12:	23c0      	movs	r3, #192	; 0xc0
 8008e14:	2200      	movs	r2, #0
 8008e16:	2181      	movs	r1, #129	; 0x81
 8008e18:	f7fa f9d8 	bl	80031cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008e26:	2200      	movs	r2, #0
 8008e28:	2101      	movs	r1, #1
 8008e2a:	f7fa f9cf 	bl	80031cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2182      	movs	r1, #130	; 0x82
 8008e3c:	f7fa f9c6 	bl	80031cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20001868 	.word	0x20001868
 8008e50:	40005c00 	.word	0x40005c00

08008e54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7f8 fe36 	bl	8001adc <HAL_PCD_Start>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 f94e 	bl	8009118 <USBD_Get_USB_Status>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	4608      	mov	r0, r1
 8008e94:	4611      	mov	r1, r2
 8008e96:	461a      	mov	r2, r3
 8008e98:	4603      	mov	r3, r0
 8008e9a:	70fb      	strb	r3, [r7, #3]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70bb      	strb	r3, [r7, #2]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008eb2:	78bb      	ldrb	r3, [r7, #2]
 8008eb4:	883a      	ldrh	r2, [r7, #0]
 8008eb6:	78f9      	ldrb	r1, [r7, #3]
 8008eb8:	f7f8 ffb0 	bl	8001e1c <HAL_PCD_EP_Open>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 f928 	bl	8009118 <USBD_Get_USB_Status>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	460b      	mov	r3, r1
 8008ee0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7f8 fff7 	bl	8001ee8 <HAL_PCD_EP_Close>
 8008efa:	4603      	mov	r3, r0
 8008efc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 f909 	bl	8009118 <USBD_Get_USB_Status>
 8008f06:	4603      	mov	r3, r0
 8008f08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f2e:	78fa      	ldrb	r2, [r7, #3]
 8008f30:	4611      	mov	r1, r2
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7f9 f8b7 	bl	80020a6 <HAL_PCD_EP_SetStall>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 f8ea 	bl	8009118 <USBD_Get_USB_Status>
 8008f44:	4603      	mov	r3, r0
 8008f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f6c:	78fa      	ldrb	r2, [r7, #3]
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7f9 f8f8 	bl	8002166 <HAL_PCD_EP_ClrStall>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 f8cb 	bl	8009118 <USBD_Get_USB_Status>
 8008f82:	4603      	mov	r3, r0
 8008f84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fa2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	da0c      	bge.n	8008fc6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fb2:	68f9      	ldr	r1, [r7, #12]
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	440b      	add	r3, r1
 8008fc0:	3302      	adds	r3, #2
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	e00b      	b.n	8008fde <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fc6:	78fb      	ldrb	r3, [r7, #3]
 8008fc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fcc:	68f9      	ldr	r1, [r7, #12]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	440b      	add	r3, r1
 8008fd8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008fdc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bc80      	pop	{r7}
 8008fe6:	4770      	bx	lr

08008fe8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009002:	78fa      	ldrb	r2, [r7, #3]
 8009004:	4611      	mov	r1, r2
 8009006:	4618      	mov	r0, r3
 8009008:	f7f8 fee3 	bl	8001dd2 <HAL_PCD_SetAddress>
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	4618      	mov	r0, r3
 8009014:	f000 f880 	bl	8009118 <USBD_Get_USB_Status>
 8009018:	4603      	mov	r3, r0
 800901a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800901c:	7bbb      	ldrb	r3, [r7, #14]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b086      	sub	sp, #24
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	607a      	str	r2, [r7, #4]
 8009030:	461a      	mov	r2, r3
 8009032:	460b      	mov	r3, r1
 8009034:	72fb      	strb	r3, [r7, #11]
 8009036:	4613      	mov	r3, r2
 8009038:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009048:	893b      	ldrh	r3, [r7, #8]
 800904a:	7af9      	ldrb	r1, [r7, #11]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	f7f8 ffe7 	bl	8002020 <HAL_PCD_EP_Transmit>
 8009052:	4603      	mov	r3, r0
 8009054:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009056:	7dfb      	ldrb	r3, [r7, #23]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 f85d 	bl	8009118 <USBD_Get_USB_Status>
 800905e:	4603      	mov	r3, r0
 8009060:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009062:	7dbb      	ldrb	r3, [r7, #22]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	607a      	str	r2, [r7, #4]
 8009076:	461a      	mov	r2, r3
 8009078:	460b      	mov	r3, r1
 800907a:	72fb      	strb	r3, [r7, #11]
 800907c:	4613      	mov	r3, r2
 800907e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800908e:	893b      	ldrh	r3, [r7, #8]
 8009090:	7af9      	ldrb	r1, [r7, #11]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	f7f8 ff70 	bl	8001f78 <HAL_PCD_EP_Receive>
 8009098:	4603      	mov	r3, r0
 800909a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 f83a 	bl	8009118 <USBD_Get_USB_Status>
 80090a4:	4603      	mov	r3, r0
 80090a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3718      	adds	r7, #24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	460b      	mov	r3, r1
 80090bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090c4:	78fa      	ldrb	r2, [r7, #3]
 80090c6:	4611      	mov	r1, r2
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7f8 ff92 	bl	8001ff2 <HAL_PCD_EP_GetRxCount>
 80090ce:	4603      	mov	r3, r0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80090e0:	4b02      	ldr	r3, [pc, #8]	; (80090ec <USBD_static_malloc+0x14>)
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bc80      	pop	{r7}
 80090ea:	4770      	bx	lr
 80090ec:	200004f8 	.word	0x200004f8

080090f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]

}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bc80      	pop	{r7}
 8009100:	4770      	bx	lr

08009102 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009102:	b480      	push	{r7}
 8009104:	b083      	sub	sp, #12
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	460b      	mov	r3, r1
 800910c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800910e:	bf00      	nop
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009126:	79fb      	ldrb	r3, [r7, #7]
 8009128:	2b03      	cmp	r3, #3
 800912a:	d817      	bhi.n	800915c <USBD_Get_USB_Status+0x44>
 800912c:	a201      	add	r2, pc, #4	; (adr r2, 8009134 <USBD_Get_USB_Status+0x1c>)
 800912e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009132:	bf00      	nop
 8009134:	08009145 	.word	0x08009145
 8009138:	0800914b 	.word	0x0800914b
 800913c:	08009151 	.word	0x08009151
 8009140:	08009157 	.word	0x08009157
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]
    break;
 8009148:	e00b      	b.n	8009162 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800914a:	2302      	movs	r3, #2
 800914c:	73fb      	strb	r3, [r7, #15]
    break;
 800914e:	e008      	b.n	8009162 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009150:	2301      	movs	r3, #1
 8009152:	73fb      	strb	r3, [r7, #15]
    break;
 8009154:	e005      	b.n	8009162 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009156:	2302      	movs	r3, #2
 8009158:	73fb      	strb	r3, [r7, #15]
    break;
 800915a:	e002      	b.n	8009162 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800915c:	2302      	movs	r3, #2
 800915e:	73fb      	strb	r3, [r7, #15]
    break;
 8009160:	bf00      	nop
  }
  return usb_status;
 8009162:	7bfb      	ldrb	r3, [r7, #15]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	bc80      	pop	{r7}
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop

08009170 <main>:




int main(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	af00      	add	r7, sp, #0
  hwInit();
 8009174:	f7f7 fc64 	bl	8000a40 <hwInit>
  apInit();
 8009178:	f7f6 ffe8 	bl	800014c <apInit>

  apMain();
 800917c:	f7f6 fff4 	bl	8000168 <apMain>

  return 0;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <__libc_init_array>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	2600      	movs	r6, #0
 800918c:	4d0c      	ldr	r5, [pc, #48]	; (80091c0 <__libc_init_array+0x38>)
 800918e:	4c0d      	ldr	r4, [pc, #52]	; (80091c4 <__libc_init_array+0x3c>)
 8009190:	1b64      	subs	r4, r4, r5
 8009192:	10a4      	asrs	r4, r4, #2
 8009194:	42a6      	cmp	r6, r4
 8009196:	d109      	bne.n	80091ac <__libc_init_array+0x24>
 8009198:	f000 f822 	bl	80091e0 <_init>
 800919c:	2600      	movs	r6, #0
 800919e:	4d0a      	ldr	r5, [pc, #40]	; (80091c8 <__libc_init_array+0x40>)
 80091a0:	4c0a      	ldr	r4, [pc, #40]	; (80091cc <__libc_init_array+0x44>)
 80091a2:	1b64      	subs	r4, r4, r5
 80091a4:	10a4      	asrs	r4, r4, #2
 80091a6:	42a6      	cmp	r6, r4
 80091a8:	d105      	bne.n	80091b6 <__libc_init_array+0x2e>
 80091aa:	bd70      	pop	{r4, r5, r6, pc}
 80091ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b0:	4798      	blx	r3
 80091b2:	3601      	adds	r6, #1
 80091b4:	e7ee      	b.n	8009194 <__libc_init_array+0xc>
 80091b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ba:	4798      	blx	r3
 80091bc:	3601      	adds	r6, #1
 80091be:	e7f2      	b.n	80091a6 <__libc_init_array+0x1e>
 80091c0:	08009278 	.word	0x08009278
 80091c4:	08009278 	.word	0x08009278
 80091c8:	08009278 	.word	0x08009278
 80091cc:	0800927c 	.word	0x0800927c

080091d0 <memset>:
 80091d0:	4603      	mov	r3, r0
 80091d2:	4402      	add	r2, r0
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d100      	bne.n	80091da <memset+0xa>
 80091d8:	4770      	bx	lr
 80091da:	f803 1b01 	strb.w	r1, [r3], #1
 80091de:	e7f9      	b.n	80091d4 <memset+0x4>

080091e0 <_init>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	bf00      	nop
 80091e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e6:	bc08      	pop	{r3}
 80091e8:	469e      	mov	lr, r3
 80091ea:	4770      	bx	lr

080091ec <_fini>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr
